webpackJsonp([0],{0:function(e,exports,t){t(70),e.exports=t(367)},367:function(e,exports,t){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}var r=t(368),i=t(641),a=t(642),o=t(652),s=t(653),c=t(654),u=t(655),l=t(688),d=t(689),v=t(690),p=t(691),m=t(692),f=t(693),h=t(694),g=t(695),y=t(696),b=n(y),D=t(702),S=n(D),_=t(703),k=n(_),T=t(704),x=n(T),C=t(705),w=n(C),M=t(706),I=n(M),P=t(707),E=n(P),A=t(708),B=n(A),j=t(709),R=n(j),U=t(710),K=n(U),O=t(711),V=n(O),L=t(712),N=n(L),F=t(713),z=n(F),Y=t(714),q=n(Y),H=t(716),W=n(H),G=t(717),X=n(G),J=t(718),Z=n(J),Q=t(719),ee=n(Q),te=t(720),ne=t(721),re=t(722),ie=t(723),ae=t(724),oe=t(725),se=t(726),ce=t(727),ue=t(728),le=t(729);r.app.service("StorageService",q["default"]).service("AdminService",b["default"]).service("AuthorizationService",S["default"]).service("CommandsService",k["default"]).service("DateManipulationService",x["default"]).service("DevicesService",w["default"]).service("DistributorsService",I["default"]).service("DomainsService",E["default"]).service("IdentityService",B["default"]).service("IntegrationEvents",R["default"]).service("LocationsService",K["default"]).service("ProgressBarService",V["default"]).service("ProofPlayService",N["default"]).service("SessionsService",z["default"]).service("TenantsService",W["default"]).service("TimezonesService",X["default"]).service("ToastsService",Z["default"]).service("VersionsService",ee["default"]).controller("DeviceDetailsCommandsCtrl",i.DeviceDetailsCommandsCtrl).controller("DeviceDetailsCtrl",a.DeviceDetailsCtrl).controller("DevicesListingCtrl",o.DevicesListingCtrl).controller("AdminCtrl",s.AdminCtrl).controller("AuthenticationCtrl",c.AuthenticationCtrl).controller("AppController",u.AppController).controller("DistributorSelectorCtrl",l.DistributorSelectorCtrl).controller("DistributorsCtrl",d.DistributorsCtrl).controller("DomainsCtrl",v.DomainsCtrl).controller("DomainDetailsCtrl",p.DomainDetailsCtrl).controller("ProofOfPlayMultiLocationCtrl",m.ProofOfPlayMultiLocationCtrl).controller("ProofOfPlayMultiDisplayCtrl",f.ProofOfPlayMultiDisplayCtrl).controller("ProofOfPlayMultiResourceCtrl",h.ProofOfPlayMultiResourceCtrl).controller("ProofOfPlayCtrl",g.ProofOfPlayCtrl).controller("TenantAddCtrl",te.TenantAddCtrl).controller("TenantDetailsCtrl",ne.TenantDetailsCtrl).controller("TenantLocationCtrl",re.TenantLocationCtrl).controller("TenantManagedDevicesCtrl",ie.TenantManagedDevicesCtrl).controller("TenantUnmanagedDevicesCtrl",ae.TenantUnmanagedDevicesCtrl).controller("TenantsCtrl",oe.TenantsCtrl).controller("WelcomeCtrl",se.WelcomeCtrl).run(ue.appRun).config(ce.routes).config(le.toastrConfig).config(le.breadcrumbProvider),r.app.service("RequestInterceptor",["StorageService","$location",function(e,t){"ngInject";var n={request:function(n){var r="5XZHBF3mOwqJlYAlG1NeeWX0Cb72g",i="6C346588BD4C6D722A1165B43C51C";return n.headers={"Content-Type":"application/json",Accept:"application/json",Authorization:t.host().indexOf("provisioning-gamestop")>-1?r:i,"X-Provisioning-User":e.get("userKey"),"X-Provisioning-User-Identifier":e.get("userEmail"),"X-Provisioning-Distributor":e.get("currentDistributorKey")},n}};return n}]),r.app.config(["$httpProvider",function(e){return e.interceptors.push("RequestInterceptor")}])},368:function(e,exports,t){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(exports,"__esModule",{value:!0}),exports.app=void 0;var r=t(369),i=n(r),a=t(371),o=n(a),s=t(372);n(s);t(476),t(478),t(482),t(484),t(486),t(494),t(496),t(518),t(519),t(521),t(590),t(591),t(593),t(598),t(599),t(605),t(614),t(615),t(617),t(619),t(621),t(623),t(506),t(633),t(370),t(634),t(636),t(638);var c=t(640),u=n(c);window._=u["default"],window.angular=i["default"];exports.app=i["default"].module("skykitProvisioning",[o["default"],"ngAnimate","720kb.tooltips","ngCookies","ngSanitize","restangular","ui.bootstrap","ngMaterialDatePicker","hSweetAlert","ncy-angular-breadcrumb","directive.g+signin","ngProgress","ngMaterial","ngclipboard","toastr"])},374:function(e,exports,t){function n(e){return t(r(e))}function r(e){return i[e]||function(){throw new Error("Cannot find module '"+e+"'.")}()}var i={"./af":375,"./af.js":375,"./ar":376,"./ar-ma":377,"./ar-ma.js":377,"./ar-sa":378,"./ar-sa.js":378,"./ar-tn":379,"./ar-tn.js":379,"./ar.js":376,"./az":380,"./az.js":380,"./be":381,"./be.js":381,"./bg":382,"./bg.js":382,"./bn":383,"./bn.js":383,"./bo":384,"./bo.js":384,"./br":385,"./br.js":385,"./bs":386,"./bs.js":386,"./ca":387,"./ca.js":387,"./cs":388,"./cs.js":388,"./cv":389,"./cv.js":389,"./cy":390,"./cy.js":390,"./da":391,"./da.js":391,"./de":392,"./de-at":393,"./de-at.js":393,"./de.js":392,"./dv":394,"./dv.js":394,"./el":395,"./el.js":395,"./en-au":396,"./en-au.js":396,"./en-ca":397,"./en-ca.js":397,"./en-gb":398,"./en-gb.js":398,"./en-ie":399,"./en-ie.js":399,"./en-nz":400,"./en-nz.js":400,"./eo":401,"./eo.js":401,"./es":402,"./es-do":403,"./es-do.js":403,"./es.js":402,"./et":404,"./et.js":404,"./eu":405,"./eu.js":405,"./fa":406,"./fa.js":406,"./fi":407,"./fi.js":407,"./fo":408,"./fo.js":408,"./fr":409,"./fr-ca":410,"./fr-ca.js":410,"./fr-ch":411,"./fr-ch.js":411,"./fr.js":409,"./fy":412,"./fy.js":412,"./gd":413,"./gd.js":413,"./gl":414,"./gl.js":414,"./he":415,"./he.js":415,"./hi":416,"./hi.js":416,"./hr":417,"./hr.js":417,"./hu":418,"./hu.js":418,"./hy-am":419,"./hy-am.js":419,"./id":420,"./id.js":420,"./is":421,"./is.js":421,"./it":422,"./it.js":422,"./ja":423,"./ja.js":423,"./jv":424,"./jv.js":424,"./ka":425,"./ka.js":425,"./kk":426,"./kk.js":426,"./km":427,"./km.js":427,"./ko":428,"./ko.js":428,"./ky":429,"./ky.js":429,"./lb":430,"./lb.js":430,"./lo":431,"./lo.js":431,"./lt":432,"./lt.js":432,"./lv":433,"./lv.js":433,"./me":434,"./me.js":434,"./mk":435,"./mk.js":435,"./ml":436,"./ml.js":436,"./mr":437,"./mr.js":437,"./ms":438,"./ms-my":439,"./ms-my.js":439,"./ms.js":438,"./my":440,"./my.js":440,"./nb":441,"./nb.js":441,"./ne":442,"./ne.js":442,"./nl":443,"./nl.js":443,"./nn":444,"./nn.js":444,"./pa-in":445,"./pa-in.js":445,"./pl":446,"./pl.js":446,"./pt":447,"./pt-br":448,"./pt-br.js":448,"./pt.js":447,"./ro":449,"./ro.js":449,"./ru":450,"./ru.js":450,"./se":451,"./se.js":451,"./si":452,"./si.js":452,"./sk":453,"./sk.js":453,"./sl":454,"./sl.js":454,"./sq":455,"./sq.js":455,"./sr":456,"./sr-cyrl":457,"./sr-cyrl.js":457,"./sr.js":456,"./ss":458,"./ss.js":458,"./sv":459,"./sv.js":459,"./sw":460,"./sw.js":460,"./ta":461,"./ta.js":461,"./te":462,"./te.js":462,"./th":463,"./th.js":463,"./tl-ph":464,"./tl-ph.js":464,"./tlh":465,"./tlh.js":465,"./tr":466,"./tr.js":466,"./tzl":467,"./tzl.js":467,"./tzm":468,"./tzm-latn":469,"./tzm-latn.js":469,"./tzm.js":468,"./uk":470,"./uk.js":470,"./uz":471,"./uz.js":471,"./vi":472,"./vi.js":472,"./x-pseudo":473,"./x-pseudo.js":473,"./zh-cn":474,"./zh-cn.js":474,"./zh-tw":475,"./zh-tw.js":475};n.keys=function(){return Object.keys(i)},n.resolve=r,e.exports=n,n.id=374},518:function(e,exports){"use strict";angular.module("ngProgress.provider",["ngProgress.directive"]).service("ngProgress",function(){return["$document","$window","$compile","$rootScope","$timeout",function(e,t,n,r,i){this.autoStyle=!0,this.count=0,this.height="2px",this.$scope=r.$new(),this.color="firebrick",this.parent=e.find("body")[0],this.count=0,this.progressbarEl=n("<ng-progress></ng-progress>")(this.$scope),this.parent.appendChild(this.progressbarEl[0]),this.$scope.count=this.count,void 0!==this.height&&this.progressbarEl.eq(0).children().css("height",this.height),void 0!==this.color&&(this.progressbarEl.eq(0).children().css("background-color",this.color),this.progressbarEl.eq(0).children().css("color",this.color)),this.intervalCounterId=0,this.start=function(){this.show();var e=this;clearInterval(this.intervalCounterId),this.intervalCounterId=setInterval(function(){isNaN(e.count)?(clearInterval(e.intervalCounterId),e.count=0,e.hide()):(e.remaining=100-e.count,e.count=e.count+.15*Math.pow(1-Math.sqrt(e.remaining),2),e.updateCount(e.count))},200)},this.updateCount=function(e){this.$scope.count=e,this.$scope.$$phase||this.$scope.$apply()},this.setHeight=function(e){return void 0!==e&&(this.height=e,this.$scope.height=this.height,this.$scope.$$phase||this.$scope.$apply()),this.height},this.setColor=function(e){return void 0!==e&&(this.color=e,this.$scope.color=this.color,this.$scope.$$phase||this.$scope.$apply()),this.color},this.hide=function(){this.progressbarEl.children().css("opacity","0");var e=this;e.animate(function(){e.progressbarEl.children().css("width","0%"),e.animate(function(){e.show()},500)},500)},this.show=function(){var e=this;e.animate(function(){e.progressbarEl.children().css("opacity","1")},100)},this.animate=function(e,t){void 0!==this.animation&&i.cancel(this.animation),this.animation=i(e,t)},this.status=function(){return this.count},this.stop=function(){clearInterval(this.intervalCounterId)},this.set=function(e){return this.show(),this.updateCount(e),this.count=e,clearInterval(this.intervalCounterId),this.count},this.css=function(e){return this.progressbarEl.children().css(e)},this.reset=function(){return clearInterval(this.intervalCounterId),this.count=0,this.updateCount(this.count),0},this.complete=function(){this.count=100,this.updateCount(this.count);var e=this;return clearInterval(this.intervalCounterId),i(function(){e.hide(),i(function(){e.count=0,e.updateCount(e.count)},500)},1e3),this.count},this.setParent=function(e){if(null===e||void 0===e)throw new Error("Provide a valid parent of type HTMLElement");null!==this.parent&&void 0!==this.parent&&this.parent.removeChild(this.progressbarEl[0]),this.parent=e,this.parent.appendChild(this.progressbarEl[0])},this.getDomElement=function(){return this.progressbarEl},this.setAbsolute=function(){this.progressbarEl.css("position","absolute")}}]}).factory("ngProgressFactory",["$injector","ngProgress",function(e,t){var n={createInstance:function(){return e.instantiate(t)}};return n}]),angular.module("ngProgress.directive",[]).directive("ngProgress",["$window","$rootScope",function(e,t){var n={replace:!0,restrict:"E",link:function(e,t,n,r){e.$watch("count",function(n){(void 0!==n||null!==n)&&(e.counter=n,t.eq(0).children().css("width",n+"%"))}),e.$watch("color",function(n){(void 0!==n||null!==n)&&(e.color=n,t.eq(0).children().css("background-color",n),t.eq(0).children().css("color",n))}),e.$watch("height",function(n){(void 0!==n||null!==n)&&(e.height=n,t.eq(0).children().css("height",n))})},template:'<div id="ngProgress-container"><div id="ngProgress"></div></div>'};return n}]),angular.module("ngProgress",["ngProgress.directive","ngProgress.provider"])},519:function(e,exports,t){var n=t(520);"string"==typeof n&&(n=[[e.id,n,""]]);t(481)(n,{});n.locals&&(e.exports=n.locals)},520:function(e,exports,t){exports=e.exports=t(480)(),exports.push([e.id,"#ngProgress{margin:0;padding:0;z-index:99998;background-color:green;color:green;box-shadow:0 0 10px 0;height:2px;opacity:0;-webkit-transition:all .5s ease-in-out;transition:all .5s ease-in-out}#ngProgress-container{position:fixed;margin:0;padding:0;top:0;left:0;right:0;z-index:99999}",""])},521:function(e,exports,t){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}var r=t(522),i=n(r);/*! angular-breadcrumb - v0.4.0-dev-2015-08-07
	* http://ncuillery.github.io/angular-breadcrumb
	* Copyright (c) 2015 Nicolas Cuillery; Licensed MIT */
!function(e,t,n){function r(e,n){return t.equals(e.length,n.length)?e>n:e.length>n.length}function a(e){var t=e.replace(/\n/g," ").match(/^([^(]+?)\s*(\((.*)\))?$/);if(!t||4!==t.length)throw new Error("Invalid state ref '"+e+"'");return{state:t[1],paramExpr:t[3]||null}}function o(){var e={prefixStateName:null,template:"bootstrap3",templateUrl:null,includeAbstract:!1};this.setOptions=function(n){t.extend(e,n)},this.$get=["$state","$stateParams","$rootScope",function(t,o,s){var c=s;s.$on("$viewContentLoaded",function(e){!e.targetScope.ncyBreadcrumbIgnore&&r(e.targetScope.$id,c.$id)&&(c=e.targetScope)});var u=function(e){var t=e.parent||(/^(.+)\.[^.]+$/.exec(e.name)||[])[1],n="object"==("undefined"==typeof t?"undefined":(0,i["default"])(t));return n?t.name:t},l=function v(n,r){for(var i,s,v=a(r),u=!1,l=!1,d=0,p=n.length;p>d;d+=1)if(n[d].name===v.state)return;i=t.get(v.state),i.ncyBreadcrumb&&(i.ncyBreadcrumb.force&&(u=!0),i.ncyBreadcrumb.skip&&(l=!0)),i["abstract"]&&!e.includeAbstract&&!u||l||(v.paramExpr&&(s=c.$eval(v.paramExpr)),i.ncyBreadcrumbLink=t.href(v.state,s||o||{}),n.unshift(i))},d=function(e){var n=a(e),r=t.get(n.state);if(r.ncyBreadcrumb&&r.ncyBreadcrumb.parent){var i="function"==typeof r.ncyBreadcrumb.parent,o=i?r.ncyBreadcrumb.parent(c):r.ncyBreadcrumb.parent;if(o)return o}return u(r)};return{getTemplate:function(t){return e.templateUrl?null:t[e.template]?t[e.template]:e.template},getTemplateUrl:function(){return e.templateUrl},getStatesChain:function(n){for(var r=[],i=t.$current.self.name;i;i=d(i))if(l(r,i),n&&r.length)return r;return e.prefixStateName&&l(r,e.prefixStateName),r},getLastStep:function(){var e=this.getStatesChain(!0);return e.length?e[0]:n},$getLastViewScope:function(){return c}}}]}function s(e,n,r){var i={bootstrap2:'<ul class="breadcrumb"><li ng-repeat="step in steps" ng-switch="$last || !!step.abstract" ng-class="{active: $last}"><a ng-switch-when="false" href="{{step.ncyBreadcrumbLink}}">{{step.ncyBreadcrumbLabel}}</a><span ng-switch-when="true">{{step.ncyBreadcrumbLabel}}</span><span class="divider" ng-hide="$last">/</span></li></ul>',bootstrap3:'<ol class="breadcrumb"><li ng-repeat="step in steps" ng-class="{active: $last}" ng-switch="$last || !!step.abstract"><a ng-switch-when="false" href="{{step.ncyBreadcrumbLink}}">{{step.ncyBreadcrumbLabel}}</a><span ng-switch-when="true">{{step.ncyBreadcrumbLabel}}</span></li></ol>'};return{restrict:"AE",replace:!0,scope:{},template:n.getTemplate(i),templateUrl:n.getTemplateUrl(),link:{post:function(i){var a=[],o=function(){v(a),a=[];var r=n.$getLastViewScope();i.steps=n.getStatesChain(),t.forEach(i.steps,function(t){if(t.ncyBreadcrumb&&t.ncyBreadcrumb.label){var n=e(t.ncyBreadcrumb.label);t.ncyBreadcrumbLabel=n(r),d(a,n,r,t)}else t.ncyBreadcrumbLabel=t.name})};r.$on("$viewContentLoaded",function(e){e.targetScope.ncyBreadcrumbIgnore||o()}),o()}}}}function c(e,t,n){return{restrict:"A",scope:{},template:"{{ncyBreadcrumbLabel}}",compile:function(r,i){var a=r.attr(i.$attr.ncyBreadcrumbLast);return a&&r.html(a),{post:function(r){var i=[],a=function o(){v(i),i=[];var n=t.$getLastViewScope(),o=t.getLastStep();if(o)if(r.ncyBreadcrumbLink=o.ncyBreadcrumbLink,o.ncyBreadcrumb&&o.ncyBreadcrumb.label){var a=e(o.ncyBreadcrumb.label);r.ncyBreadcrumbLabel=a(n),d(i,a,n,r)}else r.ncyBreadcrumbLabel=o.name};n.$on("$viewContentLoaded",function(e){e.targetScope.ncyBreadcrumbIgnore||a()}),a()}}}}}function u(e,n,r){return{restrict:"A",scope:{},template:"{{ncyBreadcrumbChain}}",compile:function(i,a){var o=i.attr(a.$attr.ncyBreadcrumbText);o&&i.html(o);var s=i.attr(a.$attr.ncyBreadcrumbTextSeparator)||" / ";return{post:function(i){var a=[],o=function(e,n,r){t.forEach(l(n),function(t){var n=r.$watch(t,function(e,t){e!==t&&c()});e.push(n)})},c=function u(){v(a),a=[];var r=n.$getLastViewScope(),u=n.getStatesChain(),c=[];t.forEach(u,function(t){if(t.ncyBreadcrumb&&t.ncyBreadcrumb.label){var n=e(t.ncyBreadcrumb.label);c.push(n(r)),o(a,n,r)}else c.push(t.name)}),i.ncyBreadcrumbChain=c.join(s)};r.$on("$viewContentLoaded",function(e){e.targetScope.ncyBreadcrumbIgnore||c()}),c()}}}}}var l=function(e){if(e.expressions)return e.expressions;var n=[];return t.forEach(e.parts,function(e){t.isFunction(e)&&n.push(e.exp)}),n},d=function(e,n,r,i){t.forEach(l(n),function(t){var a=r.$watch(t,function(){i.ncyBreadcrumbLabel=n(r)});e.push(a)})},v=function(e){t.forEach(e,function(e){e()})};s.$inject=["$interpolate","$breadcrumb","$rootScope"],c.$inject=["$interpolate","$breadcrumb","$rootScope"],u.$inject=["$interpolate","$breadcrumb","$rootScope"],t.module("ncy-angular-breadcrumb",["ui.router.state"]).provider("$breadcrumb",o).directive("ncyBreadcrumb",s).directive("ncyBreadcrumbLast",c).directive("ncyBreadcrumbText",u)}(window,window.angular)},590:function(e,exports,t){(function(e){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}var r=t(372),i=n(r);!function(t){var n="ngMaterialDatePicker",r={DATE:0,HOUR:1,MINUTE:2},i=function(t,n){return"jQuery"in window?e(t).css(n):(t=angular.element(t),"getComputedStyle"in window?window.getComputedStyle(t[0])[n]:t.css(n))},a='<md-dialog class="dtp" layout="column" style="width: 300px;">    <md-dialog-content class="dtp-content">        <div class="dtp-date-view">            <header class="dtp-header">                <div class="dtp-actual-day" ng-show="picker.dateMode">{{picker.currentDate.format("dddd")}}</div>                <div class="dtp-actual-day" ng-show="picker.timeMode">{{picker.params.shortTime ? picker.currentDate.format("A") : " "}}</div>                <div class="dtp-close text-right">                    <a href="#" mdc-dtp-noclick ng-click="picker.hide()">&times;</a>                </div>            </header>            <div class="dtp-date" ng-show="picker.params.date">                <div layout="column">                    <div class="dtp-actual-month">{{picker.currentDate.format("MMM") | uppercase}}</div>                </div>                <div class="dtp-actual-num">{{picker.currentDate.format("DD")}}</div>                <div layout="row"> <div ng-click="picker.incrementYear(-1)" class="dtp-year-btn dtp-year-btn-prev" flex="30"><span ng-if="picker.isPreviousYearVisible()" >&#x25B2;</span></div>                    <div class="dtp-actual-year" flex>{{picker.currentDate.format("YYYY")}}</div> <div ng-click="picker.incrementYear(1)" class="dtp-year-btn dtp-year-btn-next" flex="30"><span ng-if="picker.isNextYearVisible()" >&#x25BC;</span></div>                </div>            </div>            <div class="dtp-time" ng-show="picker.params.time && !picker.params.date">                <div class="dtp-actual-maxtime">{{picker.currentNearest5Minute().format(picker.params.shortTime ? "hh:mm" : "HH:mm")}}</div>            </div>            <div class="dtp-picker">                <mdc-datetime-picker-calendar date="picker.currentDate" picker="picker" class="dtp-picker-calendar" ng-show="picker.currentView === picker.VIEWS.DATE"></mdc-datetime-picker-calendar>                <div class="dtp-picker-datetime" ng-show="picker.currentView !== picker.VIEWS.DATE">                    <div class="dtp-actual-meridien">                        <div class="left p20">                            <a href="#" mdc-dtp-noclick class="dtp-meridien-am" ng-class="{selected: picker.meridien == \'AM\'}" ng-click="picker.selectAM()">{{picker.params.amText}}</a>                        </div>                        <div ng-show="!picker.timeMode" class="dtp-actual-time p60">{{picker.currentNearest5Minute().format(picker.params.shortTime ? "hh:mm" : "HH:mm")}}</div>                        <div class="right p20">                            <a href="#" mdc-dtp-noclick class="dtp-meridien-pm" ng-class="{selected: picker.meridien == \'PM\'}" ng-click="picker.selectPM()">{{picker.params.pmText}}</a>                        </div>                        <div class="clearfix"></div>                    </div>                    <mdc-datetime-picker-clock mode="hours" ng-if="picker.currentView === picker.VIEWS.HOUR"></mdc-datetime-picker-clock>                    <mdc-datetime-picker-clock mode="minutes" ng-if="picker.currentView === picker.VIEWS.MINUTE"></mdc-datetime-picker-clock>                </div>            </div>        </div>    </md-dialog-content>    <md-dialog-actions class="dtp-buttons">            <md-button class="dtp-btn-cancel md-button" ng-click="picker.cancel()"> {{picker.params.cancelText}}</md-button>            <md-button class="dtp-btn-ok md-button" ng-click="picker.ok()"> {{picker.params.okText}}</md-button>      </md-dialog-actions></md-dialog>';angular.module(n,["ngMaterial"]).provider("mdcDatetimePickerDefaultLocale",function(){this.locale="en",this.$get=function(){return this.locale},this.setDefaultLocale=function(e){this.locale=e}}).directive("mdcDatetimePicker",["$mdDialog",function(e){return{restrict:"A",require:"ngModel",scope:{currentDate:"=ngModel",time:"=",date:"=",minDate:"=",maxDate:"=",shortTime:"=",format:"@",cancelText:"@",okText:"@",lang:"@",amText:"@",pmText:"@"},link:function(n,r,i,s){var c=!1;n.format||(n.date&&n.time?n.format="YYYY-MM-DD HH:mm:ss":n.date?n.format="YYYY-MM-DD":n.format="HH:mm"),angular.isString(n.currentDate)&&""!==n.currentDate&&(n.currentDate=t(n.currentDate,n.format)),s&&s.$formatters.push(function(e){if("undefined"!=typeof e){var r=t(e);return r.isValid()?r.format(n.format):""}}),r.attr("readonly",""),r.on("focus",function(t){if(t.preventDefault(),r.blur(),!c){c=!0;var s={};for(var u in i)n.hasOwnProperty(u)&&!angular.isUndefined(n[u])&&(s[u]=n[u]);s.currentDate=n.currentDate;var l={options:s};e.show({template:a,controller:o,controllerAs:"picker",locals:l,openFrom:r,parent:angular.element(document.body),bindToController:!0,disableParentScroll:!1}).then(function(e){n.currentDate=e?e._d:e,c=!1},function(){c=!1})}})}}}]);var o=function(e,t,n){this.currentView=r.DATE,this._dialog=t,this.minDate,this.maxDate,this._attachedEvents=[],this.VIEWS=r,this.params={date:!0,time:!0,format:"YYYY-MM-DD",minDate:null,maxDate:null,currentDate:null,lang:n,weekStart:0,shortTime:!1,cancelText:"Cancel",okText:"OK",amText:"AM",pmText:"PM"},this.meridien="AM",this.params=angular.extend(this.params,this.options),this.init()};o.$inject=["$scope","$mdDialog","mdcDatetimePickerDefaultLocale"],o.prototype={init:function(){this.timeMode=this.params.time&&!this.params.date,this.dateMode=this.params.date,this.initDates(),this.start()},currentNearest5Minute:function(){var e=this.currentDate||t(),n=5*Math.round(e.minute()/5);return n>=60&&(n=55),t(e).minutes(n)},initDates:function(){var e=this,n=function(n,r){var i=null;if(angular.isDefined(n)&&null!==n&&""!==n)if(angular.isString(n))i="undefined"!=typeof e.params.format&&null!==e.params.format?t(n,e.params.format).locale(e.params.lang):t(n).locale(e.params.lang);else if(angular.isDate(n)){var a=n.getTime();i=t(a,"x").locale(e.params.lang)}else n._isAMomentObject&&(i=n);else i=r;return i};this.currentDate=n(this.params.currentDate,t()),this.minDate=n(this.params.minDate),this.maxDate=n(this.params.maxDate),this.selectDate(this.currentDate)},initDate:function(e){this.currentView=r.DATE},initHours:function(){this.currentView=r.HOUR},initMinutes:function(){this.currentView=r.MINUTE},isAfterMinDate:function(e,n,r){var i=!0;if("undefined"!=typeof this.minDate&&null!==this.minDate){var a=t(this.minDate),o=t(e);n||r||(a.hour(0),a.minute(0),o.hour(0),o.minute(0)),a.second(0),o.second(0),a.millisecond(0),o.millisecond(0),r?i=parseInt(o.format("X"))>=parseInt(a.format("X")):(o.minute(0),a.minute(0),i=parseInt(o.format("X"))>=parseInt(a.format("X")))}return i},isBeforeMaxDate:function(e,n,r){var i=!0;if("undefined"!=typeof this.maxDate&&null!==this.maxDate){var a=t(this.maxDate),o=t(e);n||r||(a.hour(0),a.minute(0),o.hour(0),o.minute(0)),a.second(0),o.second(0),a.millisecond(0),o.millisecond(0),r?i=parseInt(o.format("X"))<=parseInt(a.format("X")):(o.minute(0),a.minute(0),i=parseInt(o.format("X"))<=parseInt(a.format("X")))}return i},selectDate:function(e){e&&(this.currentDate=t(e),this.isAfterMinDate(this.currentDate)||(this.currentDate=t(this.minDate)),this.isBeforeMaxDate(this.currentDate)||(this.currentDate=t(this.maxDate)),this.currentDate.locale(this.params.lang),this.calendarStart=t(this.currentDate),this.meridien=this.currentDate.hour()>=12?"PM":"AM")},setName:function(){for(var e="",t="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",n=0;n<5;n++)e+=t.charAt(Math.floor(Math.random()*t.length));return e},isPM:function(){return"PM"===this.meridien},incrementYear:function(e){1===e&&this.isNextYearVisible()&&this.selectDate(this.currentDate.add("year",e)),e===-1&&this.isPreviousYearVisible()&&this.selectDate(this.currentDate.add("year",e))},isPreviousMonthVisible:function(){return this.calendarStart&&this.isAfterMinDate(t(this.calendarStart).startOf("month"),!1,!1)},isNextMonthVisible:function(){return this.calendarStart&&this.isBeforeMaxDate(t(this.calendarStart).endOf("month"),!1,!1)},isPreviousYearVisible:function(){return this.calendarStart&&this.isAfterMinDate(t(this.calendarStart).startOf("year"),!1,!1)},isNextYearVisible:function(){return this.calendarStart&&this.isBeforeMaxDate(t(this.calendarStart).endOf("year"),!1,!1)},isHourAvailable:function(e){var n=t(this.currentDate);return n.hour(this.convertHours(e)).minute(0).second(0),this.isAfterMinDate(n,!0,!1)&&this.isBeforeMaxDate(n,!0,!1)},isMinuteAvailable:function(e){var n=t(this.currentDate);return n.minute(e).second(0),this.isAfterMinDate(n,!0,!0)&&this.isBeforeMaxDate(n,!0,!0)},start:function(){this.currentView=r.DATE,this.params.date?this.initDate():this.params.time&&this.initHours()},ok:function(){switch(this.currentView){case r.DATE:this.params.time===!0?this.initHours():this.hide(!0);break;case r.HOUR:this.initMinutes();break;case r.MINUTE:this.hide(!0)}},cancel:function(){if(this.params.time)switch(this.currentView){case r.DATE:this.hide();break;case r.HOUR:this.params.date?this.initDate():this.hide();break;case r.MINUTE:this.initHours()}else this.hide()},selectMonthBefore:function(){this.calendarStart.subtract(1,"months")},selectMonthAfter:function(){this.calendarStart.add(1,"months")},selectYearBefore:function(){this.calendarStart.subtract(1,"years")},selectYearAfter:function(){this.calendarStart.add(1,"years")},selectAM:function(){(this.isHourAvailable(0)||this.isHourAvailable(12))&&(this.currentDate.hour()>=12&&this.selectDate(this.currentDate.subtract(12,"hours")),this.isHourAvailable(this.currentDate.hour())||this.selectDate(this.currentDate.hour(this.minDate.hour())),this.isMinuteAvailable(this.currentDate.minute())||this.selectDate(this.currentDate.minute(this.minDate.minute())))},selectPM:function(){(this.isHourAvailable(13)||this.isHourAvailable(24))&&(this.currentDate.hour()<12&&this.selectDate(this.currentDate.add(12,"hours")),this.isHourAvailable(this.currentDate.hour())||this.selectDate(this.currentDate.hour(this.maxDate.hour())),this.isMinuteAvailable(this.currentDate.minute())||this.selectDate(this.currentDate.minute(this.maxDate.minute())))},convertHours:function(e){var t=e;return e<12&&this.isPM()&&(t+=12),t},hide:function(e){e?this._dialog.hide(this.currentDate):this._dialog.cancel()}},angular.module(n).directive("mdcDatetimePickerCalendar",[function(){for(var e=(t(),1900),n=2100,r=12*(n-e+1),i=240,a=[],o=0;o<r;o++)a.push(o);var s=function(t){var n=t.year(),r=t.month();return 12*(n-e)+r-1};return{restrict:"E",scope:{picker:"=",date:"="},bindToController:!0,controllerAs:"cal",controller:["$scope",function(n){for(var i=this,o=this.picker,c=[],u=o.params.weekStart;c.length<7;u++)u>6&&(u=0),c.push(u.toString());if(i.week=c,o.maxDate||o.minDate){var l=o.minDate?s(o.minDate):0,d=o.maxDate?s(o.maxDate)+1:r;i.months=a.slice(l,d)}else i.months=a;i.getItemAtIndex=function(n){var r=(n+1)%12||12,i=e+Math.floor(n/12),a=t(o.currentDate).year(i).month(r);return v(a)},i.topIndex=s(o.currentDate)-i.months[0],n.$watch(function(){return o.currentDate?o.currentDate.format("YYYY-MM"):""},function(e,n){if(e!=n){var r=t(e,"YYYY-MM"),a=s(r);i.topIndex!=a&&(i.topIndex=a-i.months[0])}});var v=function(e){var n={};if(null!==e){n.name=e.format("MMMM YYYY");var r=t(e).locale(o.params.lang).startOf("month").hour(e.hour()).minute(e.minute()),a=r.format("d");n.days=[];for(var s=r.date();s<=r.daysInMonth();s++){if(s===r.date()){var c=i.week.indexOf(a.toString());if(c>0)for(var u=0;u<c;u++)n.days.push(0)}n.days.push(t(r).locale(o.params.lang).date(s))}for(var l=7,d=[],v=Math.ceil(n.days.length/l),p=0;p<v;p++)d.push(n.days.slice(p*l,(p+1)*l));return n.days=d,n}};i.toDay=function(e){return t(parseInt(e),"d").locale(o.params.lang).format("dd").substring(0,1)},i.isInRange=function(e){return o.isAfterMinDate(t(e),!1,!1)&&o.isBeforeMaxDate(t(e),!1,!1)},i.selectDate=function(e){if(e){if(i.isSelectedDay(e))return o.ok();o.selectDate(t(e).hour(i.date.hour()).minute(i.date.minute()))}},i.isSelectedDay=function(e){return e&&i.date.date()===e.date()&&i.date.month()===e.month()&&i.date.year()===e.year()}}],template:'<md-virtual-repeat-container md-top-index="cal.topIndex" class="months"><div md-virtual-repeat="idx in cal.months" md-start-index="cal.topIndex" md-item-size="'+i+'">     <div mdc-datetime-picker-calendar-month idx="idx"></div></div></md-virtual-repeat-container>'}}]).directive("mdcDatetimePickerCalendarMonth",["$compile",function(e){var t=function(t,n){var r=angular.element(t[0].querySelector("tbody")),i=n.cal,a=n.month;r.html(""),a.days.forEach(function(e,t){var n=angular.element("<tr></tr>");e.forEach(function(e,r){var a=angular.element("<td> </td>");if(e){var o;if(i.isInRange(e)){var s='month["days"]['+t+"]["+r+"]";o=angular.element("<a href='#' mdc-dtp-noclick></a>").attr("ng-class","{selected: cal.isSelectedDay("+s+")}").attr("ng-click","cal.selectDate("+s+")")}else o=angular.element("<span></span>");o.addClass("dtp-select-day").html(e.format("D")),a.append(o)}n.append(a)}),r.append(n)}),e(r)(n)};return{scope:{idx:"="},require:"^mdcDatetimePickerCalendar",restrict:"AE",template:'<div class="dtp-picker-month">{{month.name}}</div><table class="table dtp-picker-days">    <thead>    <tr>        <th ng-repeat="day in cal.week">{{cal.toDay(day)}}</th>    </tr>    </thead>    <tbody>    </tbody></table>',link:function(e,n,r,i){e.cal=i,e.month=i.getItemAtIndex(parseInt(e.idx)),t(n,e),e.$watch(function(){return e.idx},function(r,a){r!=a&&(e.month=i.getItemAtIndex(parseInt(e.idx)),t(n,e))})}}}]),angular.module(n).directive("mdcDtpNoclick",function(){return{link:function(e,t){t.on("click",function(e){e.preventDefault()})}}}),angular.module(n).directive("mdcDatetimePickerClock",[function(){var e='<div class="dtp-picker-clock"><span ng-if="!points || points.length < 1">&nbsp;</span><div ng-repeat="point in points" class="dtp-picker-time" style="margin-left: {{point.left}}px; margin-top: {{point.top}}px;">   <a href="#" mdc-dtp-noclick ng-class="{selected: point.value===currentValue}" class="dtp-select-hour" ng-click="setTime(point.value)" ng-if="pointAvailable(point)">{{point.display}}</a>   <a href="#" mdc-dtp-noclick class="disabled dtp-select-hour" ng-if="!pointAvailable(point)">{{point.display}}</a></div><div class="dtp-hand dtp-hour-hand"></div><div class="dtp-hand dtp-minute-hand"></div><div class="dtp-clock-center"></div></div>';return{restrict:"E",template:e,link:function(e,t,n){var r="minutes"===n.mode,a=e.picker,o=document.querySelector("md-dialog.dtp"),s=function(){var n=angular.element(t[0].querySelector(".dtp-picker-clock")),s=angular.element(o.querySelector(".dtp-picker")),u=o.querySelector(".dtp-content").offsetWidth,d=parseInt(i(s,"paddingLeft").replace("px",""))||0,v=parseInt(i(s,"paddingRight").replace("px",""))||0,p=parseInt(i(n,"marginLeft").replace("px",""))||0,m=parseInt(i(n,"marginRight").replace("px",""))||0,f=u-(p+m+d+v);n.css("width",f+"px");for(var h=parseInt(i(s,"paddingLeft").replace("px",""))||0,g=parseInt(i(s,"paddingTop").replace("px",""))||0,y=parseInt(i(n,"marginLeft").replace("px",""))||0,b=parseInt(i(n,"marginTop").replace("px",""))||0,D=f/2,S=D/1.2,_=[],k=0;k<12;++k){var T=S*Math.sin(2*Math.PI*(k/12)),x=S*Math.cos(2*Math.PI*(k/12)),C={left:D+T+h/2-(h+y),top:D-x-b/2-(g+b),value:r?5*k:k};r?C.display=C.value<10?"0"+C.value:C.value:a.params.shortTime?C.display=0===k?12:k:C.display=a.isPM()?k+12:k,_.push(C)}e.points=_,l(),n.css("height",f+"px");var w=t[0].querySelector(".dtp-clock-center"),M=w.offsetWidth/2||7.5,I=w.offsetHeight/2||7.5,P=D/1.8,E=D/1.5;angular.element(t[0].querySelector(".dtp-hour-hand")).css({left:D+1.5*y+"px",height:P+"px",marginTop:D-P-h+"px"}).addClass(r?"":"on"),angular.element(t[0].querySelector(".dtp-minute-hand")).css({left:D+1.5*y+"px",height:E+"px",marginTop:D-E-h+"px"}).addClass(r?"on":""),angular.element(w).css({left:D+h+y-M+"px",marginTop:D-y/2-I+"px"}),c()},c=function(){var e=a.currentNearest5Minute(),n=e.hour(),r=e.minute();u(angular.element(t[0].querySelector(".dtp-hour-hand")),30*n);var i=6*(5*Math.round(r/5));u(angular.element(t[0].querySelector(".dtp-minute-hand")),i)},u=function(e,t){angular.element(e).css({WebkitTransform:"rotate("+t+"deg)","-moz-transform":"rotate("+t+"deg)"})},l=function(){var t=a.currentNearest5Minute();e.currentValue=r?t.minute():t.hour()%12};e.$watch(function(){var e=a.currentNearest5Minute();return e?e.format("HH:mm"):""},function(e){l(),c()});var d=function(e,t){for(var n=0;n<t.length;n++)t[n].display=n,e&&(t[n].display+=12);return t};a.params.shortTime||e.$watch("picker.meridien",function(){if(!r&&e.points){var t=d(a.isPM(),angular.copy(e.points));e.points=t}}),e.setTime=function(t){t===e.currentValue&&a.ok(),r?a.currentDate.minute(t):a.currentDate.hour(a.isPM()?t+12:t),a.currentDate.second(0)},e.pointAvailable=function(e){return r?a.isMinuteAvailable(e.value):a.isHourAvailable(e.value)};var v=e.$watch(function(){return t[0].querySelectorAll("div").length},function(){s(),v()})}}}])}(i["default"])}).call(exports,t(506))},591:function(e,exports,t){var n=t(592);"string"==typeof n&&(n=[[e.id,n,""]]);t(481)(n,{});n.locals&&(e.exports=n.locals)},592:function(e,exports,t){exports=e.exports=t(480)(),exports.push([e.id,"md-dialog.dtp{font-size:14px;line-height:1.42857143;color:#333;background-color:#fff;max-height:none}.dtp :focus{outline:none!important}.dtp table{border-spacing:0;border-collapse:collapse;width:100%}.dtp .table>tbody>tr>td,.dtp .table>tbody>tr>th,.dtp .table>tfoot>tr>td,.dtp .table>tfoot>tr>th,.dtp .table>thead>tr>td,.dtp .table>thead>tr>th{padding:8px;line-height:1.42857143;vertical-align:top;border-top:1px solid #ddd}.dtp,.dtp *{box-sizing:border-box!important}.dtp>.dtp-content{max-width:300px;max-height:500px}.dtp>.dtp-content>.dtp-date-view>header.dtp-header{background:#689f38;color:#fff;text-align:center;padding:3px}.dtp div.dtp-date,.dtp div.dtp-time{background:#8bc34a;text-align:center;color:#fff;padding:10px}.dtp div.dtp-date>div{padding:0;margin:0}.dtp div.dtp-actual-month{font-size:1.5em}.dtp div.dtp-actual-maxtime,.dtp div.dtp-actual-num{font-size:3em;line-height:.9}.dtp div.dtp-actual-year{font-size:1.6em;color:#dcedc8}.dtp div.dtp-year-btn{font-size:1.4em;line-height:30px;cursor:pointer;color:#dcedc8}.dtp div.dtp-year-btn-prev{text-align:right}.dtp div.dtp-year-btn-next{text-align:left}.dtp div.dtp-picker{padding:10px;text-align:center}.dtp div.dtp-actual-time,.dtp div.dtp-picker-month{font-weight:500;text-align:center}.dtp .dtp-close{position:absolute;top:.25em;right:5px;font-size:16px}.dtp .dtp-close>a{color:#fff;text-decoration:none}.dtp .dtp-close>a>i{font-size:1em}.dtp table.dtp-picker-days{margin:0;min-height:220px}.dtp md-virtual-repeat-container.months{height:260px}.dtp table.dtp-picker-days,.dtp table.dtp-picker-days tr,.dtp table.dtp-picker-days tr>td{border:none}.dtp table.dtp-picker-days tr>td{font-size:11px;text-align:center;padding:0}.dtp table.dtp-picker-days tr>td>span.dtp-select-day{color:#bdbdbd!important}.dtp table.dtp-picker-days tr>td>.dtp-select-day{width:36px;height:36px;display:inline-block}.dtp .dtp-picker-time>a,.dtp table.dtp-picker-days tr>td>.dtp-select-day{color:#212121;text-decoration:none;padding:10px;border-radius:50%!important}.dtp table.dtp-picker-days tr>td>a.selected{background:#8bc34a;color:#fff}.dtp table.dtp-picker-days tr>td>a:hover:not(.selected){background:#ddd}.dtp table.dtp-picker-days tr>th{color:#757575;text-align:center;font-weight:700;padding:4px 3px}.dtp .p10>a{color:#689f38;text-decoration:none}.dtp .p10{width:10%}.dtp .p10,.dtp .p20{display:inline-block}.dtp .p20{width:20%}.dtp .p60{width:60%}.dtp .p60,.dtp .p80{display:inline-block}.dtp .p80{width:80%}.dtp a.dtp-meridien-am,.dtp a.dtp-meridien-pm{position:relative;top:10px;color:#212121;font-weight:500;padding:7px 5px;border-radius:50%!important;text-decoration:none;background:#eee;font-size:10px}.dtp .dtp-actual-meridien a.selected{background:#689f38;color:#fff}.dtp .dtp-picker-time>a{display:block;line-height:23px;padding:3px}.dtp .dtp-picker-time{position:absolute;width:30px;height:30px;font-size:1.1em;border-radius:50%;cursor:pointer;text-align:center!important}.dtp .dtp-picker-time>a.dtp-select-hour.selected{background:#689f38;color:#fff}.dtp .dtp-picker-time>a.dtp-select-hour.disabled,.dtp .dtp-picker-time>a.dtp-select-minute.disabled{color:#757575}.dtp .dtp-picker-time>a.dtp-select-minute.selected{background:#8bc34a;color:#fff}.dtp div.dtp-picker-clock{margin:10px 20px 0;padding:10px;border-radius:50%!important;background:#eee}.dtp-clock-center{width:15px;height:15px;background:#757575;border-radius:50%;position:absolute;z-index:50}.dtp .dtp-hand,.dtp .dtp-hour-hand{position:absolute;width:4px;margin-left:-2px;background:#bdbdbd;-webkit-transform:rotate(0deg);transform:rotate(0deg);-webkit-transform-origin:bottom;transform-origin:bottom;z-index:1}.dtp .dtp-minute-hand{width:2px;margin-left:-1px}.dtp .dtp-hand.on{background:#8bc34a}.dtp .dtp-buttons{padding:0 10px 10px;text-align:right}.dtp.hidden,.dtp .hidden{display:none}.dtp .invisible{visibility:hidden}.dtp .left{float:left}.dtp .right{float:right}.dtp .clearfix{clear:both}.dtp .center{text-align:center}",""])},593:function(e,exports,t){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}var r=t(594),i=n(r);angular.module("directive.g+signin",[]).directive("googlePlusSignin",["$window",function(e){var t=/\.apps\.googleusercontent\.com$/;return{restrict:"E",transclude:!0,template:"<span></span>",replace:!0,link:function(n,r,a,o,s){a.clientid+=t.test(a.clientid)?"":".apps.googleusercontent.com",a.$set("data-clientid",a.clientid),a.$set("theme",a.theme);var c={callback:"signinCallback",cookiepolicy:"single_host_origin",requestvisibleactions:"http://schemas.google.com/AddActivity",scope:"https://www.googleapis.com/auth/plus.login https://www.googleapis.com/auth/userinfo.email",height:"standard",width:"wide",state:""};c.clientid=a.clientid,c.theme=a.theme,angular.forEach((0,i["default"])(c),function(e){a.hasOwnProperty(e)&&(c[e]=a[e])}),a.$observe("language",function(t){e.___gcfg={lang:t?t:"en"}});var u=document.createElement("script");u.type="text/javascript",u.async=!0,u.src="https://apis.google.com/js/client:plusone.js";var l=document.getElementsByTagName("script")[0];l.parentNode.insertBefore(u,l),s(function(e,t){u.onload=function(){e.length&&r.append(e),gapi.signin.render(r[0],c)}})}}}]).run(["$window","$rootScope",function(e,t){e.signinCallback=function(e){e&&e.access_token?t.$broadcast("event:google-plus-signin-success",e):t.$broadcast("event:google-plus-signin-failure",e)}}])},636:function(e,exports,t){var n=t(637);"string"==typeof n&&(n=[[e.id,n,""]]);t(481)(n,{});n.locals&&(e.exports=n.locals)},637:function(e,exports,t){exports=e.exports=t(480)(),exports.push([e.id,"",""])},638:function(e,exports,t){var n=t(639);"string"==typeof n&&(n=[[e.id,n,""]]);t(481)(n,{});n.locals&&(e.exports=n.locals)},639:function(e,exports,t){exports=e.exports=t(480)(),exports.push([e.id,".distributor-selection{font-size:16pt;padding:3px;margin:3px}body{margin-top:100px;background-color:transparent}@media (min-width:768px){body{margin-top:50px}}#wrapper{padding-left:0}#page-wrapper{width:100%;padding:0;background-color:#fff}.huge{font-size:50px;line-height:normal}@media (min-width:768px){#wrapper{padding-left:225px}#page-wrapper{padding:10px}}.margin-top-05{margin-top:.5em}.margin-top-15{margin-top:1.5em}.margin-top-20{margin-top:2em}.margin-top-25{margin-top:2.5em}.margin-top-50{margin-top:5em}.issue-warning-background{background-color:orange}.issue-warning-text{color:orange}.issue-danger-background{background-color:red}.issue-danger-text{color:red}.issue-normal-background{background-color:green}.issue-normal-text{color:green}.up-true-background{background-color:green}.up-false-background{background-color:red}.navbar-default{background-color:#1b75bb;border-color:#15598e}.navbar-default .navbar-brand{color:#fff}.navbar-default .navbar-brand:focus,.navbar-default .navbar-brand:hover{color:#55a7e7}.navbar-default .navbar-nav>li>a,.navbar-default .navbar-nav>li>a:focus,.navbar-default .navbar-nav>li>a:hover{color:#fff}.navbar-default .navbar-nav>.active>a,.navbar-default .navbar-nav>.active>a:focus,.navbar-default .navbar-nav>.active>a:hover{color:#fff;background-color:#afd5f3}.navbar-default .navbar-nav>.open>a,.navbar-default .navbar-nav>.open>a:focus,.navbar-default .navbar-nav>.open>a:hover{color:#555;background-color:#d5d5d5}.navbar-default .navbar-nav>.dropdown>a .caret{border-top-color:#777;border-bottom-color:#777}.navbar-default .navbar-nav>.dropdown>a:focus .caret,.navbar-default .navbar-nav>.dropdown>a:hover .caret{border-top-color:#333;border-bottom-color:#333}.navbar-default .navbar-nav>.open>a .caret,.navbar-default .navbar-nav>.open>a:focus .caret,.navbar-default .navbar-nav>.open>a:hover .caret{border-top-color:#555;border-bottom-color:#555}.navbar-default .navbar-toggle{border-color:#ddd}.navbar-default .navbar-toggle:focus,.navbar-default .navbar-toggle:hover{background-color:#ddd}.navbar-default .navbar-toggle .icon-bar{background-color:#ccc}@media (max-width:767px){.navbar-default .navbar-nav .open .dropdown-menu>li>a{color:#777}.navbar-default .navbar-nav .open .dropdown-menu>li>a:focus,.navbar-default .navbar-nav .open .dropdown-menu>li>a:hover{color:#333}}.top-nav{padding:0 15px}.top-nav>li{display:inline-block;float:left}.top-nav>li>a{padding-top:15px;padding-bottom:15px;line-height:20px;color:#efefef}.top-nav>.open>a,.top-nav>.open>a:focus,.top-nav>.open>a:hover,.top-nav>li>a:focus,.top-nav>li>a:hover{color:#fff;background-color:#1b75bb}.top-nav>.open>.dropdown-menu{float:left;position:absolute;margin-top:0;border:1px solid rgba(0,0,0,.15);border-top-left-radius:0;border-top-right-radius:0;background-color:#fff;box-shadow:0 6px 12px rgba(0,0,0,.175)}.top-nav>.open>.dropdown-menu>li>a{white-space:normal}ul.message-dropdown{padding:0;max-height:250px;overflow-x:hidden;overflow-y:auto}li.message-preview{width:275px;border-bottom:1px solid rgba(0,0,0,.15)}li.message-preview>a{padding-top:15px;padding-bottom:15px}li.message-footer{margin:5px 0}ul.alert-dropdown{width:200px}@media (min-width:768px){.side-nav{position:fixed;top:51px;left:225px;margin-left:-225px;border:none;border-radius:0;overflow-y:auto;background-color:#1b75bb;bottom:0;overflow-x:hidden;padding-bottom:40px}.side-nav,.side-nav>li>a{width:225px}.side-nav li a:focus,.side-nav li a:hover{outline:none;background-color:#3f9ce3!important}}.side-nav>li>ul{padding:0}.side-nav>li>ul>li>a{display:block;padding:10px 15px 10px 38px;text-decoration:none;color:#d4d4d4}.side-nav>li>ul>li>a:hover{color:#fff}.flot-chart{display:block;height:400px}.flot-chart-content{width:100%;height:100%}.huge{font-size:40px}.panel-green{border-color:#5cb85c}.panel-green>.panel-heading{border-color:#5cb85c;color:#fff;background-color:#5cb85c}.panel-green>a{color:#5cb85c}.panel-green>a:hover{color:#3d8b3d}.panel-red{border-color:#d9534f}.panel-red>.panel-heading{border-color:#d9534f;color:#fff;background-color:#d9534f}.panel-red>a{color:#d9534f}.panel-red>a:hover{color:#b52b27}.panel-yellow{border-color:#f0ad4e}.panel-yellow>.panel-heading{border-color:#f0ad4e;color:#fff;background-color:#f0ad4e}.panel-yellow>a{color:#f0ad4e}.panel-yellow>a:hover{color:#df8a13}.toolbar{margin-bottom:10px}.entity-key{font-family:Monaco,Consolas,Lucida Console,dejavu sans mono,monospace;font-size:11px}.proof-of-play-label{padding-bottom:10px;padding-top:10px}.copy-ready-transparent{color:transparent}.no-devices{text-align:center}.properties-word-break{width:390px;word-wrap:break-word;display:block}.command-history-command{width:375px;word-wrap:break-word;display:block}.hostname-word-break{width:200px;word-wrap:break-word;display:inline-block}[data-ng-click],[ng-click],[x-ng-click]{cursor:pointer}#proofplay-selected-items{min-width:0!important;margin:0 auto;padding:0 auto}.radio-button{padding:3px}.horizontal-submit{margin:.5em}.horizontal-submit,.radio-horizontal{display:flex;align-self:center;-ms-flex-align:center;-webkit-align-items:center;-webkit-box-align:center}md-toolbar.md-default-theme:not(.md-menu-toolbar),md-toolbar:not(.md-menu-toolbar){background-color:#1b75bb!important;max-height:64px;min-height:64px}.md-toolbar-tools{background-color:#000!important;max-height:64px;min-height:64px}.skykit-image{max-width:100%;height:33px}@media (max-width:767px){md-toolbar.md-default-theme:not(.md-menu-toolbar),md-toolbar:not(.md-menu-toolbar){margin-top:-50px;margin-bottom:50px}}.center-block{text-align:center}.ellipsis-overflow,.proof-of-play-selected-item{width:100%;white-space:nowrap;overflow:hidden;text-align:left;text-overflow:ellipsis}.proof-of-play-tenant-name-option{width:7em;white-space:nowrap;overflow:hidden;text-align:center;positition:absolute;text-overflow:ellipsis}.proof-of-play-horizontal-top-bar{align-self:center;-ms-flex-align:center;-webkit-align-items:center;-webkit-box-align:center;margin-top:.5em;margin-bottom:.5em;align-items:center}.my-flex,.proof-of-play-horizontal-top-bar{display:flex;justify-content:center}.bigger-buttons{padding:.4em;min-width:88px;border-radius:5px;font-size:16px;text-align:center;text-decoration:none;border:none;outline:none}.admin-container{display:flex;align-content:flex-start}.registration-event-column{height:110px;display:inline-block;vertical-align:top;overflow:scroll}.pull-command-send-button-up{margin-top:-2px}header.dtp-header{background:#1b75bb!important}.dtp div.dtp-date,.dtp div.dtp-time{background:#000}.dtp .dtp-actual-meridien a.selected,.dtp .dtp-picker-time>a.dtp-select-hour.selected,.dtp table.dtp-picker-days tr>td>a.selected{background:#1b75bb!important}.dtp .dtp-hand.on{background:#000}.device-properties-switch{margin-top:-1px}.md-content-command-override md-content{overflow:unset}.pull-tooltip-left{margin-left:-55px}.command-button-right{float:right;flex-direction:row-reverse}",""]);
},641:function(e,exports,t){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(e,t,n,r,i,o,s,c,u,l,d,v,p){"ngInject";var m=this;return m.tenantKey=t.tenantKey,m.deviceKey=t.deviceKey,m.fromDevices="true"===t.fromDevices,m.currentDevice={},m.commandEvents=[],m.generateLocalFromUTC=function(e){var t=a["default"].utc(e).toDate();return t=(0,a["default"])(t).format("YYYY-MM-DD hh:mm:ss A")},m.replaceCommandTime=function(e){for(var t=0;t<e.length;t++){var n=e[t];n.postedTime&&(n.postedTime=m.generateLocalFromUTC(n.postedTime)),n.confirmedTime&&(n.confirmedTime=m.generateLocalFromUTC(n.confirmedTime))}},m.getEvents=function(e,t,n){l.start();var r=i.getCommandEventsByKey(e,t,n);return r.then(function(e){return m.replaceCommandTime(e.events),m.event_next_cursor=e.next_cursor,m.event_prev_cursor=e.prev_cursor,m.commandEvents=e.events,l.complete()})},m.getEventsTimeOut=function(e,t,n){return p(function(){return m.getEvents(e,t,n)},1e3)},m.commandHistorySelected=function(){return m.getEvents(m.deviceKey)},m.paginateEventCall=function(e){return e?m.getEvents(m.deviceKey,null,m.event_next_cursor):m.getEvents(m.deviceKey,m.event_prev_cursor,null)},m.initialize=function(){var e=i.getDeviceByKey(m.deviceKey);return e.then(function(e){return m.onGetDeviceSuccess(e)},function(e){return m.onGetDeviceFailure(e)}),m.getEvents(m.deviceKey)},m.onGetDeviceSuccess=function(e){return m.currentDevice=e,e.timezone!==m.selectedTimezone&&(m.selectedTimezone=e.timezone),void 0===m.tenantKey&&(m.tenantKey=m.currentDevice.tenantKey),"true"===t.fromDevices?(m.backUrl="/#/devices",m.backUrlText="Back to devices"):m.currentDevice.isUnmanagedDevice===!0?(m.backUrl="/#/tenants/"+m.tenantKey+"/unmanaged",m.backUrlText="Back to tenant unmanaged devices"):(m.backUrl="/#/tenants/"+m.tenantKey+"/managed",m.backUrlText="Back to tenant managed devices")},m.onGetDeviceFailure=function(t){v.showErrorToast("Oops. We were unable to fetch the details for this device at this time.");var r="No detail for device_key #"+m.deviceKey+". Error: "+t.status+" "+t.statusText;return e.error(r),n.go("devices")},m.onResetContent=function(){l.start();var e=s.contentDelete(m.deviceKey);return e.then(m.onResetContentSuccess,m.onResetContentFailure)},m.onResetContentSuccess=function(){return l.complete(),m.getEventsTimeOut(m.deviceKey),v.showSuccessToast("We posted your reset content command into the player's queue.")},m.onResetContentFailure=function(t){return l.complete(),e.error("Reset content command error: "+t.status+" "+t.statusText),u.show("Oops...","We were unable to post your reset content command into the player's queue.","error")},m.onUpdateContent=function(){l.start();var e=s.contentUpdate(m.deviceKey);return e.then(m.onUpdateContentSuccess,m.onUpdateContentFailure)},m.onUpdateContentSuccess=function(){return l.complete(),m.getEventsTimeOut(m.deviceKey),v.showSuccessToast("We posted your update content command into the player's queue.")},m.onUpdateContentFailure=function(t){return l.complete(),e.error("Content update command error: "+t.status+" "+t.statusText),u.show("Oops...","We were unable to post your update content command into the player's queue.","error")},m.onResetPlayer=function(){l.start();var e=s.reset(m.deviceKey);return e.then(m.onResetPlayerSuccess,m.onResetPlayerFailure)},m.onResetPlayerSuccess=function(){return l.complete(),m.getEventsTimeOut(m.deviceKey),v.showSuccessToast("We posted your reset player command into the player's queue.")},m.onResetPlayerFailure=function(t){return l.complete(),e.error("Reset player command error: "+t.status+" "+t.statusText),u.show("Oops...","We were unable to post your reset player command into the player's queue.","error")},m.onPanelOn=function(){l.start();var e=s.powerOn(m.deviceKey);return e.then(m.onPanelOnSuccess,m.onPanelOnFailure)},m.onPanelOnSuccess=function(){return l.complete(),m.getEventsTimeOut(m.deviceKey),v.showSuccessToast("We posted your panel on command into the player's queue.")},m.onPanelOnFailure=function(t){return l.complete(),e.error("Panel on command error: "+t.status+" "+t.statusText),u.show("Oops...","We were unable to post your panel on command into the player's queue.","error")},m.onPanelOff=function(){l.start();var e=s.powerOff(m.deviceKey);return e.then(m.onPanelOffSuccess,m.onPanelOffFailure)},m.onPanelOffSuccess=function(){return l.complete(),m.getEventsTimeOut(m.deviceKey),v.showSuccessToast("We posted your panel off command into the player's queue.")},m.onPanelOffFailure=function(t){return l.complete(),e.error("Panel off command error: "+t.status+" "+t.statusText),u.show("Oops...","We were unable to post your panel off command into the player's queue.","error")},m.onUpdateDevice=function(){l.start();var e=s.updateDevice(m.deviceKey);return e.then(m.onUpdateDeviceSuccess,m.onUpdateDeviceFailure)},m.onUpdateDeviceSuccess=function(){return l.complete(),m.getEventsTimeOut(m.deviceKey),v.showSuccessToast("We posted your update device command into the player's queue.")},m.onUpdateDeviceFailure=function(t){return l.complete(),e.error("Update device command error: "+t.status+" "+t.statusText),u.show("Oops...","We were unable to post your update device command into the player's queue.","error")},m.onVolumeChange=function(){l.start();var e=s.volume(m.deviceKey,m.currentDevice.volume);return e.then(m.onVolumeChangeSuccess(m.currentDevice.volume),m.onVolumeChangeFailure)},m.onVolumeChangeSuccess=function(e){return l.complete(),m.getEventsTimeOut(m.deviceKey),v.showSuccessToast("We posted your volume change command of "+e+" into the player's queue.")},m.onVolumeChangeFailure=function(t){return l.complete(),e.error("Volume change command error: "+t.status+" "+t.statusText),u.show("Oops...","We were unable to post your volume change command into the player's queue.","error")},m.onCustomCommand=function(){l.start();var e=s.custom(m.deviceKey,m.currentDevice.custom);return e.then(m.onCustomCommandSuccess(m.currentDevice.custom),m.onCustomCommandFailure)},m.onCustomCommandSuccess=function(e){return l.complete(),m.getEventsTimeOut(m.deviceKey),v.showSuccessToast("We posted your custom command '"+e+"' into the player's queue.")},m.onCustomCommandFailure=function(t){return l.complete(),e.error("Custom command error: "+t.status+" "+t.statusText),u.show("Oops...","We were unable to post your custom command into the player's queue.","error")},m.onDiagnosticsToggle=function(){l.start();var e=s.toggleDiagnostics(m.deviceKey);return e.then(m.onToggleDiagnosticsSuccess,m.onToggleDiagnosticsFailure)},m.onToggleDiagnosticsSuccess=function(){return l.complete(),v.showSuccessToast("We posted your diagnostics command into the player's queue.")},m.onToggleDiagnosticsFailure=function(t){return l.complete(),e.error("Diagnostics command error: "+t.status+" "+t.statusText),u.show("Oops...","We were unable to post your diagnostics command into the player's queue.","error")},m.onRestart=function(){l.start();var e=s.restart(m.deviceKey);return e.then(m.onRestartSuccess,m.onRestartFailure)},m.onRestartSuccess=function(){return l.complete(),v.showSuccessToast("We posted your restart command into the player's queue.")},m.onRestartFailure=function(t){return l.complete(),e.error("Restart command error: "+t.status+" "+t.statusText),u.show("Oops...","We were unable to post your restart command into the player's queue.","error")},m.onPostLog=function(){l.start();var e=s.postLog(m.deviceKey);return e.then(m.onPostLogSuccess,m.onPostLogFailure)},m.onPostLogSuccess=function(){return l.complete(),v.showSuccessToast("We posted your post log command into the player's queue.")},m.onPostLogFailure=function(t){return l.complete(),e.error("Post log command error: "+t.status+" "+t.statusText),u.show("Oops...","We were unable to post your post log command into the player's queue.","error")},m}r.$inject=["$log","$stateParams","$state","SessionsService","DevicesService","LocationsService","CommandsService","TimezonesService","sweet","ProgressBarService","$mdDialog","ToastsService","$timeout"],Object.defineProperty(exports,"__esModule",{value:!0}),exports.DeviceDetailsCommandsCtrl=void 0;var i=t(372),a=n(i);exports.DeviceDetailsCommandsCtrl=r},642:function(e,exports,t){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(e,t,n,r,i,o,c,u,l,d,v,p,m,f){"ngInject";var h=this;h.tenantKey=t.tenantKey,h.deviceKey=t.deviceKey,h.fromDevices="true"===t.fromDevices,h.currentDevice={},h.locations=[],h.commandEvents=[],h.dayRange=30,h.issues=[],h.timezones=[],h.selectedTimezone=void 0;var g=f.createFormattedStartAndEndDateFromToday(30),y=(0,a["default"])(g,2);return h.startTime=y[0],h.endTime=y[1],h.enrollmentEvents=[],h.replaceIssueTime=function(e){for(var t=0;t<e.length;t++){var n=e[t];n.created&&(n.created=f.generateLocalFromUTC(n.created)),n.updated&&(n.updated=f.generateLocalFromUTC(n.updated))}},h.replaceCommandTime=function(e){for(var t=0;t<e.length;t++){var n=e[t];n.postedTime&&(n.postedTime=f.generateLocalFromUTC(n.postedTime)),n.confirmedTime&&(n.confirmedTime=f.generateLocalFromUTC(n.confirmedTime))}},h.copyDeviceKey=function(){return m.showSuccessToast("Device key copied to your clipboard")},h.copyCorrelationIdentifier=function(){return m.showSuccessToast("Correlation ID copied to your clipboard")},h.getIssues=function(e,t,n,r,a){v.start();var o=i.getIssuesByKey(e,t,n,r,a);return o.then(function(e){return h.replaceIssueTime(e.issues),h.issues=e.issues,h.prev_cursor=e.prev,h.next_cursor=e.next,v.complete()})},h.getEvents=function(e,t,n){v.start();var r=i.getCommandEventsByKey(e,t,n);return r.then(function(e){return h.replaceCommandTime(e.events),h.event_next_cursor=e.next_cursor,h.event_prev_cursor=e.prev_cursor,h.commandEvents=e.events,v.complete()})},h.getEnrollmentEvents=function(e){v.start();var t=l.getEnrollmentEvents(e);return t.then(function(e){return h.enrollmentEvents=e,v.complete()})},h.paginateCall=function(e){return e?h.getIssues(h.deviceKey,h.epochStart,h.epochEnd,null,h.next_cursor):h.getIssues(h.deviceKey,h.epochStart,h.epochEnd,h.prev_cursor,null)},h.paginateEventCall=function(e){return e?h.getEvents(h.deviceKey,null,h.event_next_cursor):h.getEvents(h.deviceKey,h.event_prev_cursor,null)},h.initialize=function(){h.epochStart=(0,s["default"])(h.startTime,"YYYY-MM-DD hh:mm A").unix(),h.epochEnd=(0,s["default"])(h.endTime,"YYYY-MM-DD hh:mm A").unix();var e=u.getCustomTimezones();e.then(function(e){return h.timezones=e}),h.panelModels=i.getPanelModels(),h.panelInputs=i.getPanelInputs();var t=i.getDeviceByKey(h.deviceKey);return t.then(function(e){return h.onGetDeviceSuccess(e)},function(e){return h.onGetDeviceFailure(e)}),h.getEvents(h.deviceKey),h.getIssues(h.deviceKey,h.epochStart,h.epochEnd),h.getEnrollmentEvents(h.deviceKey)},h.onGetDeviceSuccess=function(e){h.currentDevice=e,e.timezone!==h.selectedTimezone&&(h.selectedTimezone=e.timezone),void 0===h.tenantKey&&(h.tenantKey=h.currentDevice.tenantKey),"true"===t.fromDevices?(h.backUrl="/#/devices",h.backUrlText="Back to devices"):h.currentDevice.isUnmanagedDevice===!0?(h.backUrl="/#/tenants/"+h.tenantKey+"/unmanaged",h.backUrlText="Back to tenant unmanaged devices"):(h.backUrl="/#/tenants/"+h.tenantKey+"/managed",h.backUrlText="Back to tenant managed devices");var n=o.getLocationsByTenantKey(h.tenantKey);return n.then(function(e){return h.locations=e,h.setSelectedOptions()})},h.onGetDeviceFailure=function(t){m.showErrorToast("Oops. We were unable to fetch the details for this device at this time.");var r="No detail for device_key #"+h.deviceKey+". Error: "+t.status+" "+t.statusText;return e.error(r),n.go("devices")},h.setSelectedOptions=function(){if(null===h.currentDevice.panelModel)h.currentDevice.panelModel=h.panelModels[0],h.currentDevice.panelInput=h.panelInputs[0];else{for(var e=0;e<h.panelModels.length;e++){var t=h.panelModels[e];t.id===h.currentDevice.panelModel&&(h.currentDevice.panelModel=t)}for(var n=0;n<h.panelInputs.length;n++){var r=h.panelInputs[n],i=r.parentId===h.currentDevice.panelModel.id;i&&r.id.toLowerCase()===h.currentDevice.panelInput&&(h.currentDevice.panelInput=r)}}if(null===h.currentDevice.locationKey);else for(var a=0;a<h.locations.length;a++){var o=h.locations[a];o.key===h.currentDevice.locationKey&&(h.currentDevice.location=o)}},h.onSaveDevice=function(){v.start(),void 0!==h.currentDevice.location&&void 0!==h.currentDevice.location.key&&(h.currentDevice.locationKey=h.currentDevice.location.key),void 0!==h.currentDevice.panelModel.id&&"None"!==h.currentDevice.panelModel.id&&(h.currentDevice.panelModelNumber=h.currentDevice.panelModel.id),void 0!==h.currentDevice.panelInput.id&&"None"!==h.currentDevice.panelInput.id&&(h.currentDevice.panelSerialInput=h.currentDevice.panelInput.id.toLowerCase()),h.currentDevice.timezone=h.selectedTimezone;var e=i.save(h.currentDevice);return e.then(h.onSuccessDeviceSave,h.onFailureDeviceSave)},h.onSuccessDeviceSave=function(){return v.complete(),m.showSuccessToast("We saved your update.")},h.onFailureDeviceSave=function(t){return v.complete(),409===t.status?(e.info("Failure saving device. Customer display code already exists for tenant: "+t.status+" "+t.statusText),d.show("Oops...","This customer display code already exists for this tenant. Please choose another.","error")):(e.error("Failure saving device: "+t.status+" "+t.statusText),m.showErrorToast("Oops. We were unable to save your updates to this device at this time."))},h.onPanelSleep=function(e){v.start();var t=c.panelSleep(h.deviceKey,e);return t.then(h.onPanelSleepSuccess,h.onPanelSleepFailure)},h.onPanelSleepSuccess=function(){return v.complete(),m.showSuccessToast("We toggled the panel sleep attribute. The player should adjust to these changes within 15 minutes.")},h.onPanelSleepFailure=function(e){return v.complete(),d.show("Oops...","We were unable to toggle the panel sleep attribute.","error")},h.confirmDeviceDelete=function(e,t){var n=p.confirm({title:"Are you sure to delete this device?",textContent:"Please remember, you MUST remove this device from Content Manager before deleting it from Provisioning.",targetEvent:e,ok:"Delete",cancel:"Cancel"}),r=p.show(n),i=function(){return h.onConfirmDelete(t)},a=function(){return h.onConfirmCancel()};return r.then(i,a)},h.onConfirmDelete=function(t){var r=function(){return m.showSuccessToast("We processed your delete request."),n.go("devices")},a=function(n){var r="We were unable to complete your delete request at this time.";return m.showErrorToast(r),e.error("Delete device failure for device_key "+t+": "+n.status+" "+n.statusText)},o=i["delete"](t);return o.then(r,a)},h.onConfirmCancel=function(){return m.showInfoToast("We canceled your delete request.")},h.onProofOfPlayLoggingCheck=function(){if(h.currentDevice.proofOfPlayLogging){var e=null===h.currentDevice.locationKey,t=null===h.currentDevice.customerDisplayCode;return e?(d.show("Oops...","You must have a Location to enable Proof of play.","error"),h.currentDevice.proofOfPlayLogging=!1):t?(d.show("Oops...","You must have a Display code to enable Proof of play.","error"),h.currentDevice.proofOfPlayLogging=!1):h.onSaveDevice()}return h.onSaveDevice()},h.onUpdateLocation=function(){return h.onSaveDevice()},h.autoGenerateCustomerDisplayCode=function(){var e="";return h.currentDevice.customerDisplayName&&(e=h.currentDevice.customerDisplayName.toLowerCase(),e=e.replace(/\s+/g,"_"),e=e.replace(/\W+/g,"")),h.currentDevice.customerDisplayCode=e},h.logglyForUser=function(){var e=r.getUserEmail().split("@")[1];return"demo.agosto.com"===e||"agosto.com"===e},h.onClickRefreshButton=function(){v.start(),h.startTime=f.convertToMomentIfNotAlready(h.startTime),h.endTime=f.convertToMomentIfNotAlready(h.endTime),h.epochStart=(0,s["default"])(h.startTime,"YYYY-MM-DD hh:mm A").unix(),h.epochEnd=(0,s["default"])(h.endTime,"YYYY-MM-DD hh:mm A").unix(),h.prev_cursor=null,h.next_cursor=null;var e=i.getIssuesByKey(h.deviceKey,h.epochStart,h.epochEnd,h.prev_cursor,h.next_cursor);return e.then(function(e){return h.onRefreshIssuesSuccess(e)},function(e){return h.onRefreshIssuesFailure(e)})},h.onRefreshIssuesSuccess=function(e){return h.replaceIssueTime(e.issues),h.issues=e.issues,h.prev_cursor=e.prev,h.next_cursor=e.next,v.complete()},h.onRefreshIssuesFailure=function(t){return v.complete(),m.showInfoToast("We were unable to refresh the device issues list at this time."),e.error("Failure to refresh device issues: "+t.status+" "+t.statusText)},h}r.$inject=["$log","$stateParams","$state","SessionsService","DevicesService","LocationsService","CommandsService","TimezonesService","IntegrationEvents","sweet","ProgressBarService","$mdDialog","ToastsService","DateManipulationService"],Object.defineProperty(exports,"__esModule",{value:!0}),exports.DeviceDetailsCtrl=void 0;var i=t(643),a=n(i),o=t(372),s=n(o);exports.DeviceDetailsCtrl=r},652:function(e,exports){"use strict";function t(e,t,n,r,i,a,o){"ngInject";var s=this;return s.distributorKey=void 0,s.devices=[],s.devicesPrev=null,s.devicesNext=null,s.selectedButton="Serial Number",s.serialDevices={},s.disabled=!0,s.macDevices={},s.gcmidDevices={},s.unmanagedSelectedButton="MAC",s.unmanagedSerialDevices={},s.unmanagedDisabled=!0,s.unmanagedDevicesPrev=null,s.unmanagedDevicesNext=null,s.unmanagedDevices=[],s.unmanagedMacDevices={},s.unmanagedGCMidDevices={},s.refreshManagedDevices=function(){return s.devicesPrev=null,s.devicesNext=null,s.getManagedDevices(s.distributorKey,s.devicesPrev,s.devicesNext)},s.refreshUnmanagedDevices=function(){return s.unmanagedDevicesPrev=null,s.unmanagedDevicesNext=null,s.getUnmanagedDevices(s.distributorKey,s.unmanagedDevicesPrev,s.unmanagedDevicesNext)},s.changeRadio=function(e){return e?(s.unmanagedSearchText="",s.unmanagedDisabled=!0,s.unmanagedSerialDevices={},s.unmanagedMacDevices={}):(s.searchText="",s.disabled=!0,s.serialDevices={},s.macDevices={})},s.editItem=function(e){return n.editItem(e,!0)},s.prepareForEditView=function(e,t){var n=void 0,r=void 0,i=void 0;return e?(n="MAC"===s.unmanagedSelectedButton,r="Serial Number"===s.unmanagedSelectedButton,i="GCM ID"===s.unmanagedSelectedButton,n?s.editItem(s.unmanagedMacDevices[t]):r?s.editItem(s.unmanagedSerialDevices[t]):s.editItem(s.unmanagedGCMidDevices[t])):(n="MAC"===s.selectedButton,r="Serial Number"===s.selectedButton,i="GCM ID"===s.selectedButton,n?s.editItem(s.macDevices[t]):r?s.editItem(s.serialDevices[t]):s.editItem(s.gcmidDevices[t]))},s.controlOpenButton=function(e,t){return e?(s.unmanagedDisabled=!t,s.unmanagedDisabledButtonLoading=!1):(s.disabled=!t,s.disabledButtonLoading=!1)},s.isResourceValid=function(e,t){var r=!1,i=null,a=void 0;a=e?s.unmanagedSelectedButton:s.selectedButton,n.isResourceValid(t,a,r,i,s.distributorKey,e).then(function(t){return s.controlOpenButton(e,t.is_match)})},s.searchDevices=function(e,t){var r=void 0;r=e?s.unmanagedSelectedButton:s.selectedButton;var i=!1,a=null;return n.searchDevices(t,r,i,a,s.distributorKey,e).then(function(t){if(t.success){var n=t.devices;return"Serial Number"===r?(e?s.unmanagedSerialDevices=n[1]:s.serialDevices=n[1],n[0]):"MAC"===r?(e?s.unmanagedMacDevices=n[1]:s.macDevices=n[1],n[0]):(e?s.unmanagedGCMidDevices=n[1]:s.gcmidDevices=n[1],n[0])}return[]})},s.getManagedDevices=function(e,t,r){a.start();var i=n.getDevicesByDistributor(e,t,r);return i.then(function(e){return s.devices=e.devices,s.devicesNext=e.next_cursor,s.devicesPrev=e.prev_cursor,s.getFetchSuccess()},function(e){return s.getFetchFailure(e)})},s.getUnmanagedDevices=function(e,t,r){a.start();var i=n.getUnmanagedDevicesByDistributor(e,t,r);return i.then(function(e){return s.unmanagedDevices=e.devices,s.unmanagedDevicesPrev=e.prev_cursor,s.unmanagedDevicesNext=e.next_cursor,s.getFetchSuccess()},function(e){return s.getFetchFailure(e)})},s.initialize=function(){return s.distributorKey=i.getCurrentDistributorKey(),s.getManagedDevices(s.distributorKey,s.devicesPrev,s.devicesNext),s.getUnmanagedDevices(s.distributorKey,s.unmanagedDevicesPrev,s.unmanagedDevicesNext)},s.getFetchSuccess=function(){return a.complete()},s.getFetchFailure=function(e){a.complete();var t="Unable to fetch devices. Error: "+e.status+" "+e.statusText+".";return o.show("Oops...",t,"error")},s.paginateCall=function(e,t){if(e&&(t&&s.getManagedDevices(s.distributorKey,null,s.devicesNext),t||s.getUnmanagedDevices(s.distributorKey,null,s.unmanagedDevicesNext)),!e&&(t&&s.getManagedDevices(s.distributorKey,s.devicesPrev,null),!t))return s.getUnmanagedDevices(s.distributorKey,s.unmanagedDevicesPrev,null)},s}t.$inject=["$stateParams","$log","DevicesService","$state","SessionsService","ProgressBarService","sweet"],Object.defineProperty(exports,"__esModule",{value:!0}),exports.DevicesListingCtrl=t},653:function(e,exports){"use strict";function t(e,t,n,r,i){"ngInject";var a=this;return a.getAllDistributors=function(){a.loadingAllDistributors=!0;var t=e.getAllDistributors();return t.then(function(e){return a.loadingAllDistributors=!1,a.allDistributors=e})},a.addUserToDistributor=function(t,i,o,s,c){o||(o=!1);var u=o?"with":"without";s||(s=a.distributorsAsAdmin[0]);var l=r.confirm({title:"Are you sure?",textContent:i+" will be added to "+s+"\n        "+u+" administrator privileges",targetEvent:t,ok:"Of course!",cancel:"Oops, nevermind."});return r.show(l).then(function(){var t=e.addUserToDistributor(i,s,o);return t.then(function(e){return n.showSuccessToast(e.message),a.user={},c.$setPristine(),c.$setUntouched(),setTimeout(function(){return a.getUsersOfDistributor()},2e3)}),t["catch"](function(e){return n.showErrorToast(e.data.message)})})},a.makeDistributor=function(t,i,o,s){var c=r.confirm({title:"Are you sure?",textContent:"If you proceed, "+i+" will be created.",targetEvent:t,ariaLabel:"Lucky day",ok:"Yeah!",cancel:"Forget it."});return r.show(c).then(function(){var t=e.makeDistributor(i,o);return t.then(function(e){return a.distributor={},s.$setPristine(),s.$setUntouched(),n.showSuccessToast(e.message),setTimeout(function(){return a.allDistributors=a.getAllDistributors()},2e3)}),t["catch"](function(e){return n.showErrorToast(e.data.message)})})},a.getUsersOfDistributor=function(){a.loadingUsersOfDistributor=!0;var n=t.getCurrentDistributorKey(),r=e.getUsersOfDistributor(n);return r.then(function(e){return a.loadingUsersOfDistributor=!1,a.usersOfDistributor=e})},a.switchDistributor=function(e){return i.switchDistributor(e),n.showSuccessToast("Distributor "+e.name+" selected!")},a.initialize=function(){if(a.getUsersOfDistributor(),a.getAllDistributors(),a.isAdmin=t.getIsAdmin(),a.distributorsAsAdmin=t.getDistributorsAsAdmin(),a.currentDistributorName=t.getCurrentDistributorName(),a.isAdmin)return a.getAllDistributors()},a}t.$inject=["AdminService","SessionsService","ToastsService","$mdDialog","DistributorsService"],Object.defineProperty(exports,"__esModule",{value:!0}),exports.AdminCtrl=t},654:function(e,exports){"use strict";function t(e,t,n,r,i,a,o,s,c,u,l){"ngInject";var d=this;return d.onGooglePlusSignInSuccess=function(e,t){d.googlePlusSignInButtonClicked||s.start(),o.removeUserInfo();var n=o.login(t);return n.then(d.loginSuccess,d.loginFailure)},d.onGooglePlusSignInFailure=function(e,t){if(d.googlePlusSignInButtonClicked)return s.complete(),a.show("Oops...","Unable to authenticate to Google+.","error")},e.$on("event:google-plus-signin-success",d.onGooglePlusSignInSuccess),e.$on("event:google-plus-signin-failure",d.onGooglePlusSignInFailure),d.initializeSignIn=function(){return d.clientId=i.OAUTH_CLIENT_ID,d.state=i.STATE,d.googlePlusSignInButtonClicked=!1},d.initializeSignOut=function(){return o.removeUserInfo(),r(d.proceedToSignedOut,50)},d.loginSuccess=function(e){return s.complete(),n.go("distributor_selection")},d.loginFailure=function(){return s.complete(),a.show("Oops...","Unable to authenticate to Stormpath.","error")},d.proceedToSignedOut=function(){return n.go("signed_out")},d.proceedToSignIn=function(){return n.go("sign_in")},d.onClickGooglePlusSignIn=function(){return d.googlePlusSignInButtonClicked=!0,s.start()},d}t.$inject=["$scope","$log","$state","$timeout","identity","sweet","SessionsService","ProgressBarService","ProofPlayService","DevicesService","TenantsService"],Object.defineProperty(exports,"__esModule",{value:!0}),exports.AuthenticationCtrl=t},655:function(e,exports,t){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(e,t,n,r){"ngInject";var i=this;return i.currentDistributerInDistributerAdminList=function(){var e=r.getCurrentDistributorName(),t=r.getDistributorsAsAdmin();return(0,a["default"])(t,e)},i.getIdentity=function(){return{key:r.getUserKey(),email:r.getUserEmail(),admin:r.getIsAdmin(),distributor_admin:r.getDistributorsAsAdmin(),admin_of_current_distributor:i.currentDistributerInDistributerAdminList(),distributorKey:r.getCurrentDistributorKey(),distributorName:r.getCurrentDistributorName()}},i.isCurrentURLDistributorSelector=function(){var e=n.location.href.search(/distributor_selection/),t=e>=0;return t},i.initialize=function(){return i.getIdentity()},i.toggleSidenav=function(){return e("left").toggle()},i.goTo=function(n,r){if(t.go(n,{id:r}),e("left").isOpen())return e("left").close()},i.initialize(),i}r.$inject=["$mdSidenav","$state","$window","SessionsService"],Object.defineProperty(exports,"__esModule",{value:!0}),exports.AppController=void 0;var i=t(656),a=n(i);exports.AppController=r},688:function(e,exports){"use strict";function t(e,t,n){"ngInject";var r=this;return r.distributors=[],r.currentDistributor=void 0,r.loading=!0,r.initialize=function(){r.loeading=!0;var e=t.fetchAllByUser(n.getUserKey());return e.then(function(e){return r.distributors=e,1===r.distributors.length?r.selectDistributor(r.distributors[0]):r.loading=!1})},r.selectDistributor=function(e){return t.switchDistributor(e)},r}t.$inject=["$state","DistributorsService","SessionsService"],Object.defineProperty(exports,"__esModule",{value:!0}),exports.DistributorSelectorCtrl=t},689:function(e,exports){"use strict";function t(e){"ngInject";var t=this;return t.distributors=[],t}t.$inject=["$state"],Object.defineProperty(exports,"__esModule",{value:!0}),exports.DistributorsCtrl=t},690:function(e,exports){"use strict";function t(e,t,n){"ngInject";var r=this;return r.domains=[],r.initialize=function(){var e=t.fetchAllDomains();return e.then(function(e){return r.domains=e})},r.editItem=function(t){return e.go("editDomain",{domainKey:t.key})},r.deleteItem=function(e){var i=function(){var n=t["delete"](e);return n.then(function(){return r.initialize()})};return n.show({title:"Are you sure?",text:"This will permanently remove the domain from the distributor and disconnect from tenants.",type:"warning",showCancelButton:!0,confirmButtonColor:"#DD6B55",confirmButtonText:"Yes, remove the domain!",closeOnConfirm:!0},i)},r}t.$inject=["$state","DomainsService","sweet"],Object.defineProperty(exports,"__esModule",{value:!0}),exports.DomainsCtrl=t},691:function(e,exports){"use strict";function t(e,t,n,r,i,a,o,s,c){"ngInject";var u=this;if(u.currentDomain={key:void 0,name:void 0,impersonation_admin_email_address:void 0,distributor_key:void 0,active:!0},u.currentDomains=[],u.editMode=!!t.domainKey,u.editMode){var l=r.getDomainByKey(t.domainKey);l.then(function(e){return u.currentDomain=e})}else u.currentDomain.distributor_key=c.getCurrentDistributorKey();return u.onSaveDomain=function(){o.start();var e=r.save(u.currentDomain);return e.then(u.onSuccessSaveDomain,u.onFailureSaveDomain)},u.onSuccessSaveDomain=function(){return o.complete(),s.showSuccessToast("We saved your update.")},u.onFailureSaveDomain=function(t){return o.complete(),409===t.status?(e.info("Failure saving domain. Domain already exists: "+t.status+" "+t.statusText),a.show("Oops...","This domain name already exist. Please enter a unique domain name.","error")):(e.error("Failure saving domain: "+t.status+" "+t.statusText),s.showErrorToast("Oops. We were unable to save your updates at this time."))},u.editItem=function(e){return i.go("editDomain",{domainKey:e.key})},u}t.$inject=["$log","$stateParams","DistributorsService","DomainsService","$state","sweet","ProgressBarService","ToastsService","SessionsService"],Object.defineProperty(exports,"__esModule",{value:!0}),exports.DomainDetailsCtrl=t},692:function(e,exports,t){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(e,t,n,r){"ngInject";var a=this;return a.radioButtonChoices={group1:"By Device",group2:"Summarized",selection:null},a.dateTimeSelection={start:null,end:null},a.formValidity={start_date:!1,end_date:!1,locations:!1},a.tenant=t.tenant,a.no_cache=!0,a.loading=!0,a.disabled=!0,a.disabledTenant=!0,a.selected_locations=[],a.initialize=function(){return e.getAllLocations(a.tenant).then(function(e){return a.loading=!1,a.locations=e.data.locations,a.locations.length>0?a.had_some_items=!0:a.had_some_items=!1})},a.refreshLocations=function(){return a.searchText="",a.selectedItem="",a.loading=!0,a.disabled=!0,a.selected_locations=[],e.proofplayCache.removeAll(),a.initialize()},a.addToSelectedLocations=function(e){if(a.isLocationValid(e)){a.selected_locations.push(e);var t=a.locations.indexOf(e);a.locations.splice(t,1),a.searchText=""}return a.areLocationsValid(),a.isDisabled()},a.querySearch=function(t,n){return e.querySearch(t,n)},a.isRadioValid=function(e){return a.formValidity.type=e,a.isDisabled()},a.isLocationValid=function(e){return!!i(e,a.locations)&&!i(e,a.selected_locations)},a.areLocationsValid=function(){return a.formValidity.locations=a.selected_locations.length>0,a.isDisabled()},a.isStartDateValid=function(e){return a.formValidity.start_date=e instanceof Date,a.isDisabled()},a.isEndDateValid=function(e){return a.formValidity.end_date=e instanceof Date,a.isDisabled()},a.removeFromSelectedLocation=function(e){var t=a.selected_locations.indexOf(e);return a.selected_locations.splice(t,1),a.locations.push(e),a.areLocationsValid(),a.isDisabled()},a.isDisabled=function(){return a.formValidity.start_date&&a.formValidity.end_date&&a.formValidity.locations&&a.formValidity.type?(a.disabled=!1,a["final"]={start_date_unix:(0,o["default"])(a.dateTimeSelection.start).unix(),end_date_unix:(0,o["default"])(a.dateTimeSelection.end).unix(),locations:a.selected_locations,type:a.radioButtonChoices.selection}):a.disabled=!0},a.submit=function(){return"1"===a["final"].type?e.downloadCSVForMultipleLocationsByDevice(a["final"].start_date_unix,a["final"].end_date_unix,a["final"].locations,a.tenant):e.downloadCSVForMultipleLocationsSummarized(a["final"].start_date_unix,a["final"].end_date_unix,a["final"].locations,a.tenant)},a.tenants=null,a.currentTenant=a.tenant,a.initialize_tenant_select=function(){return e.getAllTenants().then(function(e){return a.tenants=e.data.tenants})},a.querySearch=function(t,n){return e.querySearch(t,n)},a.isSelectionValid=function(e){return i(e,a.tenants)?a.disabledTenant=!1:a.disabledTenant=!0},a.submitTenant=function(e){return e!==a.currentTenant?(n.go("proofDetail",{tenant:e}),r.showSuccessToast("Proof of Play reporting set to "+e)):r.showErrorToast("Proof of Play reporting is already set to "+e)},a}function i(e,t){return t.indexOf(e)>=0}r.$inject=["ProofPlayService","$stateParams","$state","ToastsService"],Object.defineProperty(exports,"__esModule",{value:!0}),exports.ProofOfPlayMultiLocationCtrl=void 0;var a=t(372),o=n(a);exports.ProofOfPlayMultiLocationCtrl=r},693:function(e,exports,t){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(e,t,n,r){"ngInject";var a=this;return a.radioButtonChoices={group1:"By Date",group2:"Summarized",selection:null},a.dateTimeSelection={start:null,end:null},a.formValidity={start_date:!1,end_date:!1,displays:!1},a.tenant=t.tenant,a.no_cache=!0,a.loading=!0,a.disabled=!0,a.disabledTenant=!0,a.selected_displays=[],a.initialize=function(){return e.getAllDisplays(a.tenant).then(function(e){return a.loading=!1,a.displays=e.data.devices,a.displays.length>0?a.had_some_items=!0:a.had_some_items=!1})},a.refreshDisplays=function(){return a.searchText="",a.selectedItem="",a.loading=!0,a.disabled=!0,
a.selected_displays=[],e.proofplayCache.removeAll(),a.initialize()},a.addToSelectedDisplays=function(e){if(a.isDisplayValid(e)){a.selected_displays.push(e);var t=a.displays.indexOf(e);a.displays.splice(t,1),a.searchText=""}return a.areDisplaysValid(),a.isDisabled()},a.querySearch=function(t,n){return e.querySearch(t,n)},a.isRadioValid=function(e){return a.formValidity.type=e,a.isDisabled()},a.isDisplayValid=function(e){return!!i(e,a.displays)&&!i(e,a.selected_displays)},a.areDisplaysValid=function(){return a.formValidity.displays=a.selected_displays.length>0,a.isDisabled()},a.isStartDateValid=function(e){return a.formValidity.start_date=e instanceof Date,a.isDisabled()},a.isEndDateValid=function(e){return a.formValidity.end_date=e instanceof Date,a.isDisabled()},a.removeFromSelectedDisplay=function(e){var t=a.selected_displays.indexOf(e);return a.selected_displays.splice(t,1),a.displays.push(e),a.areDisplaysValid(),a.isDisabled()},a.isDisabled=function(){return a.formValidity.start_date&&a.formValidity.end_date&&a.formValidity.displays&&a.formValidity.type?(a.disabled=!1,a["final"]={start_date_unix:(0,o["default"])(a.dateTimeSelection.start).unix(),end_date_unix:(0,o["default"])(a.dateTimeSelection.end).unix(),displays:a.selected_displays,type:a.radioButtonChoices.selection}):a.disabled=!0},a.submit=function(){return"1"===a["final"].type?e.downloadCSVForMultipleDevicesByDate(a["final"].start_date_unix,a["final"].end_date_unix,a["final"].displays,a.tenant):e.downloadCSVForMultipleDevicesSummarized(a["final"].start_date_unix,a["final"].end_date_unix,a["final"].displays,a.tenant)},a.tenants=null,a.currentTenant=a.tenant,a.initialize_tenant_select=function(){return e.getAllTenants().then(function(e){return a.tenants=e.data.tenants})},a.submitTenant=function(e){return e!==a.currentTenant?(n.go("proofDetail",{tenant:e}),r.showSuccessToast("Proof of Play reporting set to "+e)):r.showErrorToast("Proof of Play reporting is already set to "+e)},a.querySearch=function(t,n){return e.querySearch(t,n)},a.isSelectionValid=function(e){return i(e,a.tenants)?a.disabledTenant=!1:a.disabledTenant=!0},a}function i(e,t){return t.indexOf(e)>=0}r.$inject=["ProofPlayService","$stateParams","$state","ToastsService"],Object.defineProperty(exports,"__esModule",{value:!0}),exports.ProofOfPlayMultiDisplayCtrl=void 0;var a=t(372),o=n(a);exports.ProofOfPlayMultiDisplayCtrl=r},694:function(e,exports,t){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(e,t,n,r){"ngInject";var a=this;return a.radioButtonChoices={group1:"By Device",group2:"By Date",selection:null},a.dateTimeSelection={start:null,end:null},a.formValidity={start_date:!1,end_date:!1,resources:!1},a.tenant=t.tenant,a.no_cache=!0,a.loading=!0,a.disabled=!0,a.disabledTenant=!0,a.selected_resources=[],a.initialize=function(){return e.getAllResources(a.tenant).then(function(e){a.loading=!1,a.full_resource_map=e.data.resources,a.resources=[];for(var t=0;t<e.data.resources.length;t++){var n=e.data.resources[t];a.resources.push(n.resource_name)}return a.resources.length>0?a.had_some_items=!0:a.had_some_items=!1})},a.refreshResources=function(){return a.searchText="",a.selectedItem="",a.loading=!0,a.disabled=!0,a.selected_resources=[],e.proofplayCache.removeAll(),a.initialize()},a.addToSelectedResources=function(e){if(a.isResourceValid(e)){a.selected_resources.push(e);var t=a.resources.indexOf(e);a.resources.splice(t,1),a.searchText=""}return a.areResourcesValid(),a.isDisabled()},a.querySearch=function(t,n){return e.querySearch(t,n)},a.isRadioValid=function(e){return a.formValidity.type=e,a.isDisabled()},a.isResourceValid=function(e){return!!i(e,a.resources)&&!i(e,a.selected_resources)},a.areResourcesValid=function(){return a.formValidity.resources=a.selected_resources.length>0,a.isDisabled()},a.isStartDateValid=function(e){return a.formValidity.start_date=e instanceof Date,a.isDisabled()},a.isEndDateValid=function(e){return a.formValidity.end_date=e instanceof Date,a.isDisabled()},a.removeFromSelectedResource=function(e){var t=a.selected_resources.indexOf(e);return a.selected_resources.splice(t,1),a.resources.push(e),a.areResourcesValid(),a.isDisabled()},a.isDisabled=function(){return a.formValidity.start_date&&a.formValidity.end_date&&a.formValidity.resources&&a.formValidity.type?(a.disabled=!1,a["final"]={start_date_unix:(0,o["default"])(a.dateTimeSelection.start).unix(),end_date_unix:(0,o["default"])(a.dateTimeSelection.end).unix(),resources:a.selected_resources,type:a.radioButtonChoices.selection}):a.disabled=!0},a.submit=function(){for(var t=[],n=0;n<a["final"].resources.length;n++)for(var r=a["final"].resources[n],i=0;i<a.full_resource_map.length;i++){var o=a.full_resource_map[i];o.resource_name===r&&t.push(o.resource_identifier)}return"1"===a["final"].type?e.downloadCSVForMultipleResourcesByDevice(a["final"].start_date_unix,a["final"].end_date_unix,t,a.tenant):e.downloadCSVForMultipleResourcesByDate(a["final"].start_date_unix,a["final"].end_date_unix,t,a.tenant)},a.tenants=null,a.currentTenant=a.tenant,a.initialize_tenant_select=function(){return e.getAllTenants().then(function(e){return a.tenants=e.data.tenants})},a.querySearch=function(t,n){return e.querySearch(t,n)},a.isSelectionValid=function(e){return i(e,a.tenants)?a.disabledTenant=!1:a.disabledTenant=!0},a.submitTenant=function(e){return e!==a.currentTenant?(n.go("proofDetail",{tenant:e}),r.showSuccessToast("Proof of Play reporting set to "+e)):r.showErrorToast("Proof of Play reporting is already set to "+e)},a}function i(e,t){return t.indexOf(e)>=0}r.$inject=["ProofPlayService","$stateParams","$state","ToastsService"],Object.defineProperty(exports,"__esModule",{value:!0}),exports.ProofOfPlayMultiResourceCtrl=void 0;var a=t(372),o=n(a);exports.ProofOfPlayMultiResourceCtrl=r},695:function(e,exports){"use strict";function t(e,t,r,i){"ngInject";var a=this;return a.resource={title:"Resource Report"},a.location={title:"Location Report"},a.display={title:"Display Report"},a.chosen_tenant=null,a.tenants=null,a.disabled=!0,a.initialize=function(){return e.getAllTenants().then(function(e){return a.tenants=e.data.tenants})},a.querySearch=function(t,n){return e.querySearch(t,n)},a.isSelectionValid=function(e){return n(e,a.tenants)?a.disabled=!1:a.disabled=!0},a.submitTenant=function(e){if(e)return a.chosen_tenant=e,r.go("proofDetail",{tenant:a.chosen_tenant})},a.refreshTenants=function(){a.tenants=null;var t=e.makeHTTPURL("/retrieve_my_tenants","");return e.proofplayCache.remove(t),a.initialize()},a}function n(e,t){return t.indexOf(e)>=0}t.$inject=["ProofPlayService","$stateParams","$state","ToastsService"],Object.defineProperty(exports,"__esModule",{value:!0}),exports.ProofOfPlayCtrl=t},696:function(e,exports,t){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(exports,"__esModule",{value:!0});var r=t(697),i=n(r),a=t(698),o=n(a),s=function(){function e(t){"ngInject";(0,i["default"])(this,e),this.Restangular=t,this.USER_SERVICE="users",this.DISTRIBUTOR_SERVICE="distributors"}return e.$inject=["Restangular"],(0,o["default"])(e,[{key:"makeDistributor",value:function(e,t){var n={distributor:e,admin_email:t},r=this.Restangular.oneUrl(this.DISTRIBUTOR_SERVICE,"/api/v1/distributors").customPOST(n);return r}},{key:"addUserToDistributor",value:function(e,t,n){var r={user_email:e,distributor:t,distributor_admin:n},i=this.Restangular.oneUrl(this.USER_SERVICE,"/api/v1/users").customPOST(r);return i}},{key:"getUsersOfDistributor",value:function(e){var t=this.Restangular.oneUrl(this.DISTRIBUTOR_SERVICE,"/api/v1/analytics/distributors/"+e+"/users").get();return t}},{key:"getAllDistributors",value:function(){var e=this.Restangular.oneUrl(this.DISTRIBUTOR_SERVICE,"/api/v1/distributors").get();return e}}]),e}();exports["default"]=s},702:function(e,exports,t){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(exports,"__esModule",{value:!0});var r=t(697),i=n(r),a=t(698),o=n(a),s=function(){function e(t,n){"ngInject";(0,i["default"])(this,e),this.$q=n,this.SessionsService=t}return e.$inject=["SessionsService","$q"],(0,o["default"])(e,[{key:"authenticated",value:function(){var e=this.$q.defer(),t=this.SessionsService.getUserKey();return t?e.resolve(!0):e.reject(["authError","sign_in"]),e.promise}},{key:"notAuthenticated",value:function(){var e=this.$q.defer(),t=this.SessionsService.getUserKey();return t?e.reject(["authError","home"]):e.resolve(!0),e.promise}},{key:"isAdminOrDistributorAdmin",value:function(){var e=this.$q.defer(),t=this.SessionsService.getIsAdmin(),n=this.SessionsService.getDistributorsAsAdmin(),r=!1;n&&n.length>0&&(r=!0);var i=this.SessionsService.getUserKey();return i?t||r?e.resolve(!0):e.reject(["authError","home"]):e.reject("sign_in"),e.promise}}]),e}();exports["default"]=s},703:function(e,exports,t){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(exports,"__esModule",{value:!0});var r=t(697),i=n(r),a=t(698),o=n(a),s=function(){function e(t){"ngInject";(0,i["default"])(this,e),this.Restangular=t,this.SERVICE_NAME="devices"}return e.$inject=["Restangular"],(0,o["default"])(e,[{key:"panelSleep",value:function(e,t){var n={panelSleep:t},r=this.Restangular.oneUrl(this.SERVICE_NAME,"api/v1/devices/"+e+"/panel-sleep").customPUT(n);return r}},{key:"reset",value:function(e){var t=this.Restangular.oneUrl(this.SERVICE_NAME,"api/v1/devices/"+e+"/commands/reset").post();return t}},{key:"contentDelete",value:function(e){var t=this.Restangular.oneUrl(this.SERVICE_NAME,"api/v1/devices/"+e+"/commands/content-delete").post();return t}},{key:"contentUpdate",value:function(e){var t=this.Restangular.oneUrl(this.SERVICE_NAME,"api/v1/devices/"+e+"/commands/content-update").post();return t}},{key:"updateDevice",value:function(e){var t=this.Restangular.oneUrl(this.SERVICE_NAME,"api/v1/devices/"+e+"/commands/refresh-device-representation").post();return t}},{key:"toggleDiagnostics",value:function(e){var t=this.Restangular.oneUrl(this.SERVICE_NAME,"api/v1/devices/"+e+"/commands/diagnostics").post();return t}},{key:"restart",value:function(e){var t=this.Restangular.oneUrl(this.SERVICE_NAME,"api/v1/devices/"+e+"/commands/restart").post();return t}},{key:"postLog",value:function(e){var t=this.Restangular.oneUrl(this.SERVICE_NAME,"api/v1/devices/"+e+"/commands/post-log").post();return t}},{key:"powerOn",value:function(e){var t=this.Restangular.oneUrl(this.SERVICE_NAME,"api/v1/devices/"+e+"/commands/power-on").post();return t}},{key:"powerOff",value:function(e){var t=this.Restangular.oneUrl(this.SERVICE_NAME,"api/v1/devices/"+e+"/commands/power-off").post();return t}},{key:"volume",value:function(e,t){var n={volume:t},r=this.Restangular.oneUrl(this.SERVICE_NAME,"api/v1/devices/"+e).customPOST(n,"commands/volume");return r}},{key:"custom",value:function(e,t){var n={command:t},r=this.Restangular.oneUrl(this.SERVICE_NAME,"api/v1/devices/"+e).customPOST(n,"commands/custom");return r}}]),e}();exports["default"]=s},704:function(e,exports,t){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(exports,"__esModule",{value:!0});var r=t(697),i=n(r),a=t(698),o=n(a),s=t(372),c=n(s),u=function(){function e(){(0,i["default"])(this,e)}return(0,o["default"])(e,[{key:"convertToMomentIfNotAlready",value:function(e){return c["default"].isMoment(e)?e:(0,c["default"])(new Date(e))}},{key:"createFormattedStartAndEndDateFromToday",value:function(e){var t=(0,c["default"])().format("YYYY-MM-DD"),n=(0,c["default"])(t,"YYYY-MM-DD").format("YYYY-MM-DD hh:mm A"),r=(0,c["default"])(n,"YYYY-MM-DD hh:mm A").add(1,"day").subtract(60,"seconds").format("YYYY-MM-DD hh:mm A"),i=(0,c["default"])().subtract(30,"days").format("YYYY-MM-DD"),a=(0,c["default"])(i,"YYYY-MM-DD").format("YYYY-MM-DD hh:mm A");return[a,r]}},{key:"generateLocalFromUTC",value:function(e){var t=c["default"].utc(e).toDate();return(0,c["default"])(t).format("YYYY-MM-DD hh:mm:ss A")}}]),e}();exports["default"]=u},705:function(e,exports,t){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(exports,"__esModule",{value:!0});var r=t(697),i=n(r),a=t(698),o=n(a);t(598);var s=function(){function e(t,n,r,a,o){"ngInject";(0,i["default"])(this,e),this.$log=t,this.Restangular=n,this.$q=r,this.$http=a,this.$state=o,this.SERVICE_NAME="devices",this.uriBase="v1/devices"}return e.$inject=["$log","Restangular","$q","$http","$state"],(0,o["default"])(e,[{key:"getDeviceByMacAddress",value:function(e){var t="api/v1/devices?mac_address="+e;return this.Restangular.oneUrl("api/v1/devices",t).get()}},{key:"getDeviceByKey",value:function(e){var t="api/v1/devices/"+e,n=this.Restangular.oneUrl(this.SERVICE_NAME,t).get();return n}},{key:"retriveFilteredDictionaryValue",value:function(e,t){for(var n=[],r=0;r<e.length;r++){var i=e[r];n.push(i[t])}return n}},{key:"executeSearchingPartialSerialByTenant",value:function(e,t,n){var r=this;return this.searchDevicesByPartialSerialByTenant(e,t,n).then(function(e){var t=e.matches,n=!1,i=!1,a=r.convertDevicesArrayToDictionaryObj(t,n,i),o=r.retriveFilteredDictionaryValue(t,"serial");return[o,a]})}},{key:"executeSearchingPartialSerialByDistributor",value:function(e,t,n){var r=this;return this.searchDevicesByPartialSerial(e,t,n).then(function(e){var t=e.matches,i=void 0,a=!1,o=!1;i=n?r.convertDevicesArrayToDictionaryObj(t,a,o):r.convertDevicesArrayToDictionaryObj(t,a,o);var s=r.retriveFilteredDictionaryValue(t,"serial");return[s,i]})}},{key:"executeSearchingPartialMacByTenant",value:function(e,t,n){var r=this;return this.searchDevicesByPartialMacByTenant(e,t,n).then(function(e){var t=e.matches,n=r.convertDevicesArrayToDictionaryObj(t,!0),i=r.retriveFilteredDictionaryValue(t,"mac");return[i,n]})}},{key:"executeSearchingPartialMacByDistributor",value:function(e,t,n){var r=this;return this.searchDevicesByPartialMac(e,t,n).then(function(e){var t=e.matches,i=void 0,a=!0,o=!1;i=n?r.convertDevicesArrayToDictionaryObj(t,a,o):r.convertDevicesArrayToDictionaryObj(t,a,o);var s=r.retriveFilteredDictionaryValue(t,"mac");return[s,i]})}},{key:"executeSearchingPartialGCMidByTenant",value:function(e,t,n){var r=this;return this.searchDistributorDevicesByPartialGCMidByTenant(e,t,n).then(function(e){var t=e.matches,n=r.convertDevicesArrayToDictionaryObj(t,!1,!0),i=r.retriveFilteredDictionaryValue(t,"gcmid");return[i,n]})}},{key:"executeSearchingPartialGCMidByDistributor",value:function(e,t,n){var r=this;return this.searchDistributorDevicesByPartialGCMid(e,t,n).then(function(e){var t=e.matches,i=void 0;i=n?r.convertDevicesArrayToDictionaryObj(t,!1,!0):r.convertDevicesArrayToDictionaryObj(t,!1,!0);var a=r.retriveFilteredDictionaryValue(t,"gcmid");return[a,i]})}},{key:"rejectedPromise",value:function(){var e=this.$q.defer();return e.reject(),e.promise}},{key:"searchDevices",value:function(e,t,n,r,i,a){var o=this.$q.defer(),s=void 0;return s=e&&e.length>2?"Serial Number"===t?n?this.executeSearchingPartialSerialByTenant(r,e,a):this.executeSearchingPartialSerialByDistributor(i,e,a):"MAC"===t?n?this.executeSearchingPartialMacByTenant(r,e,a):this.executeSearchingPartialMacByDistributor(i,e,a):n?this.executeSearchingPartialGCMidByTenant(r,e,a):this.executeSearchingPartialGCMidByDistributor(i,e,a):this.rejectedPromise(),s.then(function(e){o.resolve({success:!0,devices:e})}),s["catch"](function(e){o.resolve({success:!1,devices:[]})}),o.promise}},{key:"isResourceValid",value:function(e,t,n,r,i,a){var o=void 0,s=void 0,c=void 0,u=this.$q.defer();return e&&e.length>2?(o="MAC"===t,s="Serial Number"===t,c="GCM ID"===t,n?o?u.resolve(this.matchDevicesByFullMacByTenant(r,e,a)):s?u.resolve(this.matchDevicesByFullSerialByTenant(r,e,a)):u.resolve(this.matchDevicesByFullGCMidByTenant(r,e,a)):o?u.resolve(this.matchDevicesByFullMac(i,e,a)):s?u.resolve(this.matchDevicesByFullSerial(i,e,a)):u.resolve(this.matchDevicesByFullGCMid(i,e,a))):u.resolve({is_match:!1}),u.promise}},{key:"convertDevicesArrayToDictionaryObj",value:function(e,t,n){for(var r={},i=0;i<e.length;i++){var a=e[i];t?r[a.mac]=a:n?r[a.gcmid]=a:r[a.serial]=a}return r}},{key:"editItem",value:function(e,t){t||(t=!1),this.$state.go("editDevice",{deviceKey:e.key,tenantKey:e.tenantKey,fromDevices:t})}},{key:"preprateForEditView",value:function(e,t,n,r,i,a){var o=void 0,s=void 0,c=void 0;return o="MAC"===e,s="Serial Number"===e,c="GCM ID"===e,o?this.editItem(r[n]):s?this.editItem(i[n]):this.editItem(a[n])}},{key:"getIssuesByKey",value:function(e,t,n,r,i){r=void 0===r?null:r,i=void 0===i?null:i;var a="/api/v1/devices/"+r+"/"+i+"/"+e+"/issues?start="+t+"&end="+n,o=this.Restangular.oneUrl(this.SERVICE_NAME,a).get();return o}},{key:"getCommandEventsByKey",value:function(e,t,n){t=void 0===t?null:t,n=void 0===n?null:n;var r="/api/v1/player-command-events/"+t+"/"+n+"/"+e,i=this.Restangular.oneUrl(this.SERVICE_NAME,r).get();return i}},{key:"getDevicesByTenant",value:function(e,t,n){if(void 0!==e){var r=this.makeDevicesByTenantURL(e,t,n,!1);return this.Restangular.oneUrl(this.SERVICE_NAME,r).get()}}},{key:"getUnmanagedDevicesByTenant",value:function(e,t,n){if(void 0!==e){var r=(this.$q.defer(),this.makeDevicesByTenantURL(e,t,n,!0));return this.Restangular.oneUrl(this.SERVICE_NAME,r).get()}}},{key:"searchDevicesByPartialSerialByTenant",value:function(e,t,n){if(void 0!==e){var r="/api/v1/tenants/search/"+e+"/devices?unmanaged="+n+"&partial_serial="+t,i=this.Restangular.oneUrl(this.SERVICE_NAME,r).get();return i}}},{key:"searchDevicesByPartialMacByTenant",value:function(e,t,n){if(void 0!==e){var r="/api/v1/tenants/search/"+e+"/devices?unmanaged="+n+"&partial_mac="+t,i=this.Restangular.oneUrl(this.SERVICE_NAME,r).get();return i}}},{key:"searchDistributorDevicesByPartialGCMidByTenant",value:function(e,t,n){if(void 0!==e){var r="/api/v1/tenants/search/"+e+"/devices?unmanaged="+n+"&partial_gcmid="+t,i=this.Restangular.oneUrl(this.SERVICE_NAME,r).get();return i}}},{key:"matchDevicesByFullSerialByTenant",value:function(e,t,n){if(void 0!==e){var r="/api/v1/tenants/match/"+e+"/devices?unmanaged="+n+"&full_serial="+t,i=this.Restangular.oneUrl(this.SERVICE_NAME,r).get();return i}}},{key:"matchDevicesByFullMacByTenant",value:function(e,t,n){if(void 0!==e){var r="/api/v1/tenants/match/"+e+"/devices?unmanaged="+n+"&full_mac="+t,i=this.Restangular.oneUrl(this.SERVICE_NAME,r).get();return i}}},{key:"matchDevicesByFullGCMidByTenant",value:function(e,t,n){if(void 0!==e){var r="/api/v1/tenants/match/"+e+"/devices?unmanaged="+n+"&full_gcmid="+t,i=this.Restangular.oneUrl(this.SERVICE_NAME,r).get();return i}}},{key:"searchDevicesByPartialSerial",value:function(e,t,n){if(void 0!==e){var r="/api/v1/distributors/search/"+e+"/devices?unmanaged="+n+"&partial_serial="+t,i=this.Restangular.oneUrl(this.SERVICE_NAME,r).get();return i}}},{key:"searchDevicesByPartialMac",value:function(e,t,n){if(void 0!==e){var r="/api/v1/distributors/search/"+e+"/devices?unmanaged="+n+"&partial_mac="+t,i=this.Restangular.oneUrl(this.SERVICE_NAME,r).get();return i}}},{key:"searchDistributorDevicesByPartialGCMid",value:function(e,t,n){if(void 0!==e){var r="/api/v1/distributors/search/"+e+"/devices?unmanaged="+n+"&partial_gcmid="+t,i=this.Restangular.oneUrl(this.SERVICE_NAME,r).get();return i}}},{key:"matchDevicesByFullSerial",value:function(e,t,n){if(void 0!==e){var r="/api/v1/distributors/match/"+e+"/devices?unmanaged="+n+"&full_serial="+t,i=this.Restangular.oneUrl(this.SERVICE_NAME,r).get();return i}}},{key:"matchDevicesByFullMac",value:function(e,t,n){if(void 0!==e){var r="/api/v1/distributors/match/"+e+"/devices?unmanaged="+n+"&full_mac="+t,i=this.Restangular.oneUrl(this.SERVICE_NAME,r).get();return i}}},{key:"matchDevicesByFullGCMid",value:function(e,t,n){if(void 0!==e){var r="/api/v1/distributors/match/"+e+"/devices?unmanaged="+n+"&full_gcmid="+t,i=this.Restangular.oneUrl(this.SERVICE_NAME,r).get();return i}}},{key:"getDevicesByDistributor",value:function(e,t,n){if(void 0!==e){var r=this.makeDevicesByDistributorURL(e,t,n,!1);return this.Restangular.oneUrl(this.SERVICE_NAME,r).get()}}},{key:"getUnmanagedDevicesByDistributor",value:function(e,t,n){if(void 0!==e){var r=this.makeDevicesByDistributorURL(e,t,n,!0);return this.Restangular.oneUrl(this.SERVICE_NAME,r).get()}}},{key:"getDevices",value:function(){var e=this.Restangular.all(this.SERVICE_NAME).getList();return e}},{key:"save",value:function(e){if(void 0!==e.key)var t=e.put();else var t=this.Restangular.service("devices").post(e);return t}},{key:"delete",value:function(e){var t=this.Restangular.one(this.SERVICE_NAME,e).remove();return t}},{key:"getPanelModels",value:function(){return[{id:"None",displayName:"None"},{id:"Sony-FXD40LX2F",displayName:"Sony FXD40LX2F"},{id:"NEC-LCD4215",displayName:"NEC LCD4215"},{id:"Phillips-BDL5560EL",displayName:"Phillips BDL5560EL"},{id:"Panasonic-TH55LF6U",displayName:"Panasonic TH55LF6U"},{id:"Sharp-PNE521",displayName:"Sharp PNE521"}]}},{key:"getPanelInputs",value:function(){return[{id:"None",parentId:"None"},{id:"HDMI1",parentId:"Sony-FXD40LX2F"},{id:"HDMI2",parentId:"Sony-FXD40LX2F"},{id:"HDMI1",parentId:"Phillips-BDL5560EL"},{id:"HDMI2",parentId:"Phillips-BDL5560EL"},{id:"DVI",parentId:"Phillips-BDL5560EL"},{id:"HDMI1",parentId:"Panasonic-TH55LF6U"},{id:"HDMI2",parentId:"Panasonic-TH55LF6U"},{id:"DVI",parentId:"Panasonic-TH55LF6U"},{id:"HDMI1",parentId:"Sharp-PNE521"},{id:"HDMI2",parentId:"Sharp-PNE521"},{id:"DVI",parentId:"Sharp-PNE521"},{id:"VGA",parentId:"NEC-LCD4215"},{id:"DVI1",parentId:"NEC-LCD4215"}]}},{key:"makeDevicesByDistributorURL",value:function(e,t,n,r){var i="/api/v1/distributors/"+e+"/devices?unmanaged="+r+"&next_cursor="+n+"&prev_cursor="+t;return i}},{key:"makeDevicesByTenantURL",value:function(e,t,n,r){var i="/api/v1/tenants/"+e+"/devices?unmanaged="+r+"&next_cursor="+n+"&prev_cursor="+t;return i}}]),e}();exports["default"]=s},706:function(e,exports,t){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(exports,"__esModule",{value:!0});var r=t(697),i=n(r),a=t(698),o=n(a),s=function(){function e(t,n,r){"ngInject";(0,i["default"])(this,e),this.Restangular=t,this.$state=n,this.SessionsService=r,this.DISTRIBUTOR_SERVICE="distributors"}return e.$inject=["Restangular","$state","SessionsService"],(0,o["default"])(e,[{key:"save",value:function(e){if(void 0!==e.key)var t=e.put();else var t=this.Restangular.service(this.DISTRIBUTOR_SERVICE).post(e);return t}},{key:"fetchAll",value:function(){var e=this.Restangular.all(this.DISTRIBUTOR_SERVICE).getList();return e}},{key:"fetchAllByUser",value:function(e){if(e){var t=this.Restangular.one("users",e).doGET(this.DISTRIBUTOR_SERVICE);return t}}},{key:"getByKey",value:function(e){var t=this.Restangular.oneUrl(this.DISTRIBUTOR_SERVICE,"api/v1/distributors/"+e).get();return t}},{key:"delete",value:function(e){if(e.key){var t=this.Restangular.one(this.DISTRIBUTOR_SERVICE,e.key).remove();return t}}},{key:"getByName",value:function(e){var t=this.Restangular.all(this.DISTRIBUTOR_SERVICE).getList({distributorName:e});return t}},{key:"getDomainsByKey",value:function(e){var t=this.Restangular.oneUrl(this.DISTRIBUTOR_SERVICE,"api/v1/distributors/"+e+"/domains").get();return t}},{key:"switchDistributor",value:function(e){return this.SessionsService.setCurrentDistributorName(e.name),this.SessionsService.setCurrentDistributorKey(e.key),this.$state.go("welcome")}}]),e}();exports["default"]=s},707:function(e,exports,t){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(exports,"__esModule",{value:!0});var r=t(697),i=n(r),a=t(698),o=n(a),s=function(){function e(t){"ngInject";(0,i["default"])(this,e),this.Restangular=t}return e.$inject=["Restangular"],(0,o["default"])(e,[{key:"save",value:function(e){if(void 0!==e.key)var t=e.put();else var t=this.Restangular.service("domains").post(e);return t}},{key:"fetchAllDomains",value:function(){var e=this.Restangular.all("domains").getList();return e}},{key:"getDomainByKey",value:function(e){var t=this.Restangular.oneUrl("domains","api/v1/domains/"+e).get();return t}},{key:"delete",value:function(e){if(void 0!==e.key){var t=this.Restangular.one("domains",e.key).remove();return t}}}]),e}();exports["default"]=s},708:function(e,exports,t){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(exports,"__esModule",{value:!0});var r=t(697),i=n(r),a=t(698),o=n(a),s=function(){function e(t){"ngInject";(0,i["default"])(this,e),this.Restangular=t}return e.$inject=["Restangular"],(0,o["default"])(e,[{key:"getIdentity",value:function(){return this.Restangular.oneUrl("identity").get()}}]),e}();exports["default"]=s},709:function(e,exports,t){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(exports,"__esModule",{value:!0});var r=t(697),i=n(r),a=t(698),o=n(a),s=function(){function e(t){"ngInject";(0,i["default"])(this,e),this.Restangular=t,this.ENROLLMENT_EVENTS="integration_events/enrollment"}return e.$inject=["Restangular"],(0,o["default"])(e,[{key:"getEnrollmentEvents",value:function(e){var t={deviceKey:e};return this.Restangular.all(this.ENROLLMENT_EVENTS).customGET("",t)}}]),e}();exports["default"]=s},710:function(e,exports,t){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(exports,"__esModule",{value:!0});var r=t(697),i=n(r),a=t(698),o=n(a),s=function(){function e(t){"ngInject";(0,i["default"])(this,e),this.Restangular=t}return e.$inject=["Restangular"],(0,o["default"])(e,[{key:"save",value:function(e){if(void 0!==e.key)var t=e.put();else var t=this.Restangular.service("locations").post(e);return t}},{key:"getLocationsByTenantKey",value:function(e){var t=this.Restangular.oneUrl("tenants","api/v1/tenants/"+e+"/locations").get();return t}},{key:"getLocationsByTenantKeyPaginated",value:function(e,t,n){t=void 0===t?null:t,n=void 0===n?null:n;var r=this.Restangular.oneUrl("tenants","api/v1/tenants/"+e+"/"+t+"/"+n+"/locations").get();return r}},{key:"getLocationByKey",value:function(e){var t=this.Restangular.oneUrl("locations","api/v1/locations/"+e).get();return t}}]),e}();exports["default"]=s},711:function(e,exports,t){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(exports,"__esModule",{value:!0});var r=t(697),i=n(r),a=t(698),o=n(a),s=function(){function e(t){"ngInject";(0,i["default"])(this,e),this.ngProgressFactory=t,this.progressBar=this.ngProgressFactory.createInstance()}return e.$inject=["ngProgressFactory"],(0,o["default"])(e,[{key:"start",value:function(){return this.progressBar.setColor("#00FCFF"),this.progressBar.setHeight("4px"),this.progressBar.start()}},{key:"complete",value:function(){return this.progressBar.complete()}}]),e}();exports["default"]=s},712:function(e,exports,t){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(exports,"__esModule",{value:!0});var r=t(697),i=n(r),a=t(698),o=n(a),s=function(){function e(t,n,r,a,o,s,c){"ngInject";(0,i["default"])(this,e),this.$http=t,this.$q=n,this.$window=r,this.SessionsService=a,this.$stateParams=o,this.$state=s,this.ToastsService=c,this.makeHTTPRequest=this.makeHTTPRequest.bind(this),this.uriBase="proofplay/api/v1"}return e.$inject=["$http","$q","$window","SessionsService","$stateParams","$state","ToastsService"],(0,o["default"])(e,[{key:"makeHTTPURL",value:function(e,t){return this.uriBase+e+t}},{key:"makeHTTPRequest",value:function(e,t){var n=(this.$q.defer(),this.makeHTTPURL(e,t));return this.$http.get(n)}},{key:"getAllResources",value:function(e){var t=this.makeHTTPRequest("/retrieve_all_resources/",e);return t["catch"](function(e,t){var n=e.status;if(403===n&&(this.ToastsService.showErrorToast("You are not allowed to view this tenant!"),this.$state.go("proof",{})),404===n)return this.ToastsService.showErrorToast("You must select a tenant first!"),this.$state.go("proof",{})}),t.then(function(e){return e})}},{key:"getAllDisplays",value:function(e){return this.makeHTTPRequest("/retrieve_all_displays/",e)}},{key:"getAllLocations",value:function(e){return this.makeHTTPRequest("/retrieve_all_locations/",e)}},{key:"getAllTenants",value:function(){return this.makeHTTPRequest("/retrieve_my_tenants","")}},{key:"downloadCSVForMultipleResourcesByDate",value:function(e,t,n,r){for(var i="",a=0;a<n.length;a++){var o=n[a];i=i+"|"+o}return this.$window.open(this.uriBase+"/multi_resource_by_date/"+e+"/"+t+"/"+i+"/"+r+"/"+this.SessionsService.getCurrentDistributorKey(),"_blank"),!0}},{key:"downloadCSVForMultipleResourcesByDevice",value:function(e,t,n,r){for(var i="",a=0;a<n.length;a++){var o=n[a];i=i+"|"+o}return this.$window.open(this.uriBase+"/multi_resource_by_device/"+e+"/"+t+"/"+i+"/"+r+"/"+this.SessionsService.getCurrentDistributorKey(),"_blank"),!0}},{key:"downloadCSVForMultipleDevicesSummarized",value:function(e,t,n,r){for(var i="",a=0;a<n.length;a++){var o=n[a];i=i+"|"+o}return this.$window.open(this.uriBase+"/multi_device_summarized/"+e+"/"+t+"/"+i+"/"+r+"/"+this.SessionsService.getCurrentDistributorKey(),"_blank"),!0}},{key:"downloadCSVForMultipleDevicesByDate",value:function(e,t,n,r){for(var i="",a=0;a<n.length;a++){var o=n[a];i=i+"|"+o}return this.$window.open(this.uriBase+"/multi_device_by_date/"+e+"/"+t+"/"+i+"/"+r+"/"+this.SessionsService.getCurrentDistributorKey(),"_blank"),!0}},{key:"downloadCSVForMultipleLocationsByDevice",value:function(e,t,n,r){for(var i="",a=0;a<n.length;a++){var o=n[a];i=i+"|"+o}return this.$window.open(this.uriBase+"/multi_location_by_device/"+e+"/"+t+"/"+i+"/"+r+"/"+this.SessionsService.getCurrentDistributorKey(),"_blank"),!0}},{key:"downloadCSVForMultipleLocationsSummarized",value:function(e,t,n,r){for(var i="",a=0;a<n.length;a++){var o=n[a];i=i+"|"+o}return this.$window.open(this.uriBase+"/multi_location_summarized/"+e+"/"+t+"/"+i+"/"+r+"/"+this.SessionsService.getCurrentDistributorKey(),"_blank"),!0}},{key:"createFilterFor",value:function(e){return e=angular.lowercase(e),function(t){return t=angular.lowercase(t),0===t.indexOf(e)}}},{key:"querySearch",value:function(e,t){return t?e.filter(this.createFilterFor(t)):e}}]),e}();exports["default"]=s},713:function(e,exports,t){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(exports,"__esModule",{value:!0});var r=t(697),i=n(r),a=t(698),o=n(a),s=function(){function e(t,n,r,a,o,s){"ngInject";(0,i["default"])(this,e),this.$http=t,this.$log=n,this.StorageService=r,this.IdentityService=a,this.Restangular=o,this.$q=s,this.setIdentity=this.setIdentity.bind(this),this.uriBase="v1/sessions"}return e.$inject=["$http","$log","StorageService","IdentityService","Restangular","$q"],(0,o["default"])(e,[{key:"setDistributors",value:function(e){return this.StorageService.set("distributors",e)}},{key:"setDistributorsAsAdmin",value:function(e){return this.StorageService.set("distributorsAsAdmin",e)}},{key:"setIsAdmin",value:function(e){return this.StorageService.set("isAdmin",e)}},{key:"setUserKey",value:function(e){return this.StorageService.set("userKey",e)}},{key:"setUserEmail",value:function(e){return this.StorageService.set("userEmail",e)}},{key:"setCurrentDistributorKey",value:function(e){return this.StorageService.set("currentDistributorKey",e)}},{key:"setCurrentDistributorName",value:function(e){return this.StorageService.set("currentDistributorName",e)}},{key:"getUserKey",value:function(){return this.StorageService.get("userKey")}},{key:"getUserEmail",value:function(){return this.StorageService.get("userEmail")}},{key:"getDistributors",value:function(){return this.StorageService.get("distributors")}},{key:"getCurrentDistributorName",value:function(){return this.StorageService.get("currentDistributorName")}},{key:"getCurrentDistributorKey",value:function(){return this.StorageService.get("currentDistributorKey")}},{key:"getDistributorsAsAdmin",value:function(){return this.StorageService.get("distributorsAsAdmin")}},{key:"getIsAdmin",value:function(){return this.StorageService.get("isAdmin")}},{key:"login",value:function(e){var t=this,n={access_token:_.clone(e.access_token),
authuser:_.clone(e.authuser),client_id:_.clone(e.client_id),code:_.clone(e.code),id_token:_.clone(e.id_token),scope:_.clone(e.scope),session_state:_.clone(e.session_state),state:_.clone(e.state),status:_.clone(e.status)};e.email&&e.password&&(n=e);var r=this.$http.post("/login",n);return r.success(function(e){return t.setUserKey(e.user.key),t.setIdentity().then(function(){return e})})}},{key:"setIdentity",value:function(){var e=this,t=this.$q.defer(),n=this.IdentityService.getIdentity();return n.then(function(n){return e.setDistributors(n.distributors),e.setDistributorsAsAdmin(n.distributors_as_admin),e.setIsAdmin(n.is_admin),e.setUserEmail(n.email),e.setIsAdmin(n.is_admin),t.resolve()}),t.promise}},{key:"removeUserInfo",value:function(){this.StorageService.removeAll()}}]),e}();exports["default"]=s},714:function(e,exports,t){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(exports,"__esModule",{value:!0});var r=t(697),i=n(r),a=t(698),o=n(a),s=t(715),c=n(s),u=function(){function e(){(0,i["default"])(this,e)}return(0,o["default"])(e,[{key:"set",value:function(e,t){return c["default"].set(e,t)}},{key:"get",value:function(e){return c["default"].get(e)}},{key:"rm",value:function(e){return c["default"].rm(e)}},{key:"removeAll",value:function(){c["default"].flush()}}]),e}();exports["default"]=u},716:function(e,exports,t){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(exports,"__esModule",{value:!0});var r=t(697),i=n(r),a=t(698),o=n(a),s=function(){function e(t,n){"ngInject";(0,i["default"])(this,e),this.Restangular=t,this.SessionsService=n}return e.$inject=["Restangular","SessionsService"],(0,o["default"])(e,[{key:"save",value:function(e){if(void 0!==e.key)var t=e.put();else var t=this.Restangular.service("tenants").post(e);return t}},{key:"searchAllTenantsByName",value:function(e){var t=this.Restangular.all("tenants").customGETLIST("",{tenant_name:e});return t}},{key:"fetchAllTenants",value:function(){var e=this.Restangular.all("tenants").getList();return e}},{key:"fetchAllTenantsPaginated",value:function(e,t){var n="api/v1/tenants/paginated/"+e+"/"+t,r=this.Restangular.oneUrl("tenants",n).get();return r}},{key:"getTenantByKey",value:function(e){var t="api/v1/tenants/"+e,n=this.Restangular.oneUrl("tenants",t).get();return n}},{key:"delete",value:function(e){if(void 0!==e.key){var t=this.Restangular.one("tenants",e.key).remove();return t}}}]),e}();exports["default"]=s},717:function(e,exports,t){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(exports,"__esModule",{value:!0});var r=t(697),i=n(r),a=t(698),o=n(a),s=function(){function e(t){"ngInject";(0,i["default"])(this,e),this.Restangular=t}return e.$inject=["Restangular"],(0,o["default"])(e,[{key:"getUsTimezones",value:function(){var e=this.Restangular.oneUrl("timezones","api/v1/timezones/us").get();return e}},{key:"getAllTimezones",value:function(){var e=this.Restangular.oneUrl("timezones","api/v1/timezones/all").get();return e}},{key:"getCustomTimezones",value:function(){var e=this.Restangular.oneUrl("timezones","api/v1/timezones/custom").get();return e}}]),e}();exports["default"]=s},718:function(e,exports,t){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(exports,"__esModule",{value:!0});var r=t(697),i=n(r),a=t(698),o=n(a),s=function(){function e(t){"ngInject";(0,i["default"])(this,e),this.toastr=t}return e.$inject=["toastr"],(0,o["default"])(e,[{key:"showSuccessToast",value:function(e){var t=arguments.length<=1||void 0===arguments[1]?"Success!":arguments[1];return this.toastr.success(e,t)}},{key:"showErrorToast",value:function(e){var t=arguments.length<=1||void 0===arguments[1]?"Error!":arguments[1];return this.toastr.error(e,t)}},{key:"showInfoToast",value:function(e){var t=arguments.length<=1||void 0===arguments[1]?"Information":arguments[1];return this.toastr.info(e,t)}}]),e}();exports["default"]=s},719:function(e,exports,t){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(exports,"__esModule",{value:!0});var r=t(697),i=n(r),a=t(698),o=n(a),s=function(){function e(t){"ngInject";(0,i["default"])(this,e),this.Restangular=t}return e.$inject=["Restangular"],(0,o["default"])(e,[{key:"getVersions",value:function(){var e=this.Restangular.oneUrl("versions").get();return e}}]),e}();exports["default"]=s},720:function(e,exports){"use strict";function t(e,t,n,r,i,a,o,s,c){"ngInject";var u=this;return u.gameStopServer=t.host().indexOf("provisioning-gamestop")>-1,u.currentTenant={key:void 0,name:void 0,tenant_code:void 0,admin_email:void 0,content_server_url:void 0,content_manager_base_url:void 0,domain_key:void 0,notification_emails:void 0,proof_of_play_logging:!1,proof_of_play_url:void 0,active:!0},u.selectedDomain=void 0,u.distributorDomains=[],u.timezones=[],u.selectedTimezone="America/Chicago",u.initialize=function(){var e=i.getCustomTimezones();e.then(function(e){return u.timezones=e}),u.currentDistributorKey=c.getCurrentDistributorKey();var t=r.getByKey(u.currentDistributorKey);t.then(function(e){return u.currentTenant.content_manager_base_url=e.content_manager_url,u.currentTenant.content_server_url=e.player_content_url});var n=r.getDomainsByKey(u.currentDistributorKey);return n.then(function(e){return u.distributorDomains=e})},u.onClickSaveButton=function(){s.start(),u.currentTenant.default_timezone=u.selectedTimezone,u.currentTenant.domain_key=u.selectedDomain.key;var e=n.save(u.currentTenant);return e.then(u.onSuccessTenantSave,u.onFailureTenantSave)},u.onSuccessTenantSave=function(){return s.complete(),a.go("tenants")},u.onFailureTenantSave=function(t){return s.complete(),409===t.status?o.show("Oops...","Tenant code unavailable. Please modify tenant name to generate a unique tenant code.","error"):(e.error(t),o.show("Oops...","Unable to save the tenant.","error"))},u.autoGenerateTenantCode=function(){if(!u.currentTenant.key){var e="";return u.currentTenant.name&&(e=u.currentTenant.name.toLowerCase(),e=e.replace(/\s+/g,"_"),e=e.replace(/\W+/g,"")),u.currentTenant.tenant_code=e}},u}t.$inject=["$log","$location","TenantsService","DistributorsService","TimezonesService","$state","sweet","ProgressBarService","SessionsService"],Object.defineProperty(exports,"__esModule",{value:!0}),exports.TenantAddCtrl=t},721:function(e,exports){"use strict";function t(e,t,n,r,i,a,o,s,c,u,l,d){"ngInject";var v=this;if(v.gameStopServer=d.host().indexOf("provisioning-gamestop")>-1,v.currentTenant={key:void 0,name:void 0,tenant_code:void 0,admin_email:void 0,content_server_url:void 0,content_manager_base_url:void 0,domain_key:void 0,notification_emails:void 0,proof_of_play_logging:!1,proof_of_play_url:void 0,active:!0},v.selectedDomain=void 0,v.distributorDomains=[],v.timezones=[],v.selectedTimezone="America/Chicago",v.editMode=!!e.tenantKey,v.editMode){var p=t.getTenantByKey(e.tenantKey);p.then(function(e){return v.currentTenant=e,v.onSuccessResolvingTenant(e)})}return v.initialize=function(){var e=r.getCustomTimezones();e.then(function(e){return v.timezones=e}),v.currentDistributorKey=u.getCurrentDistributorKey();var t=i.getDomainsByKey(v.currentDistributorKey);return t.then(function(e){return v.distributorDomains=e})},v.onSuccessResolvingTenant=function(e){v.selectedTimezone=e.default_timezone;var t=n.getDomainByKey(e.domain_key);return t.then(function(e){return v.selectedDomain=e})},v.onClickSaveButton=function(){s.start(),v.currentTenant.default_timezone=v.selectedTimezone,v.currentTenant.domain_key=v.selectedDomain.key;var e=t.save(v.currentTenant);return e.then(v.onSuccessTenantSave,v.onFailureTenantSave)},v.onSuccessTenantSave=function(){return s.complete(),c.showSuccessToast("We saved your tenant information.")},v.onFailureTenantSave=function(e){return s.complete(),409===e.status?o.show("Oops...","Tenant code unavailable. Please modify tenant name to generate a unique tenant code.","error"):o.show("Oops...","Unable to save the tenant.","error")},v.editItem=function(t){return a.go("editDevice",{deviceKey:t.key,tenantKey:e.tenantKey})},v.autoGenerateTenantCode=function(){if(!v.currentTenant.key){var e="";return v.currentTenant.name&&(e=v.currentTenant.name.toLowerCase(),e=e.replace(/\s+/g,"_"),e=e.replace(/\W+/g,"")),v.currentTenant.tenant_code=e}},l.tabIndex=0,l.$watch("tabIndex",function(t,n){if(void 0!==t)switch(t){case 0:return a.go("tenantDetails",{tenantKey:e.tenantKey});case 1:return a.go("tenantManagedDevices",{tenantKey:e.tenantKey});case 2:return a.go("tenantUnmanagedDevices",{tenantKey:e.tenantKey});case 3:return a.go("tenantLocations",{tenantKey:e.tenantKey})}}),v}t.$inject=["$stateParams","TenantsService","DomainsService","TimezonesService","DistributorsService","$state","sweet","ProgressBarService","ToastsService","SessionsService","$scope","$location"],Object.defineProperty(exports,"__esModule",{value:!0}),exports.TenantDetailsCtrl=t},722:function(e,exports){"use strict";function t(e,t,n,r,i,a,o){"ngInject";var s=this;if(s.location={key:void 0},s.tenantKey=e.tenantKey,s.editMode=!!e.locationKey,s.editMode){var c=n.getLocationByKey(e.locationKey);c.then(function(e){return s.location=e,s.tenantKey=e.tenantKey,s.locationName=e.customerLocationName,s.fetchTenantName(s.tenantKey)})}return s.initialize=function(){if(!s.editMode)return s.fetchTenantName(s.tenantKey),s.location={tenantKey:s.tenantKey,active:!0}},s.onClickSaveButton=function(){a.start();var e=n.save(s.location);return s.editMode?e.then(s.onSuccessUpdatingLocation(s.tenantKey),s.onFailureSavingLocation):e.then(s.onSuccessSavingLocation,s.onFailureSavingLocation)},s.onSuccessSavingLocation=function(){return a.complete(),o.showSuccessToast("We saved your location."),setTimeout(function(){r.go("tenantLocations",{tenantKey:e.tenantKey})},1e3)},s.onSuccessUpdatingLocation=function(e){return a.complete(),o.showSuccessToast("We updated your location."),setTimeout(function(){r.go("tenantLocations",{tenantKey:e})},1e3)},s.onFailureSavingLocation=function(e){return a.complete(),409===e.status?(o.showErrorToast("Location code conflict. Unable to save your location."),i.show("Oops...","Please change your customer location name. Location name must generate a unique location code.","error")):o.showErrorToast("Unable to save your location.")},s.fetchTenantName=function(e){var n=t.getTenantByKey(e);return n.then(function(e){return s.tenantName=e.name})},s.autoGenerateCustomerLocationCode=function(){if(!s.location.key){var e="";return s.location.customerLocationName&&(e=s.location.customerLocationName.toLowerCase(),e=e.replace(/\s+/g,"_"),e=e.replace(/\W+/g,"")),s.location.customerLocationCode=e}},s}t.$inject=["$stateParams","TenantsService","LocationsService","$state","sweet","ProgressBarService","ToastsService"],Object.defineProperty(exports,"__esModule",{value:!0}),exports.TenantLocationCtrl=t},723:function(e,exports){"use strict";function t(e,t,n,r,i,a){"ngInject";var o=this;if(o.currentTenant={key:void 0,name:void 0,tenant_code:void 0,admin_email:void 0,content_server_url:void 0,content_manager_base_url:void 0,domain_key:void 0,notification_emails:void 0,proof_of_play_logging:!1,active:!0},o.tenantDevices=[],o.devicesPrev=null,o.devicesNext=null,o.selectedButton="Serial Number",o.serialDevices={},o.disabled=!0,o.macDevices={},o.editMode=!!t.tenantKey,o.tenantKey=t.tenantKey,o.getManagedDevices=function(e,t,n){i.start();var a=r.getDevicesByTenant(e,t,n);return a.then(function(e){return o.devicesPrev=e.prev_cursor,o.devicesNext=e.next_cursor,o.tenantDevices=e.devices,i.complete()})},o.editItem=function(e){return r.editItem(e)},o.refreshDevices=function(){return o.devicesPrev=null,o.devicesNext=null,o.tenantDevices=null,o.getManagedDevices(o.tenantKey,o.devicesPrev,o.devicesNext)},o.editMode){var s=n.getTenantByKey(o.tenantKey);s.then(function(e){return o.currentTenant=e}),o.getManagedDevices(o.tenantKey,null,null)}return e.tabIndex=1,e.$watch("tabIndex",function(e,t){if(void 0!==e)switch(e){case 0:return a.go("tenantDetails",{tenantKey:o.tenantKey});case 1:return a.go("tenantManagedDevices",{tenantKey:o.tenantKey});case 2:return a.go("tenantUnmanagedDevices",{tenantKey:o.tenantKey});case 3:return a.go("tenantLocations",{tenantKey:o.tenantKey})}}),o.changeRadio=function(){return o.searchText="",o.disabled=!0,o.serialDevices={},o.macDevices={}},o.searchDevices=function(e){var t=!1,n=o.selectedButton,i=!0,a=o.tenantKey;return r.searchDevices(e,n,i,a,o.distributorKey,t).then(function(e){if(e.success){var t=e.devices;return"Serial Number"===n?(o.serialDevices=t[1],t[0]):"MAC"===n?(o.macDevices=t[1],t[0]):(o.gcmidDevices=t[1],t[0])}return[]})},o.paginateCall=function(e){return e?o.getManagedDevices(o.tenantKey,null,o.devicesNext):o.getManagedDevices(o.tenantKey,o.devicesPrev,null)},o.prepareForEditView=function(e){return r.preprateForEditView(o.selectedButton,o.tenantKey,e,o.macDevices,o.serialDevices,o.gcmidDevices)},o.controlOpenButton=function(e){return o.disabled=!e,o.loadingDisabled=!1},o.isResourceValid=function(e){var t=!1,n=!0;return r.isResourceValid(e,o.selectedButton,n,o.tenantKey,o.distributorKey,t).then(function(e){return o.controlOpenButton(e.is_match)})},o}t.$inject=["$scope","$stateParams","TenantsService","DevicesService","ProgressBarService","$state"],Object.defineProperty(exports,"__esModule",{value:!0}),exports.TenantManagedDevicesCtrl=t},724:function(e,exports){"use strict";function t(e,t,n,r,i,a){"ngInject";var o=this;if(o.currentTenant={key:void 0,name:void 0,tenant_code:void 0,admin_email:void 0,content_server_url:void 0,content_manager_base_url:void 0,domain_key:void 0,notification_emails:void 0,proof_of_play_logging:!1,active:!0},o.gcmidDevices=[],o.tenantDevices=[],o.devicesPrev=null,o.devicesNext=null,o.selectedButton="MAC",o.serialDevices={},o.disabled=!0,o.macDevices={},o.editMode=!!t.tenantKey,o.tenantKey=t.tenantKey,e.tabIndex=2,e.$watch("tabIndex",function(e,t){if(void 0!==e)switch(e){case 0:return a.go("tenantDetails",{tenantKey:o.tenantKey});case 1:return a.go("tenantManagedDevices",{tenantKey:o.tenantKey});case 2:return a.go("tenantUnmanagedDevices",{tenantKey:o.tenantKey});case 3:return a.go("tenantLocations",{tenantKey:o.tenantKey})}}),o.editItem=function(e){return r.editItem(e)},o.getUnmanagedDevices=function(e,t,n){i.start();var a=r.getUnmanagedDevicesByTenant(e,t,n);return a.then(function(e){return o.devicesPrev=e.prev_cursor,o.devicesNext=e.next_cursor,o.tenantDevices=e.devices,i.complete()})},o.editMode){var s=n.getTenantByKey(o.tenantKey);s.then(function(e){return o.currentTenant=e}),o.getUnmanagedDevices(o.tenantKey,null,null)}return o.refreshDevices=function(){return o.devicesPrev=null,o.devicesNext=null,o.tenantDevices=null,o.getUnmanagedDevices(o.tenantKey,o.devicesPrev,o.devicesNext)},o.changeRadio=function(){return o.searchText="",o.disabled=!0,o.serialDevices={},o.macDevices={}},o.searchDevices=function(e){var t=!0,n=!0;return r.searchDevices(e,o.selectedButton,n,o.tenantKey,o.distributorKey,t).then(function(e){if(e.success){var t=e.devices;return"Serial Number"===o.selectedButton?(o.serialDevices=t[1],t[0]):"MAC"===o.selectedButton?(o.macDevices=t[1],t[0]):(o.gcmidDevices=t[1],t[0])}return[]})},o.paginateCall=function(e){return e?o.getUnmanagedDevices(o.tenantKey,null,o.devicesNext):o.getUnmanagedDevices(o.tenantKey,o.devicesPrev,null)},o.prepareForEditView=function(e){return r.preprateForEditView(o.selectedButton,o.tenantKey,e,o.macDevices,o.serialDevices,o.gcmidDevices)},o.controlOpenButton=function(e){return o.disabled=!e,o.loadingDisabled=!1},o.isResourceValid=function(e){var t=!0,n=!0;return r.isResourceValid(e,o.selectedButton,n,o.tenantKey,o.distributorKey,t).then(function(e){return o.controlOpenButton(e.is_match)})},o}t.$inject=["$scope","$stateParams","TenantsService","DevicesService","ProgressBarService","$state"],Object.defineProperty(exports,"__esModule",{value:!0}),exports.TenantUnmanagedDevicesCtrl=t},725:function(e,exports){"use strict";function t(e,t,n,r,i){"ngInject";var a=this;return a.tenants=[],a.searchedTenants=[],a.searchMatch=null,a.searchDisabled=!0,a.getTenantsPaginated=function(e,t){a.offset=t,a.loading=!0,r.start();var i=n.fetchAllTenantsPaginated(e,t);return i.then(function(e){return a.getFetchSuccess(e)},function(e){return a.getFetchFailure(e)})},a.getFetchSuccess=function(e){return a.tenants=e.tenants,a.total=e.total,a.is_first_page=e.is_first_page,a.is_last_page=e.is_last_page,r.complete(),a.loading=!1},a.getFetchFailure=function(e){r.complete();var t="Unable to fetch tenants. Error: "+e.status+" "+e.statusText+".";return i.show("Oops...",t,"error")},a.initialize=function(){return a.offset=0,a.searchAllTenantsByName("my"),a.getTenantsPaginated(100,a.offset)},a.searchAllTenantsByName=function(e){if(!e||e.length<3)return[];var t=n.searchAllTenantsByName(e);return t.then(function(e){return a.searchedTenants=e,a.searchedTenants?a.searchedTenants.map(function(e){return e.name}):[]})},a.isTenantValid=function(e){if(!e||e.length<3)return[];n.searchAllTenantsByName(e).then(function(t){var n=t[0];n?(a.searchMatch=n,a.searchDisabled=!(e===n.name)):a.searchDisabled=!0})},a.editItem=function(t){return e.go("tenantDetails",{tenantKey:t.key})},a.deleteItem=function(e){var t=function(){var t=n["delete"](e);return t.then(function(){return a.initialize()})};return i.show({title:"Are you sure?",text:"This will permanently remove the tenant from the system.",type:"warning",showCancelButton:!0,confirmButtonColor:"#DD6B55",confirmButtonText:"Yes, remove the tenant!",closeOnConfirm:!0},t)},a}t.$inject=["$state","$log","TenantsService","ProgressBarService","sweet"],Object.defineProperty(exports,"__esModule",{value:!0}),exports.TenantsCtrl=t},726:function(e,exports){"use strict";function t(e,t,n,r){"ngInject";var i=this;return i.version_data=[],i.loading=!0,i.proceedToSignIn=function(){return t.go("sign_in")},i.capitalizeFirstLetter=function(e){return e.charAt(0).toUpperCase()+e.slice(1)},i.giveOptionToChangeDistributor=function(){var e=n.fetchAllByUser(r.getUserKey());return e.then(function(e){return i.has_multiple_distributors=e.length>1,i.loading=!1})},i.changeDistributor=function(){return t.go("distributor_selection")},i.getVersion=function(){var t=e.getVersions();return t.then(function(e){return i.version_data=e})},i.initialize=function(){return i.identity={key:r.getUserKey(),email:r.getUserEmail(),distributorKey:r.getCurrentDistributorKey(),distributorName:r.getCurrentDistributorName()},i.giveOptionToChangeDistributor(),i.identity.email?i.getVersion():t.go("sign_in")},i}t.$inject=["VersionsService","$state","DistributorsService","SessionsService"],Object.defineProperty(exports,"__esModule",{value:!0}),exports.WelcomeCtrl=t},727:function(e,exports){"use strict";function t(e,t,n){"ngInject";return e.state("sign_in",{resolve:{identity:["IdentityService",function(e){return e.getIdentity()}],notAuthenticated:["AuthorizationService",function(e){return e.notAuthenticated()}]},url:"/sign_in",templateUrl:"app/authentication/sign_in.html",controller:"AuthenticationCtrl",controllerAs:"authenticationCtrl"}),e.state("signed_out",{url:"/signed_out",resolve:{identity:["IdentityService",function(e){return e.getIdentity()}],notAuthenticated:["AuthorizationService",function(e){return e.notAuthenticated()}]},templateUrl:"app/authentication/signed_out.html",controller:"AuthenticationCtrl",controllerAs:"authenticationCtrl"}),e.state("sign_out",{resolve:{identity:["IdentityService",function(e){return e.getIdentity()}],authenticated:["AuthorizationService",function(e){return e.authenticated()}]},url:"/sign_out",templateUrl:"app/authentication/sign_out.html",controller:"AuthenticationCtrl",controllerAs:"authenticationCtrl"}),e.state("distributor_selection",{resolve:{authenticated:["AuthorizationService",function(e){return e.authenticated()}]},url:"/distributor_selection",templateUrl:"app/distributor/distributor_selector.html",controller:"DistributorSelectorCtrl",controllerAs:"vm"}),e.state("home",{url:"/",templateUrl:"app/welcome/welcome.html",resolve:{identity:["IdentityService",function(e){return e.getIdentity()}],authenticated:["AuthorizationService",function(e){return e.authenticated()}]},controller:"WelcomeCtrl",controllerAs:"welcomeCtrl",ncyBreadcrumb:{label:"Skykit Provisioning"}}),e.state("welcome",{url:"/welcome",templateUrl:"app/welcome/welcome.html",resolve:{identity:["IdentityService",function(e){return e.getIdentity()}],authenticated:["AuthorizationService",function(e){return e.authenticated()}]},controller:"WelcomeCtrl",controllerAs:"welcomeCtrl",ncyBreadcrumb:{label:"Skykit Provisioning"}}),e.state("domains",{resolve:{authenticated:["AuthorizationService",function(e){return e.authenticated()}]},url:"/domains",templateUrl:"app/domain/domains-listing.html",controller:"DomainsCtrl",controllerAs:"domainsCtrl",ncyBreadcrumb:{label:"Domains"}}),e.state("addDomain",{resolve:{authenticated:["AuthorizationService",function(e){return e.authenticated()}]},url:"/domains/add",templateUrl:"app/domain/domain-detail.html",controller:"DomainDetailsCtrl",controllerAs:"domainDetailsCtrl",ncyBreadcrumb:{label:"Add domain",parent:"domains"}}),e.state("editDomain",{resolve:{authenticated:["AuthorizationService",function(e){return e.authenticated()}]},url:"/domains/:domainKey",templateUrl:"app/domain/domain-detail.html",controller:"DomainDetailsCtrl",controllerAs:"domainDetailsCtrl",ncyBreadcrumb:{label:"{{ domainDetailsCtrl.currentDomain.name }}",parent:"domains"}}),e.state("tenants",{resolve:{authenticated:["AuthorizationService",function(e){return e.authenticated()}]},url:"/tenants",templateUrl:"app/tenant/tenants-listing.html",controller:"TenantsCtrl",controllerAs:"tenantsCtrl",ncyBreadcrumb:{label:"Tenants"}}),e.state("addTenant",{resolve:{authenticated:["AuthorizationService",function(e){return e.authenticated()}]},url:"/tenants/add",templateUrl:"app/tenant/tenant-add.html",controller:"TenantAddCtrl",controllerAs:"tenantAddCtrl",ncyBreadcrumb:{label:"Add tenant",parent:"tenants"}}),e.state("tenantDetails",{resolve:{authenticated:["AuthorizationService",function(e){return e.authenticated()}]},url:"/tenants/:tenantKey/details",templateUrl:"app/tenant/tenant-details.html",controller:"TenantDetailsCtrl",controllerAs:"tenantDetailsCtrl",ncyBreadcrumb:{label:"{{ tenantDetailsCtrl.currentTenant.name }}",parent:"tenants"}}),e.state("tenantManagedDevices",{resolve:{authenticated:["AuthorizationService",function(e){return e.authenticated()}]},url:"/tenants/:tenantKey/managed",templateUrl:"app/tenant/tenant-managed-devices.html",controller:"TenantManagedDevicesCtrl",controllerAs:"tenantManagedDevicesCtrl",ncyBreadcrumb:{label:"{{ tenantManagedDevicesCtrl.currentTenant.name }}",parent:"tenants"}}),e.state("tenantUnmanagedDevices",{resolve:{authenticated:["AuthorizationService",function(e){return e.authenticated()}]},url:"/tenants/:tenantKey/unmanaged",templateUrl:"app/tenant/tenant-unmanaged-devices.html",controller:"TenantUnmanagedDevicesCtrl",controllerAs:"tenantUnmanagedDevicesCtrl",ncyBreadcrumb:{label:"{{ tenantUnmanagedDevicesCtrl.currentTenant.name }}",parent:"tenants"}}),e.state("tenantLocations",{resolve:{authenticated:["AuthorizationService",function(e){return e.authenticated()}]},url:"/tenants/:tenantKey/locations",templateUrl:"app/tenant/tenant-locations.html",controller:"TenantLocationsCtrl",controllerAs:"tenantLocationsCtrl",ncyBreadcrumb:{label:"{{ tenantLocationsCtrl.currentTenant.name }}",parent:"tenants"}}),e.state("editLocation",{resolve:{authenticated:["AuthorizationService",function(e){return e.authenticated()}]},url:"/locations/:locationKey",templateUrl:"app/tenant/tenant-location.html",controller:"TenantLocationCtrl",controllerAs:"tenantLocationCtrl",ncyBreadcrumb:{label:"{{ tenantLocationCtrl.tenantName }}  / {{ tenantLocationCtrl.locationName }}",parent:"tenants"}}),e.state("addLocation",{resolve:{authenticated:["AuthorizationService",function(e){return e.authenticated()}]},url:"/tenants/:tenantKey/location",templateUrl:"app/tenant/tenant-location.html",controller:"TenantLocationCtrl",controllerAs:"tenantLocationCtrl",ncyBreadcrumb:{label:"{{ tenantLocationCtrl.tenantName }}  / Location",parent:"tenants"}}),e.state("devices",{resolve:{authenticated:["AuthorizationService",function(e){return e.authenticated()}]},url:"/devices",templateUrl:"app/device/devices-listing.html",controller:"DevicesListingCtrl",controllerAs:"devicesListingCtrl",ncyBreadcrumb:{label:"Devices"}}),e.state("editDevice",{resolve:{identity:["IdentityService",function(e){return e.getIdentity()}],authenticated:["AuthorizationService",function(e){return e.authenticated()}]},url:"/devices/:deviceKey?tenantKey?fromDevices",templateUrl:"app/device/device-detail.html",ncyBreadcrumb:{label:"{{ deviceDetailsCtrl.currentDevice.key }}",parent:"devices"},controller:"DeviceDetailsCtrl","function":function(e,t){e.tenantKey=t.tenantKey},controllerAs:"deviceDetailsCtrl"}),e.state("proof",{resolve:{authenticated:["AuthorizationService",function(e){return e.authenticated()}]},url:"/proof",templateUrl:"app/proof/main.html",controller:"ProofOfPlayCtrl",controllerAs:"vm",ncyBreadcrumb:{label:"Proof of Play"}}),e.state("proofDetail",{resolve:{authenticated:["AuthorizationService",function(e){return e.authenticated()}]},url:"/proof/:tenant",templateUrl:"app/proof/detail.html",controller:"ProofOfPlayCtrl",controllerAs:"vm",ncyBreadcrumb:{label:"Proof of Play"}}),e.state("admin",{resolve:{isAdmin:["AuthorizationService",function(e){return e.isAdminOrDistributorAdmin()}]},url:"/admin",templateUrl:"app/admin/admin.html",controller:"AdminCtrl",controllerAs:"vm",ncyBreadcrumb:{label:"Admin"}}),t.otherwise("/sign_in"),n.setBaseUrl("/api/v1"),n.addResponseInterceptor(function(e,t,n,r,i,a){var o=e;return o}),n.setRestangularFields({id:"key"})}Object.defineProperty(exports,"__esModule",{value:!0}),exports.routes=t,t.$inject=["$stateProvider","$urlRouterProvider","RestangularProvider"]},728:function(e,exports){"use strict";function t(e,t,n,r,i){"ngInject";var a=function(){var e=n.get("$state");return r.$on("$stateChangeError",function(t,n,r,i,a,o){if("authError"===o[0])return e.go(o[1])})};i(a,500);var o=function(){e.addRequestInterceptor(function(r,i,a,o){var s=n.get("StorageService"),c="6C346588BD4C6D722A1165B43C51C";if(t.host().indexOf("provisioning-gamestop")>-1&&(c="5XZHBF3mOwqJlYAlG1NeeWX0Cb72g"),e.setDefaultHeaders({"Content-Type":"application/json",Accept:"application/json",Authorization:c,"X-Provisioning-User":s.get("userKey"),"X-Provisioning-Distributor":s.get("currentDistributorKey")}),"remove"!==i)return r})};i(o,500)}t.$inject=["Restangular","$location","$injector","$rootScope","$timeout"],Object.defineProperty(exports,"__esModule",{value:!0}),exports.appRun=t},729:function(e,exports,t){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(e){o["default"].extend(e,{progressBar:!0,closeButton:!0,tapToDismiss:!0,newestOnTop:!0,positionClass:"toast-bottom-left",timeOut:5e3})}function i(e){e.setOptions({prefixStateName:"home",template:"bootstrap3"})}Object.defineProperty(exports,"__esModule",{value:!0}),exports.toastrConfig=r,exports.breadcrumbProvider=i;var a=t(369),o=n(a);r.$inject=["toastrConfig"],i.$inject=["$breadcrumbProvider"]}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,