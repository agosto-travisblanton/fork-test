webpackJsonp([0],{0:function(e,exports,t){t(70),e.exports=t(367)},367:function(e,exports,t){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}var r=t(368),a=t(648),i=t(649),o=t(660),s=t(661),c=t(662),u=t(663),l=t(686),d=t(687),v=t(688),f=t(689),m=t(690),p=t(691),h=t(692),g=t(693),y=t(694),b=n(y),D=t(700),S=n(D),T=t(701),_=n(T),k=t(702),C=n(k),x=t(703),w=n(x),M=t(704),I=n(M),P=t(705),E=n(P),A=t(706),K=n(A),B=t(707),j=n(B),O=t(708),R=n(O),U=t(709),L=n(U),V=t(710),N=n(V),z=t(711),F=n(z),Y=t(712),q=n(Y),W=t(713),H=n(W),G=t(715),X=n(G),J=t(716),Z=n(J),Q=t(717),ee=n(Q),te=t(718),ne=n(te),re=t(719),ae=t(720),ie=t(721),oe=t(722),se=t(723),ce=t(724),ue=t(725),le=t(726),de=t(727),ve=t(728),fe=t(729),me=t(730),pe=t(731);r.app.service("StorageService",H["default"]).service("AdminService",S["default"]).service("AuthorizationService",_["default"]).service("CommandsService",C["default"]).service("DateManipulationService",w["default"]).service("DevicesService",I["default"]).service("DistributorsService",E["default"]).service("DomainsService",K["default"]).service("IdentityService",j["default"]).service("IntegrationEvents",R["default"]).service("LocationsService",L["default"]).service("ProgressBarService",N["default"]).service("ProofPlayService",F["default"]).service("SessionsService",q["default"]).service("TenantsService",X["default"]).service("TimezonesService",Z["default"]).service("ToastsService",ee["default"]).service("VersionsService",ne["default"]).service("ImageService",b["default"]).controller("DeviceDetailsCommandsCtrl",a.DeviceDetailsCommandsCtrl).controller("DeviceDetailsCtrl",i.DeviceDetailsCtrl).controller("DevicesListingCtrl",o.DevicesListingCtrl).controller("AdminCtrl",s.AdminCtrl).controller("AuthenticationCtrl",c.AuthenticationCtrl).controller("AppController",u.AppController).controller("DistributorSelectorCtrl",l.DistributorSelectorCtrl).controller("DistributorsCtrl",d.DistributorsCtrl).controller("DomainsCtrl",v.DomainsCtrl).controller("DomainDetailsCtrl",f.DomainDetailsCtrl).controller("ProofOfPlayMultiLocationCtrl",m.ProofOfPlayMultiLocationCtrl).controller("ProofOfPlayMultiDisplayCtrl",p.ProofOfPlayMultiDisplayCtrl).controller("ProofOfPlayMultiResourceCtrl",h.ProofOfPlayMultiResourceCtrl).controller("ProofOfPlayCtrl",g.ProofOfPlayCtrl).controller("TenantLogsCtrl",re.TenantLogsCtrl).controller("TenantOverlaysCtrl",ae.TenantOverlaysCtrl).controller("TenantAddCtrl",ie.TenantAddCtrl).controller("TenantDetailsCtrl",oe.TenantDetailsCtrl).controller("TenantLocationCtrl",se.TenantLocationCtrl).controller("TenantLocationsCtrl",ce.TenantLocationsCtrl).controller("TenantManagedDevicesCtrl",ue.TenantManagedDevicesCtrl).controller("TenantUnmanagedDevicesCtrl",le.TenantUnmanagedDevicesCtrl).controller("TenantsCtrl",de.TenantsCtrl).controller("WelcomeCtrl",ve.WelcomeCtrl).run(me.appRun).config(fe.routes).config(pe.toastrConfig).config(pe.breadcrumbProvider),r.app.service("RequestInterceptor",["StorageService","$location",function(e,t){"ngInject";var n={request:function(n){var r="5XZHBF3mOwqJlYAlG1NeeWX0Cb72g",a="6C346588BD4C6D722A1165B43C51C";return n.headers={"Content-Type":"application/json",Accept:"application/json",Authorization:t.host().indexOf("provisioning-gamestop")>-1?r:a,"X-Provisioning-User":e.get("userKey"),"X-Provisioning-User-Identifier":e.get("userEmail"),"X-Provisioning-Distributor":e.get("currentDistributorKey")},n}};return n}]),r.app.config(["$httpProvider",function(e){return e.interceptors.push("RequestInterceptor")}])},368:function(e,exports,t){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(exports,"__esModule",{value:!0}),exports.app=void 0;var r=t(369),a=n(r),i=t(371),o=n(i),s=t(372);n(s);t(479),t(481),t(482),t(486),t(488),t(490),t(492),t(500),t(502),t(524),t(525),t(527),t(596),t(597),t(599),t(604),t(605),t(611),t(620),t(621),t(623),t(625),t(627),t(629),t(512),t(640),t(370),t(641),t(643),t(645);var c=t(647),u=n(c);window._=u["default"],window.angular=a["default"];exports.app=a["default"].module("skykitProvisioning",[o["default"],"ngAnimate","720kb.tooltips","ngCookies","ngSanitize","restangular","ui.bootstrap","ngMaterialDatePicker","hSweetAlert","ncy-angular-breadcrumb","directive.g+signin","ngProgress","ngMaterial","ngclipboard","toastr","lfNgMdFileInput"])},374:function(e,exports,t){function n(e){return t(r(e))}function r(e){return a[e]||function(){throw new Error("Cannot find module '"+e+"'.")}()}var a={"./af":375,"./af.js":375,"./ar":376,"./ar-ly":377,"./ar-ly.js":377,"./ar-ma":378,"./ar-ma.js":378,"./ar-sa":379,"./ar-sa.js":379,"./ar-tn":380,"./ar-tn.js":380,"./ar.js":376,"./az":381,"./az.js":381,"./be":382,"./be.js":382,"./bg":383,"./bg.js":383,"./bn":384,"./bn.js":384,"./bo":385,"./bo.js":385,"./br":386,"./br.js":386,"./bs":387,"./bs.js":387,"./ca":388,"./ca.js":388,"./cs":389,"./cs.js":389,"./cv":390,"./cv.js":390,"./cy":391,"./cy.js":391,"./da":392,"./da.js":392,"./de":393,"./de-at":394,"./de-at.js":394,"./de.js":393,"./dv":395,"./dv.js":395,"./el":396,"./el.js":396,"./en-au":397,"./en-au.js":397,"./en-ca":398,"./en-ca.js":398,"./en-gb":399,"./en-gb.js":399,"./en-ie":400,"./en-ie.js":400,"./en-nz":401,"./en-nz.js":401,"./eo":402,"./eo.js":402,"./es":403,"./es-do":404,"./es-do.js":404,"./es.js":403,"./et":405,"./et.js":405,"./eu":406,"./eu.js":406,"./fa":407,"./fa.js":407,"./fi":408,"./fi.js":408,"./fo":409,"./fo.js":409,"./fr":410,"./fr-ca":411,"./fr-ca.js":411,"./fr-ch":412,"./fr-ch.js":412,"./fr.js":410,"./fy":413,"./fy.js":413,"./gd":414,"./gd.js":414,"./gl":415,"./gl.js":415,"./he":416,"./he.js":416,"./hi":417,"./hi.js":417,"./hr":418,"./hr.js":418,"./hu":419,"./hu.js":419,"./hy-am":420,"./hy-am.js":420,"./id":421,"./id.js":421,"./is":422,"./is.js":422,"./it":423,"./it.js":423,"./ja":424,"./ja.js":424,"./jv":425,"./jv.js":425,"./ka":426,"./ka.js":426,"./kk":427,"./kk.js":427,"./km":428,"./km.js":428,"./ko":429,"./ko.js":429,"./ky":430,"./ky.js":430,"./lb":431,"./lb.js":431,"./lo":432,"./lo.js":432,"./lt":433,"./lt.js":433,"./lv":434,"./lv.js":434,"./me":435,"./me.js":435,"./mi":436,"./mi.js":436,"./mk":437,"./mk.js":437,"./ml":438,"./ml.js":438,"./mr":439,"./mr.js":439,"./ms":440,"./ms-my":441,"./ms-my.js":441,"./ms.js":440,"./my":442,"./my.js":442,"./nb":443,"./nb.js":443,"./ne":444,"./ne.js":444,"./nl":445,"./nl.js":445,"./nn":446,"./nn.js":446,"./pa-in":447,"./pa-in.js":447,"./pl":448,"./pl.js":448,"./pt":449,"./pt-br":450,"./pt-br.js":450,"./pt.js":449,"./ro":451,"./ro.js":451,"./ru":452,"./ru.js":452,"./se":453,"./se.js":453,"./si":454,"./si.js":454,"./sk":455,"./sk.js":455,"./sl":456,"./sl.js":456,"./sq":457,"./sq.js":457,"./sr":458,"./sr-cyrl":459,"./sr-cyrl.js":459,"./sr.js":458,"./ss":460,"./ss.js":460,"./sv":461,"./sv.js":461,"./sw":462,"./sw.js":462,"./ta":463,"./ta.js":463,"./te":464,"./te.js":464,"./th":465,"./th.js":465,"./tl-ph":466,"./tl-ph.js":466,"./tlh":467,"./tlh.js":467,"./tr":468,"./tr.js":468,"./tzl":469,"./tzl.js":469,"./tzm":470,"./tzm-latn":471,"./tzm-latn.js":471,"./tzm.js":470,"./uk":472,"./uk.js":472,"./uz":473,"./uz.js":473,"./vi":474,"./vi.js":474,"./x-pseudo":475,"./x-pseudo.js":475,"./zh-cn":476,"./zh-cn.js":476,"./zh-hk":477,"./zh-hk.js":477,"./zh-tw":478,"./zh-tw.js":478};n.keys=function(){return Object.keys(a)},n.resolve=r,e.exports=n,n.id=374},524:function(e,exports){"use strict";angular.module("ngProgress.provider",["ngProgress.directive"]).service("ngProgress",function(){return["$document","$window","$compile","$rootScope","$timeout",function(e,t,n,r,a){this.autoStyle=!0,this.count=0,this.height="2px",this.$scope=r.$new(),this.color="firebrick",this.parent=e.find("body")[0],this.count=0,this.progressbarEl=n("<ng-progress></ng-progress>")(this.$scope),this.parent.appendChild(this.progressbarEl[0]),this.$scope.count=this.count,void 0!==this.height&&this.progressbarEl.eq(0).children().css("height",this.height),void 0!==this.color&&(this.progressbarEl.eq(0).children().css("background-color",this.color),this.progressbarEl.eq(0).children().css("color",this.color)),this.intervalCounterId=0,this.start=function(){this.show();var e=this;clearInterval(this.intervalCounterId),this.intervalCounterId=setInterval(function(){isNaN(e.count)?(clearInterval(e.intervalCounterId),e.count=0,e.hide()):(e.remaining=100-e.count,e.count=e.count+.15*Math.pow(1-Math.sqrt(e.remaining),2),e.updateCount(e.count))},200)},this.updateCount=function(e){this.$scope.count=e,this.$scope.$$phase||this.$scope.$apply()},this.setHeight=function(e){return void 0!==e&&(this.height=e,this.$scope.height=this.height,this.$scope.$$phase||this.$scope.$apply()),this.height},this.setColor=function(e){return void 0!==e&&(this.color=e,this.$scope.color=this.color,this.$scope.$$phase||this.$scope.$apply()),this.color},this.hide=function(){this.progressbarEl.children().css("opacity","0");var e=this;e.animate(function(){e.progressbarEl.children().css("width","0%"),e.animate(function(){e.show()},500)},500)},this.show=function(){var e=this;e.animate(function(){e.progressbarEl.children().css("opacity","1")},100)},this.animate=function(e,t){void 0!==this.animation&&a.cancel(this.animation),this.animation=a(e,t)},this.status=function(){return this.count},this.stop=function(){clearInterval(this.intervalCounterId)},this.set=function(e){return this.show(),this.updateCount(e),this.count=e,clearInterval(this.intervalCounterId),this.count},this.css=function(e){return this.progressbarEl.children().css(e)},this.reset=function(){return clearInterval(this.intervalCounterId),this.count=0,this.updateCount(this.count),0},this.complete=function(){this.count=100,this.updateCount(this.count);var e=this;return clearInterval(this.intervalCounterId),a(function(){e.hide(),a(function(){e.count=0,e.updateCount(e.count)},500)},1e3),this.count},this.setParent=function(e){if(null===e||void 0===e)throw new Error("Provide a valid parent of type HTMLElement");null!==this.parent&&void 0!==this.parent&&this.parent.removeChild(this.progressbarEl[0]),this.parent=e,this.parent.appendChild(this.progressbarEl[0])},this.getDomElement=function(){return this.progressbarEl},this.setAbsolute=function(){this.progressbarEl.css("position","absolute")}}]}).factory("ngProgressFactory",["$injector","ngProgress",function(e,t){var n={createInstance:function(){return e.instantiate(t)}};return n}]),angular.module("ngProgress.directive",[]).directive("ngProgress",["$window","$rootScope",function(e,t){var n={replace:!0,restrict:"E",link:function(e,t,n,r){e.$watch("count",function(n){(void 0!==n||null!==n)&&(e.counter=n,t.eq(0).children().css("width",n+"%"))}),e.$watch("color",function(n){(void 0!==n||null!==n)&&(e.color=n,t.eq(0).children().css("background-color",n),t.eq(0).children().css("color",n))}),e.$watch("height",function(n){(void 0!==n||null!==n)&&(e.height=n,t.eq(0).children().css("height",n))})},template:'<div id="ngProgress-container"><div id="ngProgress"></div></div>'};return n}]),angular.module("ngProgress",["ngProgress.directive","ngProgress.provider"])},525:function(e,exports,t){var n=t(526);"string"==typeof n&&(n=[[e.id,n,""]]);t(485)(n,{});n.locals&&(e.exports=n.locals)},526:function(e,exports,t){exports=e.exports=t(484)(),exports.push([e.id,"#ngProgress{margin:0;padding:0;z-index:99998;background-color:green;color:green;box-shadow:0 0 10px 0;height:2px;opacity:0;-webkit-transition:all .5s ease-in-out;transition:all .5s ease-in-out}#ngProgress-container{position:fixed;margin:0;padding:0;top:0;left:0;right:0;z-index:99999}",""])},527:function(e,exports,t){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}var r=t(528),a=n(r);/*! angular-breadcrumb - v0.4.0-dev-2015-08-07
	* http://ncuillery.github.io/angular-breadcrumb
	* Copyright (c) 2015 Nicolas Cuillery; Licensed MIT */
!function(e,t,n){function r(e,n){return t.equals(e.length,n.length)?e>n:e.length>n.length}function i(e){var t=e.replace(/\n/g," ").match(/^([^(]+?)\s*(\((.*)\))?$/);if(!t||4!==t.length)throw new Error("Invalid state ref '"+e+"'");return{state:t[1],paramExpr:t[3]||null}}function o(){var e={prefixStateName:null,template:"bootstrap3",templateUrl:null,includeAbstract:!1};this.setOptions=function(n){t.extend(e,n)},this.$get=["$state","$stateParams","$rootScope",function(t,o,s){var c=s;s.$on("$viewContentLoaded",function(e){!e.targetScope.ncyBreadcrumbIgnore&&r(e.targetScope.$id,c.$id)&&(c=e.targetScope)});var u=function(e){var t=e.parent||(/^(.+)\.[^.]+$/.exec(e.name)||[])[1],n="object"==("undefined"==typeof t?"undefined":(0,a["default"])(t));return n?t.name:t},l=function v(n,r){for(var a,s,v=i(r),u=!1,l=!1,d=0,f=n.length;f>d;d+=1)if(n[d].name===v.state)return;a=t.get(v.state),a.ncyBreadcrumb&&(a.ncyBreadcrumb.force&&(u=!0),a.ncyBreadcrumb.skip&&(l=!0)),a["abstract"]&&!e.includeAbstract&&!u||l||(v.paramExpr&&(s=c.$eval(v.paramExpr)),a.ncyBreadcrumbLink=t.href(v.state,s||o||{}),n.unshift(a))},d=function(e){var n=i(e),r=t.get(n.state);if(r.ncyBreadcrumb&&r.ncyBreadcrumb.parent){var a="function"==typeof r.ncyBreadcrumb.parent,o=a?r.ncyBreadcrumb.parent(c):r.ncyBreadcrumb.parent;if(o)return o}return u(r)};return{getTemplate:function(t){return e.templateUrl?null:t[e.template]?t[e.template]:e.template},getTemplateUrl:function(){return e.templateUrl},getStatesChain:function(n){for(var r=[],a=t.$current.self.name;a;a=d(a))if(l(r,a),n&&r.length)return r;return e.prefixStateName&&l(r,e.prefixStateName),r},getLastStep:function(){var e=this.getStatesChain(!0);return e.length?e[0]:n},$getLastViewScope:function(){return c}}}]}function s(e,n,r){var a={bootstrap2:'<ul class="breadcrumb"><li ng-repeat="step in steps" ng-switch="$last || !!step.abstract" ng-class="{active: $last}"><a ng-switch-when="false" href="{{step.ncyBreadcrumbLink}}">{{step.ncyBreadcrumbLabel}}</a><span ng-switch-when="true">{{step.ncyBreadcrumbLabel}}</span><span class="divider" ng-hide="$last">/</span></li></ul>',bootstrap3:'<ol class="breadcrumb"><li ng-repeat="step in steps" ng-class="{active: $last}" ng-switch="$last || !!step.abstract"><a ng-switch-when="false" href="{{step.ncyBreadcrumbLink}}">{{step.ncyBreadcrumbLabel}}</a><span ng-switch-when="true">{{step.ncyBreadcrumbLabel}}</span></li></ol>'};return{restrict:"AE",replace:!0,scope:{},template:n.getTemplate(a),templateUrl:n.getTemplateUrl(),link:{post:function(a){var i=[],o=function(){v(i),i=[];var r=n.$getLastViewScope();a.steps=n.getStatesChain(),t.forEach(a.steps,function(t){if(t.ncyBreadcrumb&&t.ncyBreadcrumb.label){var n=e(t.ncyBreadcrumb.label);t.ncyBreadcrumbLabel=n(r),d(i,n,r,t)}else t.ncyBreadcrumbLabel=t.name})};r.$on("$viewContentLoaded",function(e){e.targetScope.ncyBreadcrumbIgnore||o()}),o()}}}}function c(e,t,n){return{restrict:"A",scope:{},template:"{{ncyBreadcrumbLabel}}",compile:function(r,a){var i=r.attr(a.$attr.ncyBreadcrumbLast);return i&&r.html(i),{post:function(r){var a=[],i=function o(){v(a),a=[];var n=t.$getLastViewScope(),o=t.getLastStep();if(o)if(r.ncyBreadcrumbLink=o.ncyBreadcrumbLink,o.ncyBreadcrumb&&o.ncyBreadcrumb.label){var i=e(o.ncyBreadcrumb.label);r.ncyBreadcrumbLabel=i(n),d(a,i,n,r)}else r.ncyBreadcrumbLabel=o.name};n.$on("$viewContentLoaded",function(e){e.targetScope.ncyBreadcrumbIgnore||i()}),i()}}}}}function u(e,n,r){return{restrict:"A",scope:{},template:"{{ncyBreadcrumbChain}}",compile:function(a,i){var o=a.attr(i.$attr.ncyBreadcrumbText);o&&a.html(o);var s=a.attr(i.$attr.ncyBreadcrumbTextSeparator)||" / ";return{post:function(a){var i=[],o=function(e,n,r){t.forEach(l(n),function(t){var n=r.$watch(t,function(e,t){e!==t&&c()});e.push(n)})},c=function u(){v(i),i=[];var r=n.$getLastViewScope(),u=n.getStatesChain(),c=[];t.forEach(u,function(t){if(t.ncyBreadcrumb&&t.ncyBreadcrumb.label){var n=e(t.ncyBreadcrumb.label);c.push(n(r)),o(i,n,r)}else c.push(t.name)}),a.ncyBreadcrumbChain=c.join(s)};r.$on("$viewContentLoaded",function(e){e.targetScope.ncyBreadcrumbIgnore||c()}),c()}}}}}var l=function(e){if(e.expressions)return e.expressions;var n=[];return t.forEach(e.parts,function(e){t.isFunction(e)&&n.push(e.exp)}),n},d=function(e,n,r,a){t.forEach(l(n),function(t){var i=r.$watch(t,function(){a.ncyBreadcrumbLabel=n(r)});e.push(i)})},v=function(e){t.forEach(e,function(e){e()})};s.$inject=["$interpolate","$breadcrumb","$rootScope"],c.$inject=["$interpolate","$breadcrumb","$rootScope"],u.$inject=["$interpolate","$breadcrumb","$rootScope"],t.module("ncy-angular-breadcrumb",["ui.router.state"]).provider("$breadcrumb",o).directive("ncyBreadcrumb",s).directive("ncyBreadcrumbLast",c).directive("ncyBreadcrumbText",u)}(window,window.angular)},596:function(e,exports,t){(function(e){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}var r=t(372),a=n(r);!function(t){var n="ngMaterialDatePicker",r={DATE:0,HOUR:1,MINUTE:2},a=function(t,n){return"jQuery"in window?e(t).css(n):(t=angular.element(t),"getComputedStyle"in window?window.getComputedStyle(t[0])[n]:t.css(n))},i='<md-dialog class="dtp" layout="column" style="width: 300px;">    <md-dialog-content class="dtp-content">        <div class="dtp-date-view">            <header class="dtp-header">                <div class="dtp-actual-day" ng-show="picker.dateMode">{{picker.currentDate.format("dddd")}}</div>                <div class="dtp-actual-day" ng-show="picker.timeMode">{{picker.params.shortTime ? picker.currentDate.format("A") : " "}}</div>                <div class="dtp-close text-right">                    <a href="#" mdc-dtp-noclick ng-click="picker.hide()">&times;</a>                </div>            </header>            <div class="dtp-date" ng-show="picker.params.date">                <div layout="column">                    <div class="dtp-actual-month">{{picker.currentDate.format("MMM") | uppercase}}</div>                </div>                <div class="dtp-actual-num">{{picker.currentDate.format("DD")}}</div>                <div layout="row"> <div ng-click="picker.incrementYear(-1)" class="dtp-year-btn dtp-year-btn-prev" flex="30"><span ng-if="picker.isPreviousYearVisible()" >&#x25B2;</span></div>                    <div class="dtp-actual-year" flex>{{picker.currentDate.format("YYYY")}}</div> <div ng-click="picker.incrementYear(1)" class="dtp-year-btn dtp-year-btn-next" flex="30"><span ng-if="picker.isNextYearVisible()" >&#x25BC;</span></div>                </div>            </div>            <div class="dtp-time" ng-show="picker.params.time && !picker.params.date">                <div class="dtp-actual-maxtime">{{picker.currentNearest5Minute().format(picker.params.shortTime ? "hh:mm" : "HH:mm")}}</div>            </div>            <div class="dtp-picker">                <mdc-datetime-picker-calendar date="picker.currentDate" picker="picker" class="dtp-picker-calendar" ng-show="picker.currentView === picker.VIEWS.DATE"></mdc-datetime-picker-calendar>                <div class="dtp-picker-datetime" ng-show="picker.currentView !== picker.VIEWS.DATE">                    <div class="dtp-actual-meridien">                        <div class="left p20">                            <a href="#" mdc-dtp-noclick class="dtp-meridien-am" ng-class="{selected: picker.meridien == \'AM\'}" ng-click="picker.selectAM()">{{picker.params.amText}}</a>                        </div>                        <div ng-show="!picker.timeMode" class="dtp-actual-time p60">{{picker.currentNearest5Minute().format(picker.params.shortTime ? "hh:mm" : "HH:mm")}}</div>                        <div class="right p20">                            <a href="#" mdc-dtp-noclick class="dtp-meridien-pm" ng-class="{selected: picker.meridien == \'PM\'}" ng-click="picker.selectPM()">{{picker.params.pmText}}</a>                        </div>                        <div class="clearfix"></div>                    </div>                    <mdc-datetime-picker-clock mode="hours" ng-if="picker.currentView === picker.VIEWS.HOUR"></mdc-datetime-picker-clock>                    <mdc-datetime-picker-clock mode="minutes" ng-if="picker.currentView === picker.VIEWS.MINUTE"></mdc-datetime-picker-clock>                </div>            </div>        </div>    </md-dialog-content>    <md-dialog-actions class="dtp-buttons">            <md-button class="dtp-btn-cancel md-button" ng-click="picker.cancel()"> {{picker.params.cancelText}}</md-button>            <md-button class="dtp-btn-ok md-button" ng-click="picker.ok()"> {{picker.params.okText}}</md-button>      </md-dialog-actions></md-dialog>';angular.module(n,["ngMaterial"]).provider("mdcDatetimePickerDefaultLocale",function(){this.locale="en",this.$get=function(){return this.locale},this.setDefaultLocale=function(e){this.locale=e}}).directive("mdcDatetimePicker",["$mdDialog",function(e){return{restrict:"A",require:"ngModel",scope:{currentDate:"=ngModel",time:"=",date:"=",minDate:"=",maxDate:"=",shortTime:"=",format:"@",cancelText:"@",okText:"@",lang:"@",amText:"@",pmText:"@"},link:function(n,r,a,s){var c=!1;n.format||(n.date&&n.time?n.format="YYYY-MM-DD HH:mm:ss":n.date?n.format="YYYY-MM-DD":n.format="HH:mm"),angular.isString(n.currentDate)&&""!==n.currentDate&&(n.currentDate=t(n.currentDate,n.format)),s&&s.$formatters.push(function(e){if("undefined"!=typeof e){var r=t(e);return r.isValid()?r.format(n.format):""}}),r.attr("readonly",""),r.on("focus",function(t){if(t.preventDefault(),r.blur(),!c){c=!0;var s={};for(var u in a)n.hasOwnProperty(u)&&!angular.isUndefined(n[u])&&(s[u]=n[u]);s.currentDate=n.currentDate;var l={options:s};e.show({template:i,controller:o,controllerAs:"picker",locals:l,openFrom:r,parent:angular.element(document.body),bindToController:!0,disableParentScroll:!1}).then(function(e){n.currentDate=e?e._d:e,c=!1},function(){c=!1})}})}}}]);var o=function(e,t,n){this.currentView=r.DATE,this._dialog=t,this.minDate,this.maxDate,this._attachedEvents=[],this.VIEWS=r,this.params={date:!0,time:!0,format:"YYYY-MM-DD",minDate:null,maxDate:null,currentDate:null,lang:n,weekStart:0,shortTime:!1,cancelText:"Cancel",okText:"OK",amText:"AM",pmText:"PM"},this.meridien="AM",this.params=angular.extend(this.params,this.options),this.init()};o.$inject=["$scope","$mdDialog","mdcDatetimePickerDefaultLocale"],o.prototype={init:function(){this.timeMode=this.params.time&&!this.params.date,this.dateMode=this.params.date,this.initDates(),this.start()},currentNearest5Minute:function(){var e=this.currentDate||t(),n=5*Math.round(e.minute()/5);return n>=60&&(n=55),t(e).minutes(n)},initDates:function(){var e=this,n=function(n,r){var a=null;if(angular.isDefined(n)&&null!==n&&""!==n)if(angular.isString(n))a="undefined"!=typeof e.params.format&&null!==e.params.format?t(n,e.params.format).locale(e.params.lang):t(n).locale(e.params.lang);else if(angular.isDate(n)){var i=n.getTime();a=t(i,"x").locale(e.params.lang)}else n._isAMomentObject&&(a=n);else a=r;return a};this.currentDate=n(this.params.currentDate,t()),this.minDate=n(this.params.minDate),this.maxDate=n(this.params.maxDate),this.selectDate(this.currentDate)},initDate:function(e){this.currentView=r.DATE},initHours:function(){this.currentView=r.HOUR},initMinutes:function(){this.currentView=r.MINUTE},isAfterMinDate:function(e,n,r){var a=!0;if("undefined"!=typeof this.minDate&&null!==this.minDate){var i=t(this.minDate),o=t(e);n||r||(i.hour(0),i.minute(0),o.hour(0),o.minute(0)),i.second(0),o.second(0),i.millisecond(0),o.millisecond(0),r?a=parseInt(o.format("X"))>=parseInt(i.format("X")):(o.minute(0),i.minute(0),a=parseInt(o.format("X"))>=parseInt(i.format("X")))}return a},isBeforeMaxDate:function(e,n,r){var a=!0;if("undefined"!=typeof this.maxDate&&null!==this.maxDate){var i=t(this.maxDate),o=t(e);n||r||(i.hour(0),i.minute(0),o.hour(0),o.minute(0)),i.second(0),o.second(0),i.millisecond(0),o.millisecond(0),r?a=parseInt(o.format("X"))<=parseInt(i.format("X")):(o.minute(0),i.minute(0),a=parseInt(o.format("X"))<=parseInt(i.format("X")))}return a},selectDate:function(e){e&&(this.currentDate=t(e),this.isAfterMinDate(this.currentDate)||(this.currentDate=t(this.minDate)),this.isBeforeMaxDate(this.currentDate)||(this.currentDate=t(this.maxDate)),this.currentDate.locale(this.params.lang),this.calendarStart=t(this.currentDate),this.meridien=this.currentDate.hour()>=12?"PM":"AM")},setName:function(){for(var e="",t="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",n=0;n<5;n++)e+=t.charAt(Math.floor(Math.random()*t.length));return e},isPM:function(){return"PM"===this.meridien},incrementYear:function(e){1===e&&this.isNextYearVisible()&&this.selectDate(this.currentDate.add("year",e)),e===-1&&this.isPreviousYearVisible()&&this.selectDate(this.currentDate.add("year",e))},isPreviousMonthVisible:function(){return this.calendarStart&&this.isAfterMinDate(t(this.calendarStart).startOf("month"),!1,!1)},isNextMonthVisible:function(){return this.calendarStart&&this.isBeforeMaxDate(t(this.calendarStart).endOf("month"),!1,!1)},isPreviousYearVisible:function(){return this.calendarStart&&this.isAfterMinDate(t(this.calendarStart).startOf("year"),!1,!1)},isNextYearVisible:function(){return this.calendarStart&&this.isBeforeMaxDate(t(this.calendarStart).endOf("year"),!1,!1)},isHourAvailable:function(e){var n=t(this.currentDate);return n.hour(this.convertHours(e)).minute(0).second(0),this.isAfterMinDate(n,!0,!1)&&this.isBeforeMaxDate(n,!0,!1)},isMinuteAvailable:function(e){var n=t(this.currentDate);return n.minute(e).second(0),this.isAfterMinDate(n,!0,!0)&&this.isBeforeMaxDate(n,!0,!0)},start:function(){this.currentView=r.DATE,this.params.date?this.initDate():this.params.time&&this.initHours()},ok:function(){switch(this.currentView){case r.DATE:this.params.time===!0?this.initHours():this.hide(!0);break;case r.HOUR:this.initMinutes();break;case r.MINUTE:this.hide(!0)}},cancel:function(){if(this.params.time)switch(this.currentView){case r.DATE:this.hide();break;case r.HOUR:this.params.date?this.initDate():this.hide();break;case r.MINUTE:this.initHours()}else this.hide()},selectMonthBefore:function(){this.calendarStart.subtract(1,"months")},selectMonthAfter:function(){this.calendarStart.add(1,"months")},selectYearBefore:function(){this.calendarStart.subtract(1,"years")},selectYearAfter:function(){this.calendarStart.add(1,"years")},selectAM:function(){(this.isHourAvailable(0)||this.isHourAvailable(12))&&(this.currentDate.hour()>=12&&this.selectDate(this.currentDate.subtract(12,"hours")),this.isHourAvailable(this.currentDate.hour())||this.selectDate(this.currentDate.hour(this.minDate.hour())),this.isMinuteAvailable(this.currentDate.minute())||this.selectDate(this.currentDate.minute(this.minDate.minute())))},selectPM:function(){(this.isHourAvailable(13)||this.isHourAvailable(24))&&(this.currentDate.hour()<12&&this.selectDate(this.currentDate.add(12,"hours")),this.isHourAvailable(this.currentDate.hour())||this.selectDate(this.currentDate.hour(this.maxDate.hour())),this.isMinuteAvailable(this.currentDate.minute())||this.selectDate(this.currentDate.minute(this.maxDate.minute())))},convertHours:function(e){var t=e;return e<12&&this.isPM()&&(t+=12),t},hide:function(e){e?this._dialog.hide(this.currentDate):this._dialog.cancel()}},angular.module(n).directive("mdcDatetimePickerCalendar",[function(){for(var e=(t(),1900),n=2100,r=12*(n-e+1),a=240,i=[],o=0;o<r;o++)i.push(o);var s=function(t){var n=t.year(),r=t.month();return 12*(n-e)+r-1};return{restrict:"E",scope:{picker:"=",date:"="},bindToController:!0,controllerAs:"cal",controller:["$scope",function(n){for(var a=this,o=this.picker,c=[],u=o.params.weekStart;c.length<7;u++)u>6&&(u=0),c.push(u.toString());if(a.week=c,o.maxDate||o.minDate){var l=o.minDate?s(o.minDate):0,d=o.maxDate?s(o.maxDate)+1:r;a.months=i.slice(l,d)}else a.months=i;a.getItemAtIndex=function(n){var r=(n+1)%12||12,a=e+Math.floor(n/12),i=t(o.currentDate).year(a).month(r);return v(i)},a.topIndex=s(o.currentDate)-a.months[0],n.$watch(function(){return o.currentDate?o.currentDate.format("YYYY-MM"):""},function(e,n){if(e!=n){var r=t(e,"YYYY-MM"),i=s(r);a.topIndex!=i&&(a.topIndex=i-a.months[0])}});var v=function(e){var n={};if(null!==e){n.name=e.format("MMMM YYYY");var r=t(e).locale(o.params.lang).startOf("month").hour(e.hour()).minute(e.minute()),i=r.format("d");n.days=[];for(var s=r.date();s<=r.daysInMonth();s++){if(s===r.date()){var c=a.week.indexOf(i.toString());if(c>0)for(var u=0;u<c;u++)n.days.push(0)}n.days.push(t(r).locale(o.params.lang).date(s))}for(var l=7,d=[],v=Math.ceil(n.days.length/l),f=0;f<v;f++)d.push(n.days.slice(f*l,(f+1)*l));return n.days=d,n}};a.toDay=function(e){return t(parseInt(e),"d").locale(o.params.lang).format("dd").substring(0,1)},a.isInRange=function(e){return o.isAfterMinDate(t(e),!1,!1)&&o.isBeforeMaxDate(t(e),!1,!1)},a.selectDate=function(e){if(e){if(a.isSelectedDay(e))return o.ok();o.selectDate(t(e).hour(a.date.hour()).minute(a.date.minute()))}},a.isSelectedDay=function(e){return e&&a.date.date()===e.date()&&a.date.month()===e.month()&&a.date.year()===e.year()}}],template:'<md-virtual-repeat-container md-top-index="cal.topIndex" class="months"><div md-virtual-repeat="idx in cal.months" md-start-index="cal.topIndex" md-item-size="'+a+'">     <div mdc-datetime-picker-calendar-month idx="idx"></div></div></md-virtual-repeat-container>'}}]).directive("mdcDatetimePickerCalendarMonth",["$compile",function(e){var t=function(t,n){var r=angular.element(t[0].querySelector("tbody")),a=n.cal,i=n.month;r.html(""),i.days.forEach(function(e,t){var n=angular.element("<tr></tr>");e.forEach(function(e,r){var i=angular.element("<td> </td>");if(e){var o;if(a.isInRange(e)){var s='month["days"]['+t+"]["+r+"]";o=angular.element("<a href='#' mdc-dtp-noclick></a>").attr("ng-class","{selected: cal.isSelectedDay("+s+")}").attr("ng-click","cal.selectDate("+s+")")}else o=angular.element("<span></span>");o.addClass("dtp-select-day").html(e.format("D")),i.append(o)}n.append(i)}),r.append(n)}),e(r)(n)};return{scope:{idx:"="},require:"^mdcDatetimePickerCalendar",restrict:"AE",template:'<div class="dtp-picker-month">{{month.name}}</div><table class="table dtp-picker-days">    <thead>    <tr>        <th ng-repeat="day in cal.week">{{cal.toDay(day)}}</th>    </tr>    </thead>    <tbody>    </tbody></table>',link:function(e,n,r,a){e.cal=a,e.month=a.getItemAtIndex(parseInt(e.idx)),t(n,e),e.$watch(function(){return e.idx},function(r,i){r!=i&&(e.month=a.getItemAtIndex(parseInt(e.idx)),t(n,e))})}}}]),angular.module(n).directive("mdcDtpNoclick",function(){return{link:function(e,t){t.on("click",function(e){e.preventDefault()})}}}),angular.module(n).directive("mdcDatetimePickerClock",[function(){var e='<div class="dtp-picker-clock"><span ng-if="!points || points.length < 1">&nbsp;</span><div ng-repeat="point in points" class="dtp-picker-time" style="margin-left: {{point.left}}px; margin-top: {{point.top}}px;">   <a href="#" mdc-dtp-noclick ng-class="{selected: point.value===currentValue}" class="dtp-select-hour" ng-click="setTime(point.value)" ng-if="pointAvailable(point)">{{point.display}}</a>   <a href="#" mdc-dtp-noclick class="disabled dtp-select-hour" ng-if="!pointAvailable(point)">{{point.display}}</a></div><div class="dtp-hand dtp-hour-hand"></div><div class="dtp-hand dtp-minute-hand"></div><div class="dtp-clock-center"></div></div>';return{restrict:"E",template:e,link:function(e,t,n){var r="minutes"===n.mode,i=e.picker,o=document.querySelector("md-dialog.dtp"),s=function(){var n=angular.element(t[0].querySelector(".dtp-picker-clock")),s=angular.element(o.querySelector(".dtp-picker")),u=o.querySelector(".dtp-content").offsetWidth,d=parseInt(a(s,"paddingLeft").replace("px",""))||0,v=parseInt(a(s,"paddingRight").replace("px",""))||0,f=parseInt(a(n,"marginLeft").replace("px",""))||0,m=parseInt(a(n,"marginRight").replace("px",""))||0,p=u-(f+m+d+v);n.css("width",p+"px");for(var h=parseInt(a(s,"paddingLeft").replace("px",""))||0,g=parseInt(a(s,"paddingTop").replace("px",""))||0,y=parseInt(a(n,"marginLeft").replace("px",""))||0,b=parseInt(a(n,"marginTop").replace("px",""))||0,D=p/2,S=D/1.2,T=[],_=0;_<12;++_){var k=S*Math.sin(2*Math.PI*(_/12)),C=S*Math.cos(2*Math.PI*(_/12)),x={left:D+k+h/2-(h+y),top:D-C-b/2-(g+b),value:r?5*_:_};r?x.display=x.value<10?"0"+x.value:x.value:i.params.shortTime?x.display=0===_?12:_:x.display=i.isPM()?_+12:_,T.push(x)}e.points=T,l(),n.css("height",p+"px");var w=t[0].querySelector(".dtp-clock-center"),M=w.offsetWidth/2||7.5,I=w.offsetHeight/2||7.5,P=D/1.8,E=D/1.5;angular.element(t[0].querySelector(".dtp-hour-hand")).css({left:D+1.5*y+"px",height:P+"px",marginTop:D-P-h+"px"}).addClass(r?"":"on"),angular.element(t[0].querySelector(".dtp-minute-hand")).css({left:D+1.5*y+"px",height:E+"px",marginTop:D-E-h+"px"}).addClass(r?"on":""),angular.element(w).css({left:D+h+y-M+"px",marginTop:D-y/2-I+"px"}),c()},c=function(){var e=i.currentNearest5Minute(),n=e.hour(),r=e.minute();u(angular.element(t[0].querySelector(".dtp-hour-hand")),30*n);var a=6*(5*Math.round(r/5));u(angular.element(t[0].querySelector(".dtp-minute-hand")),a)},u=function(e,t){angular.element(e).css({WebkitTransform:"rotate("+t+"deg)","-moz-transform":"rotate("+t+"deg)"})},l=function(){var t=i.currentNearest5Minute();e.currentValue=r?t.minute():t.hour()%12};e.$watch(function(){var e=i.currentNearest5Minute();return e?e.format("HH:mm"):""},function(e){l(),c()});var d=function(e,t){for(var n=0;n<t.length;n++)t[n].display=n,e&&(t[n].display+=12);return t};i.params.shortTime||e.$watch("picker.meridien",function(){if(!r&&e.points){var t=d(i.isPM(),angular.copy(e.points));e.points=t}}),e.setTime=function(t){t===e.currentValue&&i.ok(),r?i.currentDate.minute(t):i.currentDate.hour(i.isPM()?t+12:t),i.currentDate.second(0)},e.pointAvailable=function(e){return r?i.isMinuteAvailable(e.value):i.isHourAvailable(e.value)};var v=e.$watch(function(){return t[0].querySelectorAll("div").length},function(){s(),v()})}}}])}(a["default"])}).call(exports,t(512))},597:function(e,exports,t){var n=t(598);"string"==typeof n&&(n=[[e.id,n,""]]);t(485)(n,{});n.locals&&(e.exports=n.locals)},598:function(e,exports,t){exports=e.exports=t(484)(),exports.push([e.id,"md-dialog.dtp{font-size:14px;line-height:1.42857143;color:#333;background-color:#fff;max-height:none}.dtp :focus{outline:none!important}.dtp table{border-spacing:0;border-collapse:collapse;width:100%}.dtp .table>tbody>tr>td,.dtp .table>tbody>tr>th,.dtp .table>tfoot>tr>td,.dtp .table>tfoot>tr>th,.dtp .table>thead>tr>td,.dtp .table>thead>tr>th{padding:8px;line-height:1.42857143;vertical-align:top;border-top:1px solid #ddd}.dtp,.dtp *{box-sizing:border-box!important}.dtp>.dtp-content{max-width:300px;max-height:500px}.dtp>.dtp-content>.dtp-date-view>header.dtp-header{background:#689f38;color:#fff;text-align:center;padding:3px}.dtp div.dtp-date,.dtp div.dtp-time{background:#8bc34a;text-align:center;color:#fff;padding:10px}.dtp div.dtp-date>div{padding:0;margin:0}.dtp div.dtp-actual-month{font-size:1.5em}.dtp div.dtp-actual-maxtime,.dtp div.dtp-actual-num{font-size:3em;line-height:.9}.dtp div.dtp-actual-year{font-size:1.6em;color:#dcedc8}.dtp div.dtp-year-btn{font-size:1.4em;line-height:30px;cursor:pointer;color:#dcedc8}.dtp div.dtp-year-btn-prev{text-align:right}.dtp div.dtp-year-btn-next{text-align:left}.dtp div.dtp-picker{padding:10px;text-align:center}.dtp div.dtp-actual-time,.dtp div.dtp-picker-month{font-weight:500;text-align:center}.dtp .dtp-close{position:absolute;top:.25em;right:5px;font-size:16px}.dtp .dtp-close>a{color:#fff;text-decoration:none}.dtp .dtp-close>a>i{font-size:1em}.dtp table.dtp-picker-days{margin:0;min-height:220px}.dtp md-virtual-repeat-container.months{height:260px}.dtp table.dtp-picker-days,.dtp table.dtp-picker-days tr,.dtp table.dtp-picker-days tr>td{border:none}.dtp table.dtp-picker-days tr>td{font-size:11px;text-align:center;padding:0}.dtp table.dtp-picker-days tr>td>span.dtp-select-day{color:#bdbdbd!important}.dtp table.dtp-picker-days tr>td>.dtp-select-day{width:36px;height:36px;display:inline-block}.dtp .dtp-picker-time>a,.dtp table.dtp-picker-days tr>td>.dtp-select-day{color:#212121;text-decoration:none;padding:10px;border-radius:50%!important}.dtp table.dtp-picker-days tr>td>a.selected{background:#8bc34a;color:#fff}.dtp table.dtp-picker-days tr>td>a:hover:not(.selected){background:#ddd}.dtp table.dtp-picker-days tr>th{color:#757575;text-align:center;font-weight:700;padding:4px 3px}.dtp .p10>a{color:#689f38;text-decoration:none}.dtp .p10{width:10%}.dtp .p10,.dtp .p20{display:inline-block}.dtp .p20{width:20%}.dtp .p60{width:60%}.dtp .p60,.dtp .p80{display:inline-block}.dtp .p80{width:80%}.dtp a.dtp-meridien-am,.dtp a.dtp-meridien-pm{position:relative;top:10px;color:#212121;font-weight:500;padding:7px 5px;border-radius:50%!important;text-decoration:none;background:#eee;font-size:10px}.dtp .dtp-actual-meridien a.selected{background:#689f38;color:#fff}.dtp .dtp-picker-time>a{display:block;line-height:23px;padding:3px}.dtp .dtp-picker-time{position:absolute;width:30px;height:30px;font-size:1.1em;border-radius:50%;cursor:pointer;text-align:center!important}.dtp .dtp-picker-time>a.dtp-select-hour.selected{background:#689f38;color:#fff}.dtp .dtp-picker-time>a.dtp-select-hour.disabled,.dtp .dtp-picker-time>a.dtp-select-minute.disabled{color:#757575}.dtp .dtp-picker-time>a.dtp-select-minute.selected{background:#8bc34a;color:#fff}.dtp div.dtp-picker-clock{margin:10px 20px 0;padding:10px;border-radius:50%!important;background:#eee}.dtp-clock-center{width:15px;height:15px;background:#757575;border-radius:50%;position:absolute;z-index:50}.dtp .dtp-hand,.dtp .dtp-hour-hand{position:absolute;width:4px;margin-left:-2px;background:#bdbdbd;-webkit-transform:rotate(0deg);transform:rotate(0deg);-webkit-transform-origin:bottom;transform-origin:bottom;z-index:1}.dtp .dtp-minute-hand{width:2px;margin-left:-1px}.dtp .dtp-hand.on{background:#8bc34a}.dtp .dtp-buttons{padding:0 10px 10px;text-align:right}.dtp.hidden,.dtp .hidden{display:none}.dtp .invisible{visibility:hidden}.dtp .left{float:left}.dtp .right{float:right}.dtp .clearfix{clear:both}.dtp .center{text-align:center}",""])},599:function(e,exports,t){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}var r=t(600),a=n(r);angular.module("directive.g+signin",[]).directive("googlePlusSignin",["$window",function(e){var t=/\.apps\.googleusercontent\.com$/;return{restrict:"E",transclude:!0,template:"<span></span>",replace:!0,link:function(n,r,i,o,s){i.clientid+=t.test(i.clientid)?"":".apps.googleusercontent.com",i.$set("data-clientid",i.clientid),i.$set("theme",i.theme);var c={callback:"signinCallback",cookiepolicy:"single_host_origin",requestvisibleactions:"http://schemas.google.com/AddActivity",scope:"https://www.googleapis.com/auth/plus.login https://www.googleapis.com/auth/userinfo.email",height:"standard",width:"wide",state:""};c.clientid=i.clientid,c.theme=i.theme,angular.forEach((0,a["default"])(c),function(e){i.hasOwnProperty(e)&&(c[e]=i[e])}),i.$observe("language",function(t){e.___gcfg={lang:t?t:"en"}});var u=document.createElement("script");u.type="text/javascript",u.async=!0,u.src="https://apis.google.com/js/client:plusone.js";var l=document.getElementsByTagName("script")[0];l.parentNode.insertBefore(u,l),s(function(e,t){u.onload=function(){e.length&&r.append(e),gapi.signin.render(r[0],c)}})}}}]).run(["$window","$rootScope",function(e,t){e.signinCallback=function(e){e&&e.access_token?t.$broadcast("event:google-plus-signin-success",e):t.$broadcast("event:google-plus-signin-failure",e)}}])},643:function(e,exports,t){var n=t(644);"string"==typeof n&&(n=[[e.id,n,""]]);t(485)(n,{});n.locals&&(e.exports=n.locals)},644:function(e,exports,t){exports=e.exports=t(484)(),exports.push([e.id,"",""])},645:function(e,exports,t){var n=t(646);"string"==typeof n&&(n=[[e.id,n,""]]);t(485)(n,{});n.locals&&(e.exports=n.locals)},646:function(e,exports,t){exports=e.exports=t(484)(),exports.push([e.id,".distributor-selection{font-size:16pt;padding:3px;margin:3px}body{margin-top:100px;background-color:transparent}@media (min-width:768px){body{margin-top:50px}}#wrapper{padding-left:0}#page-wrapper{width:100%;padding:0;background-color:#fff}.huge{font-size:50px;line-height:normal}@media (min-width:768px){#wrapper{padding-left:225px}#page-wrapper{padding:10px}}.margin-top-05{margin-top:.5em}.margin-top-15{margin-top:1.5em}.margin-top-20{margin-top:2em}.margin-top-25{margin-top:2.5em}.margin-top-50{margin-top:5em}.issue-warning-background{background-color:orange}.issue-warning-text{color:orange}.issue-danger-background{background-color:red}.issue-danger-text{color:red}.issue-normal-background{background-color:green}.issue-normal-text{color:green}.up-true-background{background-color:green}.up-false-background{background-color:red}.navbar-default{background-color:#1b75bb;border-color:#15598e}.navbar-default .navbar-brand{color:#fff}.navbar-default .navbar-brand:focus,.navbar-default .navbar-brand:hover{color:#55a7e7}.navbar-default .navbar-nav>li>a,.navbar-default .navbar-nav>li>a:focus,.navbar-default .navbar-nav>li>a:hover{color:#fff}.navbar-default .navbar-nav>.active>a,.navbar-default .navbar-nav>.active>a:focus,.navbar-default .navbar-nav>.active>a:hover{color:#fff;background-color:#afd5f3}.navbar-default .navbar-nav>.open>a,.navbar-default .navbar-nav>.open>a:focus,.navbar-default .navbar-nav>.open>a:hover{color:#555;background-color:#d5d5d5}.navbar-default .navbar-nav>.dropdown>a .caret{border-top-color:#777;border-bottom-color:#777}.navbar-default .navbar-nav>.dropdown>a:focus .caret,.navbar-default .navbar-nav>.dropdown>a:hover .caret{border-top-color:#333;border-bottom-color:#333}.navbar-default .navbar-nav>.open>a .caret,.navbar-default .navbar-nav>.open>a:focus .caret,.navbar-default .navbar-nav>.open>a:hover .caret{border-top-color:#555;border-bottom-color:#555}.navbar-default .navbar-toggle{border-color:#ddd}.navbar-default .navbar-toggle:focus,.navbar-default .navbar-toggle:hover{background-color:#ddd}.navbar-default .navbar-toggle .icon-bar{background-color:#ccc}@media (max-width:767px){.navbar-default .navbar-nav .open .dropdown-menu>li>a{color:#777}.navbar-default .navbar-nav .open .dropdown-menu>li>a:focus,.navbar-default .navbar-nav .open .dropdown-menu>li>a:hover{color:#333}}.top-nav{padding:0 15px}.top-nav>li{display:inline-block;float:left}.top-nav>li>a{padding-top:15px;padding-bottom:15px;line-height:20px;color:#efefef}.top-nav>.open>a,.top-nav>.open>a:focus,.top-nav>.open>a:hover,.top-nav>li>a:focus,.top-nav>li>a:hover{color:#fff;background-color:#1b75bb}.top-nav>.open>.dropdown-menu{float:left;position:absolute;margin-top:0;border:1px solid rgba(0,0,0,.15);border-top-left-radius:0;border-top-right-radius:0;background-color:#fff;box-shadow:0 6px 12px rgba(0,0,0,.175)}.top-nav>.open>.dropdown-menu>li>a{white-space:normal}ul.message-dropdown{padding:0;max-height:250px;overflow-x:hidden;overflow-y:auto}li.message-preview{width:275px;border-bottom:1px solid rgba(0,0,0,.15)}li.message-preview>a{padding-top:15px;padding-bottom:15px}li.message-footer{margin:5px 0}ul.alert-dropdown{width:200px}@media (min-width:768px){.side-nav{position:fixed;top:51px;left:225px;margin-left:-225px;border:none;border-radius:0;overflow-y:auto;background-color:#1b75bb;bottom:0;overflow-x:hidden;padding-bottom:40px}.side-nav,.side-nav>li>a{width:225px}.side-nav li a:focus,.side-nav li a:hover{outline:none;background-color:#3f9ce3!important}}.side-nav>li>ul{padding:0}.side-nav>li>ul>li>a{display:block;padding:10px 15px 10px 38px;text-decoration:none;color:#d4d4d4}.side-nav>li>ul>li>a:hover{color:#fff}.flot-chart{display:block;height:400px}.flot-chart-content{width:100%;height:100%}.huge{font-size:40px}.panel-green{border-color:#5cb85c}.panel-green>.panel-heading{border-color:#5cb85c;color:#fff;background-color:#5cb85c}.panel-green>a{color:#5cb85c}.panel-green>a:hover{color:#3d8b3d}.panel-red{border-color:#d9534f}.panel-red>.panel-heading{border-color:#d9534f;color:#fff;background-color:#d9534f}.panel-red>a{color:#d9534f}.panel-red>a:hover{color:#b52b27}.panel-yellow{border-color:#f0ad4e}.panel-yellow>.panel-heading{border-color:#f0ad4e;color:#fff;background-color:#f0ad4e}.panel-yellow>a{color:#f0ad4e}.panel-yellow>a:hover{color:#df8a13}.toolbar{margin-bottom:10px}.entity-key{font-family:Monaco,Consolas,Lucida Console,dejavu sans mono,monospace;font-size:11px}.proof-of-play-label{padding-bottom:10px;padding-top:10px}.copy-ready-transparent{color:transparent}.no-devices{text-align:center}.properties-word-break{width:390px;word-wrap:break-word;display:block}.command-history-command{width:375px;word-wrap:break-word;display:block}.hostname-word-break{width:200px;word-wrap:break-word;display:inline-block}[data-ng-click],[ng-click],[x-ng-click]{cursor:pointer}#proofplay-selected-items{min-width:0!important;margin:0 auto;padding:0 auto}.radio-button{padding:3px}.horizontal-submit{margin:.5em}.horizontal-submit,.radio-horizontal{display:flex;align-self:center;-ms-flex-align:center;-webkit-align-items:center;-webkit-box-align:center}md-toolbar.md-default-theme:not(.md-menu-toolbar),md-toolbar:not(.md-menu-toolbar){background-color:#1b75bb!important;max-height:64px;min-height:64px}.md-toolbar-tools{background-color:#000!important;max-height:64px;min-height:64px}.skykit-image{max-width:100%;height:33px}@media (max-width:767px){md-toolbar.md-default-theme:not(.md-menu-toolbar),md-toolbar:not(.md-menu-toolbar){margin-top:-50px;margin-bottom:50px}}.center-block{text-align:center}.ellipsis-overflow,.proof-of-play-selected-item{width:100%;white-space:nowrap;overflow:hidden;text-align:left;text-overflow:ellipsis}.proof-of-play-tenant-name-option{width:7em;white-space:nowrap;overflow:hidden;text-align:center;positition:absolute;text-overflow:ellipsis}.proof-of-play-horizontal-top-bar{align-self:center;-ms-flex-align:center;-webkit-align-items:center;-webkit-box-align:center;margin-top:.5em;margin-bottom:.5em;align-items:center}.my-flex,.proof-of-play-horizontal-top-bar{display:flex;justify-content:center}.bigger-buttons{padding:.4em;min-width:88px;border-radius:5px;font-size:16px;text-align:center;text-decoration:none;border:none;outline:none}.admin-container{display:flex;align-content:flex-start}.registration-event-column{height:110px;display:inline-block;vertical-align:top;overflow:scroll}.pull-command-send-button-up{margin-top:-2px}header.dtp-header{background:#1b75bb!important}.dtp div.dtp-date,.dtp div.dtp-time{background:#000}.dtp .dtp-actual-meridien a.selected,.dtp .dtp-picker-time>a.dtp-select-hour.selected,.dtp table.dtp-picker-days tr>td>a.selected{background:#1b75bb!important}.dtp .dtp-hand.on{background:#000}.device-properties-switch{margin-top:-1px}.md-content-command-override md-content{overflow:unset}.pull-tooltip-left{margin-left:-55px}.command-button-right{float:right;flex-direction:row-reverse}md-select{display:block;margin:10px 0 8px;padding-bottom:2px;position:relative;min-width:180px;max-width:180px}.small-delete-button{float:right;min-width:25px;margin-top:-15px;margin-right:-5px}.tenant-image-name{width:10em;white-space:nowrap;overflow:hidden;text-overflow:ellipsis}",""]);
},648:function(e,exports,t){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(e,t,n,r,a,o,s,c,u,l,d,v,f){"ngInject";var m=this;return m.tenantKey=t.tenantKey,m.deviceKey=t.deviceKey,m.fromDevices="true"===t.fromDevices,m.currentDevice={},m.commandEvents=[],m.generateLocalFromUTC=function(e){var t=i["default"].utc(e).toDate();return t=(0,i["default"])(t).format("YYYY-MM-DD hh:mm:ss A")},m.replaceCommandTime=function(e){for(var t=0;t<e.length;t++){var n=e[t];n.postedTime&&(n.postedTime=m.generateLocalFromUTC(n.postedTime)),n.confirmedTime&&(n.confirmedTime=m.generateLocalFromUTC(n.confirmedTime))}},m.getEvents=function(e,t,n){l.start();var r=a.getCommandEventsByKey(e,t,n);return r.then(function(e){return m.replaceCommandTime(e.events),m.event_next_cursor=e.next_cursor,m.event_prev_cursor=e.prev_cursor,m.commandEvents=e.events,l.complete()})},m.getEventsTimeOut=function(e,t,n){return f(function(){return m.getEvents(e,t,n)},1e3)},m.commandHistorySelected=function(){return m.getEvents(m.deviceKey)},m.paginateEventCall=function(e){return e?m.getEvents(m.deviceKey,null,m.event_next_cursor):m.getEvents(m.deviceKey,m.event_prev_cursor,null)},m.initialize=function(){var e=a.getDeviceByKey(m.deviceKey);return e.then(function(e){return m.onGetDeviceSuccess(e)},function(e){return m.onGetDeviceFailure(e)}),m.getEvents(m.deviceKey)},m.onGetDeviceSuccess=function(e){return m.currentDevice=e,e.timezone!==m.selectedTimezone&&(m.selectedTimezone=e.timezone),void 0===m.tenantKey&&(m.tenantKey=m.currentDevice.tenantKey),"true"===t.fromDevices?(m.backUrl="/#/devices",m.backUrlText="Back to devices"):m.currentDevice.isUnmanagedDevice===!0?(m.backUrl="/#/tenants/"+m.tenantKey+"/unmanaged",m.backUrlText="Back to tenant unmanaged devices"):(m.backUrl="/#/tenants/"+m.tenantKey+"/managed",m.backUrlText="Back to tenant managed devices")},m.onGetDeviceFailure=function(t){v.showErrorToast("Oops. We were unable to fetch the details for this device at this time.");var r="No detail for device_key #"+m.deviceKey+". Error: "+t.status+" "+t.statusText;return e.error(r),n.go("devices")},m.onResetContent=function(){l.start();var e=s.contentDelete(m.deviceKey);return e.then(m.onResetContentSuccess,m.onResetContentFailure)},m.onResetContentSuccess=function(){return l.complete(),m.getEventsTimeOut(m.deviceKey),v.showSuccessToast("We posted your reset content command into the player's queue.")},m.onResetContentFailure=function(t){return l.complete(),e.error("Reset content command error: "+t.status+" "+t.statusText),u.show("Oops...","We were unable to post your reset content command into the player's queue.","error")},m.onUpdateContent=function(){l.start();var e=s.contentUpdate(m.deviceKey);return e.then(m.onUpdateContentSuccess,m.onUpdateContentFailure)},m.onUpdateContentSuccess=function(){return l.complete(),m.getEventsTimeOut(m.deviceKey),v.showSuccessToast("We posted your update content command into the player's queue.")},m.onUpdateContentFailure=function(t){return l.complete(),e.error("Content update command error: "+t.status+" "+t.statusText),u.show("Oops...","We were unable to post your update content command into the player's queue.","error")},m.onResetPlayer=function(){l.start();var e=s.reset(m.deviceKey);return e.then(m.onResetPlayerSuccess,m.onResetPlayerFailure)},m.onResetPlayerSuccess=function(){return l.complete(),m.getEventsTimeOut(m.deviceKey),v.showSuccessToast("We posted your reset player command into the player's queue.")},m.onResetPlayerFailure=function(t){return l.complete(),e.error("Reset player command error: "+t.status+" "+t.statusText),u.show("Oops...","We were unable to post your reset player command into the player's queue.","error")},m.onPanelOn=function(){l.start();var e=s.powerOn(m.deviceKey);return e.then(m.onPanelOnSuccess,m.onPanelOnFailure)},m.onPanelOnSuccess=function(){return l.complete(),m.getEventsTimeOut(m.deviceKey),v.showSuccessToast("We posted your panel on command into the player's queue.")},m.onPanelOnFailure=function(t){return l.complete(),e.error("Panel on command error: "+t.status+" "+t.statusText),u.show("Oops...","We were unable to post your panel on command into the player's queue.","error")},m.onPanelOff=function(){l.start();var e=s.powerOff(m.deviceKey);return e.then(m.onPanelOffSuccess,m.onPanelOffFailure)},m.onPanelOffSuccess=function(){return l.complete(),m.getEventsTimeOut(m.deviceKey),v.showSuccessToast("We posted your panel off command into the player's queue.")},m.onPanelOffFailure=function(t){return l.complete(),e.error("Panel off command error: "+t.status+" "+t.statusText),u.show("Oops...","We were unable to post your panel off command into the player's queue.","error")},m.onUpdateDevice=function(){l.start();var e=s.updateDevice(m.deviceKey);return e.then(m.onUpdateDeviceSuccess,m.onUpdateDeviceFailure)},m.onUpdateDeviceSuccess=function(){return l.complete(),m.getEventsTimeOut(m.deviceKey),v.showSuccessToast("We posted your update device command into the player's queue.")},m.onUpdateDeviceFailure=function(t){return l.complete(),e.error("Update device command error: "+t.status+" "+t.statusText),u.show("Oops...","We were unable to post your update device command into the player's queue.","error")},m.onVolumeChange=function(){l.start();var e=s.volume(m.deviceKey,m.currentDevice.volume);return e.then(m.onVolumeChangeSuccess(m.currentDevice.volume),m.onVolumeChangeFailure)},m.onVolumeChangeSuccess=function(e){return l.complete(),m.getEventsTimeOut(m.deviceKey),v.showSuccessToast("We posted your volume change command of "+e+" into the player's queue.")},m.onVolumeChangeFailure=function(t){return l.complete(),e.error("Volume change command error: "+t.status+" "+t.statusText),u.show("Oops...","We were unable to post your volume change command into the player's queue.","error")},m.onCustomCommand=function(){l.start();var e=s.custom(m.deviceKey,m.currentDevice.custom);return e.then(m.onCustomCommandSuccess(m.currentDevice.custom),m.onCustomCommandFailure)},m.onCustomCommandSuccess=function(e){return l.complete(),m.getEventsTimeOut(m.deviceKey),v.showSuccessToast("We posted your custom command '"+e+"' into the player's queue.")},m.onCustomCommandFailure=function(t){return l.complete(),e.error("Custom command error: "+t.status+" "+t.statusText),u.show("Oops...","We were unable to post your custom command into the player's queue.","error")},m.onDiagnosticsToggle=function(){l.start();var e=s.toggleDiagnostics(m.deviceKey);return e.then(m.onToggleDiagnosticsSuccess,m.onToggleDiagnosticsFailure)},m.onToggleDiagnosticsSuccess=function(){return l.complete(),v.showSuccessToast("We posted your diagnostics command into the player's queue.")},m.onToggleDiagnosticsFailure=function(t){return l.complete(),e.error("Diagnostics command error: "+t.status+" "+t.statusText),u.show("Oops...","We were unable to post your diagnostics command into the player's queue.","error")},m.onRestart=function(){l.start();var e=s.restart(m.deviceKey);return e.then(m.onRestartSuccess,m.onRestartFailure)},m.onRestartSuccess=function(){return l.complete(),v.showSuccessToast("We posted your restart command into the player's queue.")},m.onRestartFailure=function(t){return l.complete(),e.error("Restart command error: "+t.status+" "+t.statusText),u.show("Oops...","We were unable to post your restart command into the player's queue.","error")},m.onPostLog=function(){l.start();var e=s.postLog(m.deviceKey);return e.then(m.onPostLogSuccess,m.onPostLogFailure)},m.onPostLogSuccess=function(){return l.complete(),v.showSuccessToast("We posted your post log command into the player's queue.")},m.onPostLogFailure=function(t){return l.complete(),e.error("Post log command error: "+t.status+" "+t.statusText),u.show("Oops...","We were unable to post your post log command into the player's queue.","error")},m}r.$inject=["$log","$stateParams","$state","SessionsService","DevicesService","LocationsService","CommandsService","TimezonesService","sweet","ProgressBarService","$mdDialog","ToastsService","$timeout"],Object.defineProperty(exports,"__esModule",{value:!0}),exports.DeviceDetailsCommandsCtrl=void 0;var a=t(372),i=n(a);exports.DeviceDetailsCommandsCtrl=r},649:function(e,exports,t){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(e,t,n,r,a,o,c,l,v,f,m,p,h,g,y,b,D){"ngInject";var S=this;S.tenantKey=t.tenantKey,S.deviceKey=t.deviceKey,S.fromDevices="true"===t.fromDevices,S.currentDevice={},S.locations=[],S.commandEvents=[],S.dayRange=30,S.issues=[],S.timezones=[],S.selectedTimezone=void 0;var T=y.createFormattedStartAndEndDateFromToday(30),_=(0,s["default"])(T,2);return S.startTime=_[0],S.endTime=_[1],S.enrollmentEvents=[],S.logoChange=!1,S.controlsModeOptions=["visible","invisible","disabled"],S.overlayChanged=!1,S.checkForOverlayChanges=function(){var e=!1,t=S.currentDevice.overlays,n=S.currentDeviceCopy.overlays,r=["top_left","top_right","bottom_right","bottom_left"],a=!0,o=!1,s=void 0;try{for(var c,u=(0,i["default"])(r);!(a=(c=u.next()).done);a=!0){var l=c.value;t[l].size!==n[l].size&&(e=!0),t[l].type!==n[l].type&&(e=!0),"logo"===t[l].type&&t[l].type+": "+t[l].name!==n[l].name&&(e=!0)}}catch(d){o=!0,s=d}finally{try{!a&&u["return"]&&u["return"]()}finally{if(o)throw s}}S.overlayChanged=e},S.revertToTenantOverlay=function(e){p.start(),S.loadingOverlays=!0;var n=o.getTenantByKey(t.tenantKey);n.then(function(e){var t=e.overlays;delete t.key;for(var n in t)"logo"===t[n].type?t[n].image_key=t[n].imageKey.key:t[n].image_key=null;var r=a.saveOverlaySettings(S.deviceKey,t.bottom_left,t.bottom_right,t.top_right,t.top_left);r.then(function(e){var t=a.getDeviceByKey(S.deviceKey);t.then(function(e){S.currentDevice.overlays=e.overlays,S.currentDeviceCopy.overlays=angular.copy(S.currentDevice.overlays),S.loadingOverlays=!1,p.complete(),g.showSuccessToast("We saved your update.")})}),r["catch"](function(e){p.complete(),g.showErrorToast("Something went wrong")})})},S.adjustControlsMode=function(){var e=S.currentDevice.controlsMode;p.start();var t=a.adjustControlsMode(S.deviceKey,e);t.then(function(){p.complete(),g.showSuccessToast("Your controls mode selection was succesfully changed to: "+e)}),t["catch"](function(){p.complete()})},S.adjustOverlayStatus=function(e){S.currentDevice.overlayStatus=e,p.start();var t=a.save(S.currentDevice);return t.then(function(){var e=a.getDeviceByKey(S.deviceKey);e.then(function(e){S.onGetDeviceSuccess(e),p.complete()},function(e){return S.onGetDeviceFailure(e)})})},S.submitOverlaySettings=function(){var e=angular.copy(S.currentDeviceCopy.overlays);p.start(),S.loadingOverlays=!0;var t=a.saveOverlaySettings(S.deviceKey,e.bottom_left,e.bottom_right,e.top_right,e.top_left);t.then(function(e){var t=a.getDeviceByKey(S.deviceKey);t.then(function(e){S.currentDevice.overlays=e.overlays,S.currentDeviceCopy.overlays=angular.copy(S.currentDevice.overlays),S.loadingOverlays=!1,p.complete(),g.showSuccessToast("We saved your update.")})}),t["catch"](function(e){p.complete(),g.showErrorToast("Something went wrong")})},S.getTenantImagesAndRefreshDevice=function(){var e=a.getDeviceByKey(S.deviceKey);e.then(function(e){S.onGetDeviceSuccess(e),S.getTenantImages()}),e["catch"](function(e){S.onGetDeviceFailure(e)})},S.getTenantImages=function(){S.OVERLAY_TYPES=[{size:null,type:null,name:"none",realName:"none","new":!1,image_key:null},{size:null,type:"datetime",name:"datetime",realName:"datetime","new":!0,image_key:null}],p.start();var e=D.getImages(S.tenantKey);e.then(function(e){S.tenantImages=e,p.complete();var t=!0,n=!1,r=void 0;try{for(var a,o=(0,i["default"])(S.tenantImages);!(t=(a=o.next()).done);t=!0)for(var s=a.value,c=["small","large"],u=0;u<c.length;u++){var l=c[u],v={realName:angular.copy(s.name),name:"logo: "+s.name,type:"logo",size:l,image_key:s.key};S.OVERLAY_TYPES.push(v)}}catch(f){n=!0,r=f}finally{try{!t&&o["return"]&&o["return"]()}finally{if(n)throw r}}S.OVERLAY_TYPES.sort(d["default"])}),e["catch"](function(){p.complete()})},S.replaceIssueTime=function(e){for(var t=0;t<e.length;t++){var n=e[t];n.created&&(n.created=y.generateLocalFromUTC(n.created)),n.updated&&(n.updated=y.generateLocalFromUTC(n.updated))}},S.replaceCommandTime=function(e){for(var t=0;t<e.length;t++){var n=e[t];n.postedTime&&(n.postedTime=y.generateLocalFromUTC(n.postedTime)),n.confirmedTime&&(n.confirmedTime=y.generateLocalFromUTC(n.confirmedTime))}},S.localFromUtc=function(e){for(var t=0;t<e.length;t++){var n=e[t];n.utcTimestamp&&(n.utcTimestamp=y.generateLocalFromUTC(n.utcTimestamp))}},S.copyDeviceKey=function(){return g.showSuccessToast("Device key copied to your clipboard")},S.copyCorrelationIdentifier=function(){return g.showSuccessToast("Correlation ID copied to your clipboard")},S.getIssues=function(e,t,n,r,i){p.start();var o=a.getIssuesByKey(e,t,n,r,i);return o.then(function(e){return S.replaceIssueTime(e.issues),S.issues=e.issues,S.prev_cursor=e.prev,S.next_cursor=e.next,p.complete()})},S.getEvents=function(e,t,n){p.start();var r=a.getCommandEventsByKey(e,t,n);return r.then(function(e){return S.replaceCommandTime(e.events),S.event_next_cursor=e.next_cursor,S.event_prev_cursor=e.prev_cursor,S.commandEvents=e.events,p.complete()})},S.getEnrollmentEvents=function(e){p.start();var t=f.getEnrollmentEvents(e);return t.then(function(e){return S.enrollmentEvents=e,S.localFromUtc(e),p.complete()})},S.paginateCall=function(e){return e?S.getIssues(S.deviceKey,S.epochStart,S.epochEnd,null,S.next_cursor):S.getIssues(S.deviceKey,S.epochStart,S.epochEnd,S.prev_cursor,null)},S.paginateEventCall=function(e){return e?S.getEvents(S.deviceKey,null,S.event_next_cursor):S.getEvents(S.deviceKey,S.event_prev_cursor,null)},S.initialize=function(){S.epochStart=(0,u["default"])(S.startTime,"YYYY-MM-DD hh:mm A").unix(),S.epochEnd=(0,u["default"])(S.endTime,"YYYY-MM-DD hh:mm A").unix();var e=v.getCustomTimezones();e.then(function(e){return S.timezones=e}),S.panelModels=a.getPanelModels(),S.panelInputs=a.getPanelInputs();var t=a.getDeviceByKey(S.deviceKey);return t.then(function(e){return S.onGetDeviceSuccess(e)},function(e){return S.onGetDeviceFailure(e)}),S.getTenantImages(),S.getEvents(S.deviceKey),S.getIssues(S.deviceKey,S.epochStart,S.epochEnd),S.getEnrollmentEvents(S.deviceKey)},S.onGetDeviceSuccess=function(e){S.currentDevice=e,S.currentDeviceCopy=angular.copy(S.currentDevice),e.timezone!==S.selectedTimezone&&(S.selectedTimezone=e.timezone),void 0===S.tenantKey&&(S.tenantKey=S.currentDevice.tenantKey),"true"===t.fromDevices?(S.backUrl="/#/devices",S.backUrlText="Back to devices"):S.currentDevice.isUnmanagedDevice===!0?(S.backUrl="/#/tenants/"+S.tenantKey+"/unmanaged",S.backUrlText="Back to tenant unmanaged devices"):(S.backUrl="/#/tenants/"+S.tenantKey+"/managed",S.backUrlText="Back to tenant managed devices");var n=c.getLocationsByTenantKey(S.tenantKey);return n.then(function(e){return S.locations=e,S.setSelectedOptions()})},S.onGetDeviceFailure=function(t){g.showErrorToast("Oops. We were unable to fetch the details for this device at this time.");var r="No detail for device_key "+S.deviceKey+". Error: "+t.status+" "+t.statusText;return e.error(r),n.go("devices")},S.setSelectedOptions=function(){if(null===S.currentDevice.panelModel)S.currentDevice.panelModel=S.panelModels[0],S.currentDevice.panelInput=S.panelInputs[0];else{for(var e=0;e<S.panelModels.length;e++){var t=S.panelModels[e];t.id===S.currentDevice.panelModel&&(S.currentDevice.panelModel=t)}for(var n=0;n<S.panelInputs.length;n++){var r=S.panelInputs[n],a=r.parentId===S.currentDevice.panelModel.id;a&&r.id.toLowerCase()===S.currentDevice.panelInput&&(S.currentDevice.panelInput=r)}}if(null===S.currentDevice.locationKey);else for(var i=0;i<S.locations.length;i++){var o=S.locations[i];o.key===S.currentDevice.locationKey&&(S.currentDevice.location=o)}},S.onSaveDevice=function(){p.start(),void 0!==S.currentDevice.location&&void 0!==S.currentDevice.location.key&&(S.currentDevice.locationKey=S.currentDevice.location.key),void 0!==S.currentDevice.panelModel.id&&"None"!==S.currentDevice.panelModel.id&&(S.currentDevice.panelModelNumber=S.currentDevice.panelModel.id),void 0!==S.currentDevice.panelInput.id&&"None"!==S.currentDevice.panelInput.id&&(S.currentDevice.panelSerialInput=S.currentDevice.panelInput.id.toLowerCase()),S.currentDevice.timezone=S.selectedTimezone;var e=a.save(S.currentDevice);return e.then(S.onSuccessDeviceSave,S.onFailureDeviceSave)},S.onSuccessDeviceSave=function(){return p.complete(),g.showSuccessToast("We saved your update.")},S.onFailureDeviceSave=function(t){return p.complete(),409===t.status?(e.info("Failure saving device. Customer display code already exists for tenant: "+t.status+" "+t.statusText),m.show("Oops...","This customer display code already exists for this tenant. Please choose another.","error")):(e.error("Failure saving device: "+t.status+" "+t.statusText),g.showErrorToast("Oops. We were unable to save your updates to this device at this time."))},S.onPanelSleep=function(e){p.start();var t=l.panelSleep(S.deviceKey,e);return t.then(S.onPanelSleepSuccess,S.onPanelSleepFailure)},S.onPanelSleepSuccess=function(){return p.complete(),g.showSuccessToast("We toggled the panel sleep attribute. The player should adjust to these changes within 15 minutes.")},S.onPanelSleepFailure=function(e){return p.complete(),m.show("Oops...","We were unable to toggle the panel sleep attribute.","error")},S.confirmDeviceDelete=function(e,t){var n=h.confirm({title:"Are you sure to delete this device?",textContent:"Please remember, you MUST remove this device from Content Manager before deleting it from Provisioning.",targetEvent:e,ok:"Delete",cancel:"Cancel"}),r=h.show(n),a=function(){return S.onConfirmDelete(t)},i=function(){return S.onConfirmCancel()};return r.then(a,i)},S.onConfirmDelete=function(t){var r=function(){return g.showSuccessToast("We processed your delete request."),n.go("devices")},i=function(n){var r="We were unable to complete your delete request at this time.";return g.showErrorToast(r),e.error("Delete device failure for device_key "+t+": "+n.status+" "+n.statusText)},o=a["delete"](t);return o.then(r,i)},S.onConfirmCancel=function(){return g.showInfoToast("We canceled your delete request.")},S.onProofOfPlayLoggingCheck=function(){if(S.currentDevice.proofOfPlayLogging){var e=null===S.currentDevice.locationKey,t=null===S.currentDevice.customerDisplayCode;return e?(m.show("Oops...","You must have a Location to enable Proof of play.","error"),S.currentDevice.proofOfPlayLogging=!1):t?(m.show("Oops...","You must have a Display code to enable Proof of play.","error"),S.currentDevice.proofOfPlayLogging=!1):S.onSaveDevice()}return S.onSaveDevice()},S.onUpdateLocation=function(){return S.onSaveDevice()},S.autoGenerateCustomerDisplayCode=function(){var e="";return S.currentDevice.customerDisplayName&&(e=S.currentDevice.customerDisplayName.toLowerCase(),e=e.replace(/\s+/g,"_"),e=e.replace(/\W+/g,"")),S.currentDevice.customerDisplayCode=e},S.logglyForUser=function(){var e=r.getUserEmail().split("@")[1];return"demo.agosto.com"===e||"agosto.com"===e},S.onClickRefreshButton=function(){p.start(),S.startTime=y.convertToMomentIfNotAlready(S.startTime),S.endTime=y.convertToMomentIfNotAlready(S.endTime),S.epochStart=(0,u["default"])(S.startTime,"YYYY-MM-DD hh:mm A").unix(),S.epochEnd=(0,u["default"])(S.endTime,"YYYY-MM-DD hh:mm A").unix(),S.prev_cursor=null,S.next_cursor=null;var e=a.getIssuesByKey(S.deviceKey,S.epochStart,S.epochEnd,S.prev_cursor,S.next_cursor);return e.then(function(e){return S.onRefreshIssuesSuccess(e)},function(e){return S.onRefreshIssuesFailure(e)})},S.onRefreshIssuesSuccess=function(e){return S.replaceIssueTime(e.issues),S.issues=e.issues,S.prev_cursor=e.prev,S.next_cursor=e.next,p.complete()},S.onRefreshIssuesFailure=function(t){return p.complete(),g.showInfoToast("We were unable to refresh the device issues list at this time."),e.error("Failure to refresh device issues: "+t.status+" "+t.statusText)},S}r.$inject=["$log","$stateParams","$state","SessionsService","DevicesService","TenantsService","LocationsService","CommandsService","TimezonesService","IntegrationEvents","sweet","ProgressBarService","$mdDialog","ToastsService","DateManipulationService","$timeout","ImageService"],Object.defineProperty(exports,"__esModule",{value:!0}),exports.DeviceDetailsCtrl=void 0;var a=t(650),i=n(a),o=t(655),s=n(o),c=t(372),u=n(c),l=t(659),d=n(l);exports.DeviceDetailsCtrl=r},660:function(e,exports,t){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(e,t,n,r,a,o,s){"ngInject";var c=this;return c.distributorKey=void 0,c.devices=[],c.devicesPrev=null,c.devicesNext=null,c.selectedButton="Serial Number",c.serialDevices={},c.disabled=!0,c.macDevices={},c.gcmidDevices={},c.unmanagedSelectedButton="MAC",c.unmanagedSerialDevices={},c.unmanagedDisabled=!0,c.unmanagedDevicesPrev=null,c.unmanagedDevicesNext=null,c.unmanagedDevices=[],c.unmanagedMacDevices={},c.unmanagedGCMidDevices={},c.devicesToMatchOnUnmanaged=[],c.devicesToMatchOnManaged=[],c.refreshManagedDevices=function(){return c.devicesPrev=null,c.devicesNext=null,c.getManagedDevices(c.distributorKey,c.devicesPrev,c.devicesNext)},c.refreshUnmanagedDevices=function(){return c.unmanagedDevicesPrev=null,c.unmanagedDevicesNext=null,c.getUnmanagedDevices(c.distributorKey,c.unmanagedDevicesPrev,c.unmanagedDevicesNext)},c.changeRadio=function(e){e?(c.unmanagedSearchText="",c.unmanagedDisabled=!0,c.unmanagedSerialDevices={},c.unmanagedMacDevices={},c.devicesToMatchOnUnmanaged=[]):(c.searchText="",c.disabled=!0,c.serialDevices={},c.macDevices={},c.devicesToMatchOnManaged=[])},c.editItem=function(e){return n.editItem(e,!0)},c.prepareForEditView=function(e,t){var n=void 0,r=void 0,a=void 0;return e?(n="MAC"===c.unmanagedSelectedButton,r="Serial Number"===c.unmanagedSelectedButton,a="GCM ID"===c.unmanagedSelectedButton,n?c.editItem(c.unmanagedMacDevices[t]):r?c.editItem(c.unmanagedSerialDevices[t]):c.editItem(c.unmanagedGCMidDevices[t])):(n="MAC"===c.selectedButton,r="Serial Number"===c.selectedButton,a="GCM ID"===c.selectedButton,n?c.editItem(c.macDevices[t]):r?c.editItem(c.serialDevices[t]):c.editItem(c.gcmidDevices[t]))},c.controlOpenButton=function(e,t){e?(c.unmanagedDisabled=!t,c.unmanagedDisabledButtonLoading=!1):(c.disabled=!t,c.disabledButtonLoading=!1)},c.isResourceValid=function(e,t){var n=e?c.devicesToMatchOnUnmanaged:c.devicesToMatchOnManaged,r=!1,a=!0,o=!1,s=void 0;try{for(var u,l=(0,i["default"])(n);!(a=(u=l.next()).done);a=!0){var d=u.value;t===d&&(r=!0)}}catch(v){o=!0,s=v}finally{try{!a&&l["return"]&&l["return"]()}finally{if(o)throw s}}return c.controlOpenButton(e,r),r},c.searchDevices=function(e,t){var r=void 0;r=e?c.unmanagedSelectedButton:c.selectedButton;var a=!1,i=null;return n.searchDevices(t,r,a,i,c.distributorKey,e).then(function(t){var n=void 0;if(t.success){var a=t.devices;return"Serial Number"===r?(e?c.unmanagedSerialDevices=a[1]:c.serialDevices=a[1],n=a[0]):"MAC"===r?(e?c.unmanagedMacDevices=a[1]:c.macDevices=a[1],n=a[0]):(e?c.unmanagedGCMidDevices=a[1]:c.gcmidDevices=a[1],n=a[0]),e?c.devicesToMatchOnUnmanaged=n:c.devicesToMatchOnManaged=n,n}return[]})},c.getManagedDevices=function(e,t,r){o.start();var a=n.getDevicesByDistributor(e,t,r);return a.then(function(e){return c.devices=e.devices,c.devicesNext=e.next_cursor,c.devicesPrev=e.prev_cursor,c.getFetchSuccess()},function(e){return c.getFetchFailure(e)})},c.getUnmanagedDevices=function(e,t,r){o.start();var a=n.getUnmanagedDevicesByDistributor(e,t,r);return a.then(function(e){return c.unmanagedDevices=e.devices,c.unmanagedDevicesPrev=e.prev_cursor,c.unmanagedDevicesNext=e.next_cursor,c.getFetchSuccess()},function(e){return c.getFetchFailure(e)})},c.initialize=function(){return c.distributorKey=a.getCurrentDistributorKey(),c.getManagedDevices(c.distributorKey,c.devicesPrev,c.devicesNext),c.getUnmanagedDevices(c.distributorKey,c.unmanagedDevicesPrev,c.unmanagedDevicesNext)},c.getFetchSuccess=function(){return o.complete()},c.getFetchFailure=function(e){o.complete();var t="Unable to fetch devices. Error: "+e.status+" "+e.statusText+".";return s.show("Oops...",t,"error")},c.paginateCall=function(e,t){if(e)t&&c.getManagedDevices(c.distributorKey,null,c.devicesNext),t||c.getUnmanagedDevices(c.distributorKey,null,c.unmanagedDevicesNext);else if(t&&c.getManagedDevices(c.distributorKey,c.devicesPrev,null),!t)return c.getUnmanagedDevices(c.distributorKey,c.unmanagedDevicesPrev,null)},c}r.$inject=["$stateParams","$log","DevicesService","$state","SessionsService","ProgressBarService","sweet"],Object.defineProperty(exports,"__esModule",{value:!0}),exports.DevicesListingCtrl=void 0;var a=t(650),i=n(a);exports.DevicesListingCtrl=r},661:function(e,exports){"use strict";function t(e,t,n,r,a){"ngInject";var i=this;return i.getAllDistributors=function(){i.loadingAllDistributors=!0;var t=e.getAllDistributors();return t.then(function(e){return i.loadingAllDistributors=!1,i.allDistributors=e})},i.addUserToDistributor=function(t,a,o,s,c){o||(o=!1);var u=o?"with":"without";s||(s=i.distributorsAsAdmin[0]);var l=r.confirm({title:"Are you sure?",textContent:a+" will be added to "+s+"\n        "+u+" administrator privileges",targetEvent:t,ok:"Of course!",cancel:"Oops, nevermind."});return r.show(l).then(function(){var t=e.addUserToDistributor(a,s,o);return t.then(function(e){return n.showSuccessToast(e.message),i.user={},c.$setPristine(),c.$setUntouched(),setTimeout(function(){return i.getUsersOfDistributor()},2e3)}),t["catch"](function(e){return n.showErrorToast(e.data.message)})})},i.makeDistributor=function(t,a,o,s){var c=r.confirm({title:"Are you sure?",textContent:"If you proceed, "+a+" will be created.",targetEvent:t,ariaLabel:"Lucky day",ok:"Yeah!",cancel:"Forget it."});return r.show(c).then(function(){var t=e.makeDistributor(a,o);return t.then(function(e){return i.distributor={},s.$setPristine(),s.$setUntouched(),n.showSuccessToast(e.message),setTimeout(function(){return i.allDistributors=i.getAllDistributors()},2e3)}),t["catch"](function(e){return n.showErrorToast(e.data.message)})})},i.getUsersOfDistributor=function(){i.loadingUsersOfDistributor=!0;var n=t.getCurrentDistributorKey(),r=e.getUsersOfDistributor(n);return r.then(function(e){return i.loadingUsersOfDistributor=!1,i.usersOfDistributor=e})},i.switchDistributor=function(e){return a.switchDistributor(e),n.showSuccessToast("Distributor "+e.name+" selected!")},i.initialize=function(){if(i.getUsersOfDistributor(),i.getAllDistributors(),i.isAdmin=t.getIsAdmin(),i.distributorsAsAdmin=t.getDistributorsAsAdmin(),i.currentDistributorName=t.getCurrentDistributorName(),i.isAdmin)return i.getAllDistributors()},i}t.$inject=["AdminService","SessionsService","ToastsService","$mdDialog","DistributorsService"],Object.defineProperty(exports,"__esModule",{value:!0}),exports.AdminCtrl=t},662:function(e,exports){"use strict";function t(e,t,n,r,a,i,o,s,c,u,l){"ngInject";var d=this;return d.onGooglePlusSignInSuccess=function(e,t){d.googlePlusSignInButtonClicked||s.start(),o.removeUserInfo();var n=o.login(t);return n.then(d.loginSuccess,d.loginFailure)},d.onGooglePlusSignInFailure=function(e,t){if(d.googlePlusSignInButtonClicked)return s.complete(),i.show("Oops...","Unable to authenticate to Google+.","error")},e.$on("event:google-plus-signin-success",d.onGooglePlusSignInSuccess),e.$on("event:google-plus-signin-failure",d.onGooglePlusSignInFailure),d.initializeSignIn=function(){return d.clientId=a.OAUTH_CLIENT_ID,d.state=a.STATE,d.googlePlusSignInButtonClicked=!1},d.initializeSignOut=function(){return o.removeUserInfo(),r(d.proceedToSignedOut,50)},d.loginSuccess=function(e){return s.complete(),n.go("distributor_selection")},d.loginFailure=function(){return s.complete(),i.show("Oops...","Unable to authenticate to Stormpath.","error")},d.proceedToSignedOut=function(){return n.go("signed_out")},d.proceedToSignIn=function(){return n.go("sign_in")},d.onClickGooglePlusSignIn=function(){return d.googlePlusSignInButtonClicked=!0,s.start()},d}t.$inject=["$scope","$log","$state","$timeout","identity","sweet","SessionsService","ProgressBarService","ProofPlayService","DevicesService","TenantsService"],Object.defineProperty(exports,"__esModule",{value:!0}),exports.AuthenticationCtrl=t},663:function(e,exports,t){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(e,t,n,r){"ngInject";var a=this;return a.currentDistributerInDistributerAdminList=function(){var e=r.getCurrentDistributorName(),t=r.getDistributorsAsAdmin();return(0,i["default"])(t,e)},a.getIdentity=function(){return{key:r.getUserKey(),email:r.getUserEmail(),admin:r.getIsAdmin(),distributor_admin:r.getDistributorsAsAdmin(),admin_of_current_distributor:a.currentDistributerInDistributerAdminList(),distributorKey:r.getCurrentDistributorKey(),distributorName:r.getCurrentDistributorName()}},a.isCurrentURLDistributorSelector=function(){var e=n.location.href.search(/distributor_selection/),t=e>=0;return t},a.initialize=function(){return a.getIdentity()},a.toggleSidenav=function(){return e("left").toggle()},a.goTo=function(n,r){if(t.go(n,{id:r}),e("left").isOpen())return e("left").close()},a.initialize(),a}r.$inject=["$mdSidenav","$state","$window","SessionsService"],Object.defineProperty(exports,"__esModule",{value:!0}),exports.AppController=void 0;var a=t(664),i=n(a);exports.AppController=r},686:function(e,exports){"use strict";function t(e,t,n){"ngInject";var r=this;return r.distributors=[],r.currentDistributor=void 0,r.loading=!0,r.initialize=function(){r.loeading=!0;var e=t.fetchAllByUser(n.getUserKey());return e.then(function(e){return r.distributors=e,1===r.distributors.length?r.selectDistributor(r.distributors[0]):r.loading=!1})},r.selectDistributor=function(e){return t.switchDistributor(e)},r}t.$inject=["$state","DistributorsService","SessionsService"],Object.defineProperty(exports,"__esModule",{value:!0}),exports.DistributorSelectorCtrl=t},687:function(e,exports){"use strict";function t(e){"ngInject";var t=this;return t.distributors=[],t}t.$inject=["$state"],Object.defineProperty(exports,"__esModule",{value:!0}),exports.DistributorsCtrl=t},688:function(e,exports){"use strict";function t(e,t,n){"ngInject";var r=this;return r.domains=[],r.initialize=function(){var e=t.fetchAllDomains();return e.then(function(e){return r.domains=e})},r.editItem=function(t){return e.go("editDomain",{domainKey:t.key})},r.deleteItem=function(e){var a=function(){var n=t["delete"](e);return n.then(function(){return r.initialize()})};return n.show({title:"Are you sure?",text:"This will permanently remove the domain from the distributor and disconnect from tenants.",type:"warning",showCancelButton:!0,confirmButtonColor:"#DD6B55",confirmButtonText:"Yes, remove the domain!",closeOnConfirm:!0},a)},r}t.$inject=["$state","DomainsService","sweet"],Object.defineProperty(exports,"__esModule",{value:!0}),exports.DomainsCtrl=t},689:function(e,exports){"use strict";function t(e,t,n,r,a,i,o,s){"ngInject";var c=this;if(c.currentDomain={key:void 0,name:void 0,impersonation_admin_email_address:void 0,distributor_key:void 0,organization_unit_path:"/skykit",active:!0},c.devicesAccess=!1,c.orgUnitsAccess=!1,c.usersAccess=!1,c.currentDomains=[],c.editMode=!!t.domainKey,c.editMode){var u=n.getDomainByKey(t.domainKey);u.then(function(e){return c.currentDomain=e})}else c.currentDomain.distributor_key=s.getCurrentDistributorKey();return c.initialize=function(){if(c.editMode){i.start();var e=n.getDirectoryApiConnectivityInformation(t.domainKey);return e.then(c.onSuccessDeterminingConnectivity,c.onFailureDeterminingConnectivity)}},c.onSuccessDeterminingConnectivity=function(e){c.devicesAccess=e.devicesAccess,c.orgUnitsAccess=e.orgUnitsAccess,c.usersAccess=e.usersAccess,c.devicesAccessException=e.devicesAccessException,c.orgUnitsAccessException=e.orgUnitsAccessException,c.usersAccessException=e.usersAccessException,i.complete()},c.onFailureDeterminingConnectivity=function(t){return i.complete(),e.error("Failure determining directory API connectivity: "+t.status+" "+t.statusText),
o.showErrorToast("Oops. We were unable determine your device connectivity at this time.")},c.onSaveDomain=function(){i.start();var e=n.save(c.currentDomain);return e.then(c.onSuccessSaveDomain,c.onFailureSaveDomain)},c.onSuccessSaveDomain=function(){return i.complete(),o.showSuccessToast("We saved your update.")},c.onFailureSaveDomain=function(t){return i.complete(),409===t.status?(e.info("Failure saving domain. Domain already exists: "+t.status+" "+t.statusText),a.show("Oops...","This domain name already exist. Please enter a unique domain name.","error")):(e.error("Failure saving domain: "+t.status+" "+t.statusText),o.showErrorToast("Oops. We were unable to save your updates at this time."))},c.editItem=function(e){return r.go("editDomain",{domainKey:e.key})},c}t.$inject=["$log","$stateParams","DomainsService","$state","sweet","ProgressBarService","ToastsService","SessionsService"],Object.defineProperty(exports,"__esModule",{value:!0}),exports.DomainDetailsCtrl=t},690:function(e,exports,t){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(e,t,n,r){"ngInject";var i=this;return i.radioButtonChoices={group1:"By Device",group2:"Summarized",selection:null},i.dateTimeSelection={start:null,end:null},i.formValidity={start_date:!1,end_date:!1,locations:!1},i.tenant=t.tenant,i.no_cache=!0,i.loading=!0,i.disabled=!0,i.disabledTenant=!0,i.selected_locations=[],i.initialize=function(){return e.getAllLocations(i.tenant).then(function(e){return i.loading=!1,i.locations=e.data.locations,i.locations.length>0?i.had_some_items=!0:i.had_some_items=!1})},i.refreshLocations=function(){i.searchText="",i.selectedItem="",i.loading=!0,i.disabled=!0,i.selected_locations=[],i.initialize()},i.addToSelectedLocations=function(e){if(i.isLocationValid(e)){i.selected_locations.push(e);var t=i.locations.indexOf(e);i.locations.splice(t,1),i.searchText=""}return i.areLocationsValid(),i.isDisabled()},i.querySearch=function(t,n){return e.querySearch(t,n)},i.isRadioValid=function(e){return i.formValidity.type=e,i.isDisabled()},i.isLocationValid=function(e){return!!a(e,i.locations)&&!a(e,i.selected_locations)},i.areLocationsValid=function(){return i.formValidity.locations=i.selected_locations.length>0,i.isDisabled()},i.isStartDateValid=function(e){return i.formValidity.start_date=e instanceof Date,i.isDisabled()},i.isEndDateValid=function(e){return i.formValidity.end_date=e instanceof Date,i.isDisabled()},i.removeFromSelectedLocation=function(e){var t=i.selected_locations.indexOf(e);return i.selected_locations.splice(t,1),i.locations.push(e),i.areLocationsValid(),i.isDisabled()},i.isDisabled=function(){return i.formValidity.start_date&&i.formValidity.end_date&&i.formValidity.locations&&i.formValidity.type?(i.disabled=!1,i["final"]={start_date_unix:(0,o["default"])(i.dateTimeSelection.start).unix(),end_date_unix:(0,o["default"])(i.dateTimeSelection.end).unix(),locations:i.selected_locations,type:i.radioButtonChoices.selection}):i.disabled=!0},i.submit=function(){return"1"===i["final"].type?e.downloadCSVForMultipleLocationsByDevice(i["final"].start_date_unix,i["final"].end_date_unix,i["final"].locations,i.tenant):e.downloadCSVForMultipleLocationsSummarized(i["final"].start_date_unix,i["final"].end_date_unix,i["final"].locations,i.tenant)},i.tenants=null,i.currentTenant=i.tenant,i.initialize_tenant_select=function(){return e.getAllTenants().then(function(e){return i.tenants=e.data.tenants})},i.querySearch=function(t,n){return e.querySearch(t,n)},i.isSelectionValid=function(e){return a(e,i.tenants)?i.disabledTenant=!1:i.disabledTenant=!0},i.submitTenant=function(e){return e!==i.currentTenant?(n.go("proofDetail",{tenant:e}),r.showSuccessToast("Proof of Play reporting set to "+e)):r.showErrorToast("Proof of Play reporting is already set to "+e)},i}function a(e,t){return t.indexOf(e)>=0}r.$inject=["ProofPlayService","$stateParams","$state","ToastsService"],Object.defineProperty(exports,"__esModule",{value:!0}),exports.ProofOfPlayMultiLocationCtrl=void 0;var i=t(372),o=n(i);exports.ProofOfPlayMultiLocationCtrl=r},691:function(e,exports,t){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(e,t,n,r){"ngInject";var i=this;return i.radioButtonChoices={group1:"By Date",group2:"Summarized",selection:null},i.dateTimeSelection={start:null,end:null},i.formValidity={start_date:!1,end_date:!1,displays:!1},i.tenant=t.tenant,i.no_cache=!0,i.loading=!0,i.disabled=!0,i.disabledTenant=!0,i.selected_displays=[],i.initialize=function(){return e.getAllDisplays(i.tenant).then(function(e){return i.loading=!1,i.displays=e.data.devices,i.displays.length>0?i.had_some_items=!0:i.had_some_items=!1})},i.refreshDisplays=function(){i.searchText="",i.selectedItem="",i.loading=!0,i.disabled=!0,i.selected_displays=[],i.initialize()},i.addToSelectedDisplays=function(e){if(i.isDisplayValid(e)){i.selected_displays.push(e);var t=i.displays.indexOf(e);i.displays.splice(t,1),i.searchText=""}return i.areDisplaysValid(),i.isDisabled()},i.querySearch=function(t,n){return e.querySearch(t,n)},i.isRadioValid=function(e){return i.formValidity.type=e,i.isDisabled()},i.isDisplayValid=function(e){return!!a(e,i.displays)&&!a(e,i.selected_displays)},i.areDisplaysValid=function(){return i.formValidity.displays=i.selected_displays.length>0,i.isDisabled()},i.isStartDateValid=function(e){return i.formValidity.start_date=e instanceof Date,i.isDisabled()},i.isEndDateValid=function(e){return i.formValidity.end_date=e instanceof Date,i.isDisabled()},i.removeFromSelectedDisplay=function(e){var t=i.selected_displays.indexOf(e);return i.selected_displays.splice(t,1),i.displays.push(e),i.areDisplaysValid(),i.isDisabled()},i.isDisabled=function(){return i.formValidity.start_date&&i.formValidity.end_date&&i.formValidity.displays&&i.formValidity.type?(i.disabled=!1,i["final"]={start_date_unix:(0,o["default"])(i.dateTimeSelection.start).unix(),end_date_unix:(0,o["default"])(i.dateTimeSelection.end).unix(),displays:i.selected_displays,type:i.radioButtonChoices.selection}):i.disabled=!0},i.submit=function(){return"1"===i["final"].type?e.downloadCSVForMultipleDevicesByDate(i["final"].start_date_unix,i["final"].end_date_unix,i["final"].displays,i.tenant):e.downloadCSVForMultipleDevicesSummarized(i["final"].start_date_unix,i["final"].end_date_unix,i["final"].displays,i.tenant)},i.tenants=null,i.currentTenant=i.tenant,i.initialize_tenant_select=function(){return e.getAllTenants().then(function(e){return i.tenants=e.data.tenants})},i.submitTenant=function(e){return e!==i.currentTenant?(n.go("proofDetail",{tenant:e}),r.showSuccessToast("Proof of Play reporting set to "+e)):r.showErrorToast("Proof of Play reporting is already set to "+e)},i.querySearch=function(t,n){return e.querySearch(t,n)},i.isSelectionValid=function(e){return a(e,i.tenants)?i.disabledTenant=!1:i.disabledTenant=!0},i}function a(e,t){return t.indexOf(e)>=0}r.$inject=["ProofPlayService","$stateParams","$state","ToastsService"],Object.defineProperty(exports,"__esModule",{value:!0}),exports.ProofOfPlayMultiDisplayCtrl=void 0;var i=t(372),o=n(i);exports.ProofOfPlayMultiDisplayCtrl=r},692:function(e,exports,t){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(e,t,n,r){"ngInject";var i=this;return i.radioButtonChoices={group1:"By Device",group2:"By Date",selection:null},i.dateTimeSelection={start:null,end:null},i.formValidity={start_date:!1,end_date:!1,resources:!1},i.tenant=t.tenant,i.no_cache=!0,i.loading=!0,i.disabled=!0,i.disabledTenant=!0,i.selected_resources=[],i.initialize=function(){return e.getAllResources(i.tenant).then(function(e){i.loading=!1,i.full_resource_map=e.data.resources,i.resources=[];for(var t=0;t<e.data.resources.length;t++){var n=e.data.resources[t];i.resources.push(n.resource_name)}return i.resources.length>0?i.had_some_items=!0:i.had_some_items=!1})},i.refreshResources=function(){i.searchText="",i.selectedItem="",i.loading=!0,i.disabled=!0,i.selected_resources=[],i.initialize()},i.addToSelectedResources=function(e){if(i.isResourceValid(e)){i.selected_resources.push(e);var t=i.resources.indexOf(e);i.resources.splice(t,1),i.searchText=""}return i.areResourcesValid(),i.isDisabled()},i.querySearch=function(t,n){return e.querySearch(t,n)},i.isRadioValid=function(e){return i.formValidity.type=e,i.isDisabled()},i.isResourceValid=function(e){return!!a(e,i.resources)&&!a(e,i.selected_resources)},i.areResourcesValid=function(){return i.formValidity.resources=i.selected_resources.length>0,i.isDisabled()},i.isStartDateValid=function(e){return i.formValidity.start_date=e instanceof Date,i.isDisabled()},i.isEndDateValid=function(e){return i.formValidity.end_date=e instanceof Date,i.isDisabled()},i.removeFromSelectedResource=function(e){var t=i.selected_resources.indexOf(e);return i.selected_resources.splice(t,1),i.resources.push(e),i.areResourcesValid(),i.isDisabled()},i.isDisabled=function(){return i.formValidity.start_date&&i.formValidity.end_date&&i.formValidity.resources&&i.formValidity.type?(i.disabled=!1,i["final"]={start_date_unix:(0,o["default"])(i.dateTimeSelection.start).unix(),end_date_unix:(0,o["default"])(i.dateTimeSelection.end).unix(),resources:i.selected_resources,type:i.radioButtonChoices.selection}):i.disabled=!0},i.submit=function(){for(var t=[],n=0;n<i["final"].resources.length;n++)for(var r=i["final"].resources[n],a=0;a<i.full_resource_map.length;a++){var o=i.full_resource_map[a];o.resource_name===r&&t.push(o.resource_identifier)}return"1"===i["final"].type?e.downloadCSVForMultipleResourcesByDevice(i["final"].start_date_unix,i["final"].end_date_unix,t,i.tenant):e.downloadCSVForMultipleResourcesByDate(i["final"].start_date_unix,i["final"].end_date_unix,t,i.tenant)},i.tenants=null,i.currentTenant=i.tenant,i.initialize_tenant_select=function(){return e.getAllTenants().then(function(e){return i.tenants=e.data.tenants})},i.querySearch=function(t,n){return e.querySearch(t,n)},i.isSelectionValid=function(e){return a(e,i.tenants)?i.disabledTenant=!1:i.disabledTenant=!0},i.submitTenant=function(e){return e!==i.currentTenant?(n.go("proofDetail",{tenant:e}),r.showSuccessToast("Proof of Play reporting set to "+e)):r.showErrorToast("Proof of Play reporting is already set to "+e)},i}function a(e,t){return t.indexOf(e)>=0}r.$inject=["ProofPlayService","$stateParams","$state","ToastsService"],Object.defineProperty(exports,"__esModule",{value:!0}),exports.ProofOfPlayMultiResourceCtrl=void 0;var i=t(372),o=n(i);exports.ProofOfPlayMultiResourceCtrl=r},693:function(e,exports){"use strict";function t(e,t,r,a){"ngInject";var i=this;return i.resource={title:"Resource Report"},i.location={title:"Location Report"},i.display={title:"Display Report"},i.chosen_tenant=null,i.tenants=null,i.disabled=!0,i.initialize=function(){return e.getAllTenants().then(function(e){return i.tenants=e.data.tenants})},i.querySearch=function(t,n){return e.querySearch(t,n)},i.isSelectionValid=function(e){return n(e,i.tenants)?i.disabled=!1:i.disabled=!0},i.submitTenant=function(e){if(e)return i.chosen_tenant=e,r.go("proofDetail",{tenant:i.chosen_tenant})},i.refreshTenants=function(){i.tenants=null;e.makeHTTPURL("/retrieve_my_tenants","");i.initialize()},i}function n(e,t){return t.indexOf(e)>=0}t.$inject=["ProofPlayService","$stateParams","$state","ToastsService"],Object.defineProperty(exports,"__esModule",{value:!0}),exports.ProofOfPlayCtrl=t},694:function(e,exports,t){(function($){"use strict";function e(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(exports,"__esModule",{value:!0});var n=t(695),r=e(n),a=t(696),i=e(a),o=function(){function e(t,n){"ngInject";(0,r["default"])(this,e),this.Restangular=t,this.SessionsService=n}return e.$inject=["Restangular","SessionsService"],(0,i["default"])(e,[{key:"getImages",value:function(e){return this.Restangular.oneUrl("image","/api/v1/image/tenant/"+e).getList()}},{key:"saveImage",value:function(e,t){return $.ajax({type:"POST",url:"/api/v1/image/tenant/"+e,data:t,processData:!1,contentType:!1})}},{key:"deleteImage",value:function(e){var t=this.Restangular.oneUrl("image","/api/v1/image/"+e).remove();return t}}]),e}();exports["default"]=o}).call(exports,t(512))},700:function(e,exports,t){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(exports,"__esModule",{value:!0});var r=t(695),a=n(r),i=t(696),o=n(i),s=function(){function e(t){"ngInject";(0,a["default"])(this,e),this.Restangular=t,this.USER_SERVICE="users",this.DISTRIBUTOR_SERVICE="distributors"}return e.$inject=["Restangular"],(0,o["default"])(e,[{key:"makeDistributor",value:function(e,t){var n={distributor:e,admin_email:t},r=this.Restangular.oneUrl(this.DISTRIBUTOR_SERVICE,"/api/v1/distributors").customPOST(n);return r}},{key:"addUserToDistributor",value:function(e,t,n){var r={user_email:e,distributor:t,distributor_admin:n},a=this.Restangular.oneUrl(this.USER_SERVICE,"/api/v1/users").customPOST(r);return a}},{key:"getUsersOfDistributor",value:function(e){var t=this.Restangular.oneUrl(this.DISTRIBUTOR_SERVICE,"/api/v1/analytics/distributors/"+e+"/users").get();return t}},{key:"getAllDistributors",value:function(){var e=this.Restangular.oneUrl(this.DISTRIBUTOR_SERVICE,"/api/v1/distributors").get();return e}}]),e}();exports["default"]=s},701:function(e,exports,t){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(exports,"__esModule",{value:!0});var r=t(695),a=n(r),i=t(696),o=n(i),s=function(){function e(t,n){"ngInject";(0,a["default"])(this,e),this.$q=n,this.SessionsService=t}return e.$inject=["SessionsService","$q"],(0,o["default"])(e,[{key:"authenticated",value:function(){var e=this.$q.defer(),t=this.SessionsService.getUserKey();return t?e.resolve(!0):e.reject(["authError","sign_in"]),e.promise}},{key:"notAuthenticated",value:function(){var e=this.$q.defer(),t=this.SessionsService.getUserKey();return t?e.reject(["authError","home"]):e.resolve(!0),e.promise}},{key:"isAdminOrDistributorAdmin",value:function(){var e=this.$q.defer(),t=this.SessionsService.getIsAdmin(),n=this.SessionsService.getDistributorsAsAdmin(),r=!1;n&&n.length>0&&(r=!0);var a=this.SessionsService.getUserKey();return a?t||r?e.resolve(!0):e.reject(["authError","home"]):e.reject("sign_in"),e.promise}}]),e}();exports["default"]=s},702:function(e,exports,t){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(exports,"__esModule",{value:!0});var r=t(695),a=n(r),i=t(696),o=n(i),s=function(){function e(t){"ngInject";(0,a["default"])(this,e),this.Restangular=t,this.SERVICE_NAME="devices"}return e.$inject=["Restangular"],(0,o["default"])(e,[{key:"panelSleep",value:function(e,t){var n={panelSleep:t},r=this.Restangular.oneUrl(this.SERVICE_NAME,"api/v1/devices/"+e+"/panel-sleep").customPUT(n);return r}},{key:"reset",value:function(e){var t=this.Restangular.oneUrl(this.SERVICE_NAME,"api/v1/devices/"+e+"/commands/reset").post();return t}},{key:"contentDelete",value:function(e){var t=this.Restangular.oneUrl(this.SERVICE_NAME,"api/v1/devices/"+e+"/commands/content-delete").post();return t}},{key:"contentUpdate",value:function(e){var t=this.Restangular.oneUrl(this.SERVICE_NAME,"api/v1/devices/"+e+"/commands/content-update").post();return t}},{key:"updateDevice",value:function(e){var t=this.Restangular.oneUrl(this.SERVICE_NAME,"api/v1/devices/"+e+"/commands/refresh-device-representation").post();return t}},{key:"toggleDiagnostics",value:function(e){var t=this.Restangular.oneUrl(this.SERVICE_NAME,"api/v1/devices/"+e+"/commands/diagnostics").post();return t}},{key:"restart",value:function(e){var t=this.Restangular.oneUrl(this.SERVICE_NAME,"api/v1/devices/"+e+"/commands/restart").post();return t}},{key:"postLog",value:function(e){var t=this.Restangular.oneUrl(this.SERVICE_NAME,"api/v1/devices/"+e+"/commands/post-log").post();return t}},{key:"powerOn",value:function(e){var t=this.Restangular.oneUrl(this.SERVICE_NAME,"api/v1/devices/"+e+"/commands/power-on").post();return t}},{key:"powerOff",value:function(e){var t=this.Restangular.oneUrl(this.SERVICE_NAME,"api/v1/devices/"+e+"/commands/power-off").post();return t}},{key:"volume",value:function(e,t){var n={volume:t},r=this.Restangular.oneUrl(this.SERVICE_NAME,"api/v1/devices/"+e).customPOST(n,"commands/volume");return r}},{key:"custom",value:function(e,t){var n={command:t},r=this.Restangular.oneUrl(this.SERVICE_NAME,"api/v1/devices/"+e).customPOST(n,"commands/custom");return r}}]),e}();exports["default"]=s},703:function(e,exports,t){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(exports,"__esModule",{value:!0});var r=t(695),a=n(r),i=t(696),o=n(i),s=t(372),c=n(s),u=function(){function e(){(0,a["default"])(this,e)}return(0,o["default"])(e,[{key:"convertToMomentIfNotAlready",value:function(e){return c["default"].isMoment(e)?e:(0,c["default"])(new Date(e))}},{key:"createFormattedStartAndEndDateFromToday",value:function(e){var t=(0,c["default"])().format("YYYY-MM-DD"),n=(0,c["default"])(t,"YYYY-MM-DD").format("YYYY-MM-DD hh:mm A"),r=(0,c["default"])(n,"YYYY-MM-DD hh:mm A").add(1,"day").subtract(60,"seconds").format("YYYY-MM-DD hh:mm A"),a=(0,c["default"])().subtract(30,"days").format("YYYY-MM-DD"),i=(0,c["default"])(a,"YYYY-MM-DD").format("YYYY-MM-DD hh:mm A");return[i,r]}},{key:"generateLocalFromUTC",value:function(e){var t=c["default"].utc(e).toDate();return(0,c["default"])(t).format("YYYY-MM-DD hh:mm:ss A")}}]),e}();exports["default"]=u},704:function(e,exports,t){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(exports,"__esModule",{value:!0});var r=t(695),a=n(r),i=t(696),o=n(i);t(604);var s=function(){function e(t,n,r,i,o){"ngInject";(0,a["default"])(this,e),this.$log=t,this.Restangular=n,this.$q=r,this.$http=i,this.$state=o,this.SERVICE_NAME="devices",this.uriBase="v1/devices"}return e.$inject=["$log","Restangular","$q","$http","$state"],(0,o["default"])(e,[{key:"adjustControlsMode",value:function(e,t){var n={controlsMode:t},r=this.Restangular.oneUrl(this.SERVICE_NAME,"/api/v1/devices/"+e+"/controls-mode").customPUT(n);return r}},{key:"getDeviceByMacAddress",value:function(e){var t="api/v1/devices?mac_address="+e;return this.Restangular.oneUrl("api/v1/devices",t).get()}},{key:"getDeviceByKey",value:function(e){var t="api/v1/devices/"+e,n=this.Restangular.oneUrl(this.SERVICE_NAME,t).get();return n}},{key:"retriveFilteredDictionaryValue",value:function(e,t){for(var n=[],r=0;r<e.length;r++){var a=e[r];n.push(a[t])}return n}},{key:"executeSearchingPartialSerialByTenant",value:function(e,t,n){var r=this;return this.searchDevicesByPartialSerialByTenant(e,t,n).then(function(e){var t=e.matches,n=!1,a=!1,i=r.convertDevicesArrayToDictionaryObj(t,n,a),o=r.retriveFilteredDictionaryValue(t,"serial");return[o,i]})}},{key:"executeSearchingPartialSerialByDistributor",value:function(e,t,n){var r=this;return this.searchDevicesByPartialSerial(e,t,n).then(function(e){var t=e.matches,a=void 0,i=!1,o=!1;a=n?r.convertDevicesArrayToDictionaryObj(t,i,o):r.convertDevicesArrayToDictionaryObj(t,i,o);var s=r.retriveFilteredDictionaryValue(t,"serial");return[s,a]})}},{key:"executeSearchingPartialMacByTenant",value:function(e,t,n){var r=this;return this.searchDevicesByPartialMacByTenant(e,t,n).then(function(e){var t=e.matches,n=r.convertDevicesArrayToDictionaryObj(t,!0),a=r.retriveFilteredDictionaryValue(t,"mac");return[a,n]})}},{key:"executeSearchingPartialMacByDistributor",value:function(e,t,n){var r=this;return this.searchDevicesByPartialMac(e,t,n).then(function(e){var t=e.matches,a=void 0,i=!0,o=!1;a=n?r.convertDevicesArrayToDictionaryObj(t,i,o):r.convertDevicesArrayToDictionaryObj(t,i,o);var s=r.retriveFilteredDictionaryValue(t,"mac");return[s,a]})}},{key:"executeSearchingPartialGCMidByTenant",value:function(e,t,n){var r=this;return this.searchDistributorDevicesByPartialGCMidByTenant(e,t,n).then(function(e){var t=e.matches,n=r.convertDevicesArrayToDictionaryObj(t,!1,!0),a=r.retriveFilteredDictionaryValue(t,"gcmid");return[a,n]})}},{key:"executeSearchingPartialGCMidByDistributor",value:function(e,t,n){var r=this;return this.searchDistributorDevicesByPartialGCMid(e,t,n).then(function(e){var t=e.matches,a=void 0;a=n?r.convertDevicesArrayToDictionaryObj(t,!1,!0):r.convertDevicesArrayToDictionaryObj(t,!1,!0);var i=r.retriveFilteredDictionaryValue(t,"gcmid");return[i,a]})}},{key:"rejectedPromise",value:function(){var e=this.$q.defer();return e.reject(),e.promise}},{key:"searchDevices",value:function(e,t,n,r,a,i){var o=this.$q.defer(),s=void 0;return s=e&&e.length>2?"Serial Number"===t?n?this.executeSearchingPartialSerialByTenant(r,e,i):this.executeSearchingPartialSerialByDistributor(a,e,i):"MAC"===t?n?this.executeSearchingPartialMacByTenant(r,e,i):this.executeSearchingPartialMacByDistributor(a,e,i):n?this.executeSearchingPartialGCMidByTenant(r,e,i):this.executeSearchingPartialGCMidByDistributor(a,e,i):this.rejectedPromise(),s.then(function(e){o.resolve({success:!0,devices:e})}),s["catch"](function(e){o.resolve({success:!1,devices:[]})}),o.promise}},{key:"convertDevicesArrayToDictionaryObj",value:function(e,t,n){for(var r={},a=0;a<e.length;a++){var i=e[a];t?r[i.mac]=i:n?r[i.gcmid]=i:r[i.serial]=i}return r}},{key:"editItem",value:function(e,t){t||(t=!1),this.$state.go("editDevice",{deviceKey:e.key,tenantKey:e.tenantKey,fromDevices:t})}},{key:"preprateForEditView",value:function(e,t,n,r,a,i){var o=void 0,s=void 0,c=void 0;return o="MAC"===e,s="Serial Number"===e,c="GCM ID"===e,o?this.editItem(r[n]):s?this.editItem(a[n]):this.editItem(i[n])}},{key:"getIssuesByKey",value:function(e,t,n,r,a){r=void 0===r?null:r,a=void 0===a?null:a;var i="/api/v1/devices/"+r+"/"+a+"/"+e+"/issues?start="+t+"&end="+n,o=this.Restangular.oneUrl(this.SERVICE_NAME,i).get();return o}},{key:"getCommandEventsByKey",value:function(e,t,n){t=void 0===t?null:t,n=void 0===n?null:n;var r="/api/v1/player-command-events/"+t+"/"+n+"/"+e,a=this.Restangular.oneUrl(this.SERVICE_NAME,r).get();return a}},{key:"getDevicesByTenant",value:function(e,t,n){if(void 0!==e){var r=this.makeDevicesByTenantURL(e,t,n,!1);return this.Restangular.oneUrl(this.SERVICE_NAME,r).get()}}},{key:"getUnmanagedDevicesByTenant",value:function(e,t,n){if(void 0!==e){var r=(this.$q.defer(),this.makeDevicesByTenantURL(e,t,n,!0));return this.Restangular.oneUrl(this.SERVICE_NAME,r).get()}}},{key:"searchDevicesByPartialSerialByTenant",value:function(e,t,n){if(void 0!==e){var r="/api/v1/tenants/search/"+e+"/devices?unmanaged="+n+"&partial_serial="+t,a=this.Restangular.oneUrl(this.SERVICE_NAME,r).get();return a}}},{key:"searchDevicesByPartialMacByTenant",value:function(e,t,n){if(void 0!==e){var r="/api/v1/tenants/search/"+e+"/devices?unmanaged="+n+"&partial_mac="+t,a=this.Restangular.oneUrl(this.SERVICE_NAME,r).get();return a}}},{key:"searchDistributorDevicesByPartialGCMidByTenant",value:function(e,t,n){if(void 0!==e){var r="/api/v1/tenants/search/"+e+"/devices?unmanaged="+n+"&partial_gcmid="+t,a=this.Restangular.oneUrl(this.SERVICE_NAME,r).get();return a}}},{key:"searchDevicesByPartialSerial",value:function(e,t,n){if(void 0!==e){var r="/api/v1/distributors/search/"+e+"/devices?unmanaged="+n+"&partial_serial="+t,a=this.Restangular.oneUrl(this.SERVICE_NAME,r).get();return a}}},{key:"searchDevicesByPartialMac",value:function(e,t,n){if(void 0!==e){var r="/api/v1/distributors/search/"+e+"/devices?unmanaged="+n+"&partial_mac="+t,a=this.Restangular.oneUrl(this.SERVICE_NAME,r).get();return a}}},{key:"searchDistributorDevicesByPartialGCMid",value:function(e,t,n){if(void 0!==e){var r="/api/v1/distributors/search/"+e+"/devices?unmanaged="+n+"&partial_gcmid="+t,a=this.Restangular.oneUrl(this.SERVICE_NAME,r).get();return a}}},{key:"getDevicesByDistributor",value:function(e,t,n){if(void 0!==e){var r=this.makeDevicesByDistributorURL(e,t,n,!1);return this.Restangular.oneUrl(this.SERVICE_NAME,r).get()}}},{key:"getUnmanagedDevicesByDistributor",value:function(e,t,n){if(void 0!==e){var r=this.makeDevicesByDistributorURL(e,t,n,!0);return this.Restangular.oneUrl(this.SERVICE_NAME,r).get()}}},{key:"getDevices",value:function(){var e=this.Restangular.all(this.SERVICE_NAME).getList();return e}},{key:"save",value:function(e){if(void 0!==e.key)var t=e.put();else var t=this.Restangular.service("devices").post(e);return t}},{key:"saveOverlaySettings",value:function(e,t,n,r,a){var i={bottom_left:t,bottom_right:n,top_right:r,top_left:a};return this.Restangular.oneUrl("overlay","/api/v1/overlay/device/"+e).customPOST(i)}},{key:"delete",value:function(e){var t=this.Restangular.one(this.SERVICE_NAME,e).remove();return t}},{key:"getPanelModels",value:function(){return[{id:"None",displayName:"None"},{id:"Sony-FXD40LX2F",displayName:"Sony FXD40LX2F"},{id:"NEC-LCD4215",displayName:"NEC LCD4215"},{id:"Phillips-BDL5560EL",displayName:"Phillips BDL5560EL"},{id:"Panasonic-TH55LF6U",displayName:"Panasonic TH55LF6U"},{id:"Sharp-PNE521",displayName:"Sharp PNE521"}]}},{key:"getPanelInputs",value:function(){return[{id:"None",parentId:"None"},{id:"HDMI1",parentId:"Sony-FXD40LX2F"},{id:"HDMI2",parentId:"Sony-FXD40LX2F"},{id:"HDMI1",parentId:"Phillips-BDL5560EL"},{id:"HDMI2",parentId:"Phillips-BDL5560EL"},{id:"DVI",parentId:"Phillips-BDL5560EL"},{id:"HDMI1",parentId:"Panasonic-TH55LF6U"},{id:"HDMI2",parentId:"Panasonic-TH55LF6U"},{id:"DVI",parentId:"Panasonic-TH55LF6U"},{id:"HDMI1",parentId:"Sharp-PNE521"},{id:"HDMI2",parentId:"Sharp-PNE521"},{id:"DVI",parentId:"Sharp-PNE521"},{id:"VGA",parentId:"NEC-LCD4215"},{id:"DVI1",parentId:"NEC-LCD4215"}]}},{key:"makeDevicesByDistributorURL",value:function(e,t,n,r){var a="/api/v1/distributors/"+e+"/devices?unmanaged="+r+"&next_cursor="+n+"&prev_cursor="+t;return a}},{key:"makeDevicesByTenantURL",value:function(e,t,n,r){var a="/api/v1/tenants/"+e+"/devices?unmanaged="+r+"&next_cursor="+n+"&prev_cursor="+t;return a}}]),e}();exports["default"]=s},705:function(e,exports,t){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(exports,"__esModule",{value:!0});var r=t(695),a=n(r),i=t(696),o=n(i),s=function(){function e(t,n,r){"ngInject";(0,a["default"])(this,e),this.Restangular=t,this.$state=n,this.SessionsService=r,this.DISTRIBUTOR_SERVICE="distributors"}return e.$inject=["Restangular","$state","SessionsService"],(0,o["default"])(e,[{key:"save",value:function(e){if(void 0!==e.key)var t=e.put();else var t=this.Restangular.service(this.DISTRIBUTOR_SERVICE).post(e);return t}},{key:"fetchAll",value:function(){var e=this.Restangular.all(this.DISTRIBUTOR_SERVICE).getList();return e}},{key:"fetchAllByUser",value:function(e){if(e){var t=this.Restangular.one("users",e).doGET(this.DISTRIBUTOR_SERVICE);return t}}},{key:"getByKey",value:function(e){var t=this.Restangular.oneUrl(this.DISTRIBUTOR_SERVICE,"api/v1/distributors/"+e).get();return t}},{key:"delete",value:function(e){if(e.key){var t=this.Restangular.one(this.DISTRIBUTOR_SERVICE,e.key).remove();return t}}},{key:"getByName",value:function(e){var t=this.Restangular.all(this.DISTRIBUTOR_SERVICE).getList({distributorName:e});return t}},{key:"getDomainsByKey",value:function(e){var t=this.Restangular.oneUrl(this.DISTRIBUTOR_SERVICE,"api/v1/distributors/"+e+"/domains").get();return t}},{key:"switchDistributor",value:function(e){return this.SessionsService.setCurrentDistributorName(e.name),this.SessionsService.setCurrentDistributorKey(e.key),this.$state.go("welcome")}}]),e}();exports["default"]=s},706:function(e,exports,t){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(exports,"__esModule",{value:!0});var r=t(695),a=n(r),i=t(696),o=n(i),s=function(){function e(t){"ngInject";(0,a["default"])(this,e),this.Restangular=t}return e.$inject=["Restangular"],(0,o["default"])(e,[{key:"save",value:function(e){if(void 0!==e.key)var t=e.put();else var t=this.Restangular.service("domains").post(e);return t}},{key:"fetchAllDomains",value:function(){var e=this.Restangular.all("domains").getList();return e}},{key:"getDomainByKey",value:function(e){var t=this.Restangular.oneUrl("domains","api/v1/domains/"+e).get();return t}},{key:"getDirectoryApiConnectivityInformation",value:function(e){var t=this.Restangular.oneUrl("domains","api/v1/domains/"+e+"/directory_api").get();return t}},{key:"delete",value:function(e){if(void 0!==e.key){var t=this.Restangular.one("domains",e.key).remove();return t}}}]),e}();exports["default"]=s},707:function(e,exports,t){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(exports,"__esModule",{value:!0});var r=t(695),a=n(r),i=t(696),o=n(i),s=function(){function e(t){"ngInject";(0,a["default"])(this,e),this.Restangular=t}return e.$inject=["Restangular"],(0,o["default"])(e,[{key:"getIdentity",value:function(){return this.Restangular.oneUrl("identity").get()}}]),e}();exports["default"]=s},708:function(e,exports,t){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(exports,"__esModule",{value:!0});var r=t(695),a=n(r),i=t(696),o=n(i),s=function(){function e(t){"ngInject";(0,a["default"])(this,e),this.Restangular=t,this.CREATE_TENANT_EVENTS="integration_events/tenant_create",this.ENROLLMENT_EVENTS="integration_events/enrollment"}return e.$inject=["Restangular"],(0,o["default"])(e,[{key:"getTenantCreateEvents",value:function(e){var t={tenantKey:e};return this.Restangular.all(this.CREATE_TENANT_EVENTS).customGET("",t)}},{key:"getEnrollmentEvents",value:function(e){var t={deviceKey:e};return this.Restangular.all(this.ENROLLMENT_EVENTS).customGET("",t)}}]),e}();exports["default"]=s},709:function(e,exports,t){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(exports,"__esModule",{value:!0});var r=t(695),a=n(r),i=t(696),o=n(i),s=function(){function e(t){"ngInject";(0,a["default"])(this,e),this.Restangular=t}return e.$inject=["Restangular"],(0,o["default"])(e,[{key:"save",value:function(e){if(void 0!==e.key)var t=e.put();else var t=this.Restangular.service("locations").post(e);return t}},{key:"searchAllTenantLocationsByName",value:function(e,t){var n=this.Restangular.all("tenants").customGETLIST(e+"/locations",{customer_location_name:t});return n}},{key:"getLocationsByTenantKey",value:function(e){var t=this.Restangular.oneUrl("tenants","api/v1/tenants/"+e+"/locations").get();return t}},{key:"getLocationsByTenantKeyPaginated",value:function(e,t,n){t=void 0===t?null:t,n=void 0===n?null:n;var r=this.Restangular.oneUrl("tenants","api/v1/tenants/"+e+"/"+t+"/"+n+"/locations").get();return r}},{key:"getLocationByKey",value:function(e){var t=this.Restangular.oneUrl("locations","api/v1/locations/"+e).get();return t}}]),e}();exports["default"]=s},710:function(e,exports,t){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(exports,"__esModule",{value:!0});var r=t(695),a=n(r),i=t(696),o=n(i),s=function(){function e(t){"ngInject";(0,a["default"])(this,e),this.ngProgressFactory=t,this.progressBar=this.ngProgressFactory.createInstance()}return e.$inject=["ngProgressFactory"],(0,o["default"])(e,[{key:"start",value:function(){return this.progressBar.setColor("#00FCFF"),this.progressBar.setHeight("4px"),this.progressBar.start()}},{key:"complete",value:function(){return this.progressBar.complete()}}]),e}();exports["default"]=s},711:function(e,exports,t){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(exports,"__esModule",{value:!0});var r=t(695),a=n(r),i=t(696),o=n(i),s=function(){function e(t,n,r,i,o,s,c){"ngInject";(0,a["default"])(this,e),this.$http=t,this.$q=n,this.$window=r,this.SessionsService=i,this.$stateParams=o,this.$state=s,this.ToastsService=c,this.makeHTTPRequest=this.makeHTTPRequest.bind(this),this.uriBase="proofplay/api/v1"}return e.$inject=["$http","$q","$window","SessionsService","$stateParams","$state","ToastsService"],(0,o["default"])(e,[{key:"makeHTTPURL",value:function(e,t){return this.uriBase+e+t}},{key:"makeHTTPRequest",value:function(e,t){var n=(this.$q.defer(),this.makeHTTPURL(e,t));return this.$http.get(n);
}},{key:"getAllResources",value:function(e){var t=this.makeHTTPRequest("/retrieve_all_resources/",e);return t["catch"](function(e,t){var n=e.status;if(403===n&&(this.ToastsService.showErrorToast("You are not allowed to view this tenant!"),this.$state.go("proof",{})),404===n)return this.ToastsService.showErrorToast("You must select a tenant first!"),this.$state.go("proof",{})}),t.then(function(e){return e})}},{key:"getAllDisplays",value:function(e){return this.makeHTTPRequest("/retrieve_all_displays/",e)}},{key:"getAllLocations",value:function(e){return this.makeHTTPRequest("/retrieve_all_locations/",e)}},{key:"getAllTenants",value:function(){return this.makeHTTPRequest("/retrieve_my_tenants","")}},{key:"downloadCSVForMultipleResourcesByDate",value:function(e,t,n,r){for(var a="",i=0;i<n.length;i++){var o=n[i];a=a+"|"+o}return this.$window.open(this.uriBase+"/multi_resource_by_date/"+e+"/"+t+"/"+a+"/"+r+"/"+this.SessionsService.getCurrentDistributorKey(),"_blank"),!0}},{key:"downloadCSVForMultipleResourcesByDevice",value:function(e,t,n,r){for(var a="",i=0;i<n.length;i++){var o=n[i];a=a+"|"+o}return this.$window.open(this.uriBase+"/multi_resource_by_device/"+e+"/"+t+"/"+a+"/"+r+"/"+this.SessionsService.getCurrentDistributorKey(),"_blank"),!0}},{key:"downloadCSVForMultipleDevicesSummarized",value:function(e,t,n,r){for(var a="",i=0;i<n.length;i++){var o=n[i];a=a+"|"+o}return this.$window.open(this.uriBase+"/multi_device_summarized/"+e+"/"+t+"/"+a+"/"+r+"/"+this.SessionsService.getCurrentDistributorKey(),"_blank"),!0}},{key:"downloadCSVForMultipleDevicesByDate",value:function(e,t,n,r){for(var a="",i=0;i<n.length;i++){var o=n[i];a=a+"|"+o}return this.$window.open(this.uriBase+"/multi_device_by_date/"+e+"/"+t+"/"+a+"/"+r+"/"+this.SessionsService.getCurrentDistributorKey(),"_blank"),!0}},{key:"downloadCSVForMultipleLocationsByDevice",value:function(e,t,n,r){for(var a="",i=0;i<n.length;i++){var o=n[i];a=a+"|"+o}return this.$window.open(this.uriBase+"/multi_location_by_device/"+e+"/"+t+"/"+a+"/"+r+"/"+this.SessionsService.getCurrentDistributorKey(),"_blank"),!0}},{key:"downloadCSVForMultipleLocationsSummarized",value:function(e,t,n,r){for(var a="",i=0;i<n.length;i++){var o=n[i];a=a+"|"+o}return this.$window.open(this.uriBase+"/multi_location_summarized/"+e+"/"+t+"/"+a+"/"+r+"/"+this.SessionsService.getCurrentDistributorKey(),"_blank"),!0}},{key:"createFilterFor",value:function(e){return e=angular.lowercase(e),function(t){return t=angular.lowercase(t),0===t.indexOf(e)}}},{key:"querySearch",value:function(e,t){return t?e.filter(this.createFilterFor(t)):e}}]),e}();exports["default"]=s},712:function(e,exports,t){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(exports,"__esModule",{value:!0});var r=t(695),a=n(r),i=t(696),o=n(i),s=function(){function e(t,n,r,i,o,s){"ngInject";(0,a["default"])(this,e),this.$http=t,this.$log=n,this.StorageService=r,this.IdentityService=i,this.Restangular=o,this.$q=s,this.setIdentity=this.setIdentity.bind(this),this.uriBase="v1/sessions"}return e.$inject=["$http","$log","StorageService","IdentityService","Restangular","$q"],(0,o["default"])(e,[{key:"setDistributors",value:function(e){return this.StorageService.set("distributors",e)}},{key:"setDistributorsAsAdmin",value:function(e){return this.StorageService.set("distributorsAsAdmin",e)}},{key:"setIsAdmin",value:function(e){return this.StorageService.set("isAdmin",e)}},{key:"setUserKey",value:function(e){return this.StorageService.set("userKey",e)}},{key:"setUserEmail",value:function(e){return this.StorageService.set("userEmail",e)}},{key:"setCurrentDistributorKey",value:function(e){return this.StorageService.set("currentDistributorKey",e)}},{key:"setCurrentDistributorName",value:function(e){return this.StorageService.set("currentDistributorName",e)}},{key:"getUserKey",value:function(){return this.StorageService.get("userKey")}},{key:"getUserEmail",value:function(){return this.StorageService.get("userEmail")}},{key:"getDistributors",value:function(){return this.StorageService.get("distributors")}},{key:"getCurrentDistributorName",value:function(){return this.StorageService.get("currentDistributorName")}},{key:"getCurrentDistributorKey",value:function(){return this.StorageService.get("currentDistributorKey")}},{key:"getDistributorsAsAdmin",value:function(){return this.StorageService.get("distributorsAsAdmin")}},{key:"getIsAdmin",value:function(){return this.StorageService.get("isAdmin")}},{key:"login",value:function(e){var t=this,n={access_token:_.clone(e.access_token),authuser:_.clone(e.authuser),client_id:_.clone(e.client_id),code:_.clone(e.code),id_token:_.clone(e.id_token),scope:_.clone(e.scope),session_state:_.clone(e.session_state),state:_.clone(e.state),status:_.clone(e.status)};e.email&&e.password&&(n=e);var r=this.$http.post("/login",n);return r.success(function(e){return t.setUserKey(e.user.key),t.setIdentity().then(function(){return e})})}},{key:"setIdentity",value:function(){var e=this,t=this.$q.defer(),n=this.IdentityService.getIdentity();return n.then(function(n){return e.setDistributors(n.distributors),e.setDistributorsAsAdmin(n.distributors_as_admin),e.setIsAdmin(n.is_admin),e.setUserEmail(n.email),e.setIsAdmin(n.is_admin),t.resolve()}),t.promise}},{key:"removeUserInfo",value:function(){this.StorageService.removeAll()}}]),e}();exports["default"]=s},713:function(e,exports,t){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(exports,"__esModule",{value:!0});var r=t(695),a=n(r),i=t(696),o=n(i),s=t(714),c=n(s),u=function(){function e(){(0,a["default"])(this,e)}return(0,o["default"])(e,[{key:"set",value:function(e,t){return c["default"].set(e,t)}},{key:"get",value:function(e){return c["default"].get(e)}},{key:"rm",value:function(e){return c["default"].rm(e)}},{key:"removeAll",value:function(){c["default"].flush()}}]),e}();exports["default"]=u},715:function(e,exports,t){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(exports,"__esModule",{value:!0});var r=t(695),a=n(r),i=t(696),o=n(i),s=function(){function e(t,n){"ngInject";(0,a["default"])(this,e),this.Restangular=t,this.SessionsService=n}return e.$inject=["Restangular","SessionsService"],(0,o["default"])(e,[{key:"save",value:function(e){if(void 0!==e.key)var t=e.put();else var t=this.Restangular.service("tenants").post(e);return t}},{key:"saveOverlaySettings",value:function(e,t,n,r,a){var i={bottom_left:t,bottom_right:n,top_right:r,top_left:a};return this.Restangular.oneUrl("overlay","/api/v1/overlay/tenant/"+e).customPOST(i)}},{key:"overlayApplyTenant",value:function(e){return this.Restangular.oneUrl("overlay","/api/v1/overlay/tenant/"+e+"/apply").post()}},{key:"searchAllTenantsByName",value:function(e){var t=this.Restangular.all("tenants").customGETLIST("",{tenant_name:e});return t}},{key:"fetchAllTenants",value:function(){var e=this.Restangular.all("tenants").getList();return e}},{key:"fetchAllTenantsPaginated",value:function(e,t){var n="api/v1/tenants/paginated/"+e+"/"+t,r=this.Restangular.oneUrl("tenants",n).get();return r}},{key:"getTenantByKey",value:function(e){var t="api/v1/tenants/"+e,n=this.Restangular.oneUrl("tenants",t).get();return n}},{key:"delete",value:function(e){if(void 0!==e.key){var t=this.Restangular.one("tenants",e.key).remove();return t}}}]),e}();exports["default"]=s},716:function(e,exports,t){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(exports,"__esModule",{value:!0});var r=t(695),a=n(r),i=t(696),o=n(i),s=function(){function e(t){"ngInject";(0,a["default"])(this,e),this.Restangular=t}return e.$inject=["Restangular"],(0,o["default"])(e,[{key:"getUsTimezones",value:function(){var e=this.Restangular.oneUrl("timezones","api/v1/timezones/us").get();return e}},{key:"getAllTimezones",value:function(){var e=this.Restangular.oneUrl("timezones","api/v1/timezones/all").get();return e}},{key:"getCustomTimezones",value:function(){var e=this.Restangular.oneUrl("timezones","api/v1/timezones/custom").get();return e}}]),e}();exports["default"]=s},717:function(e,exports,t){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(exports,"__esModule",{value:!0});var r=t(695),a=n(r),i=t(696),o=n(i),s=function(){function e(t){"ngInject";(0,a["default"])(this,e),this.toastr=t}return e.$inject=["toastr"],(0,o["default"])(e,[{key:"showSuccessToast",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"Success!";return this.toastr.success(e,t)}},{key:"showErrorToast",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"Error!";return this.toastr.error(e,t)}},{key:"showInfoToast",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"Information";return this.toastr.info(e,t)}}]),e}();exports["default"]=s},718:function(e,exports,t){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(exports,"__esModule",{value:!0});var r=t(695),a=n(r),i=t(696),o=n(i),s=function(){function e(t){"ngInject";(0,a["default"])(this,e),this.Restangular=t}return e.$inject=["Restangular"],(0,o["default"])(e,[{key:"getVersions",value:function(){var e=this.Restangular.oneUrl("versions").get();return e}}]),e}();exports["default"]=s},719:function(e,exports,t){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(e,t,n,r,a,i,o){"ngInject";var s=this;i.tabIndex=5,s.tenantKey=e.tenantKey;var c=t.getTenantByKey(s.tenantKey);return c.then(function(e){s.currentTenant=e}),s.localFromUtc=function(e){for(var t=0;t<e.length;t++){var n=e[t];n.utcTimestamp&&(n.utcTimestamp=o.generateLocalFromUTC(n.utcTimestamp))}},s.getTenantCreateEvents=function(){r.start();var e=a.getTenantCreateEvents(s.tenantKey);return e.then(function(e){return s.tenantCreateEvents=e,s.localFromUtc(e),r.complete()})},s.initialize=function(){s.getTenantCreateEvents()},i.$watch("tabIndex",function(t,r){if(void 0!==t)switch(t){case 0:return n.go("tenantDetails",{tenantKey:e.tenantKey});case 1:return n.go("tenantManagedDevices",{tenantKey:e.tenantKey});case 2:return n.go("tenantUnmanagedDevices",{tenantKey:e.tenantKey});case 3:return n.go("tenantLocations",{tenantKey:e.tenantKey});case 4:return n.go("tenantOverlays",{tenantKey:e.tenantKey});case 5:return n.go("tenantLogs",{tenantKey:e.tenantKey})}}),s}r.$inject=["$stateParams","TenantsService","$state","ProgressBarService","IntegrationEvents","$scope","DateManipulationService"],Object.defineProperty(exports,"__esModule",{value:!0}),exports.TenantLogsCtrl=void 0;var a=t(659);n(a);exports.TenantLogsCtrl=r},720:function(e,exports,t){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(e,t,n,r,a,o,c,u,l){"ngInject";var d=this;o.tabIndex=4,d.tenantKey=e.tenantKey,d.editMode=!!e.tenantKey;var v=t.getTenantByKey(d.tenantKey);return v.then(function(e){d.currentTenant=e}),d.overlayChanged=!1,d.adjustOverlayStatus=function(n){d.currentTenant.overlayStatus=n,r.start(),d.loadingOverlays=!0;var i=t.save(d.currentTenant);return i.then(function(){r.complete();var n=t.getTenantByKey(e.tenantKey);n.then(function(e){d.loadingOverlays=!1,d.onSuccessResolvingTenant(e)})}),i["catch"](function(e){r.complete(),a.showErrorToast("Something went wrong"),console.log(e)}),i},d.updateOverlays=function(){d.loadingOverlays=!0;var e=d.getTenant();return e.then(function(e){d.overlayChanged=!1,d.currentTenant.overlays=e.overlays,d.currentTenantCopy.overlays=angular.copy(d.currentTenant.overlays),d.loadingOverlays=!1}),e},d.submitOverlaySettings=function(){d.loadingOverlays=!0;var e=angular.copy(d.currentTenantCopy.overlays);r.start();var n=t.saveOverlaySettings(d.tenantKey,e.bottom_left,e.bottom_right,e.top_right,e.top_left),i=function(){var e=d.updateOverlays();return e.then(function(e){a.showSuccessToast("We saved your update."),r.complete()}),e};return n.then(function(){u(i,1e3)}),n["catch"](function(e){r.complete(),a.showErrorToast("Something went wrong")}),n},d.applyTenantOverlay=function(e){var n=l.confirm({title:"Are you sure?",textContent:"Each device in your Tenant will have the current Overlay Template applied as its settings.",targetEvent:e,ariaLabel:"Lucky day",ok:"Confirm",cancel:"Nevermind"});l.show(n).then(function(){r.start();var e=t.overlayApplyTenant(d.tenantKey);return e.then(function(e){var t="Your Tenant Overlay Settings are being applied to each device in your Tenant. Please wait patiently for this process to complete.";a.showSuccessToast(t),d.loading=!0,d.getTenant(),r.complete()}),e["catch"](function(e){r.complete(),a.showErrorToast("Something went wrong")}),e})},d.checkForOverlayChanges=function(){var e=!1,t=d.currentTenant.overlays,n=d.currentTenantCopy.overlays,r=["top_left","top_right","bottom_right","bottom_left"],a=!0,o=!1,s=void 0;try{for(var c,u=(0,i["default"])(r);!(a=(c=u.next()).done);a=!0){var l=c.value;t[l].size!==n[l].size&&(e=!0),t[l].type!==n[l].type&&(e=!0),"logo"===t[l].type&&t[l].type+": "+t[l].name!==n[l].name&&(e=!0)}}catch(v){o=!0,s=v}finally{try{!a&&u["return"]&&u["return"]()}finally{if(o)throw s}}d.overlayChanged=e},d.submitImage=function(){if(d.selectedLogo&&d.selectedLogo[0]){var e=new FormData,t=!0;if(angular.forEach(d.selectedLogo,function(n){n.lfFile.size<15e6?e.append("files",n.lfFile):(d.fileApi.removeAll(),t=!1,a.showErrorToast("Your image is larger than 15 MB. Please choose a smaller image"))}),t){var n=c.saveImage(d.tenantKey,e);return n.then(function(e){r.complete(),u(d.getTenantImages,1e3),d.fileApi.removeAll(),a.showSuccessToast("We uploaded your image.")}),n["catch"](function(e){r.complete(),a.showErrorToast("Something went wrong. You may have already uploaded this image.")}),n}}},d.getTenantImagesAndReloadTenantAfterDelete=function(){var e=d.getTenantImages();e.then(function(){var e=d.updateOverlays();e.then(function(){a.showSuccessToast("We deleted your image."),r.complete()})})},d.deleteImage=function(e,t,n){var i=l.confirm({title:"Are you sure?",textContent:"If you proceed, "+t+" will be deleted and removed from all devices that use it.",targetEvent:e,ariaLabel:"Lucky day",ok:"Confirm",cancel:"Nevermind"});l.show(i).then(function(){r.start();var e=c.deleteImage(n);return e.then(function(e){u(d.getTenantImagesAndReloadTenantAfterDelete,1e3)}),e["catch"](function(e){a.showErrorToast("Something went wrong while deleting your image."),r.complete()}),e})},d.getTenantImages=function(){d.OVERLAY_TYPES=[{size:null,type:null,name:"none",realName:"none","new":!1,image_key:null},{size:null,type:"datetime",name:"datetime",realName:"datetime","new":!0,image_key:null}],r.start();var e=c.getImages(d.tenantKey);return e.then(function(e){d.tenantImages=e,r.complete();var t=!0,n=!1,a=void 0;try{for(var o,c=(0,i["default"])(d.tenantImages);!(t=(o=c.next()).done);t=!0)for(var u=o.value,l=["small","large"],v=0;v<l.length;v++){var f=l[v],m={realName:angular.copy(u.name),name:"logo: "+u.name,type:"logo",size:f,image_key:u.key};d.OVERLAY_TYPES.push(m)}}catch(p){n=!0,a=p}finally{try{!t&&c["return"]&&c["return"]()}finally{if(n)throw a}}d.OVERLAY_TYPES.sort(s["default"])}),e["catch"](function(){r.complete(),a.showErrorStatus("SOMETHING WENT WRONG RETRIEVING YOUR IMAGES")}),e},d.onSuccessResolvingTenant=function(e){d.currentTenant=e,d.currentTenantCopy=angular.copy(d.currentTenant),d.selectedTimezone=e.default_timezone},d.getTenant=function(){var n=t.getTenantByKey(e.tenantKey);return n.then(function(e){d.currentTenant=e,d.currentTenant.overlaysUpdateInProgress?(d.loading=!0,u(d.getTenant,3e3)):d.loading=!1,d.currentTenantCopy=angular.copy(d.currentTenant)}),n},d.initialize=function(){d.getTenantImages(),d.getTenant()},o.$watch("tabIndex",function(t,r){if(void 0!==t)switch(t){case 0:return n.go("tenantDetails",{tenantKey:e.tenantKey});case 1:return n.go("tenantManagedDevices",{tenantKey:e.tenantKey});case 2:return n.go("tenantUnmanagedDevices",{tenantKey:e.tenantKey});case 3:return n.go("tenantLocations",{tenantKey:e.tenantKey});case 4:return n.go("tenantOverlays",{tenantKey:e.tenantKey});case 5:return n.go("tenantLogs",{tenantKey:e.tenantKey})}}),d}r.$inject=["$stateParams","TenantsService","$state","ProgressBarService","ToastsService","$scope","ImageService","$timeout","$mdDialog"],Object.defineProperty(exports,"__esModule",{value:!0}),exports.TenantOverlaysCtrl=void 0;var a=t(650),i=n(a),o=t(659),s=n(o);exports.TenantOverlaysCtrl=r},721:function(e,exports){"use strict";function t(e,t,n,r,a,i,o,s,c){"ngInject";var u=this;return u.gameStopServer=t.host().indexOf("provisioning-gamestop")>-1,u.currentTenant={key:void 0,name:void 0,tenant_code:void 0,admin_email:void 0,content_server_url:void 0,content_manager_base_url:void 0,domain_key:void 0,notification_emails:void 0,proof_of_play_logging:!1,proof_of_play_url:void 0,active:!0},u.selectedDomain=void 0,u.distributorDomains=[],u.timezones=[],u.selectedTimezone="America/Chicago",u.initialize=function(){var e=a.getCustomTimezones();e.then(function(e){return u.timezones=e}),u.currentDistributorKey=c.getCurrentDistributorKey();var t=r.getByKey(u.currentDistributorKey);t.then(function(e){return u.currentTenant.content_manager_base_url=e.content_manager_url,u.currentTenant.content_server_url=e.player_content_url});var n=r.getDomainsByKey(u.currentDistributorKey);return n.then(function(e){return u.distributorDomains=e})},u.onClickSaveButton=function(){s.start(),u.currentTenant.default_timezone=u.selectedTimezone,u.currentTenant.domain_key=u.selectedDomain.key;var e=n.save(u.currentTenant);return e.then(u.onSuccessTenantSave,u.onFailureTenantSave)},u.onSuccessTenantSave=function(){return s.complete(),i.go("tenants")},u.onFailureTenantSave=function(t){return s.complete(),409===t.status?o.show("Oops...","Tenant code unavailable in Provisioning. Please modify tenant name to generate a unique tenant code.","error"):412===t.status?o.show("Oops...","Tenant code unavailable in Chrome Device Management. Modify tenant name to generate a unique tenant code.","error"):(e.error(t),o.show("Oops...","Unable to save the tenant.","error"))},u.autoGenerateTenantCode=function(){if(!u.currentTenant.key){var e="";return u.currentTenant.name&&(e=u.currentTenant.name.toLowerCase(),e=e.replace(/\s+/g,"_"),e=e.replace(/\W+/g,"")),u.currentTenant.tenant_code=e}},u}t.$inject=["$log","$location","TenantsService","DistributorsService","TimezonesService","$state","sweet","ProgressBarService","SessionsService"],Object.defineProperty(exports,"__esModule",{value:!0}),exports.TenantAddCtrl=t},722:function(e,exports){"use strict";function t(e,t,n,r,a,i,o,s,c,u,l,d){"ngInject";var v=this;if(v.gameStopServer=d.host().indexOf("provisioning-gamestop")>-1,v.currentTenant={key:void 0,name:void 0,tenant_code:void 0,admin_email:void 0,content_server_url:void 0,content_manager_base_url:void 0,domain_key:void 0,notification_emails:void 0,proof_of_play_logging:!1,proof_of_play_url:void 0,active:!0},v.selectedDomain=void 0,v.distributorDomains=[],v.timezones=[],v.selectedTimezone="America/Chicago",v.editMode=!!e.tenantKey,v.editMode){var f=t.getTenantByKey(e.tenantKey);f.then(function(e){return v.currentTenant=e,v.onSuccessResolvingTenant(e)})}return v.initialize=function(){var e=r.getCustomTimezones();e.then(function(e){return v.timezones=e}),v.currentDistributorKey=u.getCurrentDistributorKey();var t=a.getDomainsByKey(v.currentDistributorKey);return t.then(function(e){return v.distributorDomains=e})},v.onSuccessResolvingTenant=function(e){v.selectedTimezone=e.default_timezone;var t=n.getDomainByKey(e.domain_key);return t.then(function(e){return v.selectedDomain=e})},v.onClickSaveButton=function(){s.start(),v.currentTenant.default_timezone=v.selectedTimezone,v.currentTenant.domain_key=v.selectedDomain.key;var e=t.save(v.currentTenant);return e.then(v.onSuccessTenantSave,v.onFailureTenantSave)},v.onSuccessTenantSave=function(){return s.complete(),c.showSuccessToast("We saved your tenant information.")},v.onFailureTenantSave=function(e){return s.complete(),409===e.status?o.show("Oops...","Tenant code unavailable. Please modify tenant name to generate a unique tenant code.","error"):o.show("Oops...","Unable to save the tenant.","error")},v.editItem=function(t){return i.go("editDevice",{deviceKey:t.key,tenantKey:e.tenantKey})},v.autoGenerateTenantCode=function(){if(!v.currentTenant.key){var e="";return v.currentTenant.name&&(e=v.currentTenant.name.toLowerCase(),e=e.replace(/\s+/g,"_"),e=e.replace(/\W+/g,"")),v.currentTenant.tenant_code=e}},l.tabIndex=0,l.$watch("tabIndex",function(t,n){if(void 0!==t)switch(t){case 0:return i.go("tenantDetails",{tenantKey:e.tenantKey});case 1:return i.go("tenantManagedDevices",{tenantKey:e.tenantKey});case 2:return i.go("tenantUnmanagedDevices",{tenantKey:e.tenantKey});case 3:return i.go("tenantLocations",{tenantKey:e.tenantKey});case 4:return i.go("tenantOverlays",{tenantKey:e.tenantKey});case 5:return i.go("tenantLogs",{tenantKey:e.tenantKey})}}),v}t.$inject=["$stateParams","TenantsService","DomainsService","TimezonesService","DistributorsService","$state","sweet","ProgressBarService","ToastsService","SessionsService","$scope","$location"],Object.defineProperty(exports,"__esModule",{value:!0}),exports.TenantDetailsCtrl=t},723:function(e,exports){"use strict";function t(e,t,n,r,a,i,o){"ngInject";var s=this;if(s.location={key:void 0},s.tenantKey=e.tenantKey,s.editMode=!!e.locationKey,s.editMode){var c=n.getLocationByKey(e.locationKey);c.then(function(e){return s.location=e,s.tenantKey=e.tenantKey,s.locationName=e.customerLocationName,s.fetchTenantName(s.tenantKey)})}return s.initialize=function(){if(!s.editMode)return s.fetchTenantName(s.tenantKey),s.location={tenantKey:s.tenantKey,active:!0}},s.onClickSaveButton=function(){i.start();var e=n.save(s.location);return s.editMode?e.then(s.onSuccessUpdatingLocation(s.tenantKey),s.onFailureSavingLocation):e.then(s.onSuccessSavingLocation,s.onFailureSavingLocation)},s.onSuccessSavingLocation=function(){return i.complete(),o.showSuccessToast("We saved your location."),setTimeout(function(){r.go("tenantLocations",{tenantKey:e.tenantKey})},1e3)},s.onSuccessUpdatingLocation=function(e){return i.complete(),o.showSuccessToast("We updated your location."),setTimeout(function(){r.go("tenantLocations",{tenantKey:e})},1e3)},s.onFailureSavingLocation=function(e){return i.complete(),409===e.status?(o.showErrorToast("Location code conflict. Unable to save your location."),a.show("Oops...","Please change your customer location name. Location name must generate a unique location code.","error")):o.showErrorToast("Unable to save your location.")},s.fetchTenantName=function(e){var n=t.getTenantByKey(e);return n.then(function(e){return s.tenantName=e.name})},s.autoGenerateCustomerLocationCode=function(){if(!s.location.key){var e="";return s.location.customerLocationName&&(e=s.location.customerLocationName.toLowerCase(),e=e.replace(/\s+/g,"_"),e=e.replace(/\W+/g,"")),s.location.customerLocationCode=e}},s}t.$inject=["$stateParams","TenantsService","LocationsService","$state","sweet","ProgressBarService","ToastsService"],Object.defineProperty(exports,"__esModule",{value:!0}),exports.TenantLocationCtrl=t},724:function(e,exports,t){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(e,t,n,r,a,o){"ngInject";var c=this,u=t.tenantKey;e.tabIndex=3,c.locations=[],c.searchDisabled=!0,c.tenantKey=t.tenantKey;var l=n.getTenantByKey(u);return l.then(function(e){c.currentTenant=e}),e.$watch("tabIndex",function(e,n){if(void 0!==e)switch(e){case 0:return a.go("tenantDetails",{tenantKey:t.tenantKey});case 1:return a.go("tenantManagedDevices",{tenantKey:t.tenantKey});case 2:return a.go("tenantUnmanagedDevices",{tenantKey:t.tenantKey});case 3:return a.go("tenantLocations",{tenantKey:t.tenantKey});case 4:return a.go("tenantOverlays",{tenantKey:t.tenantKey});case 5:return a.go("tenantLogs",{tenantKey:t.tenantKey})}}),c.getLocations=function(e,t,n){o.start();var a=r.getLocationsByTenantKeyPaginated(e,t,n);return a.then(function(e){return c.locations=e.locations,c.next_cursor=e.next_cursor,c.prev_cursor=e.prev_cursor,o.complete()})},c.searchAllTenantLocationsByName=function(e){if(!e||e.length<3)return[];var t=r.searchAllTenantLocationsByName(c.tenantKey,e);return t.then(function(e){return c.searchedTenantLocations=e,c.searchedTenantLocations?c.searchedTenantLocations.map(function(e){return e.customerLocationName}).sort(s["default"]):[]})},c.isTenantLocationValid=function(e){if(!e||e.length<3)return[];r.searchAllTenantLocationsByName(c.tenantKey,e).then(function(t){var n=t;if(n){var r=!0,a=!1,o=void 0;try{for(var s,u=(0,i["default"])(n);!(r=(s=u.next()).done);r=!0){var l=s.value;if(e===l.customerLocationName)return c.searchDisabled=!1,void(c.searchMatch=l);c.searchDisabled=!0}}catch(d){a=!0,o=d}finally{try{!r&&u["return"]&&u["return"]()}finally{if(a)throw o}}}else c.searchDisabled=!0})},c.paginateCall=function(e){return e?c.getLocations(u,null,c.next_cursor):c.getLocations(u,c.prev_cursor,null)},c.initialize=function(){return c.getLocations(u)},c.editItem=function(e){return a.go("editLocation",{locationKey:e.key})},c}r.$inject=["$scope","$stateParams","TenantsService","LocationsService","$state","ProgressBarService"],Object.defineProperty(exports,"__esModule",{value:!0}),exports.TenantLocationsCtrl=void 0;var a=t(650),i=n(a),o=t(659),s=n(o);exports.TenantLocationsCtrl=r},725:function(e,exports,t){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(e,t,n,r,a,o){"ngInject";var s=this;if(s.currentTenant={key:void 0,name:void 0,tenant_code:void 0,admin_email:void 0,content_server_url:void 0,content_manager_base_url:void 0,domain_key:void 0,notification_emails:void 0,proof_of_play_logging:!1,active:!0},s.tenantDevices=[],s.devicesPrev=null,s.devicesNext=null,s.selectedButton="Serial Number",s.serialDevices={},s.disabled=!0,s.devicesToMatchOn=[],s.macDevices={},s.editMode=!!t.tenantKey,s.tenantKey=t.tenantKey,s.getManagedDevices=function(e,t,n){a.start();var i=r.getDevicesByTenant(e,t,n);return i.then(function(e){return s.devicesPrev=e.prev_cursor,s.devicesNext=e.next_cursor,s.tenantDevices=e.devices,a.complete()})},s.editItem=function(e){return r.editItem(e)},s.refreshDevices=function(){return s.devicesPrev=null,s.devicesNext=null,s.tenantDevices=null,s.getManagedDevices(s.tenantKey,s.devicesPrev,s.devicesNext)},s.editMode){var c=n.getTenantByKey(s.tenantKey);c.then(function(e){return s.currentTenant=e}),s.getManagedDevices(s.tenantKey,null,null)}return e.tabIndex=1,e.$watch("tabIndex",function(e,n){if(void 0!==e)switch(e){case 0:return o.go("tenantDetails",{tenantKey:t.tenantKey});case 1:return o.go("tenantManagedDevices",{tenantKey:t.tenantKey});case 2:return o.go("tenantUnmanagedDevices",{tenantKey:t.tenantKey});case 3:return o.go("tenantLocations",{tenantKey:t.tenantKey});case 4:return o.go("tenantOverlays",{tenantKey:t.tenantKey});case 5:return o.go("tenantLogs",{tenantKey:t.tenantKey})}}),s.changeRadio=function(){s.searchText="",s.disabled=!0,s.serialDevices={},s.macDevices={},s.devicesToMatchOn=[]},s.searchDevices=function(e){var t=!1,n=s.selectedButton,a=!0,i=s.tenantKey;return r.searchDevices(e,n,a,i,s.distributorKey,t).then(function(e){var t=void 0;if(e.success){var r=e.devices;return"Serial Number"===n?(s.serialDevices=r[1],t=r[0]):"MAC"===n?(s.macDevices=r[1],t=r[0]):(s.gcmidDevices=r[1],t=r[0]),s.devicesToMatchOn=t,t}return[]})},s.paginateCall=function(e){return e?s.getManagedDevices(s.tenantKey,null,s.devicesNext):s.getManagedDevices(s.tenantKey,s.devicesPrev,null)},s.prepareForEditView=function(e){return r.preprateForEditView(s.selectedButton,s.tenantKey,e,s.macDevices,s.serialDevices,s.gcmidDevices)},s.controlOpenButton=function(e){return s.disabled=!e,s.loadingDisabled=!1},s.isResourceValid=function(e){var t=!1,n=!0,r=!1,a=void 0;try{for(var o,c=(0,i["default"])(s.devicesToMatchOn);!(n=(o=c.next()).done);n=!0){var u=o.value;e===u&&(t=!0)}}catch(l){r=!0,a=l}finally{try{!n&&c["return"]&&c["return"]()}finally{if(r)throw a}}return s.controlOpenButton(t),t},s}r.$inject=["$scope","$stateParams","TenantsService","DevicesService","ProgressBarService","$state"],Object.defineProperty(exports,"__esModule",{value:!0}),exports.TenantManagedDevicesCtrl=void 0;var a=t(650),i=n(a);exports.TenantManagedDevicesCtrl=r},726:function(e,exports,t){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(e,t,n,r,a,o){"ngInject";var s=this;if(s.currentTenant={key:void 0,name:void 0,tenant_code:void 0,admin_email:void 0,content_server_url:void 0,content_manager_base_url:void 0,domain_key:void 0,notification_emails:void 0,proof_of_play_logging:!1,active:!0},s.gcmidDevices=[],s.tenantDevices=[],s.devicesPrev=null,s.devicesNext=null,s.selectedButton="MAC",s.serialDevices={},s.disabled=!0,s.macDevices={},s.devicesToMatchOn=[],s.editMode=!!t.tenantKey,s.tenantKey=t.tenantKey,e.tabIndex=2,e.$watch("tabIndex",function(e,n){if(void 0!==e)switch(e){case 0:return o.go("tenantDetails",{tenantKey:t.tenantKey});case 1:return o.go("tenantManagedDevices",{tenantKey:t.tenantKey});case 2:return o.go("tenantUnmanagedDevices",{tenantKey:t.tenantKey});case 3:return o.go("tenantLocations",{tenantKey:t.tenantKey});case 4:return o.go("tenantOverlays",{tenantKey:t.tenantKey});case 5:return o.go("tenantLogs",{tenantKey:t.tenantKey})}}),s.editItem=function(e){return r.editItem(e)},s.getUnmanagedDevices=function(e,t,n){a.start();var i=r.getUnmanagedDevicesByTenant(e,t,n);return i.then(function(e){return s.devicesPrev=e.prev_cursor,s.devicesNext=e.next_cursor,s.tenantDevices=e.devices,a.complete()})},s.editMode){var c=n.getTenantByKey(s.tenantKey);c.then(function(e){return s.currentTenant=e}),s.getUnmanagedDevices(s.tenantKey,null,null)}return s.refreshDevices=function(){return s.devicesPrev=null,s.devicesNext=null,s.tenantDevices=null,s.getUnmanagedDevices(s.tenantKey,s.devicesPrev,s.devicesNext)},s.changeRadio=function(){s.searchText="",s.disabled=!0,s.serialDevices={},s.macDevices={},s.devicesToMatchOn=[]},s.searchDevices=function(e){var t=!0,n=!0;return r.searchDevices(e,s.selectedButton,n,s.tenantKey,s.distributorKey,t).then(function(e){var t=void 0;if(e.success){var n=e.devices;return"Serial Number"===s.selectedButton?(s.serialDevices=n[1],t=n[0]):"MAC"===s.selectedButton?(s.macDevices=n[1],t=n[0]):(s.gcmidDevices=n[1],t=n[0]),s.devicesToMatchOn=t,t}return[]})},s.paginateCall=function(e){return e?s.getUnmanagedDevices(s.tenantKey,null,s.devicesNext):s.getUnmanagedDevices(s.tenantKey,s.devicesPrev,null)},s.prepareForEditView=function(e){return r.preprateForEditView(s.selectedButton,s.tenantKey,e,s.macDevices,s.serialDevices,s.gcmidDevices)},s.controlOpenButton=function(e){s.disabled=!e,s.loadingDisabled=!1},s.isResourceValid=function(e){var t=!1,n=!0,r=!1,a=void 0;try{for(var o,c=(0,i["default"])(s.devicesToMatchOn);!(n=(o=c.next()).done);n=!0){var u=o.value;e===u&&(t=!0)}}catch(l){r=!0,a=l}finally{try{!n&&c["return"]&&c["return"]()}finally{if(r)throw a}}return s.controlOpenButton(t),t},s}r.$inject=["$scope","$stateParams","TenantsService","DevicesService","ProgressBarService","$state"],Object.defineProperty(exports,"__esModule",{value:!0}),exports.TenantUnmanagedDevicesCtrl=void 0;var a=t(650),i=n(a);exports.TenantUnmanagedDevicesCtrl=r},727:function(e,exports,t){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(e,t,n,r,a){"ngInject";var o=this;return o.tenants=[],o.searchedTenants=[],o.searchMatch=null,o.searchDisabled=!0,o.getTenantsPaginated=function(e,t){o.offset=t,o.loading=!0,r.start();var a=n.fetchAllTenantsPaginated(e,t);return a.then(function(e){return o.getFetchSuccess(e)},function(e){return o.getFetchFailure(e)})},o.getFetchSuccess=function(e){return o.tenants=e.tenants,o.total=e.total,o.is_first_page=e.is_first_page,o.is_last_page=e.is_last_page,r.complete(),o.loading=!1},o.getFetchFailure=function(e){r.complete();var t="Unable to fetch tenants. Error: "+e.status+" "+e.statusText+".";return a.show("Oops...",t,"error")},o.initialize=function(){
return o.offset=0,o.searchAllTenantsByName("my"),o.getTenantsPaginated(100,o.offset)},o.searchAllTenantsByName=function(e){if(!e||e.length<3)return[];var t=n.searchAllTenantsByName(e);return t.then(function(e){return o.searchedTenants=e,o.searchedTenants?o.searchedTenants.map(function(e){return e.name}).sort(s["default"]):[]})},o.isTenantValid=function(e){if(!e||e.length<3)return[];n.searchAllTenantsByName(e).then(function(t){var n=t;if(n){var r=!0,a=!1,s=void 0;try{for(var c,u=(0,i["default"])(n);!(r=(c=u.next()).done);r=!0){var l=c.value;if(e===l.name)return o.searchDisabled=!1,void(o.searchMatch=l);o.searchDisabled=!0}}catch(d){a=!0,s=d}finally{try{!r&&u["return"]&&u["return"]()}finally{if(a)throw s}}}else o.searchDisabled=!0})},o.editItem=function(t){return e.go("tenantDetails",{tenantKey:t.key})},o.deleteItem=function(e){var t=function(){var t=n["delete"](e);return t.then(function(){return o.initialize()})};return a.show({title:"Are you sure?",text:"This will permanently remove the tenant from the system.",type:"warning",showCancelButton:!0,confirmButtonColor:"#DD6B55",confirmButtonText:"Yes, remove the tenant!",closeOnConfirm:!0},t)},o}r.$inject=["$state","$log","TenantsService","ProgressBarService","sweet"],Object.defineProperty(exports,"__esModule",{value:!0}),exports.TenantsCtrl=void 0;var a=t(650),i=n(a),o=t(659),s=n(o);exports.TenantsCtrl=r},728:function(e,exports){"use strict";function t(e,t,n,r){"ngInject";var a=this;return a.version_data=[],a.loading=!0,a.proceedToSignIn=function(){return t.go("sign_in")},a.capitalizeFirstLetter=function(e){return e.charAt(0).toUpperCase()+e.slice(1)},a.giveOptionToChangeDistributor=function(){var e=n.fetchAllByUser(r.getUserKey());return e.then(function(e){return a.has_multiple_distributors=e.length>1,a.loading=!1})},a.changeDistributor=function(){return t.go("distributor_selection")},a.getVersion=function(){var t=e.getVersions();return t.then(function(e){return a.version_data=e})},a.initialize=function(){return a.identity={key:r.getUserKey(),email:r.getUserEmail(),distributorKey:r.getCurrentDistributorKey(),distributorName:r.getCurrentDistributorName()},a.giveOptionToChangeDistributor(),a.identity.email?a.getVersion():t.go("sign_in")},a}t.$inject=["VersionsService","$state","DistributorsService","SessionsService"],Object.defineProperty(exports,"__esModule",{value:!0}),exports.WelcomeCtrl=t},729:function(e,exports){"use strict";function t(e,t,n){"ngInject";return e.state("sign_in",{resolve:{identity:["IdentityService",function(e){return e.getIdentity()}],notAuthenticated:["AuthorizationService",function(e){return e.notAuthenticated()}]},url:"/sign_in",templateUrl:"app/authentication/sign_in.html",controller:"AuthenticationCtrl",controllerAs:"authenticationCtrl"}),e.state("signed_out",{url:"/signed_out",resolve:{identity:["IdentityService",function(e){return e.getIdentity()}],notAuthenticated:["AuthorizationService",function(e){return e.notAuthenticated()}]},templateUrl:"app/authentication/signed_out.html",controller:"AuthenticationCtrl",controllerAs:"authenticationCtrl"}),e.state("sign_out",{resolve:{identity:["IdentityService",function(e){return e.getIdentity()}],authenticated:["AuthorizationService",function(e){return e.authenticated()}]},url:"/sign_out",templateUrl:"app/authentication/sign_out.html",controller:"AuthenticationCtrl",controllerAs:"authenticationCtrl"}),e.state("distributor_selection",{resolve:{authenticated:["AuthorizationService",function(e){return e.authenticated()}]},url:"/distributor_selection",templateUrl:"app/distributor/distributor_selector.html",controller:"DistributorSelectorCtrl",controllerAs:"vm"}),e.state("home",{url:"/",templateUrl:"app/welcome/welcome.html",resolve:{identity:["IdentityService",function(e){return e.getIdentity()}],authenticated:["AuthorizationService",function(e){return e.authenticated()}]},controller:"WelcomeCtrl",controllerAs:"welcomeCtrl",ncyBreadcrumb:{label:"Skykit Provisioning"}}),e.state("welcome",{url:"/welcome",templateUrl:"app/welcome/welcome.html",resolve:{identity:["IdentityService",function(e){return e.getIdentity()}],authenticated:["AuthorizationService",function(e){return e.authenticated()}]},controller:"WelcomeCtrl",controllerAs:"welcomeCtrl",ncyBreadcrumb:{label:"Skykit Provisioning"}}),e.state("domains",{resolve:{authenticated:["AuthorizationService",function(e){return e.authenticated()}]},url:"/domains",templateUrl:"app/domain/domains-listing.html",controller:"DomainsCtrl",controllerAs:"domainsCtrl",ncyBreadcrumb:{label:"Domains"}}),e.state("addDomain",{resolve:{authenticated:["AuthorizationService",function(e){return e.authenticated()}]},url:"/domains/add",templateUrl:"app/domain/domain-detail.html",controller:"DomainDetailsCtrl",controllerAs:"domainDetailsCtrl",ncyBreadcrumb:{label:"Add domain",parent:"domains"}}),e.state("editDomain",{resolve:{authenticated:["AuthorizationService",function(e){return e.authenticated()}]},url:"/domains/:domainKey",templateUrl:"app/domain/domain-detail.html",controller:"DomainDetailsCtrl",controllerAs:"domainDetailsCtrl",ncyBreadcrumb:{label:"{{ domainDetailsCtrl.currentDomain.name }}",parent:"domains"}}),e.state("tenants",{resolve:{authenticated:["AuthorizationService",function(e){return e.authenticated()}]},url:"/tenants",templateUrl:"app/tenant/tenants-listing.html",controller:"TenantsCtrl",controllerAs:"tenantsCtrl",ncyBreadcrumb:{label:"Tenants"}}),e.state("addTenant",{resolve:{authenticated:["AuthorizationService",function(e){return e.authenticated()}]},url:"/tenants/add",templateUrl:"app/tenant/tenant-add.html",controller:"TenantAddCtrl",controllerAs:"tenantAddCtrl",ncyBreadcrumb:{label:"Add tenant",parent:"tenants"}}),e.state("tenantDetails",{resolve:{authenticated:["AuthorizationService",function(e){return e.authenticated()}]},url:"/tenants/:tenantKey/details",templateUrl:"app/tenant/tenant-details.html",controller:"TenantDetailsCtrl",controllerAs:"tenantDetailsCtrl",ncyBreadcrumb:{label:"{{ tenantDetailsCtrl.currentTenant.name }}",parent:"tenants"}}),e.state("tenantManagedDevices",{resolve:{authenticated:["AuthorizationService",function(e){return e.authenticated()}]},url:"/tenants/:tenantKey/managed",templateUrl:"app/tenant/tenant-managed-devices.html",controller:"TenantManagedDevicesCtrl",controllerAs:"tenantManagedDevicesCtrl",ncyBreadcrumb:{label:"{{ tenantManagedDevicesCtrl.currentTenant.name }}",parent:"tenants"}}),e.state("tenantUnmanagedDevices",{resolve:{authenticated:["AuthorizationService",function(e){return e.authenticated()}]},url:"/tenants/:tenantKey/unmanaged",templateUrl:"app/tenant/tenant-unmanaged-devices.html",controller:"TenantUnmanagedDevicesCtrl",controllerAs:"tenantUnmanagedDevicesCtrl",ncyBreadcrumb:{label:"{{ tenantUnmanagedDevicesCtrl.currentTenant.name }}",parent:"tenants"}}),e.state("tenantLogs",{resolve:{authenticated:["AuthorizationService",function(e){return e.authenticated()}]},url:"/tenants/:tenantKey/logs",templateUrl:"app/tenant/tenant-logs.html",controller:"TenantLogsCtrl",controllerAs:"tenantLogsCtrl",ncyBreadcrumb:{label:"{{ tenantLogsCtrl.currentTenant.name }}",parent:"tenants"}}),e.state("tenantOverlays",{resolve:{authenticated:["AuthorizationService",function(e){return e.authenticated()}]},url:"/tenants/:tenantKey/overlays",templateUrl:"app/tenant/tenant-overlays.html",controller:"TenantOverlaysCtrl",controllerAs:"tenantOverlaysCtrl",ncyBreadcrumb:{label:"{{ tenantOverlaysCtrl.currentTenant.name }}",parent:"tenants"}}),e.state("tenantLocations",{resolve:{authenticated:["AuthorizationService",function(e){return e.authenticated()}]},url:"/tenants/:tenantKey/locations",templateUrl:"app/tenant/tenant-locations.html",controller:"TenantLocationsCtrl",controllerAs:"tenantLocationsCtrl",ncyBreadcrumb:{label:"{{ tenantLocationsCtrl.currentTenant.name }}",parent:"tenants"}}),e.state("editLocation",{resolve:{authenticated:["AuthorizationService",function(e){return e.authenticated()}]},url:"/locations/:locationKey",templateUrl:"app/tenant/tenant-location.html",controller:"TenantLocationCtrl",controllerAs:"tenantLocationCtrl",ncyBreadcrumb:{label:"{{ tenantLocationCtrl.tenantName }}  / {{ tenantLocationCtrl.locationName }}",parent:"tenants"}}),e.state("addLocation",{resolve:{authenticated:["AuthorizationService",function(e){return e.authenticated()}]},url:"/tenants/:tenantKey/location",templateUrl:"app/tenant/tenant-location.html",controller:"TenantLocationCtrl",controllerAs:"tenantLocationCtrl",ncyBreadcrumb:{label:"{{ tenantLocationCtrl.tenantName }}  / Location",parent:"tenants"}}),e.state("devices",{resolve:{authenticated:["AuthorizationService",function(e){return e.authenticated()}]},url:"/devices",templateUrl:"app/device/devices-listing.html",controller:"DevicesListingCtrl",controllerAs:"devicesListingCtrl",ncyBreadcrumb:{label:"Devices"}}),e.state("editDevice",{resolve:{identity:["IdentityService",function(e){return e.getIdentity()}],authenticated:["AuthorizationService",function(e){return e.authenticated()}]},url:"/devices/:deviceKey?tenantKey?fromDevices",templateUrl:"app/device/device-detail.html",ncyBreadcrumb:{label:"{{ deviceDetailsCtrl.currentDevice.key }}",parent:"devices"},controller:"DeviceDetailsCtrl","function":function(e,t){e.tenantKey=t.tenantKey},controllerAs:"deviceDetailsCtrl"}),e.state("proof",{resolve:{authenticated:["AuthorizationService",function(e){return e.authenticated()}]},url:"/proof",templateUrl:"app/proof/main.html",controller:"ProofOfPlayCtrl",controllerAs:"vm",ncyBreadcrumb:{label:"Proof of Play"}}),e.state("proofDetail",{resolve:{authenticated:["AuthorizationService",function(e){return e.authenticated()}]},url:"/proof/:tenant",templateUrl:"app/proof/detail.html",controller:"ProofOfPlayCtrl",controllerAs:"vm",ncyBreadcrumb:{label:"Proof of Play"}}),e.state("admin",{resolve:{isAdmin:["AuthorizationService",function(e){return e.isAdminOrDistributorAdmin()}]},url:"/admin",templateUrl:"app/admin/admin.html",controller:"AdminCtrl",controllerAs:"vm",ncyBreadcrumb:{label:"Admin"}}),t.otherwise("/sign_in"),n.setBaseUrl("/api/v1"),n.addResponseInterceptor(function(e,t,n,r,a,i){var o=e;return o}),n.setRestangularFields({id:"key"})}Object.defineProperty(exports,"__esModule",{value:!0}),exports.routes=t,t.$inject=["$stateProvider","$urlRouterProvider","RestangularProvider"]},730:function(e,exports){"use strict";function t(e,t,n,r,a){"ngInject";var i=function(){var e=n.get("$state");return r.$on("$stateChangeError",function(t,n,r,a,i,o){if("authError"===o[0])return e.go(o[1])})};a(i,500);var o=function(){e.addRequestInterceptor(function(r,a,i,o){var s=n.get("StorageService"),c="6C346588BD4C6D722A1165B43C51C";if(t.host().indexOf("provisioning-gamestop")>-1&&(c="5XZHBF3mOwqJlYAlG1NeeWX0Cb72g"),e.setDefaultHeaders({"Content-Type":"application/json",Accept:"application/json",Authorization:c,"X-Provisioning-User":s.get("userKey"),"X-Provisioning-Distributor":s.get("currentDistributorKey")}),"remove"!==a)return r})};a(o,500)}t.$inject=["Restangular","$location","$injector","$rootScope","$timeout"],Object.defineProperty(exports,"__esModule",{value:!0}),exports.appRun=t},731:function(e,exports,t){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(e){o["default"].extend(e,{progressBar:!0,closeButton:!0,tapToDismiss:!0,newestOnTop:!0,positionClass:"toast-bottom-left",timeOut:5e3})}function a(e){e.setOptions({prefixStateName:"home",template:"bootstrap3"})}Object.defineProperty(exports,"__esModule",{value:!0}),exports.toastrConfig=r,exports.breadcrumbProvider=a;var i=t(369),o=n(i);r.$inject=["toastrConfig"],a.$inject=["$breadcrumbProvider"]}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vYXBwLmJ1bmRsZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYXBwL2luZGV4LmpzIiwid2VicGFjazovLy8uL3NyYy9hcHAvYXBwLmpzIiwid2VicGFjazovLy8uL34vbW9tZW50L2xvY2FsZSBeXFwuXFwvLiokIiwid2VicGFjazovLy8uL3NyYy9hcHAvY29tcG9uZW50cy9uZ1Byb2dyZXNzL25nUHJvZ3Jlc3MuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FwcC9jb21wb25lbnRzL25nUHJvZ3Jlc3MvbmdQcm9ncmVzcy5jc3M/ZDE1NiIsIndlYnBhY2s6Ly8vLi9zcmMvYXBwL2NvbXBvbmVudHMvbmdQcm9ncmVzcy9uZ1Byb2dyZXNzLmNzcyIsIndlYnBhY2s6Ly8vLi9zcmMvYXBwL2NvbXBvbmVudHMvYW5ndWxhckJyZWFkY3J1bWIvYW5ndWxhckJyZWFkY3J1bWIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FwcC9jb21wb25lbnRzL2FuZ3VsYXItbWF0ZXJpYWwtZGF0ZXRpbWVwaWNrZXIvanMvYW5ndWxhci1tYXRlcmlhbC1kYXRldGltZXBpY2tlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYXBwL2NvbXBvbmVudHMvYW5ndWxhci1tYXRlcmlhbC1kYXRldGltZXBpY2tlci9jc3MvbWF0ZXJpYWwtZGF0ZXRpbWVwaWNrZXIuY3NzP2M0MTMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FwcC9jb21wb25lbnRzL2FuZ3VsYXItbWF0ZXJpYWwtZGF0ZXRpbWVwaWNrZXIvY3NzL21hdGVyaWFsLWRhdGV0aW1lcGlja2VyLmNzcyIsIndlYnBhY2s6Ly8vLi9zcmMvYXBwL2NvbXBvbmVudHMvYW5ndWxhci1kaXJlY3RpdmUuZy1zaWduaW4vZ29vZ2xlLXBsdXMtc2lnbmluLmpzIiwid2VicGFjazovLy8uL3NyYy9hcHAvc2Nzcy92ZW5kb3Iuc2Nzcz8yNmEwIiwid2VicGFjazovLy8uL3NyYy9hcHAvc2Nzcy92ZW5kb3Iuc2NzcyIsIndlYnBhY2s6Ly8vLi9zcmMvYXBwL3Njc3MvaW5kZXguc2Nzcz83Njk3Iiwid2VicGFjazovLy8uL3NyYy9hcHAvc2Nzcy9pbmRleC5zY3NzIiwid2VicGFjazovLy8uL3NyYy9hcHAvZGV2aWNlL2RldmljZS1kZXRhaWwtY29tbWFuZC5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYXBwL2RldmljZS9kZXZpY2UtZGV0YWlscy5jb250cm9sbGVyLmpzIiwid2VicGFjazovLy8uL3NyYy9hcHAvZGV2aWNlL2RldmljZXMtbGlzdGluZy5jb250cm9sbGVyLmpzIiwid2VicGFjazovLy8uL3NyYy9hcHAvYWRtaW4vYWRtaW4tY29udHJvbGxlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYXBwL2F1dGhlbnRpY2F0aW9uL2F1dGhlbnRpY2F0aW9uLWNvbnRyb2xsZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FwcC9hcHAvYXBwLWNvbnRyb2xsZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FwcC9kaXN0cmlidXRvci9kaXN0cmlidXRvci1zZWxlY3Rvci1jb250cm9sbGVyLmpzIiwid2VicGFjazovLy8uL3NyYy9hcHAvZGlzdHJpYnV0b3IvZGlzdHJpYnV0b3JzLWNvbnRyb2xsZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FwcC9kb21haW4vZG9tYWlucy5jb250cm9sbGVyLmpzIiwid2VicGFjazovLy8uL3NyYy9hcHAvZG9tYWluL2RvbWFpbi1kZXRhaWxzLmNvbnRyb2xsZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FwcC9wcm9vZi9tdWx0aS1sb2NhdGlvbi5jb250cm9sbGVyLmpzIiwid2VicGFjazovLy8uL3NyYy9hcHAvcHJvb2YvbXVsdGktZGlzcGxheS5jb250cm9sbGVyLmpzIiwid2VicGFjazovLy8uL3NyYy9hcHAvcHJvb2YvbXVsdGktcmVzb3VyY2UuY29udHJvbGxlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYXBwL3Byb29mL3Byb29mLW9mLXBsYXkuY29udHJvbGxlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYXBwL3NlcnZpY2VzL2ltYWdlLnNlcnZpY2UuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FwcC9zZXJ2aWNlcy9hZG1pbi5zZXJ2aWNlLmpzIiwid2VicGFjazovLy8uL3NyYy9hcHAvc2VydmljZXMvYXV0aG9yaXphdGlvbi5zZXJ2aWNlLmpzIiwid2VicGFjazovLy8uL3NyYy9hcHAvc2VydmljZXMvY29tbWFuZHMuc2VydmljZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYXBwL3NlcnZpY2VzL2RhdGVtYW5pcHVsYXRpb24uc2VydmljZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYXBwL3NlcnZpY2VzL2RldmljZXMuc2VydmljZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYXBwL3NlcnZpY2VzL2Rpc3RyaWJ1dG9ycy5zZXJ2aWNlLmpzIiwid2VicGFjazovLy8uL3NyYy9hcHAvc2VydmljZXMvZG9tYWlucy5zZXJ2aWNlLmpzIiwid2VicGFjazovLy8uL3NyYy9hcHAvc2VydmljZXMvaWRlbnRpdHkuc2VydmljZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYXBwL3NlcnZpY2VzL2ludGVncmF0aW9uLWV2ZW50cy5zZXJ2aWNlLmpzIiwid2VicGFjazovLy8uL3NyYy9hcHAvc2VydmljZXMvbG9jYXRpb25zLnNlcnZpY2UuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FwcC9zZXJ2aWNlcy9wcm9ncmVzc2Jhci5zZXJ2aWNlLmpzIiwid2VicGFjazovLy8uL3NyYy9hcHAvc2VydmljZXMvcHJvb2ZwbGF5LnNlcnZpY2UuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FwcC9zZXJ2aWNlcy9zZXNzaW9ucy5zZXJ2aWNlLmpzIiwid2VicGFjazovLy8uL3NyYy9hcHAvc2VydmljZXMvc3RvcmFnZS5zZXJ2aWNlLmpzIiwid2VicGFjazovLy8uL3NyYy9hcHAvc2VydmljZXMvdGVuYW50cy5zZXJ2aWNlLmpzIiwid2VicGFjazovLy8uL3NyYy9hcHAvc2VydmljZXMvdGltZXpvbmVzLnNlcnZpY2UuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FwcC9zZXJ2aWNlcy90b2FzdHMuc2VydmljZS5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYXBwL3NlcnZpY2VzL3ZlcnNpb25zLnNlcnZpY2UuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FwcC90ZW5hbnQvdGVuYW50LWxvZ3MuY29udHJvbGxlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYXBwL3RlbmFudC90ZW5hbnQtb3ZlcmxheXMuY29udHJvbGxlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYXBwL3RlbmFudC90ZW5hbnQtYWRkLmNvbnRyb2xsZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FwcC90ZW5hbnQvdGVuYW50LWRldGFpbHMuY29udHJvbGxlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYXBwL3RlbmFudC90ZW5hbnQtbG9jYXRpb24uY29udHJvbGxlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYXBwL3RlbmFudC90ZW5hbnQtbG9jYXRpb25zLmNvbnRyb2xsZXIuanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FwcC90ZW5hbnQvdGVuYW50LW1hbmFnZWQtZGV2aWNlcy5jb250cm9sbGVyLmpzIiwid2VicGFjazovLy8uL3NyYy9hcHAvdGVuYW50L3RlbmFudC11bm1hbmFnZWQtZGV2aWNlcy5jb250cm9sbGVyLmpzIiwid2VicGFjazovLy8uL3NyYy9hcHAvdGVuYW50L3RlbmFudHMuY29udHJvbGxlci5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYXBwL3dlbGNvbWUvd2VsY29tZS1jb250cm9sbGVyLmpzIiwid2VicGFjazovLy8uL3NyYy9hcHAvYXBwLXJvdXRlcy5qcyIsIndlYnBhY2s6Ly8vLi9zcmMvYXBwL2FwcC1ydW4uanMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2FwcC9hcHAtY29uZmlnLmpzIl0sIm5hbWVzIjpbIndlYnBhY2tKc29ucCIsIjAiLCJtb2R1bGUiLCJleHBvcnRzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIjM2NyIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJvYmoiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsIl9hcHAiLCJfZGV2aWNlRGV0YWlsQ29tbWFuZCIsIl9kZXZpY2VEZXRhaWxzIiwiX2RldmljZXNMaXN0aW5nIiwiX2FkbWluQ29udHJvbGxlciIsIl9hdXRoZW50aWNhdGlvbkNvbnRyb2xsZXIiLCJfYXBwQ29udHJvbGxlciIsIl9kaXN0cmlidXRvclNlbGVjdG9yQ29udHJvbGxlciIsIl9kaXN0cmlidXRvcnNDb250cm9sbGVyIiwiX2RvbWFpbnMiLCJfZG9tYWluRGV0YWlscyIsIl9tdWx0aUxvY2F0aW9uIiwiX211bHRpRGlzcGxheSIsIl9tdWx0aVJlc291cmNlIiwiX3Byb29mT2ZQbGF5IiwiX2ltYWdlIiwiX2ltYWdlMiIsIl9hZG1pbiIsIl9hZG1pbjIiLCJfYXV0aG9yaXphdGlvbiIsIl9hdXRob3JpemF0aW9uMiIsIl9jb21tYW5kcyIsIl9jb21tYW5kczIiLCJfZGF0ZW1hbmlwdWxhdGlvbiIsIl9kYXRlbWFuaXB1bGF0aW9uMiIsIl9kZXZpY2VzIiwiX2RldmljZXMyIiwiX2Rpc3RyaWJ1dG9ycyIsIl9kaXN0cmlidXRvcnMyIiwiX2RvbWFpbnMyIiwiX2RvbWFpbnMzIiwiX2lkZW50aXR5IiwiX2lkZW50aXR5MiIsIl9pbnRlZ3JhdGlvbkV2ZW50cyIsIl9pbnRlZ3JhdGlvbkV2ZW50czIiLCJfbG9jYXRpb25zIiwiX2xvY2F0aW9uczIiLCJfcHJvZ3Jlc3NiYXIiLCJfcHJvZ3Jlc3NiYXIyIiwiX3Byb29mcGxheSIsIl9wcm9vZnBsYXkyIiwiX3Nlc3Npb25zIiwiX3Nlc3Npb25zMiIsIl9zdG9yYWdlIiwiX3N0b3JhZ2UyIiwiX3RlbmFudHMiLCJfdGVuYW50czIiLCJfdGltZXpvbmVzIiwiX3RpbWV6b25lczIiLCJfdG9hc3RzIiwiX3RvYXN0czIiLCJfdmVyc2lvbnMiLCJfdmVyc2lvbnMyIiwiX3RlbmFudExvZ3MiLCJfdGVuYW50T3ZlcmxheXMiLCJfdGVuYW50QWRkIiwiX3RlbmFudERldGFpbHMiLCJfdGVuYW50TG9jYXRpb24iLCJfdGVuYW50TG9jYXRpb25zIiwiX3RlbmFudE1hbmFnZWREZXZpY2VzIiwiX3RlbmFudFVubWFuYWdlZERldmljZXMiLCJfdGVuYW50czMiLCJfd2VsY29tZUNvbnRyb2xsZXIiLCJfYXBwUm91dGVzIiwiX2FwcFJ1biIsIl9hcHBDb25maWciLCJhcHAiLCJzZXJ2aWNlIiwiY29udHJvbGxlciIsIkRldmljZURldGFpbHNDb21tYW5kc0N0cmwiLCJEZXZpY2VEZXRhaWxzQ3RybCIsIkRldmljZXNMaXN0aW5nQ3RybCIsIkFkbWluQ3RybCIsIkF1dGhlbnRpY2F0aW9uQ3RybCIsIkFwcENvbnRyb2xsZXIiLCJEaXN0cmlidXRvclNlbGVjdG9yQ3RybCIsIkRpc3RyaWJ1dG9yc0N0cmwiLCJEb21haW5zQ3RybCIsIkRvbWFpbkRldGFpbHNDdHJsIiwiUHJvb2ZPZlBsYXlNdWx0aUxvY2F0aW9uQ3RybCIsIlByb29mT2ZQbGF5TXVsdGlEaXNwbGF5Q3RybCIsIlByb29mT2ZQbGF5TXVsdGlSZXNvdXJjZUN0cmwiLCJQcm9vZk9mUGxheUN0cmwiLCJUZW5hbnRMb2dzQ3RybCIsIlRlbmFudE92ZXJsYXlzQ3RybCIsIlRlbmFudEFkZEN0cmwiLCJUZW5hbnREZXRhaWxzQ3RybCIsIlRlbmFudExvY2F0aW9uQ3RybCIsIlRlbmFudExvY2F0aW9uc0N0cmwiLCJUZW5hbnRNYW5hZ2VkRGV2aWNlc0N0cmwiLCJUZW5hbnRVbm1hbmFnZWREZXZpY2VzQ3RybCIsIlRlbmFudHNDdHJsIiwiV2VsY29tZUN0cmwiLCJydW4iLCJhcHBSdW4iLCJjb25maWciLCJyb3V0ZXMiLCJ0b2FzdHJDb25maWciLCJicmVhZGNydW1iUHJvdmlkZXIiLCJTdG9yYWdlU2VydmljZSIsIiRsb2NhdGlvbiIsImludGVyY2VwdG9yIiwicmVxdWVzdCIsImdzIiwicHJvZCIsImhlYWRlcnMiLCJDb250ZW50LVR5cGUiLCJBY2NlcHQiLCJBdXRob3JpemF0aW9uIiwiaG9zdCIsImluZGV4T2YiLCJYLVByb3Zpc2lvbmluZy1Vc2VyIiwiZ2V0IiwiWC1Qcm92aXNpb25pbmctVXNlci1JZGVudGlmaWVyIiwiWC1Qcm92aXNpb25pbmctRGlzdHJpYnV0b3IiLCIkaHR0cFByb3ZpZGVyIiwiaW50ZXJjZXB0b3JzIiwicHVzaCIsIjM2OCIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwidmFsdWUiLCJ1bmRlZmluZWQiLCJfYW5ndWxhciIsIl9hbmd1bGFyMiIsIl9hbmd1bGFyVWlSb3V0ZXIiLCJfYW5ndWxhclVpUm91dGVyMiIsIl9tb21lbnQiLCJfbG9kYXNoIiwiX2xvZGFzaDIiLCJ3aW5kb3ciLCJfIiwiYW5ndWxhciIsIjM3NCIsIndlYnBhY2tDb250ZXh0IiwicmVxIiwid2VicGFja0NvbnRleHRSZXNvbHZlIiwibWFwIiwiRXJyb3IiLCIuL2FmIiwiLi9hZi5qcyIsIi4vYXIiLCIuL2FyLWx5IiwiLi9hci1seS5qcyIsIi4vYXItbWEiLCIuL2FyLW1hLmpzIiwiLi9hci1zYSIsIi4vYXItc2EuanMiLCIuL2FyLXRuIiwiLi9hci10bi5qcyIsIi4vYXIuanMiLCIuL2F6IiwiLi9hei5qcyIsIi4vYmUiLCIuL2JlLmpzIiwiLi9iZyIsIi4vYmcuanMiLCIuL2JuIiwiLi9ibi5qcyIsIi4vYm8iLCIuL2JvLmpzIiwiLi9iciIsIi4vYnIuanMiLCIuL2JzIiwiLi9icy5qcyIsIi4vY2EiLCIuL2NhLmpzIiwiLi9jcyIsIi4vY3MuanMiLCIuL2N2IiwiLi9jdi5qcyIsIi4vY3kiLCIuL2N5LmpzIiwiLi9kYSIsIi4vZGEuanMiLCIuL2RlIiwiLi9kZS1hdCIsIi4vZGUtYXQuanMiLCIuL2RlLmpzIiwiLi9kdiIsIi4vZHYuanMiLCIuL2VsIiwiLi9lbC5qcyIsIi4vZW4tYXUiLCIuL2VuLWF1LmpzIiwiLi9lbi1jYSIsIi4vZW4tY2EuanMiLCIuL2VuLWdiIiwiLi9lbi1nYi5qcyIsIi4vZW4taWUiLCIuL2VuLWllLmpzIiwiLi9lbi1ueiIsIi4vZW4tbnouanMiLCIuL2VvIiwiLi9lby5qcyIsIi4vZXMiLCIuL2VzLWRvIiwiLi9lcy1kby5qcyIsIi4vZXMuanMiLCIuL2V0IiwiLi9ldC5qcyIsIi4vZXUiLCIuL2V1LmpzIiwiLi9mYSIsIi4vZmEuanMiLCIuL2ZpIiwiLi9maS5qcyIsIi4vZm8iLCIuL2ZvLmpzIiwiLi9mciIsIi4vZnItY2EiLCIuL2ZyLWNhLmpzIiwiLi9mci1jaCIsIi4vZnItY2guanMiLCIuL2ZyLmpzIiwiLi9meSIsIi4vZnkuanMiLCIuL2dkIiwiLi9nZC5qcyIsIi4vZ2wiLCIuL2dsLmpzIiwiLi9oZSIsIi4vaGUuanMiLCIuL2hpIiwiLi9oaS5qcyIsIi4vaHIiLCIuL2hyLmpzIiwiLi9odSIsIi4vaHUuanMiLCIuL2h5LWFtIiwiLi9oeS1hbS5qcyIsIi4vaWQiLCIuL2lkLmpzIiwiLi9pcyIsIi4vaXMuanMiLCIuL2l0IiwiLi9pdC5qcyIsIi4vamEiLCIuL2phLmpzIiwiLi9qdiIsIi4vanYuanMiLCIuL2thIiwiLi9rYS5qcyIsIi4va2siLCIuL2trLmpzIiwiLi9rbSIsIi4va20uanMiLCIuL2tvIiwiLi9rby5qcyIsIi4va3kiLCIuL2t5LmpzIiwiLi9sYiIsIi4vbGIuanMiLCIuL2xvIiwiLi9sby5qcyIsIi4vbHQiLCIuL2x0LmpzIiwiLi9sdiIsIi4vbHYuanMiLCIuL21lIiwiLi9tZS5qcyIsIi4vbWkiLCIuL21pLmpzIiwiLi9tayIsIi4vbWsuanMiLCIuL21sIiwiLi9tbC5qcyIsIi4vbXIiLCIuL21yLmpzIiwiLi9tcyIsIi4vbXMtbXkiLCIuL21zLW15LmpzIiwiLi9tcy5qcyIsIi4vbXkiLCIuL215LmpzIiwiLi9uYiIsIi4vbmIuanMiLCIuL25lIiwiLi9uZS5qcyIsIi4vbmwiLCIuL25sLmpzIiwiLi9ubiIsIi4vbm4uanMiLCIuL3BhLWluIiwiLi9wYS1pbi5qcyIsIi4vcGwiLCIuL3BsLmpzIiwiLi9wdCIsIi4vcHQtYnIiLCIuL3B0LWJyLmpzIiwiLi9wdC5qcyIsIi4vcm8iLCIuL3JvLmpzIiwiLi9ydSIsIi4vcnUuanMiLCIuL3NlIiwiLi9zZS5qcyIsIi4vc2kiLCIuL3NpLmpzIiwiLi9zayIsIi4vc2suanMiLCIuL3NsIiwiLi9zbC5qcyIsIi4vc3EiLCIuL3NxLmpzIiwiLi9zciIsIi4vc3ItY3lybCIsIi4vc3ItY3lybC5qcyIsIi4vc3IuanMiLCIuL3NzIiwiLi9zcy5qcyIsIi4vc3YiLCIuL3N2LmpzIiwiLi9zdyIsIi4vc3cuanMiLCIuL3RhIiwiLi90YS5qcyIsIi4vdGUiLCIuL3RlLmpzIiwiLi90aCIsIi4vdGguanMiLCIuL3RsLXBoIiwiLi90bC1waC5qcyIsIi4vdGxoIiwiLi90bGguanMiLCIuL3RyIiwiLi90ci5qcyIsIi4vdHpsIiwiLi90emwuanMiLCIuL3R6bSIsIi4vdHptLWxhdG4iLCIuL3R6bS1sYXRuLmpzIiwiLi90em0uanMiLCIuL3VrIiwiLi91ay5qcyIsIi4vdXoiLCIuL3V6LmpzIiwiLi92aSIsIi4vdmkuanMiLCIuL3gtcHNldWRvIiwiLi94LXBzZXVkby5qcyIsIi4vemgtY24iLCIuL3poLWNuLmpzIiwiLi96aC1oayIsIi4vemgtaGsuanMiLCIuL3poLXR3IiwiLi96aC10dy5qcyIsImtleXMiLCJyZXNvbHZlIiwiaWQiLCI1MjQiLCJhIiwiYiIsImMiLCJkIiwiZSIsInRoaXMiLCJhdXRvU3R5bGUiLCJjb3VudCIsImhlaWdodCIsIiRzY29wZSIsIiRuZXciLCJjb2xvciIsInBhcmVudCIsImZpbmQiLCJwcm9ncmVzc2JhckVsIiwiYXBwZW5kQ2hpbGQiLCJlcSIsImNoaWxkcmVuIiwiY3NzIiwiaW50ZXJ2YWxDb3VudGVySWQiLCJzdGFydCIsInNob3ciLCJjbGVhckludGVydmFsIiwic2V0SW50ZXJ2YWwiLCJpc05hTiIsImhpZGUiLCJyZW1haW5pbmciLCJNYXRoIiwicG93Iiwic3FydCIsInVwZGF0ZUNvdW50IiwiJCRwaGFzZSIsIiRhcHBseSIsInNldEhlaWdodCIsInNldENvbG9yIiwiYW5pbWF0ZSIsImFuaW1hdGlvbiIsImNhbmNlbCIsInN0YXR1cyIsInN0b3AiLCJzZXQiLCJyZXNldCIsImNvbXBsZXRlIiwic2V0UGFyZW50IiwicmVtb3ZlQ2hpbGQiLCJnZXREb21FbGVtZW50Iiwic2V0QWJzb2x1dGUiLCJmYWN0b3J5IiwiY3JlYXRlSW5zdGFuY2UiLCJpbnN0YW50aWF0ZSIsImRpcmVjdGl2ZSIsInJlcGxhY2UiLCJyZXN0cmljdCIsImxpbmsiLCIkd2F0Y2giLCJjb3VudGVyIiwidGVtcGxhdGUiLCI1MjUiLCJjb250ZW50IiwibG9jYWxzIiwiNTI2IiwiNTI3IiwiX3R5cGVvZjIiLCJfdHlwZW9mMyIsImVxdWFscyIsImxlbmd0aCIsIm1hdGNoIiwic3RhdGUiLCJwYXJhbUV4cHIiLCJmIiwicHJlZml4U3RhdGVOYW1lIiwidGVtcGxhdGVVcmwiLCJpbmNsdWRlQWJzdHJhY3QiLCJzZXRPcHRpb25zIiwiZXh0ZW5kIiwiJGdldCIsImciLCJoIiwiJG9uIiwidGFyZ2V0U2NvcGUiLCJuY3lCcmVhZGNydW1iSWdub3JlIiwiJGlkIiwiaSIsImV4ZWMiLCJuYW1lIiwiaiIsImsiLCJsIiwibSIsIm4iLCJuY3lCcmVhZGNydW1iIiwiZm9yY2UiLCJza2lwIiwiJGV2YWwiLCJuY3lCcmVhZGNydW1iTGluayIsImhyZWYiLCJ1bnNoaWZ0IiwiZ2V0VGVtcGxhdGUiLCJnZXRUZW1wbGF0ZVVybCIsImdldFN0YXRlc0NoYWluIiwiJGN1cnJlbnQiLCJzZWxmIiwiZ2V0TGFzdFN0ZXAiLCIkZ2V0TGFzdFZpZXdTY29wZSIsImJvb3RzdHJhcDIiLCJib290c3RyYXAzIiwic2NvcGUiLCJwb3N0Iiwic3RlcHMiLCJmb3JFYWNoIiwibGFiZWwiLCJuY3lCcmVhZGNydW1iTGFiZWwiLCJjb21waWxlIiwiYXR0ciIsIiRhdHRyIiwibmN5QnJlYWRjcnVtYkxhc3QiLCJodG1sIiwibmN5QnJlYWRjcnVtYlRleHQiLCJuY3lCcmVhZGNydW1iVGV4dFNlcGFyYXRvciIsIm5jeUJyZWFkY3J1bWJDaGFpbiIsImpvaW4iLCJleHByZXNzaW9ucyIsInBhcnRzIiwiaXNGdW5jdGlvbiIsImV4cCIsIiRpbmplY3QiLCJwcm92aWRlciIsIjU5NiIsImpRdWVyeSIsIl9tb21lbnQyIiwibW9tZW50IiwibW9kdWxlTmFtZSIsIlZJRVdfU1RBVEVTIiwiREFURSIsIkhPVVIiLCJNSU5VVEUiLCJlbCIsImVsZW1lbnQiLCJnZXRDb21wdXRlZFN0eWxlIiwibG9jYWxlIiwic2V0RGVmYXVsdExvY2FsZSIsImxvY2FsZVN0cmluZyIsIiRtZERpYWxvZyIsInJlcXVpcmUiLCJjdXJyZW50RGF0ZSIsInRpbWUiLCJkYXRlIiwibWluRGF0ZSIsIm1heERhdGUiLCJzaG9ydFRpbWUiLCJmb3JtYXQiLCJjYW5jZWxUZXh0Iiwib2tUZXh0IiwibGFuZyIsImFtVGV4dCIsInBtVGV4dCIsImF0dHJzIiwibmdNb2RlbCIsImlzT24iLCJpc1N0cmluZyIsIiRmb3JtYXR0ZXJzIiwiaXNWYWxpZCIsIm9uIiwicHJldmVudERlZmF1bHQiLCJibHVyIiwib3B0aW9ucyIsImhhc093blByb3BlcnR5IiwiaXNVbmRlZmluZWQiLCJQbHVnaW5Db250cm9sbGVyIiwiY29udHJvbGxlckFzIiwib3BlbkZyb20iLCJkb2N1bWVudCIsImJvZHkiLCJiaW5kVG9Db250cm9sbGVyIiwiZGlzYWJsZVBhcmVudFNjcm9sbCIsInRoZW4iLCJ2IiwiX2QiLCJtZGNEYXRldGltZVBpY2tlckRlZmF1bHRMb2NhbGUiLCJjdXJyZW50VmlldyIsIl9kaWFsb2ciLCJfYXR0YWNoZWRFdmVudHMiLCJWSUVXUyIsInBhcmFtcyIsIndlZWtTdGFydCIsIm1lcmlkaWVuIiwiaW5pdCIsInByb3RvdHlwZSIsInRpbWVNb2RlIiwiZGF0ZU1vZGUiLCJpbml0RGF0ZXMiLCJjdXJyZW50TmVhcmVzdDVNaW51dGUiLCJtaW51dGVzIiwicm91bmQiLCJtaW51dGUiLCJ0aGF0IiwiX2RhdGVQYXJhbSIsImlucHV0IiwiZmFsbGJhY2siLCJyZXQiLCJpc0RlZmluZWQiLCJpc0RhdGUiLCJ4IiwiZ2V0VGltZSIsIl9pc0FNb21lbnRPYmplY3QiLCJzZWxlY3REYXRlIiwiaW5pdERhdGUiLCJpbml0SG91cnMiLCJpbml0TWludXRlcyIsImlzQWZ0ZXJNaW5EYXRlIiwiY2hlY2tIb3VyIiwiY2hlY2tNaW51dGUiLCJfcmV0dXJuIiwiX21pbkRhdGUiLCJfZGF0ZSIsImhvdXIiLCJzZWNvbmQiLCJtaWxsaXNlY29uZCIsInBhcnNlSW50IiwiaXNCZWZvcmVNYXhEYXRlIiwiY2hlY2tUaW1lIiwiX21heERhdGUiLCJjYWxlbmRhclN0YXJ0Iiwic2V0TmFtZSIsInRleHQiLCJwb3NzaWJsZSIsImNoYXJBdCIsImZsb29yIiwicmFuZG9tIiwiaXNQTSIsImluY3JlbWVudFllYXIiLCJhbW91bnQiLCJpc05leHRZZWFyVmlzaWJsZSIsImFkZCIsImlzUHJldmlvdXNZZWFyVmlzaWJsZSIsImlzUHJldmlvdXNNb250aFZpc2libGUiLCJzdGFydE9mIiwiaXNOZXh0TW9udGhWaXNpYmxlIiwiZW5kT2YiLCJpc0hvdXJBdmFpbGFibGUiLCJjb252ZXJ0SG91cnMiLCJpc01pbnV0ZUF2YWlsYWJsZSIsIm9rIiwic2VsZWN0TW9udGhCZWZvcmUiLCJzdWJ0cmFjdCIsInNlbGVjdE1vbnRoQWZ0ZXIiLCJzZWxlY3RZZWFyQmVmb3JlIiwic2VsZWN0WWVhckFmdGVyIiwic2VsZWN0QU0iLCJzZWxlY3RQTSIsIm9rQnRuIiwiWUVBUl9NSU4iLCJZRUFSX01BWCIsIk1PTlRIU19JTl9BTEwiLCJJVEVNX0hFSUdIVCIsIk1PTlRIUyIsImN1cnJlbnRNb250aEluZGV4IiwieWVhciIsIm1vbnRoIiwicGlja2VyIiwiY2FsZW5kYXIiLCJkYXlzIiwidG9TdHJpbmciLCJ3ZWVrIiwibG93IiwiaGlnaCIsIm1vbnRocyIsInNsaWNlIiwiZ2V0SXRlbUF0SW5kZXgiLCJpbmRleCIsIm1vbnRoT2JqIiwiZ2VuZXJhdGVNb250aENhbGVuZGFyIiwidG9wSW5kZXgiLCJ2YWwyIiwidmFsMSIsIm5EYXRlIiwic3RhcnRPZk1vbnRoIiwiaU51bURheSIsImRheXNJbk1vbnRoIiwiaVdlZWsiLCJkYXlzSW5BV2VlayIsImRheXNUbXAiLCJzbGljZXMiLCJjZWlsIiwidG9EYXkiLCJzdWJzdHJpbmciLCJpc0luUmFuZ2UiLCJpc1NlbGVjdGVkRGF5IiwiJGNvbXBpbGUiLCJidWlsZENhbGVuZGFyQ29udGVudCIsInRib2R5IiwicXVlcnlTZWxlY3RvciIsImNhbCIsIndlZWtEYXlzIiwidHIiLCJ3ZWVrRGF5IiwidGQiLCJhT3JTcGFuIiwic2NvcGVSZWYiLCJhZGRDbGFzcyIsImFwcGVuZCIsImlkeCIsIm9sZElkeCIsIm1pbnV0ZU1vZGUiLCJtb2RlIiwiY29tcG9uZW50Um9vdCIsImNsb2NrIiwicGlja2VyRWwiLCJ3Iiwib2Zmc2V0V2lkdGgiLCJwbCIsInByIiwibWwiLCJtciIsImNsb2NrV2lkdGgiLCJwTCIsInBUIiwibUwiLCJtVCIsInIiLCJwb2ludHMiLCJzaW4iLCJQSSIsInkiLCJjb3MiLCJsZWZ0IiwidG9wIiwiZGlzcGxheSIsInNldEN1cnJlbnRWYWx1ZSIsImNsb2NrQ2VudGVyIiwiY2VudGVyV2lkdGgiLCJjZW50ZXJIZWlnaHQiLCJvZmZzZXRIZWlnaHQiLCJfaEwiLCJfbUwiLCJtYXJnaW5Ub3AiLCJhbmltYXRlSGFuZHMiLCJyb3RhdGVFbGVtZW50IiwibWRnIiwiZGVnIiwiV2Via2l0VHJhbnNmb3JtIiwiLW1vei10cmFuc2Zvcm0iLCJjdXJyZW50VmFsdWUiLCJ0bXAiLCJuZXdWYWwiLCJzZXREaXNwbGF5UG9pbnRzIiwiY29weSIsInNldFRpbWUiLCJ2YWwiLCJwb2ludEF2YWlsYWJsZSIsInBvaW50IiwidW53YXRjaGVyIiwicXVlcnlTZWxlY3RvckFsbCIsImNhbGwiLCI1OTciLCI1OTgiLCI1OTkiLCJfZ2V0T3duUHJvcGVydHlOYW1lcyIsIl9nZXRPd25Qcm9wZXJ0eU5hbWVzMiIsIiR3aW5kb3ciLCJlbmRpbmciLCJ0cmFuc2NsdWRlIiwiY3RybCIsImxpbmtlciIsImNsaWVudGlkIiwidGVzdCIsIiRzZXQiLCJ0aGVtZSIsImRlZmF1bHRzIiwiY2FsbGJhY2siLCJjb29raWVwb2xpY3kiLCJyZXF1ZXN0dmlzaWJsZWFjdGlvbnMiLCJ3aWR0aCIsInByb3BOYW1lIiwiJG9ic2VydmUiLCJfX19nY2ZnIiwicG8iLCJjcmVhdGVFbGVtZW50IiwidHlwZSIsImFzeW5jIiwic3JjIiwicyIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwicGFyZW50Tm9kZSIsImluc2VydEJlZm9yZSIsInRTY29wZSIsIm9ubG9hZCIsImdhcGkiLCJzaWduaW4iLCJyZW5kZXIiLCIkcm9vdFNjb3BlIiwic2lnbmluQ2FsbGJhY2siLCJhdXRoUmVzdWx0IiwiYWNjZXNzX3Rva2VuIiwiJGJyb2FkY2FzdCIsIjY0MyIsIjY0NCIsIjY0NSIsIjY0NiIsIjY0OCIsIiRsb2ciLCIkc3RhdGVQYXJhbXMiLCIkc3RhdGUiLCJTZXNzaW9uc1NlcnZpY2UiLCJEZXZpY2VzU2VydmljZSIsIkxvY2F0aW9uc1NlcnZpY2UiLCJDb21tYW5kc1NlcnZpY2UiLCJUaW1lem9uZXNTZXJ2aWNlIiwic3dlZXQiLCJQcm9ncmVzc0JhclNlcnZpY2UiLCJUb2FzdHNTZXJ2aWNlIiwiJHRpbWVvdXQiLCJ2bSIsInRlbmFudEtleSIsImRldmljZUtleSIsImZyb21EZXZpY2VzIiwiY3VycmVudERldmljZSIsImNvbW1hbmRFdmVudHMiLCJnZW5lcmF0ZUxvY2FsRnJvbVVUQyIsIlVUQ1RpbWUiLCJsb2NhbFRpbWUiLCJ1dGMiLCJ0b0RhdGUiLCJyZXBsYWNlQ29tbWFuZFRpbWUiLCJpc3N1ZXMiLCJlYWNoIiwicG9zdGVkVGltZSIsImNvbmZpcm1lZFRpbWUiLCJnZXRFdmVudHMiLCJwcmV2IiwibmV4dCIsImNvbW1hbmRFdmVudHNQcm9taXNlIiwiZ2V0Q29tbWFuZEV2ZW50c0J5S2V5IiwiZGF0YSIsImV2ZW50cyIsImV2ZW50X25leHRfY3Vyc29yIiwibmV4dF9jdXJzb3IiLCJldmVudF9wcmV2X2N1cnNvciIsInByZXZfY3Vyc29yIiwiZ2V0RXZlbnRzVGltZU91dCIsImNvbW1hbmRIaXN0b3J5U2VsZWN0ZWQiLCJwYWdpbmF0ZUV2ZW50Q2FsbCIsImZvcndhcmQiLCJpbml0aWFsaXplIiwiZGV2aWNlUHJvbWlzZSIsImdldERldmljZUJ5S2V5IiwicmVzcG9uc2UiLCJvbkdldERldmljZVN1Y2Nlc3MiLCJvbkdldERldmljZUZhaWx1cmUiLCJ0aW1lem9uZSIsInNlbGVjdGVkVGltZXpvbmUiLCJiYWNrVXJsIiwiYmFja1VybFRleHQiLCJpc1VubWFuYWdlZERldmljZSIsInNob3dFcnJvclRvYXN0IiwiZXJyb3JNZXNzYWdlIiwic3RhdHVzVGV4dCIsImVycm9yIiwiZ28iLCJvblJlc2V0Q29udGVudCIsInByb21pc2UiLCJjb250ZW50RGVsZXRlIiwib25SZXNldENvbnRlbnRTdWNjZXNzIiwib25SZXNldENvbnRlbnRGYWlsdXJlIiwic2hvd1N1Y2Nlc3NUb2FzdCIsIm9uVXBkYXRlQ29udGVudCIsImNvbnRlbnRVcGRhdGUiLCJvblVwZGF0ZUNvbnRlbnRTdWNjZXNzIiwib25VcGRhdGVDb250ZW50RmFpbHVyZSIsIm9uUmVzZXRQbGF5ZXIiLCJvblJlc2V0UGxheWVyU3VjY2VzcyIsIm9uUmVzZXRQbGF5ZXJGYWlsdXJlIiwib25QYW5lbE9uIiwicG93ZXJPbiIsIm9uUGFuZWxPblN1Y2Nlc3MiLCJvblBhbmVsT25GYWlsdXJlIiwib25QYW5lbE9mZiIsInBvd2VyT2ZmIiwib25QYW5lbE9mZlN1Y2Nlc3MiLCJvblBhbmVsT2ZmRmFpbHVyZSIsIm9uVXBkYXRlRGV2aWNlIiwidXBkYXRlRGV2aWNlIiwib25VcGRhdGVEZXZpY2VTdWNjZXNzIiwib25VcGRhdGVEZXZpY2VGYWlsdXJlIiwib25Wb2x1bWVDaGFuZ2UiLCJ2b2x1bWUiLCJvblZvbHVtZUNoYW5nZVN1Y2Nlc3MiLCJvblZvbHVtZUNoYW5nZUZhaWx1cmUiLCJsZXZlbCIsIm9uQ3VzdG9tQ29tbWFuZCIsImN1c3RvbSIsIm9uQ3VzdG9tQ29tbWFuZFN1Y2Nlc3MiLCJvbkN1c3RvbUNvbW1hbmRGYWlsdXJlIiwiY29tbWFuZCIsIm9uRGlhZ25vc3RpY3NUb2dnbGUiLCJ0b2dnbGVEaWFnbm9zdGljcyIsIm9uVG9nZ2xlRGlhZ25vc3RpY3NTdWNjZXNzIiwib25Ub2dnbGVEaWFnbm9zdGljc0ZhaWx1cmUiLCJvblJlc3RhcnQiLCJyZXN0YXJ0Iiwib25SZXN0YXJ0U3VjY2VzcyIsIm9uUmVzdGFydEZhaWx1cmUiLCJvblBvc3RMb2ciLCJwb3N0TG9nIiwib25Qb3N0TG9nU3VjY2VzcyIsIm9uUG9zdExvZ0ZhaWx1cmUiLCI2NDkiLCJUZW5hbnRzU2VydmljZSIsIkludGVncmF0aW9uRXZlbnRzIiwiRGF0ZU1hbmlwdWxhdGlvblNlcnZpY2UiLCJJbWFnZVNlcnZpY2UiLCJsb2NhdGlvbnMiLCJkYXlSYW5nZSIsInRpbWV6b25lcyIsIl9EYXRlTWFuaXB1bGF0aW9uU2VydiIsImNyZWF0ZUZvcm1hdHRlZFN0YXJ0QW5kRW5kRGF0ZUZyb21Ub2RheSIsIl9EYXRlTWFuaXB1bGF0aW9uU2VydjIiLCJfc2xpY2VkVG9BcnJheTMiLCJzdGFydFRpbWUiLCJlbmRUaW1lIiwiZW5yb2xsbWVudEV2ZW50cyIsImxvZ29DaGFuZ2UiLCJjb250cm9sc01vZGVPcHRpb25zIiwib3ZlcmxheUNoYW5nZWQiLCJjaGVja0Zvck92ZXJsYXlDaGFuZ2VzIiwiY2hhbmdlZCIsImN1cnJlbnREZXZpY2VPdmVybGF5cyIsIm92ZXJsYXlzIiwiY3VycmVudERldmljZUNvcHlPdmVybGF5cyIsImN1cnJlbnREZXZpY2VDb3B5IiwicG9zaXRpb25zIiwiX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiIsIl9kaWRJdGVyYXRvckVycm9yIiwiX2l0ZXJhdG9yRXJyb3IiLCJfc3RlcCIsIl9pdGVyYXRvciIsIl9nZXRJdGVyYXRvcjMiLCJkb25lIiwicG9zIiwic2l6ZSIsImVyciIsInJldmVydFRvVGVuYW50T3ZlcmxheSIsImV2IiwibG9hZGluZ092ZXJsYXlzIiwidGVuYW50UHJvbWlzZSIsImdldFRlbmFudEJ5S2V5IiwidGVuYW50IiwiY3VycmVudFRlbmFudE92ZXJsYXlzIiwia2V5Iiwic2F2ZU92ZXJsYXlTZXR0aW5ncyIsImJvdHRvbV9sZWZ0IiwiYm90dG9tX3JpZ2h0IiwidG9wX3JpZ2h0IiwidG9wX2xlZnQiLCJyZXMiLCJhZGp1c3RDb250cm9sc01vZGUiLCJjb250cm9sc01vZGUiLCJjb250cm9sc1Byb21pc2UiLCJhZGp1c3RPdmVybGF5U3RhdHVzIiwib3ZlcmxheVN0YXR1cyIsInNhdmUiLCJzdWJtaXRPdmVybGF5U2V0dGluZ3MiLCJvdmVybGF5U2V0dGluZ3MiLCJnZXRUZW5hbnRJbWFnZXNBbmRSZWZyZXNoRGV2aWNlIiwiZ2V0VGVuYW50SW1hZ2VzIiwiT1ZFUkxBWV9UWVBFUyIsInJlYWxOYW1lIiwibmV3IiwiaW1hZ2Vfa2V5IiwiZ2V0SW1hZ2VzIiwidGVuYW50SW1hZ2VzIiwiX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjIiLCJfZGlkSXRlcmF0b3JFcnJvcjIiLCJfaXRlcmF0b3JFcnJvcjIiLCJfc3RlcDIiLCJfaXRlcmF0b3IyIiwiX2FyciIsIl9pIiwic2l6ZU9wdGlvbiIsIm5ld1ZhbHVlIiwic29ydCIsIl9qYXZhc2NyaXB0TmF0dXJhbFNvcnQyIiwicmVwbGFjZUlzc3VlVGltZSIsImNyZWF0ZWQiLCJ1cGRhdGVkIiwibG9jYWxGcm9tVXRjIiwidXRjVGltZXN0YW1wIiwiY29weURldmljZUtleSIsImNvcHlDb3JyZWxhdGlvbklkZW50aWZpZXIiLCJnZXRJc3N1ZXMiLCJkZXZpY2UiLCJlcG9jaFN0YXJ0IiwiZXBvY2hFbmQiLCJpc3N1ZXNQcm9taXNlIiwiZ2V0SXNzdWVzQnlLZXkiLCJnZXRFbnJvbGxtZW50RXZlbnRzIiwiZW5yb2xsbWVudEV2ZW50c1Byb21pc2UiLCJwYWdpbmF0ZUNhbGwiLCJ1bml4IiwidGltZXpvbmVQcm9taXNlIiwiZ2V0Q3VzdG9tVGltZXpvbmVzIiwicGFuZWxNb2RlbHMiLCJnZXRQYW5lbE1vZGVscyIsInBhbmVsSW5wdXRzIiwiZ2V0UGFuZWxJbnB1dHMiLCJsb2NhdGlvbnNQcm9taXNlIiwiZ2V0TG9jYXRpb25zQnlUZW5hbnRLZXkiLCJzZXRTZWxlY3RlZE9wdGlvbnMiLCJwYW5lbE1vZGVsIiwicGFuZWxJbnB1dCIsImlzUGFyZW50IiwicGFyZW50SWQiLCJ0b0xvd2VyQ2FzZSIsImxvY2F0aW9uS2V5IiwibG9jYXRpb24iLCJvblNhdmVEZXZpY2UiLCJwYW5lbE1vZGVsTnVtYmVyIiwicGFuZWxTZXJpYWxJbnB1dCIsIm9uU3VjY2Vzc0RldmljZVNhdmUiLCJvbkZhaWx1cmVEZXZpY2VTYXZlIiwiaW5mbyIsIm9uUGFuZWxTbGVlcCIsInBhbmVsU2xlZXAiLCJvblBhbmVsU2xlZXBTdWNjZXNzIiwib25QYW5lbFNsZWVwRmFpbHVyZSIsImNvbmZpcm1EZXZpY2VEZWxldGUiLCJldmVudCIsImNvbmZpcm0iLCJ0aXRsZSIsInRleHRDb250ZW50IiwidGFyZ2V0RXZlbnQiLCJzaG93UHJvbWlzZSIsInN1Y2Nlc3MiLCJvbkNvbmZpcm1EZWxldGUiLCJmYWlsdXJlIiwib25Db25maXJtQ2FuY2VsIiwiZnJpZW5kbHlNZXNzYWdlIiwiZGVsZXRlUHJvbWlzZSIsInNob3dJbmZvVG9hc3QiLCJvblByb29mT2ZQbGF5TG9nZ2luZ0NoZWNrIiwicHJvb2ZPZlBsYXlMb2dnaW5nIiwibm9Mb2NhdGlvbiIsIm5vRGlzcGxheUNvZGUiLCJjdXN0b21lckRpc3BsYXlDb2RlIiwib25VcGRhdGVMb2NhdGlvbiIsImF1dG9HZW5lcmF0ZUN1c3RvbWVyRGlzcGxheUNvZGUiLCJuZXdEaXNwbGF5Q29kZSIsImN1c3RvbWVyRGlzcGxheU5hbWUiLCJsb2dnbHlGb3JVc2VyIiwidXNlckRvbWFpbiIsImdldFVzZXJFbWFpbCIsInNwbGl0Iiwib25DbGlja1JlZnJlc2hCdXR0b24iLCJjb252ZXJ0VG9Nb21lbnRJZk5vdEFscmVhZHkiLCJvblJlZnJlc2hJc3N1ZXNTdWNjZXNzIiwib25SZWZyZXNoSXNzdWVzRmFpbHVyZSIsIl9nZXRJdGVyYXRvcjIiLCJfc2xpY2VkVG9BcnJheTIiLCJfamF2YXNjcmlwdE5hdHVyYWxTb3J0IiwiNjYwIiwiZGlzdHJpYnV0b3JLZXkiLCJkZXZpY2VzIiwiZGV2aWNlc1ByZXYiLCJkZXZpY2VzTmV4dCIsInNlbGVjdGVkQnV0dG9uIiwic2VyaWFsRGV2aWNlcyIsImRpc2FibGVkIiwibWFjRGV2aWNlcyIsImdjbWlkRGV2aWNlcyIsInVubWFuYWdlZFNlbGVjdGVkQnV0dG9uIiwidW5tYW5hZ2VkU2VyaWFsRGV2aWNlcyIsInVubWFuYWdlZERpc2FibGVkIiwidW5tYW5hZ2VkRGV2aWNlc1ByZXYiLCJ1bm1hbmFnZWREZXZpY2VzTmV4dCIsInVubWFuYWdlZERldmljZXMiLCJ1bm1hbmFnZWRNYWNEZXZpY2VzIiwidW5tYW5hZ2VkR0NNaWREZXZpY2VzIiwiZGV2aWNlc1RvTWF0Y2hPblVubWFuYWdlZCIsImRldmljZXNUb01hdGNoT25NYW5hZ2VkIiwicmVmcmVzaE1hbmFnZWREZXZpY2VzIiwiZ2V0TWFuYWdlZERldmljZXMiLCJyZWZyZXNoVW5tYW5hZ2VkRGV2aWNlcyIsImdldFVubWFuYWdlZERldmljZXMiLCJjaGFuZ2VSYWRpbyIsInVubWFuYWdlZCIsInVubWFuYWdlZFNlYXJjaFRleHQiLCJzZWFyY2hUZXh0IiwiZWRpdEl0ZW0iLCJpdGVtIiwicHJlcGFyZUZvckVkaXRWaWV3IiwibWFjIiwic2VyaWFsIiwiZ2NtaWQiLCJjb250cm9sT3BlbkJ1dHRvbiIsImlzTWF0Y2giLCJ1bm1hbmFnZWREaXNhYmxlZEJ1dHRvbkxvYWRpbmciLCJkaXNhYmxlZEJ1dHRvbkxvYWRpbmciLCJpc1Jlc291cmNlVmFsaWQiLCJyZXNvdXJjZSIsImRldmljZXNUb01hdGNoT24iLCJmb3VuZE1hdGNoIiwic2VhcmNoRGV2aWNlcyIsInBhcnRpYWwiLCJidXR0b24iLCJieVRlbmFudCIsImRldmljZXNUb1JldHVybiIsImRldmljZXNQcm9taXNlIiwiZ2V0RGV2aWNlc0J5RGlzdHJpYnV0b3IiLCJnZXRGZXRjaFN1Y2Nlc3MiLCJnZXRGZXRjaEZhaWx1cmUiLCJ1bm1hbmFnZWREZXZpY2VzUHJvbWlzZSIsImdldFVubWFuYWdlZERldmljZXNCeURpc3RyaWJ1dG9yIiwiZ2V0Q3VycmVudERpc3RyaWJ1dG9yS2V5IiwibWFuYWdlZCIsIjY2MSIsIkFkbWluU2VydmljZSIsIkRpc3RyaWJ1dG9yc1NlcnZpY2UiLCJnZXRBbGxEaXN0cmlidXRvcnMiLCJsb2FkaW5nQWxsRGlzdHJpYnV0b3JzIiwiZ2V0QWxsRGlzdHJpYnV0b3JzUHJvbWlzZSIsImFsbERpc3RyaWJ1dG9ycyIsImFkZFVzZXJUb0Rpc3RyaWJ1dG9yIiwidXNlckVtYWlsIiwiZGlzdHJpYnV0b3JBZG1pbiIsIndoaWNoRGlzdHJpYnV0b3IiLCJmb3JtIiwid2l0aE9yV2l0aG91dCIsImRpc3RyaWJ1dG9yc0FzQWRtaW4iLCJhZGRVc2VyVG9EaXN0cmlidXRvclByb21pc2UiLCJtZXNzYWdlIiwidXNlciIsIiRzZXRQcmlzdGluZSIsIiRzZXRVbnRvdWNoZWQiLCJzZXRUaW1lb3V0IiwiZ2V0VXNlcnNPZkRpc3RyaWJ1dG9yIiwibWFrZURpc3RyaWJ1dG9yIiwiZGlzdHJpYnV0b3JOYW1lIiwiYWRtaW5FbWFpbCIsImFyaWFMYWJlbCIsIm1ha2VEaXN0cmlidXRvclByb21pc2UiLCJkaXN0cmlidXRvciIsImxvYWRpbmdVc2Vyc09mRGlzdHJpYnV0b3IiLCJjdXJyZW50RGlzdHJpYnV0b3JLZXkiLCJ1c2Vyc29mRGlzdHJpYnV0b3JQcm9taXNlIiwidXNlcnNPZkRpc3RyaWJ1dG9yIiwic3dpdGNoRGlzdHJpYnV0b3IiLCJpc0FkbWluIiwiZ2V0SXNBZG1pbiIsImdldERpc3RyaWJ1dG9yc0FzQWRtaW4iLCJjdXJyZW50RGlzdHJpYnV0b3JOYW1lIiwiZ2V0Q3VycmVudERpc3RyaWJ1dG9yTmFtZSIsIjY2MiIsImlkZW50aXR5IiwiUHJvb2ZQbGF5U2VydmljZSIsIm9uR29vZ2xlUGx1c1NpZ25JblN1Y2Nlc3MiLCJnb29nbGVQbHVzU2lnbkluQnV0dG9uQ2xpY2tlZCIsInJlbW92ZVVzZXJJbmZvIiwibG9naW4iLCJsb2dpblN1Y2Nlc3MiLCJsb2dpbkZhaWx1cmUiLCJvbkdvb2dsZVBsdXNTaWduSW5GYWlsdXJlIiwiaW5pdGlhbGl6ZVNpZ25JbiIsImNsaWVudElkIiwiT0FVVEhfQ0xJRU5UX0lEIiwiU1RBVEUiLCJpbml0aWFsaXplU2lnbk91dCIsInByb2NlZWRUb1NpZ25lZE91dCIsInByb2NlZWRUb1NpZ25JbiIsIm9uQ2xpY2tHb29nbGVQbHVzU2lnbkluIiwiNjYzIiwiJG1kU2lkZW5hdiIsImN1cnJlbnREaXN0cmlidXRlckluRGlzdHJpYnV0ZXJBZG1pbkxpc3QiLCJnZXRJZGVudGl0eSIsImdldFVzZXJLZXkiLCJlbWFpbCIsImFkbWluIiwiZGlzdHJpYnV0b3JfYWRtaW4iLCJhZG1pbl9vZl9jdXJyZW50X2Rpc3RyaWJ1dG9yIiwiaXNDdXJyZW50VVJMRGlzdHJpYnV0b3JTZWxlY3RvciIsInNlYXJjaCIsInJlc3VsdCIsInRvZ2dsZVNpZGVuYXYiLCJ0b2dnbGUiLCJnb1RvIiwic3RhdGVOYW1lIiwiaXNPcGVuIiwiY2xvc2UiLCI2ODYiLCJkaXN0cmlidXRvcnMiLCJjdXJyZW50RGlzdHJpYnV0b3IiLCJsb2FkaW5nIiwibG9lYWRpbmciLCJkaXN0cmlidXRvcnNQcm9taXNlIiwiZmV0Y2hBbGxCeVVzZXIiLCJzZWxlY3REaXN0cmlidXRvciIsIjY4NyIsIjY4OCIsIkRvbWFpbnNTZXJ2aWNlIiwiZG9tYWlucyIsImZldGNoQWxsRG9tYWlucyIsImRvbWFpbktleSIsImRlbGV0ZUl0ZW0iLCJzaG93Q2FuY2VsQnV0dG9uIiwiY29uZmlybUJ1dHRvbkNvbG9yIiwiY29uZmlybUJ1dHRvblRleHQiLCJjbG9zZU9uQ29uZmlybSIsIjY4OSIsImN1cnJlbnREb21haW4iLCJpbXBlcnNvbmF0aW9uX2FkbWluX2VtYWlsX2FkZHJlc3MiLCJkaXN0cmlidXRvcl9rZXkiLCJvcmdhbml6YXRpb25fdW5pdF9wYXRoIiwiYWN0aXZlIiwiZGV2aWNlc0FjY2VzcyIsIm9yZ1VuaXRzQWNjZXNzIiwidXNlcnNBY2Nlc3MiLCJjdXJyZW50RG9tYWlucyIsImVkaXRNb2RlIiwiZG9tYWluUHJvbWlzZSIsImdldERvbWFpbkJ5S2V5IiwiY29ubmVjdGl2aXR5UHJvbWlzZSIsImdldERpcmVjdG9yeUFwaUNvbm5lY3Rpdml0eUluZm9ybWF0aW9uIiwib25TdWNjZXNzRGV0ZXJtaW5pbmdDb25uZWN0aXZpdHkiLCJvbkZhaWx1cmVEZXRlcm1pbmluZ0Nvbm5lY3Rpdml0eSIsImRldmljZXNBY2Nlc3NFeGNlcHRpb24iLCJvcmdVbml0c0FjY2Vzc0V4Y2VwdGlvbiIsInVzZXJzQWNjZXNzRXhjZXB0aW9uIiwib25TYXZlRG9tYWluIiwib25TdWNjZXNzU2F2ZURvbWFpbiIsIm9uRmFpbHVyZVNhdmVEb21haW4iLCI2OTAiLCJyYWRpb0J1dHRvbkNob2ljZXMiLCJncm91cDEiLCJncm91cDIiLCJzZWxlY3Rpb24iLCJkYXRlVGltZVNlbGVjdGlvbiIsImVuZCIsImZvcm1WYWxpZGl0eSIsInN0YXJ0X2RhdGUiLCJlbmRfZGF0ZSIsIm5vX2NhY2hlIiwiZGlzYWJsZWRUZW5hbnQiLCJzZWxlY3RlZF9sb2NhdGlvbnMiLCJnZXRBbGxMb2NhdGlvbnMiLCJoYWRfc29tZV9pdGVtcyIsInJlZnJlc2hMb2NhdGlvbnMiLCJzZWxlY3RlZEl0ZW0iLCJhZGRUb1NlbGVjdGVkTG9jYXRpb25zIiwiaXNMb2NhdGlvblZhbGlkIiwic3BsaWNlIiwiYXJlTG9jYXRpb25zVmFsaWQiLCJpc0Rpc2FibGVkIiwicXVlcnlTZWFyY2giLCJpc1JhZGlvVmFsaWQiLCJfX2luX18iLCJpc1N0YXJ0RGF0ZVZhbGlkIiwiRGF0ZSIsImlzRW5kRGF0ZVZhbGlkIiwicmVtb3ZlRnJvbVNlbGVjdGVkTG9jYXRpb24iLCJzdGFydF9kYXRlX3VuaXgiLCJlbmRfZGF0ZV91bml4Iiwic3VibWl0IiwiZG93bmxvYWRDU1ZGb3JNdWx0aXBsZUxvY2F0aW9uc0J5RGV2aWNlIiwiZG93bmxvYWRDU1ZGb3JNdWx0aXBsZUxvY2F0aW9uc1N1bW1hcml6ZWQiLCJ0ZW5hbnRzIiwiY3VycmVudFRlbmFudCIsImluaXRpYWxpemVfdGVuYW50X3NlbGVjdCIsImdldEFsbFRlbmFudHMiLCJyZXNvdXJjZXMiLCJpc1NlbGVjdGlvblZhbGlkIiwic3VibWl0VGVuYW50IiwibmVlZGxlIiwiaGF5c3RhY2siLCI2OTEiLCJkaXNwbGF5cyIsInNlbGVjdGVkX2Rpc3BsYXlzIiwiZ2V0QWxsRGlzcGxheXMiLCJyZWZyZXNoRGlzcGxheXMiLCJhZGRUb1NlbGVjdGVkRGlzcGxheXMiLCJpc0Rpc3BsYXlWYWxpZCIsImFyZURpc3BsYXlzVmFsaWQiLCJyZW1vdmVGcm9tU2VsZWN0ZWREaXNwbGF5IiwiZG93bmxvYWRDU1ZGb3JNdWx0aXBsZURldmljZXNCeURhdGUiLCJkb3dubG9hZENTVkZvck11bHRpcGxlRGV2aWNlc1N1bW1hcml6ZWQiLCI2OTIiLCJzZWxlY3RlZF9yZXNvdXJjZXMiLCJnZXRBbGxSZXNvdXJjZXMiLCJmdWxsX3Jlc291cmNlX21hcCIsInJlc291cmNlX25hbWUiLCJyZWZyZXNoUmVzb3VyY2VzIiwiYWRkVG9TZWxlY3RlZFJlc291cmNlcyIsImFyZVJlc291cmNlc1ZhbGlkIiwicmVtb3ZlRnJvbVNlbGVjdGVkUmVzb3VyY2UiLCJyZXNvdXJjZXNfYXNfaWRzIiwiZG93bmxvYWRDU1ZGb3JNdWx0aXBsZVJlc291cmNlc0J5RGV2aWNlIiwiZG93bmxvYWRDU1ZGb3JNdWx0aXBsZVJlc291cmNlc0J5RGF0ZSIsIjY5MyIsImNob3Nlbl90ZW5hbnQiLCJyZWZyZXNoVGVuYW50cyIsIm1ha2VIVFRQVVJMIiwiNjk0IiwiJCIsIl9jbGFzc0NhbGxDaGVjazIiLCJfY2xhc3NDYWxsQ2hlY2szIiwiX2NyZWF0ZUNsYXNzMiIsIl9jcmVhdGVDbGFzczMiLCJSZXN0YW5ndWxhciIsInRlbmFudF91cmxzYWZlX2tleSIsIm9uZVVybCIsImdldExpc3QiLCJmb3JtRGF0YSIsImFqYXgiLCJ1cmwiLCJwcm9jZXNzRGF0YSIsImNvbnRlbnRUeXBlIiwiaW1hZ2VfdXJsc2FmZV9rZXkiLCJyZW1vdmUiLCI3MDAiLCJVU0VSX1NFUlZJQ0UiLCJESVNUUklCVVRPUl9TRVJWSUNFIiwiYWRtaW5fZW1haWwiLCJwYXlsb2FkIiwiY3VzdG9tUE9TVCIsInVzZXJfZW1haWwiLCI3MDEiLCJBdXRob3JpemF0aW9uU2VydmljZSIsIiRxIiwiZGVmZXJyZWQiLCJkZWZlciIsInVzZXJLZXkiLCJyZWplY3QiLCJoYXNBdExlYXN0T25lRGlzdHJpYnV0b3JBZG1pbiIsIjcwMiIsIlNFUlZJQ0VfTkFNRSIsImN1c3RvbVBVVCIsIjcwMyIsImlzTW9tZW50IiwiZGF5c0JhY2siLCJzdGFydFRpbWVNaWROaWdodCIsInN0YXJ0VGltZUVuZE9mRGF5IiwiZW5kVGltZU1pZE5pZ2h0IiwiNzA0IiwiJGh0dHAiLCJ1cmlCYXNlIiwibWFjQWRkcmVzcyIsImRpY3Rpb25hcnkiLCJyZXN1bHRzIiwicGFydGlhbFNlYXJjaCIsIl90aGlzIiwic2VhcmNoRGV2aWNlc0J5UGFydGlhbFNlcmlhbEJ5VGVuYW50IiwiaXNNYWMiLCJpc0dDTWlkIiwic2VyaWFsRGV2aWNlc0RpY3QiLCJjb252ZXJ0RGV2aWNlc0FycmF5VG9EaWN0aW9uYXJ5T2JqIiwiZGV2aWNlU2VyaWFsc09ubHkiLCJyZXRyaXZlRmlsdGVyZWREaWN0aW9uYXJ5VmFsdWUiLCJfdGhpczIiLCJzZWFyY2hEZXZpY2VzQnlQYXJ0aWFsU2VyaWFsIiwic2VyaWFsRGV2aWNlc09ubHkiLCJfdGhpczMiLCJzZWFyY2hEZXZpY2VzQnlQYXJ0aWFsTWFjQnlUZW5hbnQiLCJtYWNEZXZpY2VzRGljdCIsImRldmljZU1hY3NPbmx5IiwiX3RoaXM0Iiwic2VhcmNoRGV2aWNlc0J5UGFydGlhbE1hYyIsIl90aGlzNSIsInNlYXJjaERpc3RyaWJ1dG9yRGV2aWNlc0J5UGFydGlhbEdDTWlkQnlUZW5hbnQiLCJnY21pZERldmljZXNEaWN0IiwiZ2NtaWREZXZpY2VzT25seSIsIl90aGlzNiIsInNlYXJjaERpc3RyaWJ1dG9yRGV2aWNlc0J5UGFydGlhbEdDTWlkIiwiR0NNaWREZXZpY2VzRGljdCIsImRldmljZURlZmVycmVkIiwiZXhlY3V0ZVNlYXJjaGluZ1BhcnRpYWxTZXJpYWxCeVRlbmFudCIsImV4ZWN1dGVTZWFyY2hpbmdQYXJ0aWFsU2VyaWFsQnlEaXN0cmlidXRvciIsImV4ZWN1dGVTZWFyY2hpbmdQYXJ0aWFsTWFjQnlUZW5hbnQiLCJleGVjdXRlU2VhcmNoaW5nUGFydGlhbE1hY0J5RGlzdHJpYnV0b3IiLCJleGVjdXRlU2VhcmNoaW5nUGFydGlhbEdDTWlkQnlUZW5hbnQiLCJleGVjdXRlU2VhcmNoaW5nUGFydGlhbEdDTWlkQnlEaXN0cmlidXRvciIsInJlamVjdGVkUHJvbWlzZSIsImRldmljZXNSZXN1bHQiLCJ0aGVBcnJheSIsImdjbSIsInN0YXJ0RXBvY2giLCJlbmRFcG9jaCIsIm1ha2VEZXZpY2VzQnlUZW5hbnRVUkwiLCJwYXJ0aWFsX3NlcmlhbCIsInBhcnRpYWxfbWFjIiwicGFydGlhbF9nY21pZCIsIm1ha2VEZXZpY2VzQnlEaXN0cmlidXRvclVSTCIsImFsbCIsInB1dCIsImRldmljZV91cmxzYWZlX2tleSIsIm9uZSIsImRpc3BsYXlOYW1lIiwiNzA1IiwiZG9HRVQiLCJlbnRpdHkiLCJzZXRDdXJyZW50RGlzdHJpYnV0b3JOYW1lIiwic2V0Q3VycmVudERpc3RyaWJ1dG9yS2V5IiwiNzA2IiwiZG9tYWluIiwiNzA3IiwiSWRlbnRpdHlTZXJ2aWNlIiwiNzA4IiwiQ1JFQVRFX1RFTkFOVF9FVkVOVFMiLCJFTlJPTExNRU5UX0VWRU5UUyIsInF1ZXJ5IiwiY3VzdG9tR0VUIiwiNzA5IiwiY3VzdG9tZXJfbG9jYXRpb25fbmFtZSIsImN1c3RvbUdFVExJU1QiLCI3MTAiLCJuZ1Byb2dyZXNzRmFjdG9yeSIsInByb2dyZXNzQmFyIiwiNzExIiwibWFrZUhUVFBSZXF1ZXN0IiwiYmluZCIsIndoZXJlX3RvX2dvIiwiYWxsUmVzb3VyY2VzIiwib3BlbiIsImFsbERldmljZXMiLCJhbGxMb2NhdGlvbnMiLCJsb3dlcmNhc2UiLCJmaWx0ZXIiLCJjcmVhdGVGaWx0ZXJGb3IiLCI3MTIiLCJzZXRJZGVudGl0eSIsImNyZWRlbnRpYWxzIiwiYXV0aGVudGljYXRpb25QYXlsb2FkIiwiY2xvbmUiLCJhdXRodXNlciIsImNsaWVudF9pZCIsImNvZGUiLCJpZF90b2tlbiIsInNlc3Npb25fc3RhdGUiLCJwYXNzd29yZCIsInNldFVzZXJLZXkiLCJpZGVudGl0eVByb21pc2UiLCJzZXREaXN0cmlidXRvcnMiLCJzZXREaXN0cmlidXRvcnNBc0FkbWluIiwic2V0SXNBZG1pbiIsInNldFVzZXJFbWFpbCIsInJlbW92ZUFsbCIsIjcxMyIsIl9sb2NrciIsIl9sb2NrcjIiLCJybSIsImZsdXNoIiwiNzE1IiwidGVuYW50X25hbWUiLCJwYWdlX3NpemUiLCJvZmZzZXQiLCI3MTYiLCI3MTciLCJ0b2FzdHIiLCJhcmd1bWVudHMiLCI3MTgiLCJWZXJzaW9uc1NlcnZpY2UiLCI3MTkiLCJ0YWJJbmRleCIsImdldFRlbmFudENyZWF0ZUV2ZW50cyIsInRlbmFudENyZWF0ZUV2ZW50cyIsInRvVGFiIiwiZnJvbVRhYiIsIjcyMCIsIm9uU3VjY2Vzc1Jlc29sdmluZ1RlbmFudCIsImNvbnNvbGUiLCJsb2ciLCJ1cGRhdGVPdmVybGF5cyIsImdldFRlbmFudCIsImN1cnJlbnRUZW5hbnRDb3B5IiwidXBkYXRlT3ZlcmxheVByb21pc2VEZWZlcnJlZCIsInVwZGF0ZU92ZXJsYXlQcm9taXNlIiwiYXBwbHlUZW5hbnRPdmVybGF5Iiwib3ZlcmxheUFwcGx5VGVuYW50IiwiY3VycmVudFRlbmFudENvcHlPdmVybGF5cyIsInN1Ym1pdEltYWdlIiwic2VsZWN0ZWRMb2dvIiwiRm9ybURhdGEiLCJ2YWxpZEZpbGUiLCJsZkZpbGUiLCJmaWxlQXBpIiwic2F2ZUltYWdlIiwiZ2V0VGVuYW50SW1hZ2VzQW5kUmVsb2FkVGVuYW50QWZ0ZXJEZWxldGUiLCJ0ZW5hbnRJbWFnZVByb21pc2UiLCJkZWxldGVJbWFnZSIsInNob3dFcnJvclN0YXR1cyIsImRlZmF1bHRfdGltZXpvbmUiLCJvdmVybGF5c1VwZGF0ZUluUHJvZ3Jlc3MiLCI3MjEiLCJnYW1lU3RvcFNlcnZlciIsInRlbmFudF9jb2RlIiwiY29udGVudF9zZXJ2ZXJfdXJsIiwiY29udGVudF9tYW5hZ2VyX2Jhc2VfdXJsIiwiZG9tYWluX2tleSIsIm5vdGlmaWNhdGlvbl9lbWFpbHMiLCJwcm9vZl9vZl9wbGF5X2xvZ2dpbmciLCJwcm9vZl9vZl9wbGF5X3VybCIsInNlbGVjdGVkRG9tYWluIiwiZGlzdHJpYnV0b3JEb21haW5zIiwiZGlzdHJpYnV0b3JQcm9taXNlIiwiZ2V0QnlLZXkiLCJjb250ZW50X21hbmFnZXJfdXJsIiwicGxheWVyX2NvbnRlbnRfdXJsIiwiZGlzdHJpYnV0b3JEb21haW5Qcm9taXNlIiwiZ2V0RG9tYWluc0J5S2V5Iiwib25DbGlja1NhdmVCdXR0b24iLCJvblN1Y2Nlc3NUZW5hbnRTYXZlIiwib25GYWlsdXJlVGVuYW50U2F2ZSIsImVycm9yT2JqZWN0IiwiYXV0b0dlbmVyYXRlVGVuYW50Q29kZSIsIm5ld1RlbmFudENvZGUiLCI3MjIiLCI3MjMiLCJsb2NhdGlvblByb21pc2UiLCJnZXRMb2NhdGlvbkJ5S2V5IiwibG9jYXRpb25OYW1lIiwiY3VzdG9tZXJMb2NhdGlvbk5hbWUiLCJmZXRjaFRlbmFudE5hbWUiLCJvblN1Y2Nlc3NVcGRhdGluZ0xvY2F0aW9uIiwib25GYWlsdXJlU2F2aW5nTG9jYXRpb24iLCJvblN1Y2Nlc3NTYXZpbmdMb2NhdGlvbiIsInRlbmFudF9rZXkiLCJ0ZW5hbnROYW1lIiwiYXV0b0dlbmVyYXRlQ3VzdG9tZXJMb2NhdGlvbkNvZGUiLCJuZXdDdXN0b21lckxvY2F0aW9uQ29kZSIsImN1c3RvbWVyTG9jYXRpb25Db2RlIiwiNzI0Iiwic2VhcmNoRGlzYWJsZWQiLCJnZXRMb2NhdGlvbnMiLCJnZXRMb2NhdGlvbnNCeVRlbmFudEtleVBhZ2luYXRlZCIsInNlYXJjaEFsbFRlbmFudExvY2F0aW9uc0J5TmFtZSIsInNlYXJjaGVkVGVuYW50TG9jYXRpb25zIiwiaXNUZW5hbnRMb2NhdGlvblZhbGlkIiwiZWFjaExvY2F0aW9uTmFtZSIsInNlYXJjaE1hdGNoIiwiNzI1IiwidGVuYW50RGV2aWNlcyIsImdldERldmljZXNCeVRlbmFudCIsInJlZnJlc2hEZXZpY2VzIiwicHJlcHJhdGVGb3JFZGl0VmlldyIsImxvYWRpbmdEaXNhYmxlZCIsIjcyNiIsImdldFVubWFuYWdlZERldmljZXNCeVRlbmFudCIsIjcyNyIsInNlYXJjaGVkVGVuYW50cyIsImdldFRlbmFudHNQYWdpbmF0ZWQiLCJmZXRjaEFsbFRlbmFudHNQYWdpbmF0ZWQiLCJ0b3RhbCIsImlzX2ZpcnN0X3BhZ2UiLCJpc19sYXN0X3BhZ2UiLCJzZWFyY2hBbGxUZW5hbnRzQnlOYW1lIiwiaXNUZW5hbnRWYWxpZCIsImVhY2hOYW1lIiwiNzI4IiwidmVyc2lvbl9kYXRhIiwiY2FwaXRhbGl6ZUZpcnN0TGV0dGVyIiwic3RyaW5nIiwidG9VcHBlckNhc2UiLCJnaXZlT3B0aW9uVG9DaGFuZ2VEaXN0cmlidXRvciIsImhhc19tdWx0aXBsZV9kaXN0cmlidXRvcnMiLCJjaGFuZ2VEaXN0cmlidXRvciIsImdldFZlcnNpb24iLCJnZXRWZXJzaW9ucyIsIjcyOSIsIiRzdGF0ZVByb3ZpZGVyIiwiJHVybFJvdXRlclByb3ZpZGVyIiwiUmVzdGFuZ3VsYXJQcm92aWRlciIsIm5vdEF1dGhlbnRpY2F0ZWQiLCJhdXRoZW50aWNhdGVkIiwiZnVuY3Rpb24iLCJpc0FkbWluT3JEaXN0cmlidXRvckFkbWluIiwib3RoZXJ3aXNlIiwic2V0QmFzZVVybCIsImFkZFJlc3BvbnNlSW50ZXJjZXB0b3IiLCJvcGVyYXRpb24iLCJyZXNvdXJjZVR5cGUiLCJzZXRSZXN0YW5ndWxhckZpZWxkcyIsIjczMCIsIiRpbmplY3RvciIsInN0YXRlQ2hhbmdlV2F0Y2giLCJ0b1N0YXRlIiwidG9QYXJhbXMiLCJmcm9tU3RhdGUiLCJmcm9tUGFyYW1zIiwicmVxdWVzdEludGVyY2VwdG9yIiwiYWRkUmVxdWVzdEludGVyY2VwdG9yIiwiZWxlbSIsIndoYXQiLCJhdXRoVG9rZW4iLCJzZXREZWZhdWx0SGVhZGVycyIsIjczMSIsImNsb3NlQnV0dG9uIiwidGFwVG9EaXNtaXNzIiwibmV3ZXN0T25Ub3AiLCJwb3NpdGlvbkNsYXNzIiwidGltZU91dCIsIiRicmVhZGNydW1iUHJvdmlkZXIiXSwibWFwcGluZ3MiOiJBQUFBQSxjQUFjLElBRVJDLEVBQ0EsU0FBU0MsRUFBUUMsUUFBU0MsR0FFL0JBLEVBQW9CLElBQ3BCRixFQUFPQyxRQUFVQyxFQUFvQixNQUtoQ0MsSUFDQSxTQUFTSCxFQUFRQyxRQUFTQyxHQ1poQyxZQXNJQSxTQUFTRSxHQUF1QkMsR0FBTyxNQUFPQSxJQUFPQSxFQUFJQyxXQUFhRCxHQUFRRSxVQUFTRixHQXRJdkYsR0FBQUcsR0FBQU4sRUFBQSxLQUVBTyxFQUFBUCxFQUFBLEtBQ0FRLEVBQUFSLEVBQUEsS0FDQVMsRUFBQVQsRUFBQSxLQUVBVSxFQUFBVixFQUFBLEtBRUFXLEVBQUFYLEVBQUEsS0FFQVksRUFBQVosRUFBQSxLQUVBYSxFQUFBYixFQUFBLEtBQ0FjLEVBQUFkLEVBQUEsS0FFQWUsRUFBQWYsRUFBQSxLQUNBZ0IsRUFBQWhCLEVBQUEsS0FFQWlCLEVBQUFqQixFQUFBLEtBQ0FrQixFQUFBbEIsRUFBQSxLQUNBbUIsRUFBQW5CLEVBQUEsS0FDQW9CLEVBQUFwQixFQUFBLEtBRUFxQixFQUFBckIsRUFBQSxLQVdJc0IsRUFBVXBCLEVBQXVCbUIsR0FWckNFLEVBQUF2QixFQUFBLEtBY0l3QixFQUFVdEIsRUFBdUJxQixHQWJyQ0UsRUFBQXpCLEVBQUEsS0FpQkkwQixFQUFrQnhCLEVBQXVCdUIsR0FoQjdDRSxFQUFBM0IsRUFBQSxLQW9CSTRCLEVBQWExQixFQUF1QnlCLEdBbkJ4Q0UsRUFBQTdCLEVBQUEsS0F1Qkk4QixFQUFxQjVCLEVBQXVCMkIsR0F0QmhERSxFQUFBL0IsRUFBQSxLQTBCSWdDLEVBQVk5QixFQUF1QjZCLEdBekJ2Q0UsRUFBQWpDLEVBQUEsS0E2QklrQyxFQUFpQmhDLEVBQXVCK0IsR0E1QjVDRSxFQUFBbkMsRUFBQSxLQWdDSW9DLEVBQVlsQyxFQUF1QmlDLEdB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QUMsT0FBQSxJQUNBQyxVQUFBLElBQ0FDLE9BQUEsSUFDQUMsVUFBQSxJQUNBQyxhQUFBLElBQ0FDLFVBQUEsSUFDQUMsT0FBQSxJQUNBQyxVQUFBLElBQ0FDLE9BQUEsSUFDQUMsVUFBQSxJQUNBQyxVQUFBLElBQ0FDLGFBQUEsSUFDQUMsVUFBQSxJQUNBQyxhQUFBLElBQ0FDLFVBQUEsSUFDQUMsYUFBQSxJQUNBQyxVQUFBLElBQ0FDLGFBQUEsSUFDQUMsVUFBQSxJQUNBQyxhQUFBLElBQ0FDLE9BQUEsSUFDQUMsVUFBQSxJQUNBQyxPQUFBLElBQ0FDLFVBQUEsSUFDQUMsYUFBQSxJQUNBQyxVQUFBLElBQ0FDLE9BQUEsSUFDQUMsVUFBQSxJQUNBQyxPQUFBLElBQ0FDLFVBQUEsSUFDQUMsT0FBQSxJQUNBQyxVQUFBLElBQ0FDLE9BQUEsSUFDQUMsVUFBQSxJQUNBQyxPQUFBLElBQ0FDLFVBQUEsSUFDQUMsT0FBQSxJQUNBQyxVQUFBLElBQ0FDLGFBQUEsSUFDQUMsVUFBQSxJQUNBQyxhQUFBLElBQ0FDLFVBQUEsSUFDQUMsT0FBQSxJQUNBQyxVQUFBLElBQ0FDLE9BQUEsSUFDQUMsVUFBQSxJQUNBQyxPQUFBLElBQ0FDLFVBQUEsSUFDQUMsT0FBQSxJQUNBQyxVQUFBLElBQ0FDLE9BQUEsSUFDQUMsVUFBQSxJQUNBQyxPQUFBLElBQ0FDLFVBQUEsSUFDQUMsT0FBQSxJQUNBQyxVQUFBLElBQ0FDLFVBQUEsSUFDQUMsYUFBQSxJQUNBQyxPQUFBLElBQ0FDLFVBQUEsSUFDQUMsT0FBQSxJQUNBQyxVQUFBLElBQ0FDLE9BQUEsSUFDQUMsVUFBQSxJQUNBQyxPQUFBLElBQ0FDLFVBQUEsSUFDQUMsT0FBQSxJQUNBQyxVQUFBLElBQ0FDLE9BQUEsSUFDQUMsVUFBQSxJQUNBQyxPQUFBLElBQ0FDLFVBQUEsSUFDQUMsT0FBQSxJQUNBQyxVQUFBLElBQ0FDLE9BQUEsSUFDQUMsVUFBQSxJQUNBQyxPQUFBLElBQ0FDLFVBQUEsSUFDQUMsT0FBQSxJQUNBQyxVQUFBLElBQ0FDLE9BQUEsSUFDQUMsVUFBQSxJQUNBQyxPQUFBLElBQ0FDLFVBQUEsSUFDQUMsT0FBQSxJQUNBQyxVQUFBLElBQ0FDLE9BQUEsSUFDQUMsVUFBQSxJQUNBQyxPQUFBLElBQ0FDLFVBQUEsSUFDQUMsT0FBQSxJQUNBQyxVQUFBLElBQ0FDLE9BQUEsSUFDQUMsVUFBQSxJQUNBQyxPQUFBLElBQ0FDLFVBQUEsSUFDQUMsT0FBQSxJQUNBQyxVQUFBLElBQ0FDLGFBQUEsSUFDQUMsVUFBQSxJQUNBQyxPQUFBLElBQ0FDLFVBQUEsSUFDQUMsT0FBQSxJQUNBQyxVQUFBLElBQ0FDLE9BQUEsSUFDQUMsVUFBQSxJQUNBQyxPQUFBLElBQ0FDLFVBQUEsSUFDQUMsT0FBQSxJQUNBQyxVQUFBLElBQ0FDLFVBQUEsSUFDQUMsYUFBQSxJQUNBQyxPQUFBLElBQ0FDLFVBQUEsSUFDQUMsT0FBQSxJQUNBQyxVQUFBLElBQ0FDLGFBQUEsSUFDQUMsVUFBQSxJQUNBQyxPQUFBLElBQ0FDLFVBQUEsSUFDQUMsT0FBQSxJQUNBQyxVQUFBLElBQ0FDLE9BQUEsSUFDQUMsVUFBQSxJQUNBQyxPQUFBLElBQ0FDLFVBQUEsSUFDQUMsT0FBQSxJQUNBQyxVQUFBLElBQ0FDLE9BQUEsSUFDQUMsVUFBQSxJQUNBQyxPQUFBLElBQ0FDLFVBQUEsSUFDQUMsT0FBQSxJQUNBQyxZQUFBLElBQ0FDLGVBQUEsSUFDQUMsVUFBQSxJQUNBQyxPQUFBLElBQ0FDLFVBQUEsSUFDQUMsT0FBQSxJQUNBQyxVQUFBLElBQ0FDLE9BQUEsSUFDQUMsVUFBQSxJQUNBQyxPQUFBLElBQ0FDLFVBQUEsSUFDQUMsT0FBQSxJQUNBQyxVQUFBLElBQ0FDLE9BQUEsSUFDQUMsVUFBQSxJQUNBQyxVQUFBLElBQ0FDLGFBQUEsSUFDQUMsUUFBQSxJQUNBQyxXQUFBLElBQ0FDLE9BQUEsSUFDQUMsVUFBQSxJQUNBQyxRQUFBLElBQ0FDLFdBQUEsSUFDQUMsUUFBQSxJQUNBQyxhQUFBLElBQ0FDLGdCQUFBLElBQ0FDLFdBQUEsSUFDQUMsT0FBQSxJQUNBQyxVQUFBLElBQ0FDLE9BQUEsSUFDQUMsVUFB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bEJILGdCQUFpQixPQUNqQmQsU0FBVSxlQWhCZGhTLE9BQU9DLGVBQWUvSCxRQUFTLGNBQzdCZ0ksT0FBTyxJQUVUaEksUUFIZ0J3RyxlQUloQnhHLFFBU2dCeUcsb0JBZmhCLElBQUF5QixHQUFBakksRUFBQSxLQVVJa0ksRUFBWWhJLEVBQXVCK0gsRUFFdkMxQixHQUFhMlgsU0FBVyxnQkFVeEIxWCxFQUFtQjBYLFNBQVciLCJmaWxlIjoiYXBwLmJ1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIndlYnBhY2tKc29ucChbMF0se1xuXG4vKioqLyAwOlxuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0X193ZWJwYWNrX3JlcXVpcmVfXyg3MCk7XG5cdG1vZHVsZS5leHBvcnRzID0gX193ZWJwYWNrX3JlcXVpcmVfXygzNjcpO1xuXG5cbi8qKiovIH0sXG5cbi8qKiovIDM2Nzpcbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdHZhciBfYXBwID0gX193ZWJwYWNrX3JlcXVpcmVfXygzNjgpO1xuXHRcblx0dmFyIF9kZXZpY2VEZXRhaWxDb21tYW5kID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2NDgpO1xuXHRcblx0dmFyIF9kZXZpY2VEZXRhaWxzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2NDkpO1xuXHRcblx0dmFyIF9kZXZpY2VzTGlzdGluZyA9IF9fd2VicGFja19yZXF1aXJlX18oNjYwKTtcblx0XG5cdHZhciBfYWRtaW5Db250cm9sbGVyID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2NjEpO1xuXHRcblx0dmFyIF9hdXRoZW50aWNhdGlvbkNvbnRyb2xsZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDY2Mik7XG5cdFxuXHR2YXIgX2FwcENvbnRyb2xsZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDY2Myk7XG5cdFxuXHR2YXIgX2Rpc3RyaWJ1dG9yU2VsZWN0b3JDb250cm9sbGVyID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2ODYpO1xuXHRcblx0dmFyIF9kaXN0cmlidXRvcnNDb250cm9sbGVyID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2ODcpO1xuXHRcblx0dmFyIF9kb21haW5zID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2ODgpO1xuXHRcblx0dmFyIF9kb21haW5EZXRhaWxzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2ODkpO1xuXHRcblx0dmFyIF9tdWx0aUxvY2F0aW9uID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2OTApO1xuXHRcblx0dmFyIF9tdWx0aURpc3BsYXkgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDY5MSk7XG5cdFxuXHR2YXIgX211bHRpUmVzb3VyY2UgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDY5Mik7XG5cdFxuXHR2YXIgX3Byb29mT2ZQbGF5ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2OTMpO1xuXHRcblx0dmFyIF9pbWFnZSA9IF9fd2VicGFja19yZXF1aXJlX18oNjk0KTtcblx0XG5cdHZhciBfaW1hZ2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfaW1hZ2UpO1xuXHRcblx0dmFyIF9hZG1pbiA9IF9fd2VicGFja19yZXF1aXJlX18oNzAwKTtcblx0XG5cdHZhciBfYWRtaW4yID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfYWRtaW4pO1xuXHRcblx0dmFyIF9hdXRob3JpemF0aW9uID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3MDEpO1xuXHRcblx0dmFyIF9hdXRob3JpemF0aW9uMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2F1dGhvcml6YXRpb24pO1xuXHRcblx0dmFyIF9jb21tYW5kcyA9IF9fd2VicGFja19yZXF1aXJlX18oNzAyKTtcblx0XG5cdHZhciBfY29tbWFuZHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY29tbWFuZHMpO1xuXHRcblx0dmFyIF9kYXRlbWFuaXB1bGF0aW9uID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3MDMpO1xuXHRcblx0dmFyIF9kYXRlbWFuaXB1bGF0aW9uMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2RhdGVtYW5pcHVsYXRpb24pO1xuXHRcblx0dmFyIF9kZXZpY2VzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3MDQpO1xuXHRcblx0dmFyIF9kZXZpY2VzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2RldmljZXMpO1xuXHRcblx0dmFyIF9kaXN0cmlidXRvcnMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDcwNSk7XG5cdFxuXHR2YXIgX2Rpc3RyaWJ1dG9yczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9kaXN0cmlidXRvcnMpO1xuXHRcblx0dmFyIF9kb21haW5zMiA9IF9fd2VicGFja19yZXF1aXJlX18oNzA2KTtcblx0XG5cdHZhciBfZG9tYWluczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9kb21haW5zMik7XG5cdFxuXHR2YXIgX2lkZW50aXR5ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3MDcpO1xuXHRcblx0dmFyIF9pZGVudGl0eTIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pZGVudGl0eSk7XG5cdFxuXHR2YXIgX2ludGVncmF0aW9uRXZlbnRzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3MDgpO1xuXHRcblx0dmFyIF9pbnRlZ3JhdGlvbkV2ZW50czIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9pbnRlZ3JhdGlvbkV2ZW50cyk7XG5cdFxuXHR2YXIgX2xvY2F0aW9ucyA9IF9fd2VicGFja19yZXF1aXJlX18oNzA5KTtcblx0XG5cdHZhciBfbG9jYXRpb25zMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2xvY2F0aW9ucyk7XG5cdFxuXHR2YXIgX3Byb2dyZXNzYmFyID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3MTApO1xuXHRcblx0dmFyIF9wcm9ncmVzc2JhcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9wcm9ncmVzc2Jhcik7XG5cdFxuXHR2YXIgX3Byb29mcGxheSA9IF9fd2VicGFja19yZXF1aXJlX18oNzExKTtcblx0XG5cdHZhciBfcHJvb2ZwbGF5MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3Byb29mcGxheSk7XG5cdFxuXHR2YXIgX3Nlc3Npb25zID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3MTIpO1xuXHRcblx0dmFyIF9zZXNzaW9uczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9zZXNzaW9ucyk7XG5cdFxuXHR2YXIgX3N0b3JhZ2UgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDcxMyk7XG5cdFxuXHR2YXIgX3N0b3JhZ2UyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfc3RvcmFnZSk7XG5cdFxuXHR2YXIgX3RlbmFudHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDcxNSk7XG5cdFxuXHR2YXIgX3RlbmFudHMyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfdGVuYW50cyk7XG5cdFxuXHR2YXIgX3RpbWV6b25lcyA9IF9fd2VicGFja19yZXF1aXJlX18oNzE2KTtcblx0XG5cdHZhciBfdGltZXpvbmVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3RpbWV6b25lcyk7XG5cdFxuXHR2YXIgX3RvYXN0cyA9IF9fd2VicGFja19yZXF1aXJlX18oNzE3KTtcblx0XG5cdHZhciBfdG9hc3RzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3RvYXN0cyk7XG5cdFxuXHR2YXIgX3ZlcnNpb25zID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3MTgpO1xuXHRcblx0dmFyIF92ZXJzaW9uczIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF92ZXJzaW9ucyk7XG5cdFxuXHR2YXIgX3RlbmFudExvZ3MgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDcxOSk7XG5cdFxuXHR2YXIgX3RlbmFudE92ZXJsYXlzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3MjApO1xuXHRcblx0dmFyIF90ZW5hbnRBZGQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDcyMSk7XG5cdFxuXHR2YXIgX3RlbmFudERldGFpbHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDcyMik7XG5cdFxuXHR2YXIgX3RlbmFudExvY2F0aW9uID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3MjMpO1xuXHRcblx0dmFyIF90ZW5hbnRMb2NhdGlvbnMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDcyNCk7XG5cdFxuXHR2YXIgX3RlbmFudE1hbmFnZWREZXZpY2VzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3MjUpO1xuXHRcblx0dmFyIF90ZW5hbnRVbm1hbmFnZWREZXZpY2VzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3MjYpO1xuXHRcblx0dmFyIF90ZW5hbnRzMyA9IF9fd2VicGFja19yZXF1aXJlX18oNzI3KTtcblx0XG5cdHZhciBfd2VsY29tZUNvbnRyb2xsZXIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDcyOCk7XG5cdFxuXHR2YXIgX2FwcFJvdXRlcyA9IF9fd2VicGFja19yZXF1aXJlX18oNzI5KTtcblx0XG5cdHZhciBfYXBwUnVuID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3MzApO1xuXHRcblx0dmFyIF9hcHBDb25maWcgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDczMSk7XG5cdFxuXHRmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXHRcblx0Ly8gV2VsY29tZVxuXHRcblx0Ly8gU2VydmljZXNcblx0XG5cdC8vIFByb29mUGxheVxuXHRcblx0Ly8gRG9tYWluc1xuXHRcblx0Ly8gRGlzdHJpYnV0b3JzXG5cdFxuXHQvLyBBdXRoZW50aWNhdGlvblxuXHRcblx0Ly8gRGV2aWNlXG5cdF9hcHAuYXBwXG5cdC8vIFNlcnZpY2VzXG5cdC5zZXJ2aWNlKFwiU3RvcmFnZVNlcnZpY2VcIiwgX3N0b3JhZ2UyLmRlZmF1bHQpLnNlcnZpY2UoXCJBZG1pblNlcnZpY2VcIiwgX2FkbWluMi5kZWZhdWx0KS5zZXJ2aWNlKFwiQXV0aG9yaXphdGlvblNlcnZpY2VcIiwgX2F1dGhvcml6YXRpb24yLmRlZmF1bHQpLnNlcnZpY2UoXCJDb21tYW5kc1NlcnZpY2VcIiwgX2NvbW1hbmRzMi5kZWZhdWx0KS5zZXJ2aWNlKFwiRGF0ZU1hbmlwdWxhdGlvblNlcnZpY2VcIiwgX2RhdGVtYW5pcHVsYXRpb24yLmRlZmF1bHQpLnNlcnZpY2UoXCJEZXZpY2VzU2VydmljZVwiLCBfZGV2aWNlczIuZGVmYXVsdCkuc2VydmljZShcIkRpc3RyaWJ1dG9yc1NlcnZpY2VcIiwgX2Rpc3RyaWJ1dG9yczIuZGVmYXVsdCkuc2VydmljZShcIkRvbWFpbnNTZXJ2aWNlXCIsIF9kb21haW5zMy5kZWZhdWx0KS5zZXJ2aWNlKFwiSWRlbnRpdHlTZXJ2aWNlXCIsIF9pZGVudGl0eTIuZGVmYXVsdCkuc2VydmljZShcIkludGVncmF0aW9uRXZlbnRzXCIsIF9pbnRlZ3JhdGlvbkV2ZW50czIuZGVmYXVsdCkuc2VydmljZShcIkxvY2F0aW9uc1NlcnZpY2VcIiwgX2xvY2F0aW9uczIuZGVmYXVsdCkuc2VydmljZShcIlByb2dyZXNzQmFyU2VydmljZVwiLCBfcHJvZ3Jlc3NiYXIyLmRlZmF1bHQpLnNlcnZpY2UoXCJQcm9vZlBsYXlTZXJ2aWNlXCIsIF9wcm9vZnBsYXkyLmRlZmF1bHQpLnNlcnZpY2UoXCJTZXNzaW9uc1NlcnZpY2VcIiwgX3Nlc3Npb25zMi5kZWZhdWx0KS5zZXJ2aWNlKFwiVGVuYW50c1NlcnZpY2VcIiwgX3RlbmFudHMyLmRlZmF1bHQpLnNlcnZpY2UoXCJUaW1lem9uZXNTZXJ2aWNlXCIsIF90aW1lem9uZXMyLmRlZmF1bHQpLnNlcnZpY2UoXCJUb2FzdHNTZXJ2aWNlXCIsIF90b2FzdHMyLmRlZmF1bHQpLnNlcnZpY2UoXCJWZXJzaW9uc1NlcnZpY2VcIiwgX3ZlcnNpb25zMi5kZWZhdWx0KS5zZXJ2aWNlKFwiSW1hZ2VTZXJ2aWNlXCIsIF9pbWFnZTIuZGVmYXVsdClcblx0Ly8gRGV2aWNlXG5cdC5jb250cm9sbGVyKFwiRGV2aWNlRGV0YWlsc0NvbW1hbmRzQ3RybFwiLCBfZGV2aWNlRGV0YWlsQ29tbWFuZC5EZXZpY2VEZXRhaWxzQ29tbWFuZHNDdHJsKS5jb250cm9sbGVyKFwiRGV2aWNlRGV0YWlsc0N0cmxcIiwgX2RldmljZURldGFpbHMuRGV2aWNlRGV0YWlsc0N0cmwpLmNvbnRyb2xsZXIoXCJEZXZpY2VzTGlzdGluZ0N0cmxcIiwgX2RldmljZXNMaXN0aW5nLkRldmljZXNMaXN0aW5nQ3RybClcblx0Ly8gQWRtaW5cblx0LmNvbnRyb2xsZXIoXCJBZG1pbkN0cmxcIiwgX2FkbWluQ29udHJvbGxlci5BZG1pbkN0cmwpXG5cdC8vIEF1dGhlbnRpY2F0aW9uXG5cdC5jb250cm9sbGVyKFwiQXV0aGVudGljYXRpb25DdHJsXCIsIF9hdXRoZW50aWNhdGlvbkNvbnRyb2xsZXIuQXV0aGVudGljYXRpb25DdHJsKVxuXHQvLyBBcHBcblx0LmNvbnRyb2xsZXIoXCJBcHBDb250cm9sbGVyXCIsIF9hcHBDb250cm9sbGVyLkFwcENvbnRyb2xsZXIpXG5cdC8vIERpc3RyaWJ1dG9yc1xuXHQuY29udHJvbGxlcihcIkRpc3RyaWJ1dG9yU2VsZWN0b3JDdHJsXCIsIF9kaXN0cmlidXRvclNlbGVjdG9yQ29udHJvbGxlci5EaXN0cmlidXRvclNlbGVjdG9yQ3RybCkuY29udHJvbGxlcihcIkRpc3RyaWJ1dG9yc0N0cmxcIiwgX2Rpc3RyaWJ1dG9yc0NvbnRyb2xsZXIuRGlzdHJpYnV0b3JzQ3RybClcblx0Ly8gRG9tYWluc1xuXHQuY29udHJvbGxlcihcIkRvbWFpbnNDdHJsXCIsIF9kb21haW5zLkRvbWFpbnNDdHJsKS5jb250cm9sbGVyKFwiRG9tYWluRGV0YWlsc0N0cmxcIiwgX2RvbWFpbkRldGFpbHMuRG9tYWluRGV0YWlsc0N0cmwpXG5cdC8vIFByb29mUGxheVxuXHQuY29udHJvbGxlcihcIlByb29mT2ZQbGF5TXVsdGlMb2NhdGlvbkN0cmxcIiwgX211bHRpTG9jYXRpb24uUHJvb2ZPZlBsYXlNdWx0aUxvY2F0aW9uQ3RybCkuY29udHJvbGxlcihcIlByb29mT2ZQbGF5TXVsdGlEaXNwbGF5Q3RybFwiLCBfbXVsdGlEaXNwbGF5LlByb29mT2ZQbGF5TXVsdGlEaXNwbGF5Q3RybCkuY29udHJvbGxlcihcIlByb29mT2ZQbGF5TXVsdGlSZXNvdXJjZUN0cmxcIiwgX211bHRpUmVzb3VyY2UuUHJvb2ZPZlBsYXlNdWx0aVJlc291cmNlQ3RybCkuY29udHJvbGxlcihcIlByb29mT2ZQbGF5Q3RybFwiLCBfcHJvb2ZPZlBsYXkuUHJvb2ZPZlBsYXlDdHJsKVxuXHQvLyBUZW5hbnRzXG5cdC5jb250cm9sbGVyKFwiVGVuYW50TG9nc0N0cmxcIiwgX3RlbmFudExvZ3MuVGVuYW50TG9nc0N0cmwpLmNvbnRyb2xsZXIoXCJUZW5hbnRPdmVybGF5c0N0cmxcIiwgX3RlbmFudE92ZXJsYXlzLlRlbmFudE92ZXJsYXlzQ3RybCkuY29udHJvbGxlcihcIlRlbmFudEFkZEN0cmxcIiwgX3RlbmFudEFkZC5UZW5hbnRBZGRDdHJsKS5jb250cm9sbGVyKFwiVGVuYW50RGV0YWlsc0N0cmxcIiwgX3RlbmFudERldGFpbHMuVGVuYW50RGV0YWlsc0N0cmwpLmNvbnRyb2xsZXIoXCJUZW5hbnRMb2NhdGlvbkN0cmxcIiwgX3RlbmFudExvY2F0aW9uLlRlbmFudExvY2F0aW9uQ3RybCkuY29udHJvbGxlcihcIlRlbmFudExvY2F0aW9uc0N0cmxcIiwgX3RlbmFudExvY2F0aW9ucy5UZW5hbnRMb2NhdGlvbnNDdHJsKS5jb250cm9sbGVyKFwiVGVuYW50TWFuYWdlZERldmljZXNDdHJsXCIsIF90ZW5hbnRNYW5hZ2VkRGV2aWNlcy5UZW5hbnRNYW5hZ2VkRGV2aWNlc0N0cmwpLmNvbnRyb2xsZXIoXCJUZW5hbnRVbm1hbmFnZWREZXZpY2VzQ3RybFwiLCBfdGVuYW50VW5tYW5hZ2VkRGV2aWNlcy5UZW5hbnRVbm1hbmFnZWREZXZpY2VzQ3RybCkuY29udHJvbGxlcihcIlRlbmFudHNDdHJsXCIsIF90ZW5hbnRzMy5UZW5hbnRzQ3RybClcblx0Ly8gV2VsY29tZVxuXHQuY29udHJvbGxlcihcIldlbGNvbWVDdHJsXCIsIF93ZWxjb21lQ29udHJvbGxlci5XZWxjb21lQ3RybClcblx0Ly8gYXBwUnVuIEJsb2NrXG5cdC5ydW4oX2FwcFJ1bi5hcHBSdW4pXG5cdC8vIENvbmZpZ1xuXHQuY29uZmlnKF9hcHBSb3V0ZXMucm91dGVzKS5jb25maWcoX2FwcENvbmZpZy50b2FzdHJDb25maWcpLmNvbmZpZyhfYXBwQ29uZmlnLmJyZWFkY3J1bWJQcm92aWRlcik7XG5cdFxuXHQvLyBSZXF1ZXN0IEludGVyY2VwdG9yXG5cdFxuXHQvLyBDb25maWdcblx0XG5cdC8vIFRlbmFudFxuXHRcblx0Ly8gQXBwXG5cdFxuXHQvLyBBZG1pblxuXHRfYXBwLmFwcC5zZXJ2aWNlKCdSZXF1ZXN0SW50ZXJjZXB0b3InLCBbXCJTdG9yYWdlU2VydmljZVwiLCBcIiRsb2NhdGlvblwiLCBmdW5jdGlvbiAoU3RvcmFnZVNlcnZpY2UsICRsb2NhdGlvbikge1xuXHQgIFwibmdJbmplY3RcIjtcblx0XG5cdCAgdmFyIGludGVyY2VwdG9yID0ge1xuXHQgICAgcmVxdWVzdDogZnVuY3Rpb24gcmVxdWVzdChjb25maWcpIHtcblx0ICAgICAgdmFyIGdzID0gJzVYWkhCRjNtT3dxSmxZQWxHMU5lZVdYMENiNzJnJztcblx0ICAgICAgdmFyIHByb2QgPSAnNkMzNDY1ODhCRDRDNkQ3MjJBMTE2NUI0M0M1MUMnO1xuXHQgICAgICBjb25maWcuaGVhZGVycyA9IHtcblx0ICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuXHQgICAgICAgICdBY2NlcHQnOiAnYXBwbGljYXRpb24vanNvbicsXG5cdCAgICAgICAgJ0F1dGhvcml6YXRpb24nOiAkbG9jYXRpb24uaG9zdCgpLmluZGV4T2YoJ3Byb3Zpc2lvbmluZy1nYW1lc3RvcCcpID4gLTEgPyBncyA6IHByb2QsXG5cdCAgICAgICAgJ1gtUHJvdmlzaW9uaW5nLVVzZXInOiBTdG9yYWdlU2VydmljZS5nZXQoJ3VzZXJLZXknKSxcblx0ICAgICAgICAnWC1Qcm92aXNpb25pbmctVXNlci1JZGVudGlmaWVyJzogU3RvcmFnZVNlcnZpY2UuZ2V0KCd1c2VyRW1haWwnKSxcblx0ICAgICAgICAnWC1Qcm92aXNpb25pbmctRGlzdHJpYnV0b3InOiBTdG9yYWdlU2VydmljZS5nZXQoJ2N1cnJlbnREaXN0cmlidXRvcktleScpXG5cdCAgICAgIH07XG5cdCAgICAgIHJldHVybiBjb25maWc7XG5cdCAgICB9XG5cdCAgfTtcblx0ICByZXR1cm4gaW50ZXJjZXB0b3I7XG5cdH1dKTtcblx0XG5cdF9hcHAuYXBwLmNvbmZpZyhbXCIkaHR0cFByb3ZpZGVyXCIsIGZ1bmN0aW9uICgkaHR0cFByb3ZpZGVyKSB7XG5cdCAgcmV0dXJuICRodHRwUHJvdmlkZXIuaW50ZXJjZXB0b3JzLnB1c2goJ1JlcXVlc3RJbnRlcmNlcHRvcicpO1xuXHR9XSk7XG5cbi8qKiovIH0sXG5cbi8qKiovIDM2ODpcbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuXHQgIHZhbHVlOiB0cnVlXG5cdH0pO1xuXHRleHBvcnRzLmFwcCA9IHVuZGVmaW5lZDtcblx0XG5cdHZhciBfYW5ndWxhciA9IF9fd2VicGFja19yZXF1aXJlX18oMzY5KTtcblx0XG5cdHZhciBfYW5ndWxhcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9hbmd1bGFyKTtcblx0XG5cdHZhciBfYW5ndWxhclVpUm91dGVyID0gX193ZWJwYWNrX3JlcXVpcmVfXygzNzEpO1xuXHRcblx0dmFyIF9hbmd1bGFyVWlSb3V0ZXIyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfYW5ndWxhclVpUm91dGVyKTtcblx0XG5cdHZhciBfbW9tZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXygzNzIpO1xuXHRcblx0dmFyIF9tb21lbnQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfbW9tZW50KTtcblx0XG5cdF9fd2VicGFja19yZXF1aXJlX18oNDc5KTtcblx0XG5cdF9fd2VicGFja19yZXF1aXJlX18oNDgxKTtcblx0XG5cdF9fd2VicGFja19yZXF1aXJlX18oNDgyKTtcblx0XG5cdF9fd2VicGFja19yZXF1aXJlX18oNDg2KTtcblx0XG5cdF9fd2VicGFja19yZXF1aXJlX18oNDg4KTtcblx0XG5cdF9fd2VicGFja19yZXF1aXJlX18oNDkwKTtcblx0XG5cdF9fd2VicGFja19yZXF1aXJlX18oNDkyKTtcblx0XG5cdF9fd2VicGFja19yZXF1aXJlX18oNTAwKTtcblx0XG5cdF9fd2VicGFja19yZXF1aXJlX18oNTAyKTtcblx0XG5cdF9fd2VicGFja19yZXF1aXJlX18oNTI0KTtcblx0XG5cdF9fd2VicGFja19yZXF1aXJlX18oNTI1KTtcblx0XG5cdF9fd2VicGFja19yZXF1aXJlX18oNTI3KTtcblx0XG5cdF9fd2VicGFja19yZXF1aXJlX18oNTk2KTtcblx0XG5cdF9fd2VicGFja19yZXF1aXJlX18oNTk3KTtcblx0XG5cdF9fd2VicGFja19yZXF1aXJlX18oNTk5KTtcblx0XG5cdF9fd2VicGFja19yZXF1aXJlX18oNjA0KTtcblx0XG5cdF9fd2VicGFja19yZXF1aXJlX18oNjA1KTtcblx0XG5cdF9fd2VicGFja19yZXF1aXJlX18oNjExKTtcblx0XG5cdF9fd2VicGFja19yZXF1aXJlX18oNjIwKTtcblx0XG5cdF9fd2VicGFja19yZXF1aXJlX18oNjIxKTtcblx0XG5cdF9fd2VicGFja19yZXF1aXJlX18oNjIzKTtcblx0XG5cdF9fd2VicGFja19yZXF1aXJlX18oNjI1KTtcblx0XG5cdF9fd2VicGFja19yZXF1aXJlX18oNjI3KTtcblx0XG5cdF9fd2VicGFja19yZXF1aXJlX18oNjI5KTtcblx0XG5cdF9fd2VicGFja19yZXF1aXJlX18oNTEyKTtcblx0XG5cdF9fd2VicGFja19yZXF1aXJlX18oNjQwKTtcblx0XG5cdF9fd2VicGFja19yZXF1aXJlX18oMzcwKTtcblx0XG5cdF9fd2VicGFja19yZXF1aXJlX18oNjQxKTtcblx0XG5cdF9fd2VicGFja19yZXF1aXJlX18oNjQzKTtcblx0XG5cdF9fd2VicGFja19yZXF1aXJlX18oNjQ1KTtcblx0XG5cdHZhciBfbG9kYXNoID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2NDcpO1xuXHRcblx0dmFyIF9sb2Rhc2gyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfbG9kYXNoKTtcblx0XG5cdGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cdFxuXHQvLyBNYXRlcmlhbCBkZXNpZ24gY3NzXG5cdHdpbmRvdy5fID0gX2xvZGFzaDIuZGVmYXVsdDtcblx0Ly8gSW1wb3J0IGFuZ3VsYXJcblx0XG5cdHdpbmRvdy5hbmd1bGFyID0gX2FuZ3VsYXIyLmRlZmF1bHQ7XG5cdFxuXHR2YXIgYXBwID0gZXhwb3J0cy5hcHAgPSBfYW5ndWxhcjIuZGVmYXVsdC5tb2R1bGUoJ3NreWtpdFByb3Zpc2lvbmluZycsIFtfYW5ndWxhclVpUm91dGVyMi5kZWZhdWx0LCAnbmdBbmltYXRlJywgJzcyMGtiLnRvb2x0aXBzJywgJ25nQ29va2llcycsICduZ1Nhbml0aXplJywgJ3Jlc3Rhbmd1bGFyJywgJ3VpLmJvb3RzdHJhcCcsICduZ01hdGVyaWFsRGF0ZVBpY2tlcicsICdoU3dlZXRBbGVydCcsICduY3ktYW5ndWxhci1icmVhZGNydW1iJywgJ2RpcmVjdGl2ZS5nK3NpZ25pbicsICduZ1Byb2dyZXNzJywgJ25nTWF0ZXJpYWwnLCAnbmdjbGlwYm9hcmQnLCAndG9hc3RyJywgJ2xmTmdNZEZpbGVJbnB1dCddKTtcblxuLyoqKi8gfSxcblxuLyoqKi8gMzc0OlxuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0dmFyIG1hcCA9IHtcblx0XHRcIi4vYWZcIjogMzc1LFxuXHRcdFwiLi9hZi5qc1wiOiAzNzUsXG5cdFx0XCIuL2FyXCI6IDM3Nixcblx0XHRcIi4vYXItbHlcIjogMzc3LFxuXHRcdFwiLi9hci1seS5qc1wiOiAzNzcsXG5cdFx0XCIuL2FyLW1hXCI6IDM3OCxcblx0XHRcIi4vYXItbWEuanNcIjogMzc4LFxuXHRcdFwiLi9hci1zYVwiOiAzNzksXG5cdFx0XCIuL2FyLXNhLmpzXCI6IDM3OSxcblx0XHRcIi4vYXItdG5cIjogMzgwLFxuXHRcdFwiLi9hci10bi5qc1wiOiAzODAsXG5cdFx0XCIuL2FyLmpzXCI6IDM3Nixcblx0XHRcIi4vYXpcIjogMzgxLFxuXHRcdFwiLi9hei5qc1wiOiAzODEsXG5cdFx0XCIuL2JlXCI6IDM4Mixcblx0XHRcIi4vYmUuanNcIjogMzgyLFxuXHRcdFwiLi9iZ1wiOiAzODMsXG5cdFx0XCIuL2JnLmpzXCI6IDM4Myxcblx0XHRcIi4vYm5cIjogMzg0LFxuXHRcdFwiLi9ibi5qc1wiOiAzODQsXG5cdFx0XCIuL2JvXCI6IDM4NSxcblx0XHRcIi4vYm8uanNcIjogMzg1LFxuXHRcdFwiLi9iclwiOiAzODYsXG5cdFx0XCIuL2JyLmpzXCI6IDM4Nixcblx0XHRcIi4vYnNcIjogMzg3LFxuXHRcdFwiLi9icy5qc1wiOiAzODcsXG5cdFx0XCIuL2NhXCI6IDM4OCxcblx0XHRcIi4vY2EuanNcIjogMzg4LFxuXHRcdFwiLi9jc1wiOiAzODksXG5cdFx0XCIuL2NzLmpzXCI6IDM4OSxcblx0XHRcIi4vY3ZcIjogMzkwLFxuXHRcdFwiLi9jdi5qc1wiOiAzOTAsXG5cdFx0XCIuL2N5XCI6IDM5MSxcblx0XHRcIi4vY3kuanNcIjogMzkxLFxuXHRcdFwiLi9kYVwiOiAzOTIsXG5cdFx0XCIuL2RhLmpzXCI6IDM5Mixcblx0XHRcIi4vZGVcIjogMzkzLFxuXHRcdFwiLi9kZS1hdFwiOiAzOTQsXG5cdFx0XCIuL2RlLWF0LmpzXCI6IDM5NCxcblx0XHRcIi4vZGUuanNcIjogMzkzLFxuXHRcdFwiLi9kdlwiOiAzOTUsXG5cdFx0XCIuL2R2LmpzXCI6IDM5NSxcblx0XHRcIi4vZWxcIjogMzk2LFxuXHRcdFwiLi9lbC5qc1wiOiAzOTYsXG5cdFx0XCIuL2VuLWF1XCI6IDM5Nyxcblx0XHRcIi4vZW4tYXUuanNcIjogMzk3LFxuXHRcdFwiLi9lbi1jYVwiOiAzOTgsXG5cdFx0XCIuL2VuLWNhLmpzXCI6IDM5OCxcblx0XHRcIi4vZW4tZ2JcIjogMzk5LFxuXHRcdFwiLi9lbi1nYi5qc1wiOiAzOTksXG5cdFx0XCIuL2VuLWllXCI6IDQwMCxcblx0XHRcIi4vZW4taWUuanNcIjogNDAwLFxuXHRcdFwiLi9lbi1uelwiOiA0MDEsXG5cdFx0XCIuL2VuLW56LmpzXCI6IDQwMSxcblx0XHRcIi4vZW9cIjogNDAyLFxuXHRcdFwiLi9lby5qc1wiOiA0MDIsXG5cdFx0XCIuL2VzXCI6IDQwMyxcblx0XHRcIi4vZXMtZG9cIjogNDA0LFxuXHRcdFwiLi9lcy1kby5qc1wiOiA0MDQsXG5cdFx0XCIuL2VzLmpzXCI6IDQwMyxcblx0XHRcIi4vZXRcIjogNDA1LFxuXHRcdFwiLi9ldC5qc1wiOiA0MDUsXG5cdFx0XCIuL2V1XCI6IDQwNixcblx0XHRcIi4vZXUuanNcIjogNDA2LFxuXHRcdFwiLi9mYVwiOiA0MDcsXG5cdFx0XCIuL2ZhLmpzXCI6IDQwNyxcblx0XHRcIi4vZmlcIjogNDA4LFxuXHRcdFwiLi9maS5qc1wiOiA0MDgsXG5cdFx0XCIuL2ZvXCI6IDQwOSxcblx0XHRcIi4vZm8uanNcIjogNDA5LFxuXHRcdFwiLi9mclwiOiA0MTAsXG5cdFx0XCIuL2ZyLWNhXCI6IDQxMSxcblx0XHRcIi4vZnItY2EuanNcIjogNDExLFxuXHRcdFwiLi9mci1jaFwiOiA0MTIsXG5cdFx0XCIuL2ZyLWNoLmpzXCI6IDQxMixcblx0XHRcIi4vZnIuanNcIjogNDEwLFxuXHRcdFwiLi9meVwiOiA0MTMsXG5cdFx0XCIuL2Z5LmpzXCI6IDQxMyxcblx0XHRcIi4vZ2RcIjogNDE0LFxuXHRcdFwiLi9nZC5qc1wiOiA0MTQsXG5cdFx0XCIuL2dsXCI6IDQxNSxcblx0XHRcIi4vZ2wuanNcIjogNDE1LFxuXHRcdFwiLi9oZVwiOiA0MTYsXG5cdFx0XCIuL2hlLmpzXCI6IDQxNixcblx0XHRcIi4vaGlcIjogNDE3LFxuXHRcdFwiLi9oaS5qc1wiOiA0MTcsXG5cdFx0XCIuL2hyXCI6IDQxOCxcblx0XHRcIi4vaHIuanNcIjogNDE4LFxuXHRcdFwiLi9odVwiOiA0MTksXG5cdFx0XCIuL2h1LmpzXCI6IDQxOSxcblx0XHRcIi4vaHktYW1cIjogNDIwLFxuXHRcdFwiLi9oeS1hbS5qc1wiOiA0MjAsXG5cdFx0XCIuL2lkXCI6IDQyMSxcblx0XHRcIi4vaWQuanNcIjogNDIxLFxuXHRcdFwiLi9pc1wiOiA0MjIsXG5cdFx0XCIuL2lzLmpzXCI6IDQyMixcblx0XHRcIi4vaXRcIjogNDIzLFxuXHRcdFwiLi9pdC5qc1wiOiA0MjMsXG5cdFx0XCIuL2phXCI6IDQyNCxcblx0XHRcIi4vamEuanNcIjogNDI0LFxuXHRcdFwiLi9qdlwiOiA0MjUsXG5cdFx0XCIuL2p2LmpzXCI6IDQyNSxcblx0XHRcIi4va2FcIjogNDI2LFxuXHRcdFwiLi9rYS5qc1wiOiA0MjYsXG5cdFx0XCIuL2trXCI6IDQyNyxcblx0XHRcIi4va2suanNcIjogNDI3LFxuXHRcdFwiLi9rbVwiOiA0MjgsXG5cdFx0XCIuL2ttLmpzXCI6IDQyOCxcblx0XHRcIi4va29cIjogNDI5LFxuXHRcdFwiLi9rby5qc1wiOiA0MjksXG5cdFx0XCIuL2t5XCI6IDQzMCxcblx0XHRcIi4va3kuanNcIjogNDMwLFxuXHRcdFwiLi9sYlwiOiA0MzEsXG5cdFx0XCIuL2xiLmpzXCI6IDQzMSxcblx0XHRcIi4vbG9cIjogNDMyLFxuXHRcdFwiLi9sby5qc1wiOiA0MzIsXG5cdFx0XCIuL2x0XCI6IDQzMyxcblx0XHRcIi4vbHQuanNcIjogNDMzLFxuXHRcdFwiLi9sdlwiOiA0MzQsXG5cdFx0XCIuL2x2LmpzXCI6IDQzNCxcblx0XHRcIi4vbWVcIjogNDM1LFxuXHRcdFwiLi9tZS5qc1wiOiA0MzUsXG5cdFx0XCIuL21pXCI6IDQzNixcblx0XHRcIi4vbWkuanNcIjogNDM2LFxuXHRcdFwiLi9ta1wiOiA0MzcsXG5cdFx0XCIuL21rLmpzXCI6IDQzNyxcblx0XHRcIi4vbWxcIjogNDM4LFxuXHRcdFwiLi9tbC5qc1wiOiA0MzgsXG5cdFx0XCIuL21yXCI6IDQzOSxcblx0XHRcIi4vbXIuanNcIjogNDM5LFxuXHRcdFwiLi9tc1wiOiA0NDAsXG5cdFx0XCIuL21zLW15XCI6IDQ0MSxcblx0XHRcIi4vbXMtbXkuanNcIjogNDQxLFxuXHRcdFwiLi9tcy5qc1wiOiA0NDAsXG5cdFx0XCIuL215XCI6IDQ0Mixcblx0XHRcIi4vbXkuanNcIjogNDQyLFxuXHRcdFwiLi9uYlwiOiA0NDMsXG5cdFx0XCIuL25iLmpzXCI6IDQ0Myxcblx0XHRcIi4vbmVcIjogNDQ0LFxuXHRcdFwiLi9uZS5qc1wiOiA0NDQsXG5cdFx0XCIuL25sXCI6IDQ0NSxcblx0XHRcIi4vbmwuanNcIjogNDQ1LFxuXHRcdFwiLi9ublwiOiA0NDYsXG5cdFx0XCIuL25uLmpzXCI6IDQ0Nixcblx0XHRcIi4vcGEtaW5cIjogNDQ3LFxuXHRcdFwiLi9wYS1pbi5qc1wiOiA0NDcsXG5cdFx0XCIuL3BsXCI6IDQ0OCxcblx0XHRcIi4vcGwuanNcIjogNDQ4LFxuXHRcdFwiLi9wdFwiOiA0NDksXG5cdFx0XCIuL3B0LWJyXCI6IDQ1MCxcblx0XHRcIi4vcHQtYnIuanNcIjogNDUwLFxuXHRcdFwiLi9wdC5qc1wiOiA0NDksXG5cdFx0XCIuL3JvXCI6IDQ1MSxcblx0XHRcIi4vcm8uanNcIjogNDUxLFxuXHRcdFwiLi9ydVwiOiA0NTIsXG5cdFx0XCIuL3J1LmpzXCI6IDQ1Mixcblx0XHRcIi4vc2VcIjogNDUzLFxuXHRcdFwiLi9zZS5qc1wiOiA0NTMsXG5cdFx0XCIuL3NpXCI6IDQ1NCxcblx0XHRcIi4vc2kuanNcIjogNDU0LFxuXHRcdFwiLi9za1wiOiA0NTUsXG5cdFx0XCIuL3NrLmpzXCI6IDQ1NSxcblx0XHRcIi4vc2xcIjogNDU2LFxuXHRcdFwiLi9zbC5qc1wiOiA0NTYsXG5cdFx0XCIuL3NxXCI6IDQ1Nyxcblx0XHRcIi4vc3EuanNcIjogNDU3LFxuXHRcdFwiLi9zclwiOiA0NTgsXG5cdFx0XCIuL3NyLWN5cmxcIjogNDU5LFxuXHRcdFwiLi9zci1jeXJsLmpzXCI6IDQ1OSxcblx0XHRcIi4vc3IuanNcIjogNDU4LFxuXHRcdFwiLi9zc1wiOiA0NjAsXG5cdFx0XCIuL3NzLmpzXCI6IDQ2MCxcblx0XHRcIi4vc3ZcIjogNDYxLFxuXHRcdFwiLi9zdi5qc1wiOiA0NjEsXG5cdFx0XCIuL3N3XCI6IDQ2Mixcblx0XHRcIi4vc3cuanNcIjogNDYyLFxuXHRcdFwiLi90YVwiOiA0NjMsXG5cdFx0XCIuL3RhLmpzXCI6IDQ2Myxcblx0XHRcIi4vdGVcIjogNDY0LFxuXHRcdFwiLi90ZS5qc1wiOiA0NjQsXG5cdFx0XCIuL3RoXCI6IDQ2NSxcblx0XHRcIi4vdGguanNcIjogNDY1LFxuXHRcdFwiLi90bC1waFwiOiA0NjYsXG5cdFx0XCIuL3RsLXBoLmpzXCI6IDQ2Nixcblx0XHRcIi4vdGxoXCI6IDQ2Nyxcblx0XHRcIi4vdGxoLmpzXCI6IDQ2Nyxcblx0XHRcIi4vdHJcIjogNDY4LFxuXHRcdFwiLi90ci5qc1wiOiA0NjgsXG5cdFx0XCIuL3R6bFwiOiA0NjksXG5cdFx0XCIuL3R6bC5qc1wiOiA0NjksXG5cdFx0XCIuL3R6bVwiOiA0NzAsXG5cdFx0XCIuL3R6bS1sYXRuXCI6IDQ3MSxcblx0XHRcIi4vdHptLWxhdG4uanNcIjogNDcxLFxuXHRcdFwiLi90em0uanNcIjogNDcwLFxuXHRcdFwiLi91a1wiOiA0NzIsXG5cdFx0XCIuL3VrLmpzXCI6IDQ3Mixcblx0XHRcIi4vdXpcIjogNDczLFxuXHRcdFwiLi91ei5qc1wiOiA0NzMsXG5cdFx0XCIuL3ZpXCI6IDQ3NCxcblx0XHRcIi4vdmkuanNcIjogNDc0LFxuXHRcdFwiLi94LXBzZXVkb1wiOiA0NzUsXG5cdFx0XCIuL3gtcHNldWRvLmpzXCI6IDQ3NSxcblx0XHRcIi4vemgtY25cIjogNDc2LFxuXHRcdFwiLi96aC1jbi5qc1wiOiA0NzYsXG5cdFx0XCIuL3poLWhrXCI6IDQ3Nyxcblx0XHRcIi4vemgtaGsuanNcIjogNDc3LFxuXHRcdFwiLi96aC10d1wiOiA0NzgsXG5cdFx0XCIuL3poLXR3LmpzXCI6IDQ3OFxuXHR9O1xuXHRmdW5jdGlvbiB3ZWJwYWNrQ29udGV4dChyZXEpIHtcblx0XHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyh3ZWJwYWNrQ29udGV4dFJlc29sdmUocmVxKSk7XG5cdH07XG5cdGZ1bmN0aW9uIHdlYnBhY2tDb250ZXh0UmVzb2x2ZShyZXEpIHtcblx0XHRyZXR1cm4gbWFwW3JlcV0gfHwgKGZ1bmN0aW9uKCkgeyB0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiICsgcmVxICsgXCInLlwiKSB9KCkpO1xuXHR9O1xuXHR3ZWJwYWNrQ29udGV4dC5rZXlzID0gZnVuY3Rpb24gd2VicGFja0NvbnRleHRLZXlzKCkge1xuXHRcdHJldHVybiBPYmplY3Qua2V5cyhtYXApO1xuXHR9O1xuXHR3ZWJwYWNrQ29udGV4dC5yZXNvbHZlID0gd2VicGFja0NvbnRleHRSZXNvbHZlO1xuXHRtb2R1bGUuZXhwb3J0cyA9IHdlYnBhY2tDb250ZXh0O1xuXHR3ZWJwYWNrQ29udGV4dC5pZCA9IDM3NDtcblxuXG4vKioqLyB9LFxuXG4vKioqLyA1MjQ6XG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0XG5cdC8qXG5cdCBuZ3Byb2dyZXNzIDEuMS4yIC0gc2xpbSwgc2l0ZS13aWRlIHByb2dyZXNzYmFyIGZvciBBbmd1bGFySlMgXG5cdCAoQykgMjAxMyAtIFZpY3RvciBCamVsa2hvbG0gXG5cdCBMaWNlbnNlOiBNSVQgXG5cdCBTb3VyY2U6IGh0dHBzOi8vZ2l0aHViLmNvbS9WaWN0b3JCamVsa2hvbG0vbmdQcm9ncmVzcyBcblx0IERhdGUgQ29tcGlsZWQ6IDIwMTUtMDctMjcgXG5cdCAqL1xuXHRhbmd1bGFyLm1vZHVsZShcIm5nUHJvZ3Jlc3MucHJvdmlkZXJcIiwgW1wibmdQcm9ncmVzcy5kaXJlY3RpdmVcIl0pLnNlcnZpY2UoXCJuZ1Byb2dyZXNzXCIsIGZ1bmN0aW9uICgpIHtcblx0ICBcInVzZSBzdHJpY3RcIjtcblx0XG5cdCAgcmV0dXJuIFtcIiRkb2N1bWVudFwiLCBcIiR3aW5kb3dcIiwgXCIkY29tcGlsZVwiLCBcIiRyb290U2NvcGVcIiwgXCIkdGltZW91dFwiLCBmdW5jdGlvbiAoYSwgYiwgYywgZCwgZSkge1xuXHQgICAgdGhpcy5hdXRvU3R5bGUgPSAhMCwgdGhpcy5jb3VudCA9IDAsIHRoaXMuaGVpZ2h0ID0gXCIycHhcIiwgdGhpcy4kc2NvcGUgPSBkLiRuZXcoKSwgdGhpcy5jb2xvciA9IFwiZmlyZWJyaWNrXCIsIHRoaXMucGFyZW50ID0gYS5maW5kKFwiYm9keVwiKVswXSwgdGhpcy5jb3VudCA9IDAsIHRoaXMucHJvZ3Jlc3NiYXJFbCA9IGMoXCI8bmctcHJvZ3Jlc3M+PC9uZy1wcm9ncmVzcz5cIikodGhpcy4kc2NvcGUpLCB0aGlzLnBhcmVudC5hcHBlbmRDaGlsZCh0aGlzLnByb2dyZXNzYmFyRWxbMF0pLCB0aGlzLiRzY29wZS5jb3VudCA9IHRoaXMuY291bnQsIHZvaWQgMCAhPT0gdGhpcy5oZWlnaHQgJiYgdGhpcy5wcm9ncmVzc2JhckVsLmVxKDApLmNoaWxkcmVuKCkuY3NzKFwiaGVpZ2h0XCIsIHRoaXMuaGVpZ2h0KSwgdm9pZCAwICE9PSB0aGlzLmNvbG9yICYmICh0aGlzLnByb2dyZXNzYmFyRWwuZXEoMCkuY2hpbGRyZW4oKS5jc3MoXCJiYWNrZ3JvdW5kLWNvbG9yXCIsIHRoaXMuY29sb3IpLCB0aGlzLnByb2dyZXNzYmFyRWwuZXEoMCkuY2hpbGRyZW4oKS5jc3MoXCJjb2xvclwiLCB0aGlzLmNvbG9yKSksIHRoaXMuaW50ZXJ2YWxDb3VudGVySWQgPSAwLCB0aGlzLnN0YXJ0ID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICB0aGlzLnNob3coKTtcblx0ICAgICAgdmFyIGEgPSB0aGlzO1xuXHQgICAgICBjbGVhckludGVydmFsKHRoaXMuaW50ZXJ2YWxDb3VudGVySWQpLCB0aGlzLmludGVydmFsQ291bnRlcklkID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIGlzTmFOKGEuY291bnQpID8gKGNsZWFySW50ZXJ2YWwoYS5pbnRlcnZhbENvdW50ZXJJZCksIGEuY291bnQgPSAwLCBhLmhpZGUoKSkgOiAoYS5yZW1haW5pbmcgPSAxMDAgLSBhLmNvdW50LCBhLmNvdW50ID0gYS5jb3VudCArIC4xNSAqIE1hdGgucG93KDEgLSBNYXRoLnNxcnQoYS5yZW1haW5pbmcpLCAyKSwgYS51cGRhdGVDb3VudChhLmNvdW50KSk7XG5cdCAgICAgIH0sIDIwMCk7XG5cdCAgICB9LCB0aGlzLnVwZGF0ZUNvdW50ID0gZnVuY3Rpb24gKGEpIHtcblx0ICAgICAgdGhpcy4kc2NvcGUuY291bnQgPSBhLCB0aGlzLiRzY29wZS4kJHBoYXNlIHx8IHRoaXMuJHNjb3BlLiRhcHBseSgpO1xuXHQgICAgfSwgdGhpcy5zZXRIZWlnaHQgPSBmdW5jdGlvbiAoYSkge1xuXHQgICAgICByZXR1cm4gdm9pZCAwICE9PSBhICYmICh0aGlzLmhlaWdodCA9IGEsIHRoaXMuJHNjb3BlLmhlaWdodCA9IHRoaXMuaGVpZ2h0LCB0aGlzLiRzY29wZS4kJHBoYXNlIHx8IHRoaXMuJHNjb3BlLiRhcHBseSgpKSwgdGhpcy5oZWlnaHQ7XG5cdCAgICB9LCB0aGlzLnNldENvbG9yID0gZnVuY3Rpb24gKGEpIHtcblx0ICAgICAgcmV0dXJuIHZvaWQgMCAhPT0gYSAmJiAodGhpcy5jb2xvciA9IGEsIHRoaXMuJHNjb3BlLmNvbG9yID0gdGhpcy5jb2xvciwgdGhpcy4kc2NvcGUuJCRwaGFzZSB8fCB0aGlzLiRzY29wZS4kYXBwbHkoKSksIHRoaXMuY29sb3I7XG5cdCAgICB9LCB0aGlzLmhpZGUgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgIHRoaXMucHJvZ3Jlc3NiYXJFbC5jaGlsZHJlbigpLmNzcyhcIm9wYWNpdHlcIiwgXCIwXCIpO1xuXHQgICAgICB2YXIgYSA9IHRoaXM7XG5cdCAgICAgIGEuYW5pbWF0ZShmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgYS5wcm9ncmVzc2JhckVsLmNoaWxkcmVuKCkuY3NzKFwid2lkdGhcIiwgXCIwJVwiKSwgYS5hbmltYXRlKGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgIGEuc2hvdygpO1xuXHQgICAgICAgIH0sIDUwMCk7XG5cdCAgICAgIH0sIDUwMCk7XG5cdCAgICB9LCB0aGlzLnNob3cgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgIHZhciBhID0gdGhpcztcblx0ICAgICAgYS5hbmltYXRlKGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICBhLnByb2dyZXNzYmFyRWwuY2hpbGRyZW4oKS5jc3MoXCJvcGFjaXR5XCIsIFwiMVwiKTtcblx0ICAgICAgfSwgMTAwKTtcblx0ICAgIH0sIHRoaXMuYW5pbWF0ZSA9IGZ1bmN0aW9uIChhLCBiKSB7XG5cdCAgICAgIHZvaWQgMCAhPT0gdGhpcy5hbmltYXRpb24gJiYgZS5jYW5jZWwodGhpcy5hbmltYXRpb24pLCB0aGlzLmFuaW1hdGlvbiA9IGUoYSwgYik7XG5cdCAgICB9LCB0aGlzLnN0YXR1cyA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgcmV0dXJuIHRoaXMuY291bnQ7XG5cdCAgICB9LCB0aGlzLnN0b3AgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5pbnRlcnZhbENvdW50ZXJJZCk7XG5cdCAgICB9LCB0aGlzLnNldCA9IGZ1bmN0aW9uIChhKSB7XG5cdCAgICAgIHJldHVybiB0aGlzLnNob3coKSwgdGhpcy51cGRhdGVDb3VudChhKSwgdGhpcy5jb3VudCA9IGEsIGNsZWFySW50ZXJ2YWwodGhpcy5pbnRlcnZhbENvdW50ZXJJZCksIHRoaXMuY291bnQ7XG5cdCAgICB9LCB0aGlzLmNzcyA9IGZ1bmN0aW9uIChhKSB7XG5cdCAgICAgIHJldHVybiB0aGlzLnByb2dyZXNzYmFyRWwuY2hpbGRyZW4oKS5jc3MoYSk7XG5cdCAgICB9LCB0aGlzLnJlc2V0ID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICByZXR1cm4gY2xlYXJJbnRlcnZhbCh0aGlzLmludGVydmFsQ291bnRlcklkKSwgdGhpcy5jb3VudCA9IDAsIHRoaXMudXBkYXRlQ291bnQodGhpcy5jb3VudCksIDA7XG5cdCAgICB9LCB0aGlzLmNvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICB0aGlzLmNvdW50ID0gMTAwLCB0aGlzLnVwZGF0ZUNvdW50KHRoaXMuY291bnQpO1xuXHQgICAgICB2YXIgYSA9IHRoaXM7XG5cdCAgICAgIHJldHVybiBjbGVhckludGVydmFsKHRoaXMuaW50ZXJ2YWxDb3VudGVySWQpLCBlKGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICBhLmhpZGUoKSwgZShmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICBhLmNvdW50ID0gMCwgYS51cGRhdGVDb3VudChhLmNvdW50KTtcblx0ICAgICAgICB9LCA1MDApO1xuXHQgICAgICB9LCAxZTMpLCB0aGlzLmNvdW50O1xuXHQgICAgfSwgdGhpcy5zZXRQYXJlbnQgPSBmdW5jdGlvbiAoYSkge1xuXHQgICAgICBpZiAobnVsbCA9PT0gYSB8fCB2b2lkIDAgPT09IGEpIHRocm93IG5ldyBFcnJvcihcIlByb3ZpZGUgYSB2YWxpZCBwYXJlbnQgb2YgdHlwZSBIVE1MRWxlbWVudFwiKTtcblx0ICAgICAgbnVsbCAhPT0gdGhpcy5wYXJlbnQgJiYgdm9pZCAwICE9PSB0aGlzLnBhcmVudCAmJiB0aGlzLnBhcmVudC5yZW1vdmVDaGlsZCh0aGlzLnByb2dyZXNzYmFyRWxbMF0pLCB0aGlzLnBhcmVudCA9IGEsIHRoaXMucGFyZW50LmFwcGVuZENoaWxkKHRoaXMucHJvZ3Jlc3NiYXJFbFswXSk7XG5cdCAgICB9LCB0aGlzLmdldERvbUVsZW1lbnQgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICAgIHJldHVybiB0aGlzLnByb2dyZXNzYmFyRWw7XG5cdCAgICB9LCB0aGlzLnNldEFic29sdXRlID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICB0aGlzLnByb2dyZXNzYmFyRWwuY3NzKFwicG9zaXRpb25cIiwgXCJhYnNvbHV0ZVwiKTtcblx0ICAgIH07XG5cdCAgfV07XG5cdH0pLmZhY3RvcnkoXCJuZ1Byb2dyZXNzRmFjdG9yeVwiLCBbXCIkaW5qZWN0b3JcIiwgXCJuZ1Byb2dyZXNzXCIsIGZ1bmN0aW9uIChhLCBiKSB7XG5cdCAgdmFyIGMgPSB7XG5cdCAgICBjcmVhdGVJbnN0YW5jZTogZnVuY3Rpb24gY3JlYXRlSW5zdGFuY2UoKSB7XG5cdCAgICAgIHJldHVybiBhLmluc3RhbnRpYXRlKGIpO1xuXHQgICAgfVxuXHQgIH07XG5cdCAgcmV0dXJuIGM7XG5cdH1dKSwgYW5ndWxhci5tb2R1bGUoXCJuZ1Byb2dyZXNzLmRpcmVjdGl2ZVwiLCBbXSkuZGlyZWN0aXZlKFwibmdQcm9ncmVzc1wiLCBbXCIkd2luZG93XCIsIFwiJHJvb3RTY29wZVwiLCBmdW5jdGlvbiAoYSwgYikge1xuXHQgIHZhciBjID0ge1xuXHQgICAgcmVwbGFjZTogITAsIHJlc3RyaWN0OiBcIkVcIiwgbGluazogZnVuY3Rpb24gbGluayhhLCBiLCBjLCBkKSB7XG5cdCAgICAgIGEuJHdhdGNoKFwiY291bnRcIiwgZnVuY3Rpb24gKGMpIHtcblx0ICAgICAgICAodm9pZCAwICE9PSBjIHx8IG51bGwgIT09IGMpICYmIChhLmNvdW50ZXIgPSBjLCBiLmVxKDApLmNoaWxkcmVuKCkuY3NzKFwid2lkdGhcIiwgYyArIFwiJVwiKSk7XG5cdCAgICAgIH0pLCBhLiR3YXRjaChcImNvbG9yXCIsIGZ1bmN0aW9uIChjKSB7XG5cdCAgICAgICAgKHZvaWQgMCAhPT0gYyB8fCBudWxsICE9PSBjKSAmJiAoYS5jb2xvciA9IGMsIGIuZXEoMCkuY2hpbGRyZW4oKS5jc3MoXCJiYWNrZ3JvdW5kLWNvbG9yXCIsIGMpLCBiLmVxKDApLmNoaWxkcmVuKCkuY3NzKFwiY29sb3JcIiwgYykpO1xuXHQgICAgICB9KSwgYS4kd2F0Y2goXCJoZWlnaHRcIiwgZnVuY3Rpb24gKGMpIHtcblx0ICAgICAgICAodm9pZCAwICE9PSBjIHx8IG51bGwgIT09IGMpICYmIChhLmhlaWdodCA9IGMsIGIuZXEoMCkuY2hpbGRyZW4oKS5jc3MoXCJoZWlnaHRcIiwgYykpO1xuXHQgICAgICB9KTtcblx0ICAgIH0sIHRlbXBsYXRlOiAnPGRpdiBpZD1cIm5nUHJvZ3Jlc3MtY29udGFpbmVyXCI+PGRpdiBpZD1cIm5nUHJvZ3Jlc3NcIj48L2Rpdj48L2Rpdj4nXG5cdCAgfTtcblx0ICByZXR1cm4gYztcblx0fV0pLCBhbmd1bGFyLm1vZHVsZShcIm5nUHJvZ3Jlc3NcIiwgW1wibmdQcm9ncmVzcy5kaXJlY3RpdmVcIiwgXCJuZ1Byb2dyZXNzLnByb3ZpZGVyXCJdKTtcblxuLyoqKi8gfSxcblxuLyoqKi8gNTI1OlxuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0Ly8gc3R5bGUtbG9hZGVyOiBBZGRzIHNvbWUgY3NzIHRvIHRoZSBET00gYnkgYWRkaW5nIGEgPHN0eWxlPiB0YWdcblx0XG5cdC8vIGxvYWQgdGhlIHN0eWxlc1xuXHR2YXIgY29udGVudCA9IF9fd2VicGFja19yZXF1aXJlX18oNTI2KTtcblx0aWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5cdC8vIGFkZCB0aGUgc3R5bGVzIHRvIHRoZSBET01cblx0dmFyIHVwZGF0ZSA9IF9fd2VicGFja19yZXF1aXJlX18oNDg1KShjb250ZW50LCB7fSk7XG5cdGlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuXHQvLyBIb3QgTW9kdWxlIFJlcGxhY2VtZW50XG5cdGlmKGZhbHNlKSB7XG5cdFx0Ly8gV2hlbiB0aGUgc3R5bGVzIGNoYW5nZSwgdXBkYXRlIHRoZSA8c3R5bGU+IHRhZ3Ncblx0XHRpZighY29udGVudC5sb2NhbHMpIHtcblx0XHRcdG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4vbmdQcm9ncmVzcy5jc3NcIiwgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuL25nUHJvZ3Jlc3MuY3NzXCIpO1xuXHRcdFx0XHRpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcblx0XHRcdFx0dXBkYXRlKG5ld0NvbnRlbnQpO1xuXHRcdFx0fSk7XG5cdFx0fVxuXHRcdC8vIFdoZW4gdGhlIG1vZHVsZSBpcyBkaXNwb3NlZCwgcmVtb3ZlIHRoZSA8c3R5bGU+IHRhZ3Ncblx0XHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcblx0fVxuXG4vKioqLyB9LFxuXG4vKioqLyA1MjY6XG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQ4NCkoKTtcblx0Ly8gaW1wb3J0c1xuXHRcblx0XG5cdC8vIG1vZHVsZVxuXHRleHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIjbmdQcm9ncmVzc3ttYXJnaW46MDtwYWRkaW5nOjA7ei1pbmRleDo5OTk5ODtiYWNrZ3JvdW5kLWNvbG9yOmdyZWVuO2NvbG9yOmdyZWVuO2JveC1zaGFkb3c6MCAwIDEwcHggMDtoZWlnaHQ6MnB4O29wYWNpdHk6MDstd2Via2l0LXRyYW5zaXRpb246YWxsIC41cyBlYXNlLWluLW91dDt0cmFuc2l0aW9uOmFsbCAuNXMgZWFzZS1pbi1vdXR9I25nUHJvZ3Jlc3MtY29udGFpbmVye3Bvc2l0aW9uOmZpeGVkO21hcmdpbjowO3BhZGRpbmc6MDt0b3A6MDtsZWZ0OjA7cmlnaHQ6MDt6LWluZGV4Ojk5OTk5fVwiLCBcIlwiXSk7XG5cdFxuXHQvLyBleHBvcnRzXG5cblxuLyoqKi8gfSxcblxuLyoqKi8gNTI3OlxuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdFxuXHR2YXIgX3R5cGVvZjIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDUyOCk7XG5cdFxuXHR2YXIgX3R5cGVvZjMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF90eXBlb2YyKTtcblx0XG5cdGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cdFxuXHQvKiEgYW5ndWxhci1icmVhZGNydW1iIC0gdjAuNC4wLWRldi0yMDE1LTA4LTA3XG5cdCogaHR0cDovL25jdWlsbGVyeS5naXRodWIuaW8vYW5ndWxhci1icmVhZGNydW1iXG5cdCogQ29weXJpZ2h0IChjKSAyMDE1IE5pY29sYXMgQ3VpbGxlcnk7IExpY2Vuc2VkIE1JVCAqL1xuXHQhZnVuY3Rpb24gKGEsIGIsIGMpIHtcblx0ICBcInVzZSBzdHJpY3RcIjtcblx0ICBmdW5jdGlvbiBkKGEsIGMpIHtcblx0ICAgIHJldHVybiBiLmVxdWFscyhhLmxlbmd0aCwgYy5sZW5ndGgpID8gYSA+IGMgOiBhLmxlbmd0aCA+IGMubGVuZ3RoO1xuXHQgIH1mdW5jdGlvbiBlKGEpIHtcblx0ICAgIHZhciBiID0gYS5yZXBsYWNlKC9cXG4vZywgXCIgXCIpLm1hdGNoKC9eKFteKF0rPylcXHMqKFxcKCguKilcXCkpPyQvKTtpZiAoIWIgfHwgNCAhPT0gYi5sZW5ndGgpIHRocm93IG5ldyBFcnJvcihcIkludmFsaWQgc3RhdGUgcmVmICdcIiArIGEgKyBcIidcIik7cmV0dXJuIHsgc3RhdGU6IGJbMV0sIHBhcmFtRXhwcjogYlszXSB8fCBudWxsIH07XG5cdCAgfWZ1bmN0aW9uIGYoKSB7XG5cdCAgICB2YXIgYSA9IHsgcHJlZml4U3RhdGVOYW1lOiBudWxsLCB0ZW1wbGF0ZTogXCJib290c3RyYXAzXCIsIHRlbXBsYXRlVXJsOiBudWxsLCBpbmNsdWRlQWJzdHJhY3Q6ICExIH07dGhpcy5zZXRPcHRpb25zID0gZnVuY3Rpb24gKGMpIHtcblx0ICAgICAgYi5leHRlbmQoYSwgYyk7XG5cdCAgICB9LCB0aGlzLiRnZXQgPSBbXCIkc3RhdGVcIiwgXCIkc3RhdGVQYXJhbXNcIiwgXCIkcm9vdFNjb3BlXCIsIGZ1bmN0aW9uIChiLCBmLCBnKSB7XG5cdCAgICAgIHZhciBoID0gZztnLiRvbihcIiR2aWV3Q29udGVudExvYWRlZFwiLCBmdW5jdGlvbiAoYSkge1xuXHQgICAgICAgICFhLnRhcmdldFNjb3BlLm5jeUJyZWFkY3J1bWJJZ25vcmUgJiYgZChhLnRhcmdldFNjb3BlLiRpZCwgaC4kaWQpICYmIChoID0gYS50YXJnZXRTY29wZSk7XG5cdCAgICAgIH0pO3ZhciBpID0gZnVuY3Rpb24gaShhKSB7XG5cdCAgICAgICAgdmFyIGIgPSBhLnBhcmVudCB8fCAoL14oLispXFwuW14uXSskLy5leGVjKGEubmFtZSkgfHwgW10pWzFdLFxuXHQgICAgICAgICAgICBjID0gXCJvYmplY3RcIiA9PSAodHlwZW9mIGIgPT09IFwidW5kZWZpbmVkXCIgPyBcInVuZGVmaW5lZFwiIDogKDAsIF90eXBlb2YzLmRlZmF1bHQpKGIpKTtyZXR1cm4gYyA/IGIubmFtZSA6IGI7XG5cdCAgICAgIH0sXG5cdCAgICAgICAgICBqID0gZnVuY3Rpb24gaihjLCBkKSB7XG5cdCAgICAgICAgZm9yICh2YXIgZywgaSwgaiA9IGUoZCksIGsgPSAhMSwgbCA9ICExLCBtID0gMCwgbiA9IGMubGVuZ3RoOyBuID4gbTsgbSArPSAxKSB7XG5cdCAgICAgICAgICBpZiAoY1ttXS5uYW1lID09PSBqLnN0YXRlKSByZXR1cm47XG5cdCAgICAgICAgfWcgPSBiLmdldChqLnN0YXRlKSwgZy5uY3lCcmVhZGNydW1iICYmIChnLm5jeUJyZWFkY3J1bWIuZm9yY2UgJiYgKGsgPSAhMCksIGcubmN5QnJlYWRjcnVtYi5za2lwICYmIChsID0gITApKSwgZ1tcImFic3RyYWN0XCJdICYmICFhLmluY2x1ZGVBYnN0cmFjdCAmJiAhayB8fCBsIHx8IChqLnBhcmFtRXhwciAmJiAoaSA9IGguJGV2YWwoai5wYXJhbUV4cHIpKSwgZy5uY3lCcmVhZGNydW1iTGluayA9IGIuaHJlZihqLnN0YXRlLCBpIHx8IGYgfHwge30pLCBjLnVuc2hpZnQoZykpO1xuXHQgICAgICB9LFxuXHQgICAgICAgICAgayA9IGZ1bmN0aW9uIGsoYSkge1xuXHQgICAgICAgIHZhciBjID0gZShhKSxcblx0ICAgICAgICAgICAgZCA9IGIuZ2V0KGMuc3RhdGUpO2lmIChkLm5jeUJyZWFkY3J1bWIgJiYgZC5uY3lCcmVhZGNydW1iLnBhcmVudCkge1xuXHQgICAgICAgICAgdmFyIGYgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIGQubmN5QnJlYWRjcnVtYi5wYXJlbnQsXG5cdCAgICAgICAgICAgICAgZyA9IGYgPyBkLm5jeUJyZWFkY3J1bWIucGFyZW50KGgpIDogZC5uY3lCcmVhZGNydW1iLnBhcmVudDtpZiAoZykgcmV0dXJuIGc7XG5cdCAgICAgICAgfXJldHVybiBpKGQpO1xuXHQgICAgICB9O3JldHVybiB7IGdldFRlbXBsYXRlOiBmdW5jdGlvbiBnZXRUZW1wbGF0ZShiKSB7XG5cdCAgICAgICAgICByZXR1cm4gYS50ZW1wbGF0ZVVybCA/IG51bGwgOiBiW2EudGVtcGxhdGVdID8gYlthLnRlbXBsYXRlXSA6IGEudGVtcGxhdGU7XG5cdCAgICAgICAgfSwgZ2V0VGVtcGxhdGVVcmw6IGZ1bmN0aW9uIGdldFRlbXBsYXRlVXJsKCkge1xuXHQgICAgICAgICAgcmV0dXJuIGEudGVtcGxhdGVVcmw7XG5cdCAgICAgICAgfSwgZ2V0U3RhdGVzQ2hhaW46IGZ1bmN0aW9uIGdldFN0YXRlc0NoYWluKGMpIHtcblx0ICAgICAgICAgIGZvciAodmFyIGQgPSBbXSwgZSA9IGIuJGN1cnJlbnQuc2VsZi5uYW1lOyBlOyBlID0gayhlKSkge1xuXHQgICAgICAgICAgICBpZiAoaihkLCBlKSwgYyAmJiBkLmxlbmd0aCkgcmV0dXJuIGQ7XG5cdCAgICAgICAgICB9cmV0dXJuIGEucHJlZml4U3RhdGVOYW1lICYmIGooZCwgYS5wcmVmaXhTdGF0ZU5hbWUpLCBkO1xuXHQgICAgICAgIH0sIGdldExhc3RTdGVwOiBmdW5jdGlvbiBnZXRMYXN0U3RlcCgpIHtcblx0ICAgICAgICAgIHZhciBhID0gdGhpcy5nZXRTdGF0ZXNDaGFpbighMCk7cmV0dXJuIGEubGVuZ3RoID8gYVswXSA6IGM7XG5cdCAgICAgICAgfSwgJGdldExhc3RWaWV3U2NvcGU6IGZ1bmN0aW9uICRnZXRMYXN0Vmlld1Njb3BlKCkge1xuXHQgICAgICAgICAgcmV0dXJuIGg7XG5cdCAgICAgICAgfSB9O1xuXHQgICAgfV07XG5cdCAgfWZ1bmN0aW9uIGcoYSwgYywgZCkge1xuXHQgICAgdmFyIGUgPSB7IGJvb3RzdHJhcDI6ICc8dWwgY2xhc3M9XCJicmVhZGNydW1iXCI+PGxpIG5nLXJlcGVhdD1cInN0ZXAgaW4gc3RlcHNcIiBuZy1zd2l0Y2g9XCIkbGFzdCB8fCAhIXN0ZXAuYWJzdHJhY3RcIiBuZy1jbGFzcz1cInthY3RpdmU6ICRsYXN0fVwiPjxhIG5nLXN3aXRjaC13aGVuPVwiZmFsc2VcIiBocmVmPVwie3tzdGVwLm5jeUJyZWFkY3J1bWJMaW5rfX1cIj57e3N0ZXAubmN5QnJlYWRjcnVtYkxhYmVsfX08L2E+PHNwYW4gbmctc3dpdGNoLXdoZW49XCJ0cnVlXCI+e3tzdGVwLm5jeUJyZWFkY3J1bWJMYWJlbH19PC9zcGFuPjxzcGFuIGNsYXNzPVwiZGl2aWRlclwiIG5nLWhpZGU9XCIkbGFzdFwiPi88L3NwYW4+PC9saT48L3VsPicsIGJvb3RzdHJhcDM6ICc8b2wgY2xhc3M9XCJicmVhZGNydW1iXCI+PGxpIG5nLXJlcGVhdD1cInN0ZXAgaW4gc3RlcHNcIiBuZy1jbGFzcz1cInthY3RpdmU6ICRsYXN0fVwiIG5nLXN3aXRjaD1cIiRsYXN0IHx8ICEhc3RlcC5hYnN0cmFjdFwiPjxhIG5nLXN3aXRjaC13aGVuPVwiZmFsc2VcIiBocmVmPVwie3tzdGVwLm5jeUJyZWFkY3J1bWJMaW5rfX1cIj57e3N0ZXAubmN5QnJlYWRjcnVtYkxhYmVsfX08L2E+PHNwYW4gbmctc3dpdGNoLXdoZW49XCJ0cnVlXCI+e3tzdGVwLm5jeUJyZWFkY3J1bWJMYWJlbH19PC9zcGFuPjwvbGk+PC9vbD4nIH07cmV0dXJuIHsgcmVzdHJpY3Q6IFwiQUVcIiwgcmVwbGFjZTogITAsIHNjb3BlOiB7fSwgdGVtcGxhdGU6IGMuZ2V0VGVtcGxhdGUoZSksIHRlbXBsYXRlVXJsOiBjLmdldFRlbXBsYXRlVXJsKCksIGxpbms6IHsgcG9zdDogZnVuY3Rpb24gcG9zdChlKSB7XG5cdCAgICAgICAgICB2YXIgZiA9IFtdLFxuXHQgICAgICAgICAgICAgIGcgPSBmdW5jdGlvbiBnKCkge1xuXHQgICAgICAgICAgICBsKGYpLCBmID0gW107dmFyIGQgPSBjLiRnZXRMYXN0Vmlld1Njb3BlKCk7ZS5zdGVwcyA9IGMuZ2V0U3RhdGVzQ2hhaW4oKSwgYi5mb3JFYWNoKGUuc3RlcHMsIGZ1bmN0aW9uIChiKSB7XG5cdCAgICAgICAgICAgICAgaWYgKGIubmN5QnJlYWRjcnVtYiAmJiBiLm5jeUJyZWFkY3J1bWIubGFiZWwpIHtcblx0ICAgICAgICAgICAgICAgIHZhciBjID0gYShiLm5jeUJyZWFkY3J1bWIubGFiZWwpO2IubmN5QnJlYWRjcnVtYkxhYmVsID0gYyhkKSwgayhmLCBjLCBkLCBiKTtcblx0ICAgICAgICAgICAgICB9IGVsc2UgYi5uY3lCcmVhZGNydW1iTGFiZWwgPSBiLm5hbWU7XG5cdCAgICAgICAgICAgIH0pO1xuXHQgICAgICAgICAgfTtkLiRvbihcIiR2aWV3Q29udGVudExvYWRlZFwiLCBmdW5jdGlvbiAoYSkge1xuXHQgICAgICAgICAgICBhLnRhcmdldFNjb3BlLm5jeUJyZWFkY3J1bWJJZ25vcmUgfHwgZygpO1xuXHQgICAgICAgICAgfSksIGcoKTtcblx0ICAgICAgICB9IH0gfTtcblx0ICB9ZnVuY3Rpb24gaChhLCBiLCBjKSB7XG5cdCAgICByZXR1cm4geyByZXN0cmljdDogXCJBXCIsIHNjb3BlOiB7fSwgdGVtcGxhdGU6IFwie3tuY3lCcmVhZGNydW1iTGFiZWx9fVwiLCBjb21waWxlOiBmdW5jdGlvbiBjb21waWxlKGQsIGUpIHtcblx0ICAgICAgICB2YXIgZiA9IGQuYXR0cihlLiRhdHRyLm5jeUJyZWFkY3J1bWJMYXN0KTtyZXR1cm4gZiAmJiBkLmh0bWwoZiksIHsgcG9zdDogZnVuY3Rpb24gcG9zdChkKSB7XG5cdCAgICAgICAgICAgIHZhciBlID0gW10sXG5cdCAgICAgICAgICAgICAgICBmID0gZnVuY3Rpb24gZigpIHtcblx0ICAgICAgICAgICAgICBsKGUpLCBlID0gW107dmFyIGMgPSBiLiRnZXRMYXN0Vmlld1Njb3BlKCksXG5cdCAgICAgICAgICAgICAgICAgIGYgPSBiLmdldExhc3RTdGVwKCk7aWYgKGYpIGlmIChkLm5jeUJyZWFkY3J1bWJMaW5rID0gZi5uY3lCcmVhZGNydW1iTGluaywgZi5uY3lCcmVhZGNydW1iICYmIGYubmN5QnJlYWRjcnVtYi5sYWJlbCkge1xuXHQgICAgICAgICAgICAgICAgdmFyIGcgPSBhKGYubmN5QnJlYWRjcnVtYi5sYWJlbCk7ZC5uY3lCcmVhZGNydW1iTGFiZWwgPSBnKGMpLCBrKGUsIGcsIGMsIGQpO1xuXHQgICAgICAgICAgICAgIH0gZWxzZSBkLm5jeUJyZWFkY3J1bWJMYWJlbCA9IGYubmFtZTtcblx0ICAgICAgICAgICAgfTtjLiRvbihcIiR2aWV3Q29udGVudExvYWRlZFwiLCBmdW5jdGlvbiAoYSkge1xuXHQgICAgICAgICAgICAgIGEudGFyZ2V0U2NvcGUubmN5QnJlYWRjcnVtYklnbm9yZSB8fCBmKCk7XG5cdCAgICAgICAgICAgIH0pLCBmKCk7XG5cdCAgICAgICAgICB9IH07XG5cdCAgICAgIH0gfTtcblx0ICB9ZnVuY3Rpb24gaShhLCBjLCBkKSB7XG5cdCAgICByZXR1cm4geyByZXN0cmljdDogXCJBXCIsIHNjb3BlOiB7fSwgdGVtcGxhdGU6IFwie3tuY3lCcmVhZGNydW1iQ2hhaW59fVwiLCBjb21waWxlOiBmdW5jdGlvbiBjb21waWxlKGUsIGYpIHtcblx0ICAgICAgICB2YXIgZyA9IGUuYXR0cihmLiRhdHRyLm5jeUJyZWFkY3J1bWJUZXh0KTtnICYmIGUuaHRtbChnKTt2YXIgaCA9IGUuYXR0cihmLiRhdHRyLm5jeUJyZWFkY3J1bWJUZXh0U2VwYXJhdG9yKSB8fCBcIiAvIFwiO3JldHVybiB7IHBvc3Q6IGZ1bmN0aW9uIHBvc3QoZSkge1xuXHQgICAgICAgICAgICB2YXIgZiA9IFtdLFxuXHQgICAgICAgICAgICAgICAgZyA9IGZ1bmN0aW9uIGcoYSwgYywgZCkge1xuXHQgICAgICAgICAgICAgIGIuZm9yRWFjaChqKGMpLCBmdW5jdGlvbiAoYikge1xuXHQgICAgICAgICAgICAgICAgdmFyIGMgPSBkLiR3YXRjaChiLCBmdW5jdGlvbiAoYSwgYikge1xuXHQgICAgICAgICAgICAgICAgICBhICE9PSBiICYmIGkoKTtcblx0ICAgICAgICAgICAgICAgIH0pO2EucHVzaChjKTtcblx0ICAgICAgICAgICAgICB9KTtcblx0ICAgICAgICAgICAgfSxcblx0ICAgICAgICAgICAgICAgIGkgPSBmdW5jdGlvbiBpKCkge1xuXHQgICAgICAgICAgICAgIGwoZiksIGYgPSBbXTt2YXIgZCA9IGMuJGdldExhc3RWaWV3U2NvcGUoKSxcblx0ICAgICAgICAgICAgICAgICAgaSA9IGMuZ2V0U3RhdGVzQ2hhaW4oKSxcblx0ICAgICAgICAgICAgICAgICAgaiA9IFtdO2IuZm9yRWFjaChpLCBmdW5jdGlvbiAoYikge1xuXHQgICAgICAgICAgICAgICAgaWYgKGIubmN5QnJlYWRjcnVtYiAmJiBiLm5jeUJyZWFkY3J1bWIubGFiZWwpIHtcblx0ICAgICAgICAgICAgICAgICAgdmFyIGMgPSBhKGIubmN5QnJlYWRjcnVtYi5sYWJlbCk7ai5wdXNoKGMoZCkpLCBnKGYsIGMsIGQpO1xuXHQgICAgICAgICAgICAgICAgfSBlbHNlIGoucHVzaChiLm5hbWUpO1xuXHQgICAgICAgICAgICAgIH0pLCBlLm5jeUJyZWFkY3J1bWJDaGFpbiA9IGouam9pbihoKTtcblx0ICAgICAgICAgICAgfTtkLiRvbihcIiR2aWV3Q29udGVudExvYWRlZFwiLCBmdW5jdGlvbiAoYSkge1xuXHQgICAgICAgICAgICAgIGEudGFyZ2V0U2NvcGUubmN5QnJlYWRjcnVtYklnbm9yZSB8fCBpKCk7XG5cdCAgICAgICAgICAgIH0pLCBpKCk7XG5cdCAgICAgICAgICB9IH07XG5cdCAgICAgIH0gfTtcblx0ICB9dmFyIGogPSBmdW5jdGlvbiBqKGEpIHtcblx0ICAgIGlmIChhLmV4cHJlc3Npb25zKSByZXR1cm4gYS5leHByZXNzaW9uczt2YXIgYyA9IFtdO3JldHVybiBiLmZvckVhY2goYS5wYXJ0cywgZnVuY3Rpb24gKGEpIHtcblx0ICAgICAgYi5pc0Z1bmN0aW9uKGEpICYmIGMucHVzaChhLmV4cCk7XG5cdCAgICB9KSwgYztcblx0ICB9LFxuXHQgICAgICBrID0gZnVuY3Rpb24gayhhLCBjLCBkLCBlKSB7XG5cdCAgICBiLmZvckVhY2goaihjKSwgZnVuY3Rpb24gKGIpIHtcblx0ICAgICAgdmFyIGYgPSBkLiR3YXRjaChiLCBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgZS5uY3lCcmVhZGNydW1iTGFiZWwgPSBjKGQpO1xuXHQgICAgICB9KTthLnB1c2goZik7XG5cdCAgICB9KTtcblx0ICB9LFxuXHQgICAgICBsID0gZnVuY3Rpb24gbChhKSB7XG5cdCAgICBiLmZvckVhY2goYSwgZnVuY3Rpb24gKGEpIHtcblx0ICAgICAgYSgpO1xuXHQgICAgfSk7XG5cdCAgfTtnLiRpbmplY3QgPSBbXCIkaW50ZXJwb2xhdGVcIiwgXCIkYnJlYWRjcnVtYlwiLCBcIiRyb290U2NvcGVcIl0sIGguJGluamVjdCA9IFtcIiRpbnRlcnBvbGF0ZVwiLCBcIiRicmVhZGNydW1iXCIsIFwiJHJvb3RTY29wZVwiXSwgaS4kaW5qZWN0ID0gW1wiJGludGVycG9sYXRlXCIsIFwiJGJyZWFkY3J1bWJcIiwgXCIkcm9vdFNjb3BlXCJdLCBiLm1vZHVsZShcIm5jeS1hbmd1bGFyLWJyZWFkY3J1bWJcIiwgW1widWkucm91dGVyLnN0YXRlXCJdKS5wcm92aWRlcihcIiRicmVhZGNydW1iXCIsIGYpLmRpcmVjdGl2ZShcIm5jeUJyZWFkY3J1bWJcIiwgZykuZGlyZWN0aXZlKFwibmN5QnJlYWRjcnVtYkxhc3RcIiwgaCkuZGlyZWN0aXZlKFwibmN5QnJlYWRjcnVtYlRleHRcIiwgaSk7XG5cdH0od2luZG93LCB3aW5kb3cuYW5ndWxhcik7XG5cbi8qKiovIH0sXG5cbi8qKiovIDU5Njpcbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8qIFdFQlBBQ0sgVkFSIElOSkVDVElPTiAqLyhmdW5jdGlvbihqUXVlcnkpIHsndXNlIHN0cmljdCc7XG5cdFxuXHR2YXIgX21vbWVudCA9IF9fd2VicGFja19yZXF1aXJlX18oMzcyKTtcblx0XG5cdHZhciBfbW9tZW50MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX21vbWVudCk7XG5cdFxuXHRmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXHRcblx0KGZ1bmN0aW9uIChtb21lbnQpIHtcblx0XG5cdCAgJ3VzZSBzdHJpY3QnO1xuXHRcblx0ICB2YXIgbW9kdWxlTmFtZSA9IFwibmdNYXRlcmlhbERhdGVQaWNrZXJcIjtcblx0XG5cdCAgdmFyIFZJRVdfU1RBVEVTID0ge1xuXHQgICAgREFURTogMCxcblx0ICAgIEhPVVI6IDEsXG5cdCAgICBNSU5VVEU6IDJcblx0ICB9O1xuXHRcblx0ICB2YXIgY3NzID0gZnVuY3Rpb24gY3NzKGVsLCBuYW1lKSB7XG5cdCAgICBpZiAoJ2pRdWVyeScgaW4gd2luZG93KSB7XG5cdCAgICAgIHJldHVybiBqUXVlcnkoZWwpLmNzcyhuYW1lKTtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIGVsID0gYW5ndWxhci5lbGVtZW50KGVsKTtcblx0ICAgICAgcmV0dXJuICdnZXRDb21wdXRlZFN0eWxlJyBpbiB3aW5kb3cgPyB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbFswXSlbbmFtZV0gOiBlbC5jc3MobmFtZSk7XG5cdCAgICB9XG5cdCAgfTtcblx0XG5cdCAgdmFyIHRlbXBsYXRlID0gJzxtZC1kaWFsb2cgY2xhc3M9XCJkdHBcIiBsYXlvdXQ9XCJjb2x1bW5cIiBzdHlsZT1cIndpZHRoOiAzMDBweDtcIj4nICsgJyAgICA8bWQtZGlhbG9nLWNvbnRlbnQgY2xhc3M9XCJkdHAtY29udGVudFwiPicgKyAnICAgICAgICA8ZGl2IGNsYXNzPVwiZHRwLWRhdGUtdmlld1wiPicgKyAnICAgICAgICAgICAgPGhlYWRlciBjbGFzcz1cImR0cC1oZWFkZXJcIj4nICsgJyAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZHRwLWFjdHVhbC1kYXlcIiBuZy1zaG93PVwicGlja2VyLmRhdGVNb2RlXCI+e3twaWNrZXIuY3VycmVudERhdGUuZm9ybWF0KFwiZGRkZFwiKX19PC9kaXY+JyArICcgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImR0cC1hY3R1YWwtZGF5XCIgbmctc2hvdz1cInBpY2tlci50aW1lTW9kZVwiPnt7cGlja2VyLnBhcmFtcy5zaG9ydFRpbWUgPyBwaWNrZXIuY3VycmVudERhdGUuZm9ybWF0KFwiQVwiKSA6IFwiIFwifX08L2Rpdj4nICsgJyAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZHRwLWNsb3NlIHRleHQtcmlnaHRcIj4nICsgJyAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj1cIiNcIiBtZGMtZHRwLW5vY2xpY2sgbmctY2xpY2s9XCJwaWNrZXIuaGlkZSgpXCI+JnRpbWVzOzwvYT4nICsgJyAgICAgICAgICAgICAgICA8L2Rpdj4nICsgJyAgICAgICAgICAgIDwvaGVhZGVyPicgKyAnICAgICAgICAgICAgPGRpdiBjbGFzcz1cImR0cC1kYXRlXCIgbmctc2hvdz1cInBpY2tlci5wYXJhbXMuZGF0ZVwiPicgKyAnICAgICAgICAgICAgICAgIDxkaXYgbGF5b3V0PVwiY29sdW1uXCI+JyArICcgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJkdHAtYWN0dWFsLW1vbnRoXCI+e3twaWNrZXIuY3VycmVudERhdGUuZm9ybWF0KFwiTU1NXCIpIHwgdXBwZXJjYXNlfX08L2Rpdj4nICsgJyAgICAgICAgICAgICAgICA8L2Rpdj4nICsgJyAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZHRwLWFjdHVhbC1udW1cIj57e3BpY2tlci5jdXJyZW50RGF0ZS5mb3JtYXQoXCJERFwiKX19PC9kaXY+JyArICcgICAgICAgICAgICAgICAgPGRpdiBsYXlvdXQ9XCJyb3dcIj4nICsgJyA8ZGl2IG5nLWNsaWNrPVwicGlja2VyLmluY3JlbWVudFllYXIoLTEpXCIgY2xhc3M9XCJkdHAteWVhci1idG4gZHRwLXllYXItYnRuLXByZXZcIiBmbGV4PVwiMzBcIj48c3BhbiBuZy1pZj1cInBpY2tlci5pc1ByZXZpb3VzWWVhclZpc2libGUoKVwiID4mI3gyNUIyOzwvc3Bhbj48L2Rpdj4nICsgJyAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImR0cC1hY3R1YWwteWVhclwiIGZsZXg+e3twaWNrZXIuY3VycmVudERhdGUuZm9ybWF0KFwiWVlZWVwiKX19PC9kaXY+JyArICcgPGRpdiBuZy1jbGljaz1cInBpY2tlci5pbmNyZW1lbnRZZWFyKDEpXCIgY2xhc3M9XCJkdHAteWVhci1idG4gZHRwLXllYXItYnRuLW5leHRcIiBmbGV4PVwiMzBcIj48c3BhbiBuZy1pZj1cInBpY2tlci5pc05leHRZZWFyVmlzaWJsZSgpXCIgPiYjeDI1QkM7PC9zcGFuPjwvZGl2PicgKyAnICAgICAgICAgICAgICAgIDwvZGl2PicgKyAnICAgICAgICAgICAgPC9kaXY+JyAvL3N0YXJ0IHRpbWVcblx0ICArICcgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZHRwLXRpbWVcIiBuZy1zaG93PVwicGlja2VyLnBhcmFtcy50aW1lICYmICFwaWNrZXIucGFyYW1zLmRhdGVcIj4nICsgJyAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZHRwLWFjdHVhbC1tYXh0aW1lXCI+e3twaWNrZXIuY3VycmVudE5lYXJlc3Q1TWludXRlKCkuZm9ybWF0KHBpY2tlci5wYXJhbXMuc2hvcnRUaW1lID8gXCJoaDptbVwiIDogXCJISDptbVwiKX19PC9kaXY+JyArICcgICAgICAgICAgICA8L2Rpdj4nICsgJyAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJkdHAtcGlja2VyXCI+JyArICcgICAgICAgICAgICAgICAgPG1kYy1kYXRldGltZS1waWNrZXItY2FsZW5kYXIgZGF0ZT1cInBpY2tlci5jdXJyZW50RGF0ZVwiIHBpY2tlcj1cInBpY2tlclwiIGNsYXNzPVwiZHRwLXBpY2tlci1jYWxlbmRhclwiIG5nLXNob3c9XCJwaWNrZXIuY3VycmVudFZpZXcgPT09IHBpY2tlci5WSUVXUy5EQVRFXCI+PC9tZGMtZGF0ZXRpbWUtcGlja2VyLWNhbGVuZGFyPicgKyAnICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJkdHAtcGlja2VyLWRhdGV0aW1lXCIgbmctc2hvdz1cInBpY2tlci5jdXJyZW50VmlldyAhPT0gcGlja2VyLlZJRVdTLkRBVEVcIj4nICsgJyAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImR0cC1hY3R1YWwtbWVyaWRpZW5cIj4nICsgJyAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJsZWZ0IHAyMFwiPicgKyAnICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9XCIjXCIgbWRjLWR0cC1ub2NsaWNrIGNsYXNzPVwiZHRwLW1lcmlkaWVuLWFtXCIgbmctY2xhc3M9XCJ7c2VsZWN0ZWQ6IHBpY2tlci5tZXJpZGllbiA9PSBcXCdBTVxcJ31cIiBuZy1jbGljaz1cInBpY2tlci5zZWxlY3RBTSgpXCI+e3twaWNrZXIucGFyYW1zLmFtVGV4dH19PC9hPicgKyAnICAgICAgICAgICAgICAgICAgICAgICAgPC9kaXY+JyArICcgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IG5nLXNob3c9XCIhcGlja2VyLnRpbWVNb2RlXCIgY2xhc3M9XCJkdHAtYWN0dWFsLXRpbWUgcDYwXCI+e3twaWNrZXIuY3VycmVudE5lYXJlc3Q1TWludXRlKCkuZm9ybWF0KHBpY2tlci5wYXJhbXMuc2hvcnRUaW1lID8gXCJoaDptbVwiIDogXCJISDptbVwiKX19PC9kaXY+JyArICcgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwicmlnaHQgcDIwXCI+JyArICcgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj1cIiNcIiBtZGMtZHRwLW5vY2xpY2sgY2xhc3M9XCJkdHAtbWVyaWRpZW4tcG1cIiBuZy1jbGFzcz1cIntzZWxlY3RlZDogcGlja2VyLm1lcmlkaWVuID09IFxcJ1BNXFwnfVwiIG5nLWNsaWNrPVwicGlja2VyLnNlbGVjdFBNKClcIj57e3BpY2tlci5wYXJhbXMucG1UZXh0fX08L2E+JyArICcgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4nICsgJyAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJjbGVhcmZpeFwiPjwvZGl2PicgKyAnICAgICAgICAgICAgICAgICAgICA8L2Rpdj4nICsgJyAgICAgICAgICAgICAgICAgICAgPG1kYy1kYXRldGltZS1waWNrZXItY2xvY2sgbW9kZT1cImhvdXJzXCIgbmctaWY9XCJwaWNrZXIuY3VycmVudFZpZXcgPT09IHBpY2tlci5WSUVXUy5IT1VSXCI+PC9tZGMtZGF0ZXRpbWUtcGlja2VyLWNsb2NrPicgKyAnICAgICAgICAgICAgICAgICAgICA8bWRjLWRhdGV0aW1lLXBpY2tlci1jbG9jayBtb2RlPVwibWludXRlc1wiIG5nLWlmPVwicGlja2VyLmN1cnJlbnRWaWV3ID09PSBwaWNrZXIuVklFV1MuTUlOVVRFXCI+PC9tZGMtZGF0ZXRpbWUtcGlja2VyLWNsb2NrPicgKyAnICAgICAgICAgICAgICAgIDwvZGl2PicgKyAnICAgICAgICAgICAgPC9kaXY+JyArICcgICAgICAgIDwvZGl2PicgKyAnICAgIDwvbWQtZGlhbG9nLWNvbnRlbnQ+JyArICcgICAgPG1kLWRpYWxvZy1hY3Rpb25zIGNsYXNzPVwiZHRwLWJ1dHRvbnNcIj4nICsgJyAgICAgICAgICAgIDxtZC1idXR0b24gY2xhc3M9XCJkdHAtYnRuLWNhbmNlbCBtZC1idXR0b25cIiBuZy1jbGljaz1cInBpY2tlci5jYW5jZWwoKVwiPiB7e3BpY2tlci5wYXJhbXMuY2FuY2VsVGV4dH19PC9tZC1idXR0b24+JyArICcgICAgICAgICAgICA8bWQtYnV0dG9uIGNsYXNzPVwiZHRwLWJ0bi1vayBtZC1idXR0b25cIiBuZy1jbGljaz1cInBpY2tlci5vaygpXCI+IHt7cGlja2VyLnBhcmFtcy5va1RleHR9fTwvbWQtYnV0dG9uPicgKyAnICAgICAgPC9tZC1kaWFsb2ctYWN0aW9ucz4nICsgJzwvbWQtZGlhbG9nPic7XG5cdFxuXHQgIGFuZ3VsYXIubW9kdWxlKG1vZHVsZU5hbWUsIFsnbmdNYXRlcmlhbCddKS5wcm92aWRlcignbWRjRGF0ZXRpbWVQaWNrZXJEZWZhdWx0TG9jYWxlJywgZnVuY3Rpb24gKCkge1xuXHQgICAgdGhpcy5sb2NhbGUgPSAnZW4nO1xuXHRcblx0ICAgIHRoaXMuJGdldCA9IGZ1bmN0aW9uICgpIHtcblx0ICAgICAgcmV0dXJuIHRoaXMubG9jYWxlO1xuXHQgICAgfTtcblx0XG5cdCAgICB0aGlzLnNldERlZmF1bHRMb2NhbGUgPSBmdW5jdGlvbiAobG9jYWxlU3RyaW5nKSB7XG5cdCAgICAgIHRoaXMubG9jYWxlID0gbG9jYWxlU3RyaW5nO1xuXHQgICAgfTtcblx0ICB9KS5kaXJlY3RpdmUoJ21kY0RhdGV0aW1lUGlja2VyJywgWyckbWREaWFsb2cnLCBmdW5jdGlvbiAoJG1kRGlhbG9nKSB7XG5cdFxuXHQgICAgcmV0dXJuIHtcblx0ICAgICAgcmVzdHJpY3Q6ICdBJyxcblx0ICAgICAgcmVxdWlyZTogJ25nTW9kZWwnLFxuXHQgICAgICBzY29wZToge1xuXHQgICAgICAgIGN1cnJlbnREYXRlOiAnPW5nTW9kZWwnLFxuXHQgICAgICAgIHRpbWU6ICc9Jyxcblx0ICAgICAgICBkYXRlOiAnPScsXG5cdCAgICAgICAgbWluRGF0ZTogJz0nLFxuXHQgICAgICAgIG1heERhdGU6ICc9Jyxcblx0ICAgICAgICBzaG9ydFRpbWU6ICc9Jyxcblx0ICAgICAgICBmb3JtYXQ6ICdAJyxcblx0ICAgICAgICBjYW5jZWxUZXh0OiAnQCcsXG5cdCAgICAgICAgb2tUZXh0OiAnQCcsXG5cdCAgICAgICAgbGFuZzogJ0AnLFxuXHQgICAgICAgIGFtVGV4dDogJ0AnLFxuXHQgICAgICAgIHBtVGV4dDogJ0AnXG5cdCAgICAgIH0sXG5cdCAgICAgIGxpbms6IGZ1bmN0aW9uIGxpbmsoc2NvcGUsIGVsZW1lbnQsIGF0dHJzLCBuZ01vZGVsKSB7XG5cdCAgICAgICAgdmFyIGlzT24gPSBmYWxzZTtcblx0ICAgICAgICBpZiAoIXNjb3BlLmZvcm1hdCkge1xuXHQgICAgICAgICAgaWYgKHNjb3BlLmRhdGUgJiYgc2NvcGUudGltZSkge1xuXHQgICAgICAgICAgICBzY29wZS5mb3JtYXQgPSAnWVlZWS1NTS1ERCBISDptbTpzcyc7XG5cdCAgICAgICAgICB9IGVsc2UgaWYgKHNjb3BlLmRhdGUpIHtcblx0ICAgICAgICAgICAgc2NvcGUuZm9ybWF0ID0gJ1lZWVktTU0tREQnO1xuXHQgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgc2NvcGUuZm9ybWF0ID0gJ0hIOm1tJztcblx0ICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdFxuXHQgICAgICAgIGlmIChhbmd1bGFyLmlzU3RyaW5nKHNjb3BlLmN1cnJlbnREYXRlKSAmJiBzY29wZS5jdXJyZW50RGF0ZSAhPT0gJycpIHtcblx0ICAgICAgICAgIHNjb3BlLmN1cnJlbnREYXRlID0gbW9tZW50KHNjb3BlLmN1cnJlbnREYXRlLCBzY29wZS5mb3JtYXQpO1xuXHQgICAgICAgIH1cblx0XG5cdCAgICAgICAgaWYgKG5nTW9kZWwpIHtcblx0ICAgICAgICAgIG5nTW9kZWwuJGZvcm1hdHRlcnMucHVzaChmdW5jdGlvbiAodmFsdWUpIHtcblx0ICAgICAgICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCcpIHtcblx0ICAgICAgICAgICAgICByZXR1cm47XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgdmFyIG0gPSBtb21lbnQodmFsdWUpO1xuXHQgICAgICAgICAgICByZXR1cm4gbS5pc1ZhbGlkKCkgPyBtLmZvcm1hdChzY29wZS5mb3JtYXQpIDogJyc7XG5cdCAgICAgICAgICB9KTtcblx0ICAgICAgICB9XG5cdFxuXHQgICAgICAgIGVsZW1lbnQuYXR0cigncmVhZG9ubHknLCAnJyk7XG5cdCAgICAgICAgLy9AVE9ETyBjdXN0b20gZXZlbnQgdG8gdHJpZ2dlciBpbnB1dFxuXHQgICAgICAgIGVsZW1lbnQub24oJ2ZvY3VzJywgZnVuY3Rpb24gKGUpIHtcblx0ICAgICAgICAgIGUucHJldmVudERlZmF1bHQoKTtcblx0ICAgICAgICAgIGVsZW1lbnQuYmx1cigpO1xuXHQgICAgICAgICAgaWYgKGlzT24pIHtcblx0ICAgICAgICAgICAgcmV0dXJuO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgICAgaXNPbiA9IHRydWU7XG5cdCAgICAgICAgICB2YXIgb3B0aW9ucyA9IHt9O1xuXHQgICAgICAgICAgZm9yICh2YXIgaSBpbiBhdHRycykge1xuXHQgICAgICAgICAgICBpZiAoc2NvcGUuaGFzT3duUHJvcGVydHkoaSkgJiYgIWFuZ3VsYXIuaXNVbmRlZmluZWQoc2NvcGVbaV0pKSB7XG5cdCAgICAgICAgICAgICAgb3B0aW9uc1tpXSA9IHNjb3BlW2ldO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgICBvcHRpb25zLmN1cnJlbnREYXRlID0gc2NvcGUuY3VycmVudERhdGU7XG5cdCAgICAgICAgICB2YXIgbG9jYWxzID0geyBvcHRpb25zOiBvcHRpb25zIH07XG5cdCAgICAgICAgICAkbWREaWFsb2cuc2hvdyh7XG5cdCAgICAgICAgICAgIHRlbXBsYXRlOiB0ZW1wbGF0ZSxcblx0ICAgICAgICAgICAgY29udHJvbGxlcjogUGx1Z2luQ29udHJvbGxlcixcblx0ICAgICAgICAgICAgY29udHJvbGxlckFzOiAncGlja2VyJyxcblx0ICAgICAgICAgICAgbG9jYWxzOiBsb2NhbHMsXG5cdCAgICAgICAgICAgIG9wZW5Gcm9tOiBlbGVtZW50LFxuXHQgICAgICAgICAgICBwYXJlbnQ6IGFuZ3VsYXIuZWxlbWVudChkb2N1bWVudC5ib2R5KSxcblx0ICAgICAgICAgICAgYmluZFRvQ29udHJvbGxlcjogdHJ1ZSxcblx0ICAgICAgICAgICAgZGlzYWJsZVBhcmVudFNjcm9sbDogZmFsc2Vcblx0ICAgICAgICAgIH0pLnRoZW4oZnVuY3Rpb24gKHYpIHtcblx0ICAgICAgICAgICAgc2NvcGUuY3VycmVudERhdGUgPSB2ID8gdi5fZCA6IHY7XG5cdCAgICAgICAgICAgIGlzT24gPSBmYWxzZTtcblx0ICAgICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgICAgaXNPbiA9IGZhbHNlO1xuXHQgICAgICAgICAgfSk7XG5cdCAgICAgICAgfSk7XG5cdCAgICAgIH1cblx0ICAgIH07XG5cdCAgfV0pO1xuXHRcblx0ICB2YXIgUGx1Z2luQ29udHJvbGxlciA9IGZ1bmN0aW9uIFBsdWdpbkNvbnRyb2xsZXIoJHNjb3BlLCAkbWREaWFsb2csIG1kY0RhdGV0aW1lUGlja2VyRGVmYXVsdExvY2FsZSkge1xuXHQgICAgdGhpcy5jdXJyZW50VmlldyA9IFZJRVdfU1RBVEVTLkRBVEU7XG5cdCAgICB0aGlzLl9kaWFsb2cgPSAkbWREaWFsb2c7XG5cdFxuXHQgICAgdGhpcy5taW5EYXRlO1xuXHQgICAgdGhpcy5tYXhEYXRlO1xuXHRcblx0ICAgIHRoaXMuX2F0dGFjaGVkRXZlbnRzID0gW107XG5cdCAgICB0aGlzLlZJRVdTID0gVklFV19TVEFURVM7XG5cdFxuXHQgICAgdGhpcy5wYXJhbXMgPSB7XG5cdCAgICAgIGRhdGU6IHRydWUsXG5cdCAgICAgIHRpbWU6IHRydWUsXG5cdCAgICAgIGZvcm1hdDogJ1lZWVktTU0tREQnLFxuXHQgICAgICBtaW5EYXRlOiBudWxsLFxuXHQgICAgICBtYXhEYXRlOiBudWxsLFxuXHQgICAgICBjdXJyZW50RGF0ZTogbnVsbCxcblx0ICAgICAgbGFuZzogbWRjRGF0ZXRpbWVQaWNrZXJEZWZhdWx0TG9jYWxlLFxuXHQgICAgICB3ZWVrU3RhcnQ6IDAsXG5cdCAgICAgIHNob3J0VGltZTogZmFsc2UsXG5cdCAgICAgIGNhbmNlbFRleHQ6ICdDYW5jZWwnLFxuXHQgICAgICBva1RleHQ6ICdPSycsXG5cdCAgICAgIGFtVGV4dDogJ0FNJyxcblx0ICAgICAgcG1UZXh0OiAnUE0nXG5cdCAgICB9O1xuXHRcblx0ICAgIHRoaXMubWVyaWRpZW4gPSAnQU0nO1xuXHQgICAgdGhpcy5wYXJhbXMgPSBhbmd1bGFyLmV4dGVuZCh0aGlzLnBhcmFtcywgdGhpcy5vcHRpb25zKTtcblx0ICAgIHRoaXMuaW5pdCgpO1xuXHQgIH07XG5cdCAgUGx1Z2luQ29udHJvbGxlci4kaW5qZWN0ID0gWyckc2NvcGUnLCAnJG1kRGlhbG9nJywgJ21kY0RhdGV0aW1lUGlja2VyRGVmYXVsdExvY2FsZSddO1xuXHQgIFBsdWdpbkNvbnRyb2xsZXIucHJvdG90eXBlID0ge1xuXHQgICAgaW5pdDogZnVuY3Rpb24gaW5pdCgpIHtcblx0ICAgICAgdGhpcy50aW1lTW9kZSA9IHRoaXMucGFyYW1zLnRpbWUgJiYgIXRoaXMucGFyYW1zLmRhdGU7XG5cdCAgICAgIHRoaXMuZGF0ZU1vZGUgPSB0aGlzLnBhcmFtcy5kYXRlO1xuXHQgICAgICB0aGlzLmluaXREYXRlcygpO1xuXHQgICAgICB0aGlzLnN0YXJ0KCk7XG5cdCAgICB9LFxuXHQgICAgY3VycmVudE5lYXJlc3Q1TWludXRlOiBmdW5jdGlvbiBjdXJyZW50TmVhcmVzdDVNaW51dGUoKSB7XG5cdCAgICAgIHZhciBkYXRlID0gdGhpcy5jdXJyZW50RGF0ZSB8fCBtb21lbnQoKTtcblx0ICAgICAgdmFyIG1pbnV0ZXMgPSA1ICogTWF0aC5yb3VuZChkYXRlLm1pbnV0ZSgpIC8gNSk7XG5cdCAgICAgIGlmIChtaW51dGVzID49IDYwKSB7XG5cdCAgICAgICAgbWludXRlcyA9IDU1OyAvL2Fsd2F5cyBwdXNoIGRvd25cblx0ICAgICAgfVxuXHQgICAgICByZXR1cm4gbW9tZW50KGRhdGUpLm1pbnV0ZXMobWludXRlcyk7XG5cdCAgICB9LFxuXHQgICAgaW5pdERhdGVzOiBmdW5jdGlvbiBpbml0RGF0ZXMoKSB7XG5cdCAgICAgIHZhciB0aGF0ID0gdGhpcztcblx0ICAgICAgdmFyIF9kYXRlUGFyYW0gPSBmdW5jdGlvbiBfZGF0ZVBhcmFtKGlucHV0LCBmYWxsYmFjaykge1xuXHQgICAgICAgIHZhciByZXQgPSBudWxsO1xuXHQgICAgICAgIGlmIChhbmd1bGFyLmlzRGVmaW5lZChpbnB1dCkgJiYgaW5wdXQgIT09IG51bGwgJiYgaW5wdXQgIT09ICcnKSB7XG5cdCAgICAgICAgICBpZiAoYW5ndWxhci5pc1N0cmluZyhpbnB1dCkpIHtcblx0ICAgICAgICAgICAgaWYgKHR5cGVvZiB0aGF0LnBhcmFtcy5mb3JtYXQgIT09ICd1bmRlZmluZWQnICYmIHRoYXQucGFyYW1zLmZvcm1hdCAhPT0gbnVsbCkge1xuXHQgICAgICAgICAgICAgIHJldCA9IG1vbWVudChpbnB1dCwgdGhhdC5wYXJhbXMuZm9ybWF0KS5sb2NhbGUodGhhdC5wYXJhbXMubGFuZyk7XG5cdCAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgcmV0ID0gbW9tZW50KGlucHV0KS5sb2NhbGUodGhhdC5wYXJhbXMubGFuZyk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgIGlmIChhbmd1bGFyLmlzRGF0ZShpbnB1dCkpIHtcblx0ICAgICAgICAgICAgICB2YXIgeCA9IGlucHV0LmdldFRpbWUoKTtcblx0ICAgICAgICAgICAgICByZXQgPSBtb21lbnQoeCwgXCJ4XCIpLmxvY2FsZSh0aGF0LnBhcmFtcy5sYW5nKTtcblx0ICAgICAgICAgICAgfSBlbHNlIGlmIChpbnB1dC5faXNBTW9tZW50T2JqZWN0KSB7XG5cdCAgICAgICAgICAgICAgcmV0ID0gaW5wdXQ7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgIH1cblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgcmV0ID0gZmFsbGJhY2s7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHJldHVybiByZXQ7XG5cdCAgICAgIH07XG5cdFxuXHQgICAgICB0aGlzLmN1cnJlbnREYXRlID0gX2RhdGVQYXJhbSh0aGlzLnBhcmFtcy5jdXJyZW50RGF0ZSwgbW9tZW50KCkpO1xuXHQgICAgICB0aGlzLm1pbkRhdGUgPSBfZGF0ZVBhcmFtKHRoaXMucGFyYW1zLm1pbkRhdGUpO1xuXHQgICAgICB0aGlzLm1heERhdGUgPSBfZGF0ZVBhcmFtKHRoaXMucGFyYW1zLm1heERhdGUpO1xuXHQgICAgICB0aGlzLnNlbGVjdERhdGUodGhpcy5jdXJyZW50RGF0ZSk7XG5cdCAgICB9LFxuXHQgICAgaW5pdERhdGU6IGZ1bmN0aW9uIGluaXREYXRlKGQpIHtcblx0ICAgICAgdGhpcy5jdXJyZW50VmlldyA9IFZJRVdfU1RBVEVTLkRBVEU7XG5cdCAgICB9LFxuXHQgICAgaW5pdEhvdXJzOiBmdW5jdGlvbiBpbml0SG91cnMoKSB7XG5cdCAgICAgIHRoaXMuY3VycmVudFZpZXcgPSBWSUVXX1NUQVRFUy5IT1VSO1xuXHQgICAgfSxcblx0ICAgIGluaXRNaW51dGVzOiBmdW5jdGlvbiBpbml0TWludXRlcygpIHtcblx0ICAgICAgdGhpcy5jdXJyZW50VmlldyA9IFZJRVdfU1RBVEVTLk1JTlVURTtcblx0ICAgIH0sXG5cdCAgICBpc0FmdGVyTWluRGF0ZTogZnVuY3Rpb24gaXNBZnRlck1pbkRhdGUoZGF0ZSwgY2hlY2tIb3VyLCBjaGVja01pbnV0ZSkge1xuXHQgICAgICB2YXIgX3JldHVybiA9IHRydWU7XG5cdFxuXHQgICAgICBpZiAodHlwZW9mIHRoaXMubWluRGF0ZSAhPT0gJ3VuZGVmaW5lZCcgJiYgdGhpcy5taW5EYXRlICE9PSBudWxsKSB7XG5cdCAgICAgICAgdmFyIF9taW5EYXRlID0gbW9tZW50KHRoaXMubWluRGF0ZSk7XG5cdCAgICAgICAgdmFyIF9kYXRlID0gbW9tZW50KGRhdGUpO1xuXHRcblx0ICAgICAgICBpZiAoIWNoZWNrSG91ciAmJiAhY2hlY2tNaW51dGUpIHtcblx0ICAgICAgICAgIF9taW5EYXRlLmhvdXIoMCk7XG5cdCAgICAgICAgICBfbWluRGF0ZS5taW51dGUoMCk7XG5cdFxuXHQgICAgICAgICAgX2RhdGUuaG91cigwKTtcblx0ICAgICAgICAgIF9kYXRlLm1pbnV0ZSgwKTtcblx0ICAgICAgICB9XG5cdFxuXHQgICAgICAgIF9taW5EYXRlLnNlY29uZCgwKTtcblx0ICAgICAgICBfZGF0ZS5zZWNvbmQoMCk7XG5cdCAgICAgICAgX21pbkRhdGUubWlsbGlzZWNvbmQoMCk7XG5cdCAgICAgICAgX2RhdGUubWlsbGlzZWNvbmQoMCk7XG5cdFxuXHQgICAgICAgIGlmICghY2hlY2tNaW51dGUpIHtcblx0ICAgICAgICAgIF9kYXRlLm1pbnV0ZSgwKTtcblx0ICAgICAgICAgIF9taW5EYXRlLm1pbnV0ZSgwKTtcblx0XG5cdCAgICAgICAgICBfcmV0dXJuID0gcGFyc2VJbnQoX2RhdGUuZm9ybWF0KFwiWFwiKSkgPj0gcGFyc2VJbnQoX21pbkRhdGUuZm9ybWF0KFwiWFwiKSk7XG5cdCAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgIF9yZXR1cm4gPSBwYXJzZUludChfZGF0ZS5mb3JtYXQoXCJYXCIpKSA+PSBwYXJzZUludChfbWluRGF0ZS5mb3JtYXQoXCJYXCIpKTtcblx0ICAgICAgICB9XG5cdCAgICAgIH1cblx0XG5cdCAgICAgIHJldHVybiBfcmV0dXJuO1xuXHQgICAgfSxcblx0ICAgIGlzQmVmb3JlTWF4RGF0ZTogZnVuY3Rpb24gaXNCZWZvcmVNYXhEYXRlKGRhdGUsIGNoZWNrVGltZSwgY2hlY2tNaW51dGUpIHtcblx0ICAgICAgdmFyIF9yZXR1cm4gPSB0cnVlO1xuXHRcblx0ICAgICAgaWYgKHR5cGVvZiB0aGlzLm1heERhdGUgIT09ICd1bmRlZmluZWQnICYmIHRoaXMubWF4RGF0ZSAhPT0gbnVsbCkge1xuXHQgICAgICAgIHZhciBfbWF4RGF0ZSA9IG1vbWVudCh0aGlzLm1heERhdGUpO1xuXHQgICAgICAgIHZhciBfZGF0ZSA9IG1vbWVudChkYXRlKTtcblx0XG5cdCAgICAgICAgaWYgKCFjaGVja1RpbWUgJiYgIWNoZWNrTWludXRlKSB7XG5cdCAgICAgICAgICBfbWF4RGF0ZS5ob3VyKDApO1xuXHQgICAgICAgICAgX21heERhdGUubWludXRlKDApO1xuXHRcblx0ICAgICAgICAgIF9kYXRlLmhvdXIoMCk7XG5cdCAgICAgICAgICBfZGF0ZS5taW51dGUoMCk7XG5cdCAgICAgICAgfVxuXHRcblx0ICAgICAgICBfbWF4RGF0ZS5zZWNvbmQoMCk7XG5cdCAgICAgICAgX2RhdGUuc2Vjb25kKDApO1xuXHQgICAgICAgIF9tYXhEYXRlLm1pbGxpc2Vjb25kKDApO1xuXHQgICAgICAgIF9kYXRlLm1pbGxpc2Vjb25kKDApO1xuXHRcblx0ICAgICAgICBpZiAoIWNoZWNrTWludXRlKSB7XG5cdCAgICAgICAgICBfZGF0ZS5taW51dGUoMCk7XG5cdCAgICAgICAgICBfbWF4RGF0ZS5taW51dGUoMCk7XG5cdFxuXHQgICAgICAgICAgX3JldHVybiA9IHBhcnNlSW50KF9kYXRlLmZvcm1hdChcIlhcIikpIDw9IHBhcnNlSW50KF9tYXhEYXRlLmZvcm1hdChcIlhcIikpO1xuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICBfcmV0dXJuID0gcGFyc2VJbnQoX2RhdGUuZm9ybWF0KFwiWFwiKSkgPD0gcGFyc2VJbnQoX21heERhdGUuZm9ybWF0KFwiWFwiKSk7XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdFxuXHQgICAgICByZXR1cm4gX3JldHVybjtcblx0ICAgIH0sXG5cdCAgICBzZWxlY3REYXRlOiBmdW5jdGlvbiBzZWxlY3REYXRlKGRhdGUpIHtcblx0ICAgICAgaWYgKGRhdGUpIHtcblx0ICAgICAgICB0aGlzLmN1cnJlbnREYXRlID0gbW9tZW50KGRhdGUpO1xuXHQgICAgICAgIGlmICghdGhpcy5pc0FmdGVyTWluRGF0ZSh0aGlzLmN1cnJlbnREYXRlKSkge1xuXHQgICAgICAgICAgdGhpcy5jdXJyZW50RGF0ZSA9IG1vbWVudCh0aGlzLm1pbkRhdGUpO1xuXHQgICAgICAgIH1cblx0XG5cdCAgICAgICAgaWYgKCF0aGlzLmlzQmVmb3JlTWF4RGF0ZSh0aGlzLmN1cnJlbnREYXRlKSkge1xuXHQgICAgICAgICAgdGhpcy5jdXJyZW50RGF0ZSA9IG1vbWVudCh0aGlzLm1heERhdGUpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICB0aGlzLmN1cnJlbnREYXRlLmxvY2FsZSh0aGlzLnBhcmFtcy5sYW5nKTtcblx0ICAgICAgICB0aGlzLmNhbGVuZGFyU3RhcnQgPSBtb21lbnQodGhpcy5jdXJyZW50RGF0ZSk7XG5cdCAgICAgICAgdGhpcy5tZXJpZGllbiA9IHRoaXMuY3VycmVudERhdGUuaG91cigpID49IDEyID8gJ1BNJyA6ICdBTSc7XG5cdCAgICAgIH1cblx0ICAgIH0sXG5cdCAgICBzZXROYW1lOiBmdW5jdGlvbiBzZXROYW1lKCkge1xuXHQgICAgICB2YXIgdGV4dCA9IFwiXCI7XG5cdCAgICAgIHZhciBwb3NzaWJsZSA9IFwiQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODlcIjtcblx0XG5cdCAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgNTsgaSsrKSB7XG5cdCAgICAgICAgdGV4dCArPSBwb3NzaWJsZS5jaGFyQXQoTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogcG9zc2libGUubGVuZ3RoKSk7XG5cdCAgICAgIH1cblx0XG5cdCAgICAgIHJldHVybiB0ZXh0O1xuXHQgICAgfSxcblx0ICAgIGlzUE06IGZ1bmN0aW9uIGlzUE0oKSB7XG5cdCAgICAgIHJldHVybiB0aGlzLm1lcmlkaWVuID09PSAnUE0nO1xuXHQgICAgfSxcblx0ICAgIGluY3JlbWVudFllYXI6IGZ1bmN0aW9uIGluY3JlbWVudFllYXIoYW1vdW50KSB7XG5cdCAgICAgIGlmIChhbW91bnQgPT09IDEgJiYgdGhpcy5pc05leHRZZWFyVmlzaWJsZSgpKSB7XG5cdCAgICAgICAgdGhpcy5zZWxlY3REYXRlKHRoaXMuY3VycmVudERhdGUuYWRkKCd5ZWFyJywgYW1vdW50KSk7XG5cdCAgICAgIH1cblx0XG5cdCAgICAgIGlmIChhbW91bnQgPT09IC0xICYmIHRoaXMuaXNQcmV2aW91c1llYXJWaXNpYmxlKCkpIHtcblx0ICAgICAgICB0aGlzLnNlbGVjdERhdGUodGhpcy5jdXJyZW50RGF0ZS5hZGQoJ3llYXInLCBhbW91bnQpKTtcblx0ICAgICAgfVxuXHQgICAgfSxcblx0ICAgIGlzUHJldmlvdXNNb250aFZpc2libGU6IGZ1bmN0aW9uIGlzUHJldmlvdXNNb250aFZpc2libGUoKSB7XG5cdCAgICAgIHJldHVybiB0aGlzLmNhbGVuZGFyU3RhcnQgJiYgdGhpcy5pc0FmdGVyTWluRGF0ZShtb21lbnQodGhpcy5jYWxlbmRhclN0YXJ0KS5zdGFydE9mKCdtb250aCcpLCBmYWxzZSwgZmFsc2UpO1xuXHQgICAgfSxcblx0ICAgIGlzTmV4dE1vbnRoVmlzaWJsZTogZnVuY3Rpb24gaXNOZXh0TW9udGhWaXNpYmxlKCkge1xuXHQgICAgICByZXR1cm4gdGhpcy5jYWxlbmRhclN0YXJ0ICYmIHRoaXMuaXNCZWZvcmVNYXhEYXRlKG1vbWVudCh0aGlzLmNhbGVuZGFyU3RhcnQpLmVuZE9mKCdtb250aCcpLCBmYWxzZSwgZmFsc2UpO1xuXHQgICAgfSxcblx0ICAgIGlzUHJldmlvdXNZZWFyVmlzaWJsZTogZnVuY3Rpb24gaXNQcmV2aW91c1llYXJWaXNpYmxlKCkge1xuXHQgICAgICByZXR1cm4gdGhpcy5jYWxlbmRhclN0YXJ0ICYmIHRoaXMuaXNBZnRlck1pbkRhdGUobW9tZW50KHRoaXMuY2FsZW5kYXJTdGFydCkuc3RhcnRPZigneWVhcicpLCBmYWxzZSwgZmFsc2UpO1xuXHQgICAgfSxcblx0ICAgIGlzTmV4dFllYXJWaXNpYmxlOiBmdW5jdGlvbiBpc05leHRZZWFyVmlzaWJsZSgpIHtcblx0ICAgICAgcmV0dXJuIHRoaXMuY2FsZW5kYXJTdGFydCAmJiB0aGlzLmlzQmVmb3JlTWF4RGF0ZShtb21lbnQodGhpcy5jYWxlbmRhclN0YXJ0KS5lbmRPZigneWVhcicpLCBmYWxzZSwgZmFsc2UpO1xuXHQgICAgfSxcblx0ICAgIGlzSG91ckF2YWlsYWJsZTogZnVuY3Rpb24gaXNIb3VyQXZhaWxhYmxlKGhvdXIpIHtcblx0ICAgICAgdmFyIF9kYXRlID0gbW9tZW50KHRoaXMuY3VycmVudERhdGUpO1xuXHQgICAgICBfZGF0ZS5ob3VyKHRoaXMuY29udmVydEhvdXJzKGhvdXIpKS5taW51dGUoMCkuc2Vjb25kKDApO1xuXHQgICAgICByZXR1cm4gdGhpcy5pc0FmdGVyTWluRGF0ZShfZGF0ZSwgdHJ1ZSwgZmFsc2UpICYmIHRoaXMuaXNCZWZvcmVNYXhEYXRlKF9kYXRlLCB0cnVlLCBmYWxzZSk7XG5cdCAgICB9LFxuXHQgICAgaXNNaW51dGVBdmFpbGFibGU6IGZ1bmN0aW9uIGlzTWludXRlQXZhaWxhYmxlKG1pbnV0ZSkge1xuXHQgICAgICB2YXIgX2RhdGUgPSBtb21lbnQodGhpcy5jdXJyZW50RGF0ZSk7XG5cdCAgICAgIF9kYXRlLm1pbnV0ZShtaW51dGUpLnNlY29uZCgwKTtcblx0ICAgICAgcmV0dXJuIHRoaXMuaXNBZnRlck1pbkRhdGUoX2RhdGUsIHRydWUsIHRydWUpICYmIHRoaXMuaXNCZWZvcmVNYXhEYXRlKF9kYXRlLCB0cnVlLCB0cnVlKTtcblx0ICAgIH0sXG5cdCAgICBzdGFydDogZnVuY3Rpb24gc3RhcnQoKSB7XG5cdCAgICAgIHRoaXMuY3VycmVudFZpZXcgPSBWSUVXX1NUQVRFUy5EQVRFO1xuXHQgICAgICAvL3RoaXMuaW5pdERhdGVzKCk7XG5cdCAgICAgIGlmICh0aGlzLnBhcmFtcy5kYXRlKSB7XG5cdCAgICAgICAgdGhpcy5pbml0RGF0ZSgpO1xuXHQgICAgICB9IGVsc2Uge1xuXHQgICAgICAgIGlmICh0aGlzLnBhcmFtcy50aW1lKSB7XG5cdCAgICAgICAgICB0aGlzLmluaXRIb3VycygpO1xuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXHQgICAgfSxcblx0ICAgIG9rOiBmdW5jdGlvbiBvaygpIHtcblx0ICAgICAgc3dpdGNoICh0aGlzLmN1cnJlbnRWaWV3KSB7XG5cdCAgICAgICAgY2FzZSBWSUVXX1NUQVRFUy5EQVRFOlxuXHQgICAgICAgICAgaWYgKHRoaXMucGFyYW1zLnRpbWUgPT09IHRydWUpIHtcblx0ICAgICAgICAgICAgdGhpcy5pbml0SG91cnMoKTtcblx0ICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgIHRoaXMuaGlkZSh0cnVlKTtcblx0ICAgICAgICAgIH1cblx0ICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgIGNhc2UgVklFV19TVEFURVMuSE9VUjpcblx0ICAgICAgICAgIHRoaXMuaW5pdE1pbnV0ZXMoKTtcblx0ICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgIGNhc2UgVklFV19TVEFURVMuTUlOVVRFOlxuXHQgICAgICAgICAgdGhpcy5oaWRlKHRydWUpO1xuXHQgICAgICAgICAgYnJlYWs7XG5cdCAgICAgIH1cblx0ICAgIH0sXG5cdCAgICBjYW5jZWw6IGZ1bmN0aW9uIGNhbmNlbCgpIHtcblx0ICAgICAgaWYgKHRoaXMucGFyYW1zLnRpbWUpIHtcblx0ICAgICAgICBzd2l0Y2ggKHRoaXMuY3VycmVudFZpZXcpIHtcblx0ICAgICAgICAgIGNhc2UgVklFV19TVEFURVMuREFURTpcblx0ICAgICAgICAgICAgdGhpcy5oaWRlKCk7XG5cdCAgICAgICAgICAgIGJyZWFrO1xuXHQgICAgICAgICAgY2FzZSBWSUVXX1NUQVRFUy5IT1VSOlxuXHQgICAgICAgICAgICBpZiAodGhpcy5wYXJhbXMuZGF0ZSkge1xuXHQgICAgICAgICAgICAgIHRoaXMuaW5pdERhdGUoKTtcblx0ICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICB0aGlzLmhpZGUoKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICAgIGNhc2UgVklFV19TVEFURVMuTUlOVVRFOlxuXHQgICAgICAgICAgICB0aGlzLmluaXRIb3VycygpO1xuXHQgICAgICAgICAgICBicmVhaztcblx0ICAgICAgICB9XG5cdCAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgdGhpcy5oaWRlKCk7XG5cdCAgICAgIH1cblx0ICAgIH0sXG5cdCAgICBzZWxlY3RNb250aEJlZm9yZTogZnVuY3Rpb24gc2VsZWN0TW9udGhCZWZvcmUoKSB7XG5cdCAgICAgIHRoaXMuY2FsZW5kYXJTdGFydC5zdWJ0cmFjdCgxLCAnbW9udGhzJyk7XG5cdCAgICB9LFxuXHQgICAgc2VsZWN0TW9udGhBZnRlcjogZnVuY3Rpb24gc2VsZWN0TW9udGhBZnRlcigpIHtcblx0ICAgICAgdGhpcy5jYWxlbmRhclN0YXJ0LmFkZCgxLCAnbW9udGhzJyk7XG5cdCAgICB9LFxuXHQgICAgc2VsZWN0WWVhckJlZm9yZTogZnVuY3Rpb24gc2VsZWN0WWVhckJlZm9yZSgpIHtcblx0ICAgICAgdGhpcy5jYWxlbmRhclN0YXJ0LnN1YnRyYWN0KDEsICd5ZWFycycpO1xuXHQgICAgfSxcblx0ICAgIHNlbGVjdFllYXJBZnRlcjogZnVuY3Rpb24gc2VsZWN0WWVhckFmdGVyKCkge1xuXHQgICAgICB0aGlzLmNhbGVuZGFyU3RhcnQuYWRkKDEsICd5ZWFycycpO1xuXHQgICAgfSxcblx0ICAgIHNlbGVjdEFNOiBmdW5jdGlvbiBzZWxlY3RBTSgpIHtcblx0ICAgICAgaWYgKHRoaXMuaXNIb3VyQXZhaWxhYmxlKDApIHx8IHRoaXMuaXNIb3VyQXZhaWxhYmxlKDEyKSkge1xuXHQgICAgICAgIGlmICh0aGlzLmN1cnJlbnREYXRlLmhvdXIoKSA+PSAxMikge1xuXHQgICAgICAgICAgdGhpcy5zZWxlY3REYXRlKHRoaXMuY3VycmVudERhdGUuc3VidHJhY3QoMTIsICdob3VycycpKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgaWYgKCF0aGlzLmlzSG91ckF2YWlsYWJsZSh0aGlzLmN1cnJlbnREYXRlLmhvdXIoKSkpIHtcblx0ICAgICAgICAgIHRoaXMuc2VsZWN0RGF0ZSh0aGlzLmN1cnJlbnREYXRlLmhvdXIodGhpcy5taW5EYXRlLmhvdXIoKSkpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBpZiAoIXRoaXMuaXNNaW51dGVBdmFpbGFibGUodGhpcy5jdXJyZW50RGF0ZS5taW51dGUoKSkpIHtcblx0ICAgICAgICAgIHRoaXMuc2VsZWN0RGF0ZSh0aGlzLmN1cnJlbnREYXRlLm1pbnV0ZSh0aGlzLm1pbkRhdGUubWludXRlKCkpKTtcblx0ICAgICAgICB9XG5cdCAgICAgIH1cblx0ICAgIH0sXG5cdCAgICBzZWxlY3RQTTogZnVuY3Rpb24gc2VsZWN0UE0oKSB7XG5cdCAgICAgIGlmICh0aGlzLmlzSG91ckF2YWlsYWJsZSgxMykgfHwgdGhpcy5pc0hvdXJBdmFpbGFibGUoMjQpKSB7XG5cdCAgICAgICAgaWYgKHRoaXMuY3VycmVudERhdGUuaG91cigpIDwgMTIpIHtcblx0ICAgICAgICAgIHRoaXMuc2VsZWN0RGF0ZSh0aGlzLmN1cnJlbnREYXRlLmFkZCgxMiwgJ2hvdXJzJykpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICBpZiAoIXRoaXMuaXNIb3VyQXZhaWxhYmxlKHRoaXMuY3VycmVudERhdGUuaG91cigpKSkge1xuXHQgICAgICAgICAgdGhpcy5zZWxlY3REYXRlKHRoaXMuY3VycmVudERhdGUuaG91cih0aGlzLm1heERhdGUuaG91cigpKSk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGlmICghdGhpcy5pc01pbnV0ZUF2YWlsYWJsZSh0aGlzLmN1cnJlbnREYXRlLm1pbnV0ZSgpKSkge1xuXHQgICAgICAgICAgdGhpcy5zZWxlY3REYXRlKHRoaXMuY3VycmVudERhdGUubWludXRlKHRoaXMubWF4RGF0ZS5taW51dGUoKSkpO1xuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXHQgICAgfSxcblx0ICAgIGNvbnZlcnRIb3VyczogZnVuY3Rpb24gY29udmVydEhvdXJzKGgpIHtcblx0ICAgICAgdmFyIF9yZXR1cm4gPSBoO1xuXHQgICAgICBpZiAoaCA8IDEyICYmIHRoaXMuaXNQTSgpKSBfcmV0dXJuICs9IDEyO1xuXHRcblx0ICAgICAgcmV0dXJuIF9yZXR1cm47XG5cdCAgICB9LFxuXHQgICAgaGlkZTogZnVuY3Rpb24gaGlkZShva0J0bikge1xuXHQgICAgICBpZiAob2tCdG4pIHtcblx0ICAgICAgICB0aGlzLl9kaWFsb2cuaGlkZSh0aGlzLmN1cnJlbnREYXRlKTtcblx0ICAgICAgfSBlbHNlIHtcblx0ICAgICAgICB0aGlzLl9kaWFsb2cuY2FuY2VsKCk7XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICB9O1xuXHRcblx0ICBhbmd1bGFyLm1vZHVsZShtb2R1bGVOYW1lKS5kaXJlY3RpdmUoJ21kY0RhdGV0aW1lUGlja2VyQ2FsZW5kYXInLCBbZnVuY3Rpb24gKCkge1xuXHRcblx0ICAgIHZhciBzdGFydERhdGUgPSBtb21lbnQoKSxcblx0ICAgICAgICBZRUFSX01JTiA9IDE5MDAsXG5cdCAgICAgICAgWUVBUl9NQVggPSAyMTAwLFxuXHQgICAgICAgIE1PTlRIU19JTl9BTEwgPSAoWUVBUl9NQVggLSBZRUFSX01JTiArIDEpICogMTIsXG5cdCAgICAgICAgSVRFTV9IRUlHSFQgPSAyNDAsXG5cdCAgICAgICAgTU9OVEhTID0gW107XG5cdCAgICBmb3IgKHZhciBpID0gMDsgaSA8IE1PTlRIU19JTl9BTEw7IGkrKykge1xuXHQgICAgICBNT05USFMucHVzaChpKTtcblx0ICAgIH1cblx0XG5cdCAgICB2YXIgY3VycmVudE1vbnRoSW5kZXggPSBmdW5jdGlvbiBjdXJyZW50TW9udGhJbmRleChkYXRlKSB7XG5cdCAgICAgIHZhciB5ZWFyID0gZGF0ZS55ZWFyKCk7XG5cdCAgICAgIHZhciBtb250aCA9IGRhdGUubW9udGgoKTtcblx0ICAgICAgcmV0dXJuICh5ZWFyIC0gWUVBUl9NSU4pICogMTIgKyBtb250aCAtIDE7XG5cdCAgICB9O1xuXHRcblx0ICAgIHJldHVybiB7XG5cdCAgICAgIHJlc3RyaWN0OiAnRScsXG5cdCAgICAgIHNjb3BlOiB7XG5cdCAgICAgICAgcGlja2VyOiAnPScsXG5cdCAgICAgICAgZGF0ZTogJz0nXG5cdCAgICAgIH0sXG5cdCAgICAgIGJpbmRUb0NvbnRyb2xsZXI6IHRydWUsXG5cdCAgICAgIGNvbnRyb2xsZXJBczogJ2NhbCcsXG5cdCAgICAgIGNvbnRyb2xsZXI6IFsnJHNjb3BlJywgZnVuY3Rpb24gKCRzY29wZSkge1xuXHQgICAgICAgIHZhciBjYWxlbmRhciA9IHRoaXMsXG5cdCAgICAgICAgICAgIHBpY2tlciA9IHRoaXMucGlja2VyLFxuXHQgICAgICAgICAgICBkYXlzID0gW107XG5cdFxuXHQgICAgICAgIGZvciAodmFyIGkgPSBwaWNrZXIucGFyYW1zLndlZWtTdGFydDsgZGF5cy5sZW5ndGggPCA3OyBpKyspIHtcblx0ICAgICAgICAgIGlmIChpID4gNikge1xuXHQgICAgICAgICAgICBpID0gMDtcblx0ICAgICAgICAgIH1cblx0ICAgICAgICAgIGRheXMucHVzaChpLnRvU3RyaW5nKCkpO1xuXHQgICAgICAgIH1cblx0XG5cdCAgICAgICAgY2FsZW5kYXIud2VlayA9IGRheXM7XG5cdCAgICAgICAgaWYgKCFwaWNrZXIubWF4RGF0ZSAmJiAhcGlja2VyLm1pbkRhdGUpIHtcblx0ICAgICAgICAgIGNhbGVuZGFyLm1vbnRocyA9IE1PTlRIUztcblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgdmFyIGxvdyA9IHBpY2tlci5taW5EYXRlID8gY3VycmVudE1vbnRoSW5kZXgocGlja2VyLm1pbkRhdGUpIDogMDtcblx0ICAgICAgICAgIHZhciBoaWdoID0gcGlja2VyLm1heERhdGUgPyBjdXJyZW50TW9udGhJbmRleChwaWNrZXIubWF4RGF0ZSkgKyAxIDogTU9OVEhTX0lOX0FMTDtcblx0ICAgICAgICAgIGNhbGVuZGFyLm1vbnRocyA9IE1PTlRIUy5zbGljZShsb3csIGhpZ2gpO1xuXHQgICAgICAgIH1cblx0XG5cdCAgICAgICAgY2FsZW5kYXIuZ2V0SXRlbUF0SW5kZXggPSBmdW5jdGlvbiAoaW5kZXgpIHtcblx0ICAgICAgICAgIHZhciBtb250aCA9IChpbmRleCArIDEpICUgMTIgfHwgMTI7XG5cdCAgICAgICAgICB2YXIgeWVhciA9IFlFQVJfTUlOICsgTWF0aC5mbG9vcihpbmRleCAvIDEyKTtcblx0ICAgICAgICAgIHZhciBtb250aE9iaiA9IG1vbWVudChwaWNrZXIuY3VycmVudERhdGUpLnllYXIoeWVhcikubW9udGgobW9udGgpO1xuXHQgICAgICAgICAgcmV0dXJuIGdlbmVyYXRlTW9udGhDYWxlbmRhcihtb250aE9iaik7XG5cdCAgICAgICAgfTtcblx0XG5cdCAgICAgICAgY2FsZW5kYXIudG9wSW5kZXggPSBjdXJyZW50TW9udGhJbmRleChwaWNrZXIuY3VycmVudERhdGUpIC0gY2FsZW5kYXIubW9udGhzWzBdO1xuXHRcblx0ICAgICAgICAkc2NvcGUuJHdhdGNoKGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgIHJldHVybiBwaWNrZXIuY3VycmVudERhdGUgPyBwaWNrZXIuY3VycmVudERhdGUuZm9ybWF0KCdZWVlZLU1NJykgOiAnJztcblx0ICAgICAgICB9LCBmdW5jdGlvbiAodmFsMiwgdmFsMSkge1xuXHQgICAgICAgICAgaWYgKHZhbDIgIT0gdmFsMSkge1xuXHQgICAgICAgICAgICB2YXIgbkRhdGUgPSBtb21lbnQodmFsMiwgJ1lZWVktTU0nKTtcblx0ICAgICAgICAgICAgdmFyIGluZGV4ID0gY3VycmVudE1vbnRoSW5kZXgobkRhdGUpO1xuXHQgICAgICAgICAgICBpZiAoY2FsZW5kYXIudG9wSW5kZXggIT0gaW5kZXgpIHtcblx0ICAgICAgICAgICAgICBjYWxlbmRhci50b3BJbmRleCA9IGluZGV4IC0gY2FsZW5kYXIubW9udGhzWzBdO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgfSk7XG5cdFxuXHQgICAgICAgIHZhciBnZW5lcmF0ZU1vbnRoQ2FsZW5kYXIgPSBmdW5jdGlvbiBnZW5lcmF0ZU1vbnRoQ2FsZW5kYXIoZGF0ZSkge1xuXHQgICAgICAgICAgdmFyIG1vbnRoID0ge307XG5cdCAgICAgICAgICBpZiAoZGF0ZSAhPT0gbnVsbCkge1xuXHQgICAgICAgICAgICBtb250aC5uYW1lID0gZGF0ZS5mb3JtYXQoJ01NTU0gWVlZWScpO1xuXHQgICAgICAgICAgICB2YXIgc3RhcnRPZk1vbnRoID0gbW9tZW50KGRhdGUpLmxvY2FsZShwaWNrZXIucGFyYW1zLmxhbmcpLnN0YXJ0T2YoJ21vbnRoJykuaG91cihkYXRlLmhvdXIoKSkubWludXRlKGRhdGUubWludXRlKCkpO1xuXHQgICAgICAgICAgICB2YXIgaU51bURheSA9IHN0YXJ0T2ZNb250aC5mb3JtYXQoJ2QnKTtcblx0ICAgICAgICAgICAgbW9udGguZGF5cyA9IFtdO1xuXHQgICAgICAgICAgICBmb3IgKHZhciBpID0gc3RhcnRPZk1vbnRoLmRhdGUoKTsgaSA8PSBzdGFydE9mTW9udGguZGF5c0luTW9udGgoKTsgaSsrKSB7XG5cdCAgICAgICAgICAgICAgaWYgKGkgPT09IHN0YXJ0T2ZNb250aC5kYXRlKCkpIHtcblx0ICAgICAgICAgICAgICAgIHZhciBpV2VlayA9IGNhbGVuZGFyLndlZWsuaW5kZXhPZihpTnVtRGF5LnRvU3RyaW5nKCkpO1xuXHQgICAgICAgICAgICAgICAgaWYgKGlXZWVrID4gMCkge1xuXHQgICAgICAgICAgICAgICAgICBmb3IgKHZhciB4ID0gMDsgeCA8IGlXZWVrOyB4KyspIHtcblx0ICAgICAgICAgICAgICAgICAgICBtb250aC5kYXlzLnB1c2goMCk7XG5cdCAgICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgICAgbW9udGguZGF5cy5wdXNoKG1vbWVudChzdGFydE9mTW9udGgpLmxvY2FsZShwaWNrZXIucGFyYW1zLmxhbmcpLmRhdGUoaSkpO1xuXHQgICAgICAgICAgICB9XG5cdFxuXHQgICAgICAgICAgICB2YXIgZGF5c0luQVdlZWsgPSA3LFxuXHQgICAgICAgICAgICAgICAgZGF5c1RtcCA9IFtdLFxuXHQgICAgICAgICAgICAgICAgc2xpY2VzID0gTWF0aC5jZWlsKG1vbnRoLmRheXMubGVuZ3RoIC8gZGF5c0luQVdlZWspO1xuXHQgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHNsaWNlczsgaisrKSB7XG5cdCAgICAgICAgICAgICAgZGF5c1RtcC5wdXNoKG1vbnRoLmRheXMuc2xpY2UoaiAqIGRheXNJbkFXZWVrLCAoaiArIDEpICogZGF5c0luQVdlZWspKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICBtb250aC5kYXlzID0gZGF5c1RtcDtcblx0ICAgICAgICAgICAgcmV0dXJuIG1vbnRoO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgIH07XG5cdFxuXHQgICAgICAgIGNhbGVuZGFyLnRvRGF5ID0gZnVuY3Rpb24gKGkpIHtcblx0ICAgICAgICAgIHJldHVybiBtb21lbnQocGFyc2VJbnQoaSksIFwiZFwiKS5sb2NhbGUocGlja2VyLnBhcmFtcy5sYW5nKS5mb3JtYXQoXCJkZFwiKS5zdWJzdHJpbmcoMCwgMSk7XG5cdCAgICAgICAgfTtcblx0XG5cdCAgICAgICAgY2FsZW5kYXIuaXNJblJhbmdlID0gZnVuY3Rpb24gKGRhdGUpIHtcblx0ICAgICAgICAgIHJldHVybiBwaWNrZXIuaXNBZnRlck1pbkRhdGUobW9tZW50KGRhdGUpLCBmYWxzZSwgZmFsc2UpICYmIHBpY2tlci5pc0JlZm9yZU1heERhdGUobW9tZW50KGRhdGUpLCBmYWxzZSwgZmFsc2UpO1xuXHQgICAgICAgIH07XG5cdFxuXHQgICAgICAgIGNhbGVuZGFyLnNlbGVjdERhdGUgPSBmdW5jdGlvbiAoZGF0ZSkge1xuXHQgICAgICAgICAgaWYgKGRhdGUpIHtcblx0ICAgICAgICAgICAgaWYgKGNhbGVuZGFyLmlzU2VsZWN0ZWREYXkoZGF0ZSkpIHtcblx0ICAgICAgICAgICAgICByZXR1cm4gcGlja2VyLm9rKCk7XG5cdCAgICAgICAgICAgIH1cblx0ICAgICAgICAgICAgcGlja2VyLnNlbGVjdERhdGUobW9tZW50KGRhdGUpLmhvdXIoY2FsZW5kYXIuZGF0ZS5ob3VyKCkpLm1pbnV0ZShjYWxlbmRhci5kYXRlLm1pbnV0ZSgpKSk7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgfTtcblx0XG5cdCAgICAgICAgY2FsZW5kYXIuaXNTZWxlY3RlZERheSA9IGZ1bmN0aW9uIChtKSB7XG5cdCAgICAgICAgICByZXR1cm4gbSAmJiBjYWxlbmRhci5kYXRlLmRhdGUoKSA9PT0gbS5kYXRlKCkgJiYgY2FsZW5kYXIuZGF0ZS5tb250aCgpID09PSBtLm1vbnRoKCkgJiYgY2FsZW5kYXIuZGF0ZS55ZWFyKCkgPT09IG0ueWVhcigpO1xuXHQgICAgICAgIH07XG5cdCAgICAgIH1dLFxuXHQgICAgICB0ZW1wbGF0ZTogJzxtZC12aXJ0dWFsLXJlcGVhdC1jb250YWluZXIgbWQtdG9wLWluZGV4PVwiY2FsLnRvcEluZGV4XCIgY2xhc3M9XCJtb250aHNcIj4nICsgJzxkaXYgbWQtdmlydHVhbC1yZXBlYXQ9XCJpZHggaW4gY2FsLm1vbnRoc1wiIG1kLXN0YXJ0LWluZGV4PVwiY2FsLnRvcEluZGV4XCIgbWQtaXRlbS1zaXplPVwiJyArIElURU1fSEVJR0hUICsgJ1wiPicgKyAnICAgICA8ZGl2IG1kYy1kYXRldGltZS1waWNrZXItY2FsZW5kYXItbW9udGggaWR4PVwiaWR4XCI+PC9kaXY+JyArICc8L2Rpdj4nICsgJzwvbWQtdmlydHVhbC1yZXBlYXQtY29udGFpbmVyPidcblx0ICAgIH07XG5cdCAgfV0pLmRpcmVjdGl2ZSgnbWRjRGF0ZXRpbWVQaWNrZXJDYWxlbmRhck1vbnRoJywgWyckY29tcGlsZScsIGZ1bmN0aW9uICgkY29tcGlsZSkge1xuXHQgICAgdmFyIGJ1aWxkQ2FsZW5kYXJDb250ZW50ID0gZnVuY3Rpb24gYnVpbGRDYWxlbmRhckNvbnRlbnQoZWxlbWVudCwgc2NvcGUpIHtcblx0ICAgICAgdmFyIHRib2R5ID0gYW5ndWxhci5lbGVtZW50KGVsZW1lbnRbMF0ucXVlcnlTZWxlY3RvcigndGJvZHknKSk7XG5cdCAgICAgIHZhciBjYWxlbmRhciA9IHNjb3BlLmNhbCxcblx0ICAgICAgICAgIG1vbnRoID0gc2NvcGUubW9udGg7XG5cdCAgICAgIHRib2R5Lmh0bWwoJycpO1xuXHQgICAgICBtb250aC5kYXlzLmZvckVhY2goZnVuY3Rpb24gKHdlZWtEYXlzLCBpKSB7XG5cdCAgICAgICAgdmFyIHRyID0gYW5ndWxhci5lbGVtZW50KCc8dHI+PC90cj4nKTtcblx0ICAgICAgICB3ZWVrRGF5cy5mb3JFYWNoKGZ1bmN0aW9uICh3ZWVrRGF5LCBqKSB7XG5cdCAgICAgICAgICB2YXIgdGQgPSBhbmd1bGFyLmVsZW1lbnQoJzx0ZD4gPC90ZD4nKTtcblx0ICAgICAgICAgIGlmICh3ZWVrRGF5KSB7XG5cdCAgICAgICAgICAgIHZhciBhT3JTcGFuO1xuXHQgICAgICAgICAgICBpZiAoY2FsZW5kYXIuaXNJblJhbmdlKHdlZWtEYXkpKSB7XG5cdCAgICAgICAgICAgICAgLy9idWlsZCBhXG5cdCAgICAgICAgICAgICAgdmFyIHNjb3BlUmVmID0gJ21vbnRoW1wiZGF5c1wiXVsnICsgaSArICddWycgKyBqICsgJ10nO1xuXHQgICAgICAgICAgICAgIGFPclNwYW4gPSBhbmd1bGFyLmVsZW1lbnQoXCI8YSBocmVmPScjJyBtZGMtZHRwLW5vY2xpY2s+PC9hPlwiKS5hdHRyKCduZy1jbGFzcycsICd7c2VsZWN0ZWQ6IGNhbC5pc1NlbGVjdGVkRGF5KCcgKyBzY29wZVJlZiArICcpfScpLmF0dHIoJ25nLWNsaWNrJywgJ2NhbC5zZWxlY3REYXRlKCcgKyBzY29wZVJlZiArICcpJyk7XG5cdCAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgYU9yU3BhbiA9IGFuZ3VsYXIuZWxlbWVudCgnPHNwYW4+PC9zcGFuPicpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIGFPclNwYW4uYWRkQ2xhc3MoJ2R0cC1zZWxlY3QtZGF5JykuaHRtbCh3ZWVrRGF5LmZvcm1hdCgnRCcpKTtcblx0ICAgICAgICAgICAgdGQuYXBwZW5kKGFPclNwYW4pO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgICAgdHIuYXBwZW5kKHRkKTtcblx0ICAgICAgICB9KTtcblx0ICAgICAgICB0Ym9keS5hcHBlbmQodHIpO1xuXHQgICAgICB9KTtcblx0ICAgICAgJGNvbXBpbGUodGJvZHkpKHNjb3BlKTtcblx0ICAgIH07XG5cdFxuXHQgICAgcmV0dXJuIHtcblx0ICAgICAgc2NvcGU6IHtcblx0ICAgICAgICBpZHg6ICc9J1xuXHQgICAgICB9LFxuXHQgICAgICByZXF1aXJlOiAnXm1kY0RhdGV0aW1lUGlja2VyQ2FsZW5kYXInLFxuXHQgICAgICByZXN0cmljdDogJ0FFJyxcblx0ICAgICAgdGVtcGxhdGU6ICc8ZGl2IGNsYXNzPVwiZHRwLXBpY2tlci1tb250aFwiPnt7bW9udGgubmFtZX19PC9kaXY+JyArICc8dGFibGUgY2xhc3M9XCJ0YWJsZSBkdHAtcGlja2VyLWRheXNcIj4nICsgJyAgICA8dGhlYWQ+JyArICcgICAgPHRyPicgKyAnICAgICAgICA8dGggbmctcmVwZWF0PVwiZGF5IGluIGNhbC53ZWVrXCI+e3tjYWwudG9EYXkoZGF5KX19PC90aD4nICsgJyAgICA8L3RyPicgKyAnICAgIDwvdGhlYWQ+JyArICcgICAgPHRib2R5PicgKyAnICAgIDwvdGJvZHk+JyArICc8L3RhYmxlPicsXG5cdCAgICAgIGxpbms6IGZ1bmN0aW9uIGxpbmsoc2NvcGUsIGVsZW1lbnQsIGF0dHJzLCBjYWxlbmRhcikge1xuXHQgICAgICAgIHNjb3BlLmNhbCA9IGNhbGVuZGFyO1xuXHQgICAgICAgIHNjb3BlLm1vbnRoID0gY2FsZW5kYXIuZ2V0SXRlbUF0SW5kZXgocGFyc2VJbnQoc2NvcGUuaWR4KSk7XG5cdCAgICAgICAgYnVpbGRDYWxlbmRhckNvbnRlbnQoZWxlbWVudCwgc2NvcGUpO1xuXHQgICAgICAgIHNjb3BlLiR3YXRjaChmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICByZXR1cm4gc2NvcGUuaWR4O1xuXHQgICAgICAgIH0sIGZ1bmN0aW9uIChpZHgsIG9sZElkeCkge1xuXHQgICAgICAgICAgaWYgKGlkeCAhPSBvbGRJZHgpIHtcblx0ICAgICAgICAgICAgc2NvcGUubW9udGggPSBjYWxlbmRhci5nZXRJdGVtQXRJbmRleChwYXJzZUludChzY29wZS5pZHgpKTtcblx0ICAgICAgICAgICAgYnVpbGRDYWxlbmRhckNvbnRlbnQoZWxlbWVudCwgc2NvcGUpO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgIH0pO1xuXHQgICAgICB9XG5cdCAgICB9O1xuXHQgIH1dKTtcblx0XG5cdCAgYW5ndWxhci5tb2R1bGUobW9kdWxlTmFtZSkuZGlyZWN0aXZlKCdtZGNEdHBOb2NsaWNrJywgZnVuY3Rpb24gKCkge1xuXHQgICAgcmV0dXJuIHtcblx0ICAgICAgbGluazogZnVuY3Rpb24gbGluayhzY29wZSwgZWwpIHtcblx0ICAgICAgICBlbC5vbignY2xpY2snLCBmdW5jdGlvbiAoZSkge1xuXHQgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHQgICAgICAgIH0pO1xuXHQgICAgICB9XG5cdCAgICB9O1xuXHQgIH0pO1xuXHQgIGFuZ3VsYXIubW9kdWxlKG1vZHVsZU5hbWUpLmRpcmVjdGl2ZSgnbWRjRGF0ZXRpbWVQaWNrZXJDbG9jaycsIFtmdW5jdGlvbiAoKSB7XG5cdFxuXHQgICAgdmFyIHRlbXBsYXRlID0gJzxkaXYgY2xhc3M9XCJkdHAtcGlja2VyLWNsb2NrXCI+PHNwYW4gbmctaWY9XCIhcG9pbnRzIHx8IHBvaW50cy5sZW5ndGggPCAxXCI+Jm5ic3A7PC9zcGFuPicgKyAnPGRpdiBuZy1yZXBlYXQ9XCJwb2ludCBpbiBwb2ludHNcIiBjbGFzcz1cImR0cC1waWNrZXItdGltZVwiIHN0eWxlPVwibWFyZ2luLWxlZnQ6IHt7cG9pbnQubGVmdH19cHg7IG1hcmdpbi10b3A6IHt7cG9pbnQudG9wfX1weDtcIj4nICsgJyAgIDxhIGhyZWY9XCIjXCIgbWRjLWR0cC1ub2NsaWNrIG5nLWNsYXNzPVwie3NlbGVjdGVkOiBwb2ludC52YWx1ZT09PWN1cnJlbnRWYWx1ZX1cIiBjbGFzcz1cImR0cC1zZWxlY3QtaG91clwiIG5nLWNsaWNrPVwic2V0VGltZShwb2ludC52YWx1ZSlcIiBuZy1pZj1cInBvaW50QXZhaWxhYmxlKHBvaW50KVwiPnt7cG9pbnQuZGlzcGxheX19PC9hPicgKyAnICAgPGEgaHJlZj1cIiNcIiBtZGMtZHRwLW5vY2xpY2sgY2xhc3M9XCJkaXNhYmxlZCBkdHAtc2VsZWN0LWhvdXJcIiBuZy1pZj1cIiFwb2ludEF2YWlsYWJsZShwb2ludClcIj57e3BvaW50LmRpc3BsYXl9fTwvYT4nICsgJzwvZGl2PicgKyAnPGRpdiBjbGFzcz1cImR0cC1oYW5kIGR0cC1ob3VyLWhhbmRcIj48L2Rpdj4nICsgJzxkaXYgY2xhc3M9XCJkdHAtaGFuZCBkdHAtbWludXRlLWhhbmRcIj48L2Rpdj4nICsgJzxkaXYgY2xhc3M9XCJkdHAtY2xvY2stY2VudGVyXCI+PC9kaXY+JyArICc8L2Rpdj4nO1xuXHRcblx0ICAgIHJldHVybiB7XG5cdCAgICAgIHJlc3RyaWN0OiAnRScsXG5cdCAgICAgIHRlbXBsYXRlOiB0ZW1wbGF0ZSxcblx0ICAgICAgbGluazogZnVuY3Rpb24gbGluayhzY29wZSwgZWxlbWVudCwgYXR0cnMpIHtcblx0ICAgICAgICB2YXIgbWludXRlTW9kZSA9IGF0dHJzLm1vZGUgPT09ICdtaW51dGVzJztcblx0ICAgICAgICB2YXIgcGlja2VyID0gc2NvcGUucGlja2VyO1xuXHQgICAgICAgIC8vYmFua2luZyBvbiB0aGUgZmFjdCB0aGF0IHRoZXJlIHdpbGwgb25seSBiZSBvbmUgYXQgYSB0aW1lXG5cdCAgICAgICAgdmFyIGNvbXBvbmVudFJvb3QgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdtZC1kaWFsb2cuZHRwJyk7XG5cdCAgICAgICAgdmFyIGV4ZWMgPSBmdW5jdGlvbiBleGVjKCkge1xuXHQgICAgICAgICAgdmFyIGNsb2NrID0gYW5ndWxhci5lbGVtZW50KGVsZW1lbnRbMF0ucXVlcnlTZWxlY3RvcignLmR0cC1waWNrZXItY2xvY2snKSksXG5cdCAgICAgICAgICAgICAgcGlja2VyRWwgPSBhbmd1bGFyLmVsZW1lbnQoY29tcG9uZW50Um9vdC5xdWVyeVNlbGVjdG9yKCcuZHRwLXBpY2tlcicpKTtcblx0XG5cdCAgICAgICAgICB2YXIgdyA9IGNvbXBvbmVudFJvb3QucXVlcnlTZWxlY3RvcignLmR0cC1jb250ZW50Jykub2Zmc2V0V2lkdGg7XG5cdCAgICAgICAgICB2YXIgcGwgPSBwYXJzZUludChjc3MocGlja2VyRWwsICdwYWRkaW5nTGVmdCcpLnJlcGxhY2UoJ3B4JywgJycpKSB8fCAwO1xuXHQgICAgICAgICAgdmFyIHByID0gcGFyc2VJbnQoY3NzKHBpY2tlckVsLCAncGFkZGluZ1JpZ2h0JykucmVwbGFjZSgncHgnLCAnJykpIHx8IDA7XG5cdCAgICAgICAgICB2YXIgbWwgPSBwYXJzZUludChjc3MoY2xvY2ssICdtYXJnaW5MZWZ0JykucmVwbGFjZSgncHgnLCAnJykpIHx8IDA7XG5cdCAgICAgICAgICB2YXIgbXIgPSBwYXJzZUludChjc3MoY2xvY2ssICdtYXJnaW5SaWdodCcpLnJlcGxhY2UoJ3B4JywgJycpKSB8fCAwO1xuXHQgICAgICAgICAgLy9zZXQgd2lkdGhcblx0ICAgICAgICAgIHZhciBjbG9ja1dpZHRoID0gdyAtIChtbCArIG1yICsgcGwgKyBwcik7XG5cdCAgICAgICAgICBjbG9jay5jc3MoJ3dpZHRoJywgY2xvY2tXaWR0aCArICdweCcpO1xuXHRcblx0ICAgICAgICAgIHZhciBwTCA9IHBhcnNlSW50KGNzcyhwaWNrZXJFbCwgJ3BhZGRpbmdMZWZ0JykucmVwbGFjZSgncHgnLCAnJykpIHx8IDA7XG5cdCAgICAgICAgICB2YXIgcFQgPSBwYXJzZUludChjc3MocGlja2VyRWwsICdwYWRkaW5nVG9wJykucmVwbGFjZSgncHgnLCAnJykpIHx8IDA7XG5cdCAgICAgICAgICB2YXIgbUwgPSBwYXJzZUludChjc3MoY2xvY2ssICdtYXJnaW5MZWZ0JykucmVwbGFjZSgncHgnLCAnJykpIHx8IDA7XG5cdCAgICAgICAgICB2YXIgbVQgPSBwYXJzZUludChjc3MoY2xvY2ssICdtYXJnaW5Ub3AnKS5yZXBsYWNlKCdweCcsICcnKSkgfHwgMDtcblx0XG5cdCAgICAgICAgICB2YXIgciA9IGNsb2NrV2lkdGggLyAyO1xuXHQgICAgICAgICAgdmFyIGogPSByIC8gMS4yOyAvLz8/P1xuXHRcblx0ICAgICAgICAgIHZhciBwb2ludHMgPSBbXTtcblx0XG5cdCAgICAgICAgICBmb3IgKHZhciBoID0gMDsgaCA8IDEyOyArK2gpIHtcblx0ICAgICAgICAgICAgdmFyIHggPSBqICogTWF0aC5zaW4oTWF0aC5QSSAqIDIgKiAoaCAvIDEyKSk7XG5cdCAgICAgICAgICAgIHZhciB5ID0gaiAqIE1hdGguY29zKE1hdGguUEkgKiAyICogKGggLyAxMikpO1xuXHRcblx0ICAgICAgICAgICAgdmFyIGhvdXIgPSB7XG5cdCAgICAgICAgICAgICAgbGVmdDogciArIHggKyBwTCAvIDIgLSAocEwgKyBtTCksXG5cdCAgICAgICAgICAgICAgdG9wOiByIC0geSAtIG1UIC8gMiAtIChwVCArIG1UKSxcblx0ICAgICAgICAgICAgICB2YWx1ZTogbWludXRlTW9kZSA/IGggKiA1IDogaCAvLzUgZm9yIG1pbnV0ZSA2MC8xMlxuXHQgICAgICAgICAgICB9O1xuXHRcblx0ICAgICAgICAgICAgaWYgKG1pbnV0ZU1vZGUpIHtcblx0ICAgICAgICAgICAgICBob3VyLmRpc3BsYXkgPSBob3VyLnZhbHVlIDwgMTAgPyAnMCcgKyBob3VyLnZhbHVlIDogaG91ci52YWx1ZTtcblx0ICAgICAgICAgICAgfSBlbHNlIHtcblx0XG5cdCAgICAgICAgICAgICAgaWYgKHBpY2tlci5wYXJhbXMuc2hvcnRUaW1lKSB7XG5cdCAgICAgICAgICAgICAgICBob3VyLmRpc3BsYXkgPSBoID09PSAwID8gMTIgOiBoO1xuXHQgICAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgICBob3VyLmRpc3BsYXkgPSBwaWNrZXIuaXNQTSgpID8gaCArIDEyIDogaDtcblx0ICAgICAgICAgICAgICB9XG5cdCAgICAgICAgICAgIH1cblx0XG5cdCAgICAgICAgICAgIHBvaW50cy5wdXNoKGhvdXIpO1xuXHQgICAgICAgICAgfVxuXHRcblx0ICAgICAgICAgIHNjb3BlLnBvaW50cyA9IHBvaW50cztcblx0ICAgICAgICAgIHNldEN1cnJlbnRWYWx1ZSgpO1xuXHQgICAgICAgICAgY2xvY2suY3NzKCdoZWlnaHQnLCBjbG9ja1dpZHRoICsgJ3B4Jyk7XG5cdCAgICAgICAgICAvL3BpY2tlci5pbml0SGFuZHModHJ1ZSk7XG5cdFxuXHQgICAgICAgICAgdmFyIGNsb2NrQ2VudGVyID0gZWxlbWVudFswXS5xdWVyeVNlbGVjdG9yKCcuZHRwLWNsb2NrLWNlbnRlcicpO1xuXHQgICAgICAgICAgdmFyIGNlbnRlcldpZHRoID0gY2xvY2tDZW50ZXIub2Zmc2V0V2lkdGggLyAyIHx8IDcuNSxcblx0ICAgICAgICAgICAgICBjZW50ZXJIZWlnaHQgPSBjbG9ja0NlbnRlci5vZmZzZXRIZWlnaHQgLyAyIHx8IDcuNTtcblx0ICAgICAgICAgIHZhciBfaEwgPSByIC8gMS44O1xuXHQgICAgICAgICAgdmFyIF9tTCA9IHIgLyAxLjU7XG5cdFxuXHQgICAgICAgICAgYW5ndWxhci5lbGVtZW50KGVsZW1lbnRbMF0ucXVlcnlTZWxlY3RvcignLmR0cC1ob3VyLWhhbmQnKSkuY3NzKHtcblx0ICAgICAgICAgICAgbGVmdDogciArIG1MICogMS41ICsgJ3B4Jyxcblx0ICAgICAgICAgICAgaGVpZ2h0OiBfaEwgKyAncHgnLFxuXHQgICAgICAgICAgICBtYXJnaW5Ub3A6IHIgLSBfaEwgLSBwTCArICdweCdcblx0ICAgICAgICAgIH0pLmFkZENsYXNzKCFtaW51dGVNb2RlID8gJ29uJyA6ICcnKTtcblx0XG5cdCAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoZWxlbWVudFswXS5xdWVyeVNlbGVjdG9yKCcuZHRwLW1pbnV0ZS1oYW5kJykpLmNzcyh7XG5cdCAgICAgICAgICAgIGxlZnQ6IHIgKyBtTCAqIDEuNSArICdweCcsXG5cdCAgICAgICAgICAgIGhlaWdodDogX21MICsgJ3B4Jyxcblx0ICAgICAgICAgICAgbWFyZ2luVG9wOiByIC0gX21MIC0gcEwgKyAncHgnXG5cdCAgICAgICAgICB9KS5hZGRDbGFzcyhtaW51dGVNb2RlID8gJ29uJyA6ICcnKTtcblx0XG5cdCAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoY2xvY2tDZW50ZXIpLmNzcyh7XG5cdCAgICAgICAgICAgIGxlZnQ6IHIgKyBwTCArIG1MIC0gY2VudGVyV2lkdGggKyAncHgnLFxuXHQgICAgICAgICAgICBtYXJnaW5Ub3A6IHIgLSBtTCAvIDIgLSBjZW50ZXJIZWlnaHQgKyAncHgnXG5cdCAgICAgICAgICB9KTtcblx0ICAgICAgICAgIGFuaW1hdGVIYW5kcygpO1xuXHQgICAgICAgIH07XG5cdFxuXHQgICAgICAgIHZhciBhbmltYXRlSGFuZHMgPSBmdW5jdGlvbiBhbmltYXRlSGFuZHMoKSB7XG5cdCAgICAgICAgICB2YXIgX2RhdGUgPSBwaWNrZXIuY3VycmVudE5lYXJlc3Q1TWludXRlKCk7XG5cdCAgICAgICAgICB2YXIgaCA9IF9kYXRlLmhvdXIoKTtcblx0ICAgICAgICAgIHZhciBtID0gX2RhdGUubWludXRlKCk7XG5cdFxuXHQgICAgICAgICAgcm90YXRlRWxlbWVudChhbmd1bGFyLmVsZW1lbnQoZWxlbWVudFswXS5xdWVyeVNlbGVjdG9yKCcuZHRwLWhvdXItaGFuZCcpKSwgMzYwIC8gMTIgKiBoKTtcblx0ICAgICAgICAgIHZhciBtZGcgPSAzNjAgLyA2MCAqICg1ICogTWF0aC5yb3VuZChtIC8gNSkpO1xuXHQgICAgICAgICAgcm90YXRlRWxlbWVudChhbmd1bGFyLmVsZW1lbnQoZWxlbWVudFswXS5xdWVyeVNlbGVjdG9yKCcuZHRwLW1pbnV0ZS1oYW5kJykpLCBtZGcpO1xuXHQgICAgICAgIH07XG5cdFxuXHQgICAgICAgIHZhciByb3RhdGVFbGVtZW50ID0gZnVuY3Rpb24gcm90YXRlRWxlbWVudChlbCwgZGVnKSB7XG5cdCAgICAgICAgICBhbmd1bGFyLmVsZW1lbnQoZWwpLmNzcyh7XG5cdCAgICAgICAgICAgIFdlYmtpdFRyYW5zZm9ybTogJ3JvdGF0ZSgnICsgZGVnICsgJ2RlZyknLFxuXHQgICAgICAgICAgICAnLW1vei10cmFuc2Zvcm0nOiAncm90YXRlKCcgKyBkZWcgKyAnZGVnKSdcblx0ICAgICAgICAgIH0pO1xuXHQgICAgICAgIH07XG5cdFxuXHQgICAgICAgIHZhciBzZXRDdXJyZW50VmFsdWUgPSBmdW5jdGlvbiBzZXRDdXJyZW50VmFsdWUoKSB7XG5cdCAgICAgICAgICB2YXIgZGF0ZSA9IHBpY2tlci5jdXJyZW50TmVhcmVzdDVNaW51dGUoKTtcblx0ICAgICAgICAgIHNjb3BlLmN1cnJlbnRWYWx1ZSA9IG1pbnV0ZU1vZGUgPyBkYXRlLm1pbnV0ZSgpIDogZGF0ZS5ob3VyKCkgJSAxMjtcblx0ICAgICAgICB9O1xuXHRcblx0ICAgICAgICBzY29wZS4kd2F0Y2goZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgdmFyIHRtcCA9IHBpY2tlci5jdXJyZW50TmVhcmVzdDVNaW51dGUoKTtcblx0ICAgICAgICAgIHJldHVybiB0bXAgPyB0bXAuZm9ybWF0KCdISDptbScpIDogJyc7XG5cdCAgICAgICAgfSwgZnVuY3Rpb24gKG5ld1ZhbCkge1xuXHQgICAgICAgICAgc2V0Q3VycmVudFZhbHVlKCk7XG5cdCAgICAgICAgICBhbmltYXRlSGFuZHMoKTtcblx0ICAgICAgICB9KTtcblx0XG5cdCAgICAgICAgdmFyIHNldERpc3BsYXlQb2ludHMgPSBmdW5jdGlvbiBzZXREaXNwbGF5UG9pbnRzKGlzUE0sIHBvaW50cykge1xuXHQgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwb2ludHMubGVuZ3RoOyBpKyspIHtcblx0ICAgICAgICAgICAgcG9pbnRzW2ldLmRpc3BsYXkgPSBpO1xuXHQgICAgICAgICAgICBpZiAoaXNQTSkge1xuXHQgICAgICAgICAgICAgIHBvaW50c1tpXS5kaXNwbGF5ICs9IDEyO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgICByZXR1cm4gcG9pbnRzO1xuXHQgICAgICAgIH07XG5cdFxuXHQgICAgICAgIGlmICghcGlja2VyLnBhcmFtcy5zaG9ydFRpbWUpIHtcblx0ICAgICAgICAgIHNjb3BlLiR3YXRjaCgncGlja2VyLm1lcmlkaWVuJywgZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgICBpZiAoIW1pbnV0ZU1vZGUpIHtcblx0ICAgICAgICAgICAgICBpZiAoc2NvcGUucG9pbnRzKSB7XG5cdCAgICAgICAgICAgICAgICB2YXIgcG9pbnRzID0gc2V0RGlzcGxheVBvaW50cyhwaWNrZXIuaXNQTSgpLCBhbmd1bGFyLmNvcHkoc2NvcGUucG9pbnRzKSk7XG5cdCAgICAgICAgICAgICAgICBzY29wZS5wb2ludHMgPSBwb2ludHM7XG5cdCAgICAgICAgICAgICAgfVxuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICB9KTtcblx0ICAgICAgICB9XG5cdFxuXHQgICAgICAgIHNjb3BlLnNldFRpbWUgPSBmdW5jdGlvbiAodmFsKSB7XG5cdCAgICAgICAgICBpZiAodmFsID09PSBzY29wZS5jdXJyZW50VmFsdWUpIHtcblx0ICAgICAgICAgICAgcGlja2VyLm9rKCk7XG5cdCAgICAgICAgICB9XG5cdFxuXHQgICAgICAgICAgaWYgKCFtaW51dGVNb2RlKSB7XG5cdCAgICAgICAgICAgIHBpY2tlci5jdXJyZW50RGF0ZS5ob3VyKHBpY2tlci5pc1BNKCkgPyB2YWwgKyAxMiA6IHZhbCk7XG5cdCAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICBwaWNrZXIuY3VycmVudERhdGUubWludXRlKHZhbCk7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgICBwaWNrZXIuY3VycmVudERhdGUuc2Vjb25kKDApO1xuXHQgICAgICAgIH07XG5cdFxuXHQgICAgICAgIHNjb3BlLnBvaW50QXZhaWxhYmxlID0gZnVuY3Rpb24gKHBvaW50KSB7XG5cdCAgICAgICAgICByZXR1cm4gbWludXRlTW9kZSA/IHBpY2tlci5pc01pbnV0ZUF2YWlsYWJsZShwb2ludC52YWx1ZSkgOiBwaWNrZXIuaXNIb3VyQXZhaWxhYmxlKHBvaW50LnZhbHVlKTtcblx0ICAgICAgICB9O1xuXHRcblx0ICAgICAgICB2YXIgdW53YXRjaGVyID0gc2NvcGUuJHdhdGNoKGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgIHJldHVybiBlbGVtZW50WzBdLnF1ZXJ5U2VsZWN0b3JBbGwoJ2RpdicpLmxlbmd0aDtcblx0ICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICBleGVjKCk7XG5cdCAgICAgICAgICB1bndhdGNoZXIoKTtcblx0ICAgICAgICB9KTtcblx0ICAgICAgfVxuXHQgICAgfTtcblx0ICB9XSk7XG5cdH0pKF9tb21lbnQyLmRlZmF1bHQpO1xuXHQvKiBXRUJQQUNLIFZBUiBJTkpFQ1RJT04gKi99LmNhbGwoZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyg1MTIpKSlcblxuLyoqKi8gfSxcblxuLyoqKi8gNTk3OlxuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0Ly8gc3R5bGUtbG9hZGVyOiBBZGRzIHNvbWUgY3NzIHRvIHRoZSBET00gYnkgYWRkaW5nIGEgPHN0eWxlPiB0YWdcblx0XG5cdC8vIGxvYWQgdGhlIHN0eWxlc1xuXHR2YXIgY29udGVudCA9IF9fd2VicGFja19yZXF1aXJlX18oNTk4KTtcblx0aWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5cdC8vIGFkZCB0aGUgc3R5bGVzIHRvIHRoZSBET01cblx0dmFyIHVwZGF0ZSA9IF9fd2VicGFja19yZXF1aXJlX18oNDg1KShjb250ZW50LCB7fSk7XG5cdGlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuXHQvLyBIb3QgTW9kdWxlIFJlcGxhY2VtZW50XG5cdGlmKGZhbHNlKSB7XG5cdFx0Ly8gV2hlbiB0aGUgc3R5bGVzIGNoYW5nZSwgdXBkYXRlIHRoZSA8c3R5bGU+IHRhZ3Ncblx0XHRpZighY29udGVudC5sb2NhbHMpIHtcblx0XHRcdG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4vbWF0ZXJpYWwtZGF0ZXRpbWVwaWNrZXIuY3NzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi9tYXRlcmlhbC1kYXRldGltZXBpY2tlci5jc3NcIik7XG5cdFx0XHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXHRcdFx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdFx0XHR9KTtcblx0XHR9XG5cdFx0Ly8gV2hlbiB0aGUgbW9kdWxlIGlzIGRpc3Bvc2VkLCByZW1vdmUgdGhlIDxzdHlsZT4gdGFnc1xuXHRcdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xuXHR9XG5cbi8qKiovIH0sXG5cbi8qKiovIDU5ODpcbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdGV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18oNDg0KSgpO1xuXHQvLyBpbXBvcnRzXG5cdFxuXHRcblx0Ly8gbW9kdWxlXG5cdGV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIm1kLWRpYWxvZy5kdHB7Zm9udC1zaXplOjE0cHg7bGluZS1oZWlnaHQ6MS40Mjg1NzE0Mztjb2xvcjojMzMzO2JhY2tncm91bmQtY29sb3I6I2ZmZjttYXgtaGVpZ2h0Om5vbmV9LmR0cCA6Zm9jdXN7b3V0bGluZTpub25lIWltcG9ydGFudH0uZHRwIHRhYmxle2JvcmRlci1zcGFjaW5nOjA7Ym9yZGVyLWNvbGxhcHNlOmNvbGxhcHNlO3dpZHRoOjEwMCV9LmR0cCAudGFibGU+dGJvZHk+dHI+dGQsLmR0cCAudGFibGU+dGJvZHk+dHI+dGgsLmR0cCAudGFibGU+dGZvb3Q+dHI+dGQsLmR0cCAudGFibGU+dGZvb3Q+dHI+dGgsLmR0cCAudGFibGU+dGhlYWQ+dHI+dGQsLmR0cCAudGFibGU+dGhlYWQ+dHI+dGh7cGFkZGluZzo4cHg7bGluZS1oZWlnaHQ6MS40Mjg1NzE0Mzt2ZXJ0aWNhbC1hbGlnbjp0b3A7Ym9yZGVyLXRvcDoxcHggc29saWQgI2RkZH0uZHRwLC5kdHAgKntib3gtc2l6aW5nOmJvcmRlci1ib3ghaW1wb3J0YW50fS5kdHA+LmR0cC1jb250ZW50e21heC13aWR0aDozMDBweDttYXgtaGVpZ2h0OjUwMHB4fS5kdHA+LmR0cC1jb250ZW50Pi5kdHAtZGF0ZS12aWV3PmhlYWRlci5kdHAtaGVhZGVye2JhY2tncm91bmQ6IzY4OWYzODtjb2xvcjojZmZmO3RleHQtYWxpZ246Y2VudGVyO3BhZGRpbmc6M3B4fS5kdHAgZGl2LmR0cC1kYXRlLC5kdHAgZGl2LmR0cC10aW1le2JhY2tncm91bmQ6IzhiYzM0YTt0ZXh0LWFsaWduOmNlbnRlcjtjb2xvcjojZmZmO3BhZGRpbmc6MTBweH0uZHRwIGRpdi5kdHAtZGF0ZT5kaXZ7cGFkZGluZzowO21hcmdpbjowfS5kdHAgZGl2LmR0cC1hY3R1YWwtbW9udGh7Zm9udC1zaXplOjEuNWVtfS5kdHAgZGl2LmR0cC1hY3R1YWwtbWF4dGltZSwuZHRwIGRpdi5kdHAtYWN0dWFsLW51bXtmb250LXNpemU6M2VtO2xpbmUtaGVpZ2h0Oi45fS5kdHAgZGl2LmR0cC1hY3R1YWwteWVhcntmb250LXNpemU6MS42ZW07Y29sb3I6I2RjZWRjOH0uZHRwIGRpdi5kdHAteWVhci1idG57Zm9udC1zaXplOjEuNGVtO2xpbmUtaGVpZ2h0OjMwcHg7Y3Vyc29yOnBvaW50ZXI7Y29sb3I6I2RjZWRjOH0uZHRwIGRpdi5kdHAteWVhci1idG4tcHJldnt0ZXh0LWFsaWduOnJpZ2h0fS5kdHAgZGl2LmR0cC15ZWFyLWJ0bi1uZXh0e3RleHQtYWxpZ246bGVmdH0uZHRwIGRpdi5kdHAtcGlja2Vye3BhZGRpbmc6MTBweDt0ZXh0LWFsaWduOmNlbnRlcn0uZHRwIGRpdi5kdHAtYWN0dWFsLXRpbWUsLmR0cCBkaXYuZHRwLXBpY2tlci1tb250aHtmb250LXdlaWdodDo1MDA7dGV4dC1hbGlnbjpjZW50ZXJ9LmR0cCAuZHRwLWNsb3Nle3Bvc2l0aW9uOmFic29sdXRlO3RvcDouMjVlbTtyaWdodDo1cHg7Zm9udC1zaXplOjE2cHh9LmR0cCAuZHRwLWNsb3NlPmF7Y29sb3I6I2ZmZjt0ZXh0LWRlY29yYXRpb246bm9uZX0uZHRwIC5kdHAtY2xvc2U+YT5pe2ZvbnQtc2l6ZToxZW19LmR0cCB0YWJsZS5kdHAtcGlja2VyLWRheXN7bWFyZ2luOjA7bWluLWhlaWdodDoyMjBweH0uZHRwIG1kLXZpcnR1YWwtcmVwZWF0LWNvbnRhaW5lci5tb250aHN7aGVpZ2h0OjI2MHB4fS5kdHAgdGFibGUuZHRwLXBpY2tlci1kYXlzLC5kdHAgdGFibGUuZHRwLXBpY2tlci1kYXlzIHRyLC5kdHAgdGFibGUuZHRwLXBpY2tlci1kYXlzIHRyPnRke2JvcmRlcjpub25lfS5kdHAgdGFibGUuZHRwLXBpY2tlci1kYXlzIHRyPnRke2ZvbnQtc2l6ZToxMXB4O3RleHQtYWxpZ246Y2VudGVyO3BhZGRpbmc6MH0uZHRwIHRhYmxlLmR0cC1waWNrZXItZGF5cyB0cj50ZD5zcGFuLmR0cC1zZWxlY3QtZGF5e2NvbG9yOiNiZGJkYmQhaW1wb3J0YW50fS5kdHAgdGFibGUuZHRwLXBpY2tlci1kYXlzIHRyPnRkPi5kdHAtc2VsZWN0LWRheXt3aWR0aDozNnB4O2hlaWdodDozNnB4O2Rpc3BsYXk6aW5saW5lLWJsb2NrfS5kdHAgLmR0cC1waWNrZXItdGltZT5hLC5kdHAgdGFibGUuZHRwLXBpY2tlci1kYXlzIHRyPnRkPi5kdHAtc2VsZWN0LWRheXtjb2xvcjojMjEyMTIxO3RleHQtZGVjb3JhdGlvbjpub25lO3BhZGRpbmc6MTBweDtib3JkZXItcmFkaXVzOjUwJSFpbXBvcnRhbnR9LmR0cCB0YWJsZS5kdHAtcGlja2VyLWRheXMgdHI+dGQ+YS5zZWxlY3RlZHtiYWNrZ3JvdW5kOiM4YmMzNGE7Y29sb3I6I2ZmZn0uZHRwIHRhYmxlLmR0cC1waWNrZXItZGF5cyB0cj50ZD5hOmhvdmVyOm5vdCguc2VsZWN0ZWQpe2JhY2tncm91bmQ6I2RkZH0uZHRwIHRhYmxlLmR0cC1waWNrZXItZGF5cyB0cj50aHtjb2xvcjojNzU3NTc1O3RleHQtYWxpZ246Y2VudGVyO2ZvbnQtd2VpZ2h0OjcwMDtwYWRkaW5nOjRweCAzcHh9LmR0cCAucDEwPmF7Y29sb3I6IzY4OWYzODt0ZXh0LWRlY29yYXRpb246bm9uZX0uZHRwIC5wMTB7d2lkdGg6MTAlfS5kdHAgLnAxMCwuZHRwIC5wMjB7ZGlzcGxheTppbmxpbmUtYmxvY2t9LmR0cCAucDIwe3dpZHRoOjIwJX0uZHRwIC5wNjB7d2lkdGg6NjAlfS5kdHAgLnA2MCwuZHRwIC5wODB7ZGlzcGxheTppbmxpbmUtYmxvY2t9LmR0cCAucDgwe3dpZHRoOjgwJX0uZHRwIGEuZHRwLW1lcmlkaWVuLWFtLC5kdHAgYS5kdHAtbWVyaWRpZW4tcG17cG9zaXRpb246cmVsYXRpdmU7dG9wOjEwcHg7Y29sb3I6IzIxMjEyMTtmb250LXdlaWdodDo1MDA7cGFkZGluZzo3cHggNXB4O2JvcmRlci1yYWRpdXM6NTAlIWltcG9ydGFudDt0ZXh0LWRlY29yYXRpb246bm9uZTtiYWNrZ3JvdW5kOiNlZWU7Zm9udC1zaXplOjEwcHh9LmR0cCAuZHRwLWFjdHVhbC1tZXJpZGllbiBhLnNlbGVjdGVke2JhY2tncm91bmQ6IzY4OWYzODtjb2xvcjojZmZmfS5kdHAgLmR0cC1waWNrZXItdGltZT5he2Rpc3BsYXk6YmxvY2s7bGluZS1oZWlnaHQ6MjNweDtwYWRkaW5nOjNweH0uZHRwIC5kdHAtcGlja2VyLXRpbWV7cG9zaXRpb246YWJzb2x1dGU7d2lkdGg6MzBweDtoZWlnaHQ6MzBweDtmb250LXNpemU6MS4xZW07Ym9yZGVyLXJhZGl1czo1MCU7Y3Vyc29yOnBvaW50ZXI7dGV4dC1hbGlnbjpjZW50ZXIhaW1wb3J0YW50fS5kdHAgLmR0cC1waWNrZXItdGltZT5hLmR0cC1zZWxlY3QtaG91ci5zZWxlY3RlZHtiYWNrZ3JvdW5kOiM2ODlmMzg7Y29sb3I6I2ZmZn0uZHRwIC5kdHAtcGlja2VyLXRpbWU+YS5kdHAtc2VsZWN0LWhvdXIuZGlzYWJsZWQsLmR0cCAuZHRwLXBpY2tlci10aW1lPmEuZHRwLXNlbGVjdC1taW51dGUuZGlzYWJsZWR7Y29sb3I6Izc1NzU3NX0uZHRwIC5kdHAtcGlja2VyLXRpbWU+YS5kdHAtc2VsZWN0LW1pbnV0ZS5zZWxlY3RlZHtiYWNrZ3JvdW5kOiM4YmMzNGE7Y29sb3I6I2ZmZn0uZHRwIGRpdi5kdHAtcGlja2VyLWNsb2Nre21hcmdpbjoxMHB4IDIwcHggMDtwYWRkaW5nOjEwcHg7Ym9yZGVyLXJhZGl1czo1MCUhaW1wb3J0YW50O2JhY2tncm91bmQ6I2VlZX0uZHRwLWNsb2NrLWNlbnRlcnt3aWR0aDoxNXB4O2hlaWdodDoxNXB4O2JhY2tncm91bmQ6Izc1NzU3NTtib3JkZXItcmFkaXVzOjUwJTtwb3NpdGlvbjphYnNvbHV0ZTt6LWluZGV4OjUwfS5kdHAgLmR0cC1oYW5kLC5kdHAgLmR0cC1ob3VyLWhhbmR7cG9zaXRpb246YWJzb2x1dGU7d2lkdGg6NHB4O21hcmdpbi1sZWZ0Oi0ycHg7YmFja2dyb3VuZDojYmRiZGJkOy13ZWJraXQtdHJhbnNmb3JtOnJvdGF0ZSgwZGVnKTt0cmFuc2Zvcm06cm90YXRlKDBkZWcpOy13ZWJraXQtdHJhbnNmb3JtLW9yaWdpbjpib3R0b207dHJhbnNmb3JtLW9yaWdpbjpib3R0b207ei1pbmRleDoxfS5kdHAgLmR0cC1taW51dGUtaGFuZHt3aWR0aDoycHg7bWFyZ2luLWxlZnQ6LTFweH0uZHRwIC5kdHAtaGFuZC5vbntiYWNrZ3JvdW5kOiM4YmMzNGF9LmR0cCAuZHRwLWJ1dHRvbnN7cGFkZGluZzowIDEwcHggMTBweDt0ZXh0LWFsaWduOnJpZ2h0fS5kdHAuaGlkZGVuLC5kdHAgLmhpZGRlbntkaXNwbGF5Om5vbmV9LmR0cCAuaW52aXNpYmxle3Zpc2liaWxpdHk6aGlkZGVufS5kdHAgLmxlZnR7ZmxvYXQ6bGVmdH0uZHRwIC5yaWdodHtmbG9hdDpyaWdodH0uZHRwIC5jbGVhcmZpeHtjbGVhcjpib3RofS5kdHAgLmNlbnRlcnt0ZXh0LWFsaWduOmNlbnRlcn1cIiwgXCJcIl0pO1xuXHRcblx0Ly8gZXhwb3J0c1xuXG5cbi8qKiovIH0sXG5cbi8qKiovIDU5OTpcbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdC8qXG5cdCAqIGFuZ3VsYXItZ29vZ2xlLXBsdXMtZGlyZWN0aXZlIHYwLjAuMVxuXHQgKiDimaEgQ29weUhlYXJ0IDIwMTMgYnkgSmVyYWQgQml0bmVyIGh0dHA6Ly9qZXJhZGJpdG5lci5jb21cblx0ICogQ29weWluZyBpcyBhbiBhY3Qgb2YgbG92ZS4gUGxlYXNlIGNvcHkuXG5cdCAqL1xuXHRcblx0dmFyIF9nZXRPd25Qcm9wZXJ0eU5hbWVzID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2MDApO1xuXHRcblx0dmFyIF9nZXRPd25Qcm9wZXJ0eU5hbWVzMiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2dldE93blByb3BlcnR5TmFtZXMpO1xuXHRcblx0ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblx0XG5cdGFuZ3VsYXIubW9kdWxlKCdkaXJlY3RpdmUuZytzaWduaW4nLCBbXSkuZGlyZWN0aXZlKCdnb29nbGVQbHVzU2lnbmluJywgWyckd2luZG93JywgZnVuY3Rpb24gKCR3aW5kb3cpIHtcblx0ICB2YXIgZW5kaW5nID0gL1xcLmFwcHNcXC5nb29nbGV1c2VyY29udGVudFxcLmNvbSQvO1xuXHRcblx0ICByZXR1cm4ge1xuXHQgICAgcmVzdHJpY3Q6ICdFJyxcblx0ICAgIHRyYW5zY2x1ZGU6IHRydWUsXG5cdCAgICB0ZW1wbGF0ZTogJzxzcGFuPjwvc3Bhbj4nLFxuXHQgICAgcmVwbGFjZTogdHJ1ZSxcblx0ICAgIGxpbms6IGZ1bmN0aW9uIGxpbmsoc2NvcGUsIGVsZW1lbnQsIGF0dHJzLCBjdHJsLCBsaW5rZXIpIHtcblx0ICAgICAgYXR0cnMuY2xpZW50aWQgKz0gZW5kaW5nLnRlc3QoYXR0cnMuY2xpZW50aWQpID8gJycgOiAnLmFwcHMuZ29vZ2xldXNlcmNvbnRlbnQuY29tJztcblx0XG5cdCAgICAgIGF0dHJzLiRzZXQoJ2RhdGEtY2xpZW50aWQnLCBhdHRycy5jbGllbnRpZCk7XG5cdCAgICAgIGF0dHJzLiRzZXQoJ3RoZW1lJywgYXR0cnMudGhlbWUpO1xuXHRcblx0ICAgICAgLy8gU29tZSBkZWZhdWx0IHZhbHVlcywgYmFzZWQgb24gcHJpb3IgdmVyc2lvbnMgb2YgdGhpcyBkaXJlY3RpdmVcblx0ICAgICAgdmFyIGRlZmF1bHRzID0ge1xuXHQgICAgICAgIGNhbGxiYWNrOiAnc2lnbmluQ2FsbGJhY2snLFxuXHQgICAgICAgIGNvb2tpZXBvbGljeTogJ3NpbmdsZV9ob3N0X29yaWdpbicsXG5cdCAgICAgICAgcmVxdWVzdHZpc2libGVhY3Rpb25zOiAnaHR0cDovL3NjaGVtYXMuZ29vZ2xlLmNvbS9BZGRBY3Rpdml0eScsXG5cdCAgICAgICAgc2NvcGU6ICdodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS9hdXRoL3BsdXMubG9naW4gaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vYXV0aC91c2VyaW5mby5lbWFpbCcsXG5cdCAgICAgICAgaGVpZ2h0OiAnc3RhbmRhcmQnLFxuXHQgICAgICAgIHdpZHRoOiAnd2lkZScsXG5cdCAgICAgICAgc3RhdGU6ICcnXG5cdCAgICAgIH07XG5cdFxuXHQgICAgICBkZWZhdWx0cy5jbGllbnRpZCA9IGF0dHJzLmNsaWVudGlkO1xuXHQgICAgICBkZWZhdWx0cy50aGVtZSA9IGF0dHJzLnRoZW1lO1xuXHRcblx0ICAgICAgLy8gT3ZlcndyaXRlIGRlZmF1bHQgdmFsdWVzIGlmIGV4cGxpY2l0bHkgc2V0XG5cdCAgICAgIGFuZ3VsYXIuZm9yRWFjaCgoMCwgX2dldE93blByb3BlcnR5TmFtZXMyLmRlZmF1bHQpKGRlZmF1bHRzKSwgZnVuY3Rpb24gKHByb3BOYW1lKSB7XG5cdCAgICAgICAgaWYgKGF0dHJzLmhhc093blByb3BlcnR5KHByb3BOYW1lKSkge1xuXHQgICAgICAgICAgZGVmYXVsdHNbcHJvcE5hbWVdID0gYXR0cnNbcHJvcE5hbWVdO1xuXHQgICAgICAgIH1cblx0ICAgICAgfSk7XG5cdFxuXHQgICAgICAvLyBEZWZhdWx0IGxhbmd1YWdlXG5cdCAgICAgIC8vIFN1cHBvcnRlZCBsYW5ndWFnZXM6IGh0dHBzOi8vZGV2ZWxvcGVycy5nb29nbGUuY29tLysvd2ViL2FwaS9zdXBwb3J0ZWQtbGFuZ3VhZ2VzXG5cdCAgICAgIGF0dHJzLiRvYnNlcnZlKCdsYW5ndWFnZScsIGZ1bmN0aW9uICh2YWx1ZSkge1xuXHQgICAgICAgICR3aW5kb3cuX19fZ2NmZyA9IHtcblx0ICAgICAgICAgIGxhbmc6IHZhbHVlID8gdmFsdWUgOiAnZW4nXG5cdCAgICAgICAgfTtcblx0ICAgICAgfSk7XG5cdFxuXHQgICAgICAvLyBBc3luY2hyb25vdXNseSBsb2FkIHRoZSBHKyBTREsuXG5cdCAgICAgIHZhciBwbyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NjcmlwdCcpO3BvLnR5cGUgPSAndGV4dC9qYXZhc2NyaXB0Jztwby5hc3luYyA9IHRydWU7XG5cdCAgICAgIHBvLnNyYyA9ICdodHRwczovL2FwaXMuZ29vZ2xlLmNvbS9qcy9jbGllbnQ6cGx1c29uZS5qcyc7XG5cdCAgICAgIHZhciBzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3NjcmlwdCcpWzBdO3MucGFyZW50Tm9kZS5pbnNlcnRCZWZvcmUocG8sIHMpO1xuXHRcblx0ICAgICAgbGlua2VyKGZ1bmN0aW9uIChlbCwgdFNjb3BlKSB7XG5cdCAgICAgICAgcG8ub25sb2FkID0gZnVuY3Rpb24gKCkge1xuXHQgICAgICAgICAgaWYgKGVsLmxlbmd0aCkge1xuXHQgICAgICAgICAgICBlbGVtZW50LmFwcGVuZChlbCk7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgICBnYXBpLnNpZ25pbi5yZW5kZXIoZWxlbWVudFswXSwgZGVmYXVsdHMpO1xuXHQgICAgICAgIH07XG5cdCAgICAgIH0pO1xuXHQgICAgfVxuXHQgIH07XG5cdH1dKS5ydW4oWyckd2luZG93JywgJyRyb290U2NvcGUnLCBmdW5jdGlvbiAoJHdpbmRvdywgJHJvb3RTY29wZSkge1xuXHQgICR3aW5kb3cuc2lnbmluQ2FsbGJhY2sgPSBmdW5jdGlvbiAoYXV0aFJlc3VsdCkge1xuXHQgICAgaWYgKGF1dGhSZXN1bHQgJiYgYXV0aFJlc3VsdC5hY2Nlc3NfdG9rZW4pIHtcblx0ICAgICAgJHJvb3RTY29wZS4kYnJvYWRjYXN0KCdldmVudDpnb29nbGUtcGx1cy1zaWduaW4tc3VjY2VzcycsIGF1dGhSZXN1bHQpO1xuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgJHJvb3RTY29wZS4kYnJvYWRjYXN0KCdldmVudDpnb29nbGUtcGx1cy1zaWduaW4tZmFpbHVyZScsIGF1dGhSZXN1bHQpO1xuXHQgICAgfVxuXHQgIH07XG5cdH1dKTtcblxuLyoqKi8gfSxcblxuLyoqKi8gNjQzOlxuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0Ly8gc3R5bGUtbG9hZGVyOiBBZGRzIHNvbWUgY3NzIHRvIHRoZSBET00gYnkgYWRkaW5nIGEgPHN0eWxlPiB0YWdcblx0XG5cdC8vIGxvYWQgdGhlIHN0eWxlc1xuXHR2YXIgY29udGVudCA9IF9fd2VicGFja19yZXF1aXJlX18oNjQ0KTtcblx0aWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG5cdC8vIGFkZCB0aGUgc3R5bGVzIHRvIHRoZSBET01cblx0dmFyIHVwZGF0ZSA9IF9fd2VicGFja19yZXF1aXJlX18oNDg1KShjb250ZW50LCB7fSk7XG5cdGlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuXHQvLyBIb3QgTW9kdWxlIFJlcGxhY2VtZW50XG5cdGlmKGZhbHNlKSB7XG5cdFx0Ly8gV2hlbiB0aGUgc3R5bGVzIGNoYW5nZSwgdXBkYXRlIHRoZSA8c3R5bGU+IHRhZ3Ncblx0XHRpZighY29udGVudC5sb2NhbHMpIHtcblx0XHRcdG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2luZGV4LmpzIS4vdmVuZG9yLnNjc3NcIiwgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9pbmRleC5qcyEuL3ZlbmRvci5zY3NzXCIpO1xuXHRcdFx0XHRpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcblx0XHRcdFx0dXBkYXRlKG5ld0NvbnRlbnQpO1xuXHRcdFx0fSk7XG5cdFx0fVxuXHRcdC8vIFdoZW4gdGhlIG1vZHVsZSBpcyBkaXNwb3NlZCwgcmVtb3ZlIHRoZSA8c3R5bGU+IHRhZ3Ncblx0XHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcblx0fVxuXG4vKioqLyB9LFxuXG4vKioqLyA2NDQ6XG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHRleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQ4NCkoKTtcblx0Ly8gaW1wb3J0c1xuXHRcblx0XG5cdC8vIG1vZHVsZVxuXHRleHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCJcIiwgXCJcIl0pO1xuXHRcblx0Ly8gZXhwb3J0c1xuXG5cbi8qKiovIH0sXG5cbi8qKiovIDY0NTpcbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdC8vIHN0eWxlLWxvYWRlcjogQWRkcyBzb21lIGNzcyB0byB0aGUgRE9NIGJ5IGFkZGluZyBhIDxzdHlsZT4gdGFnXG5cdFxuXHQvLyBsb2FkIHRoZSBzdHlsZXNcblx0dmFyIGNvbnRlbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDY0Nik7XG5cdGlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuXHQvLyBhZGQgdGhlIHN0eWxlcyB0byB0aGUgRE9NXG5cdHZhciB1cGRhdGUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDQ4NSkoY29udGVudCwge30pO1xuXHRpZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2Fscztcblx0Ly8gSG90IE1vZHVsZSBSZXBsYWNlbWVudFxuXHRpZihmYWxzZSkge1xuXHRcdC8vIFdoZW4gdGhlIHN0eWxlcyBjaGFuZ2UsIHVwZGF0ZSB0aGUgPHN0eWxlPiB0YWdzXG5cdFx0aWYoIWNvbnRlbnQubG9jYWxzKSB7XG5cdFx0XHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9pbmRleC5qcyEuL2luZGV4LnNjc3NcIiwgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9pbmRleC5qcyEuL2luZGV4LnNjc3NcIik7XG5cdFx0XHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXHRcdFx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdFx0XHR9KTtcblx0XHR9XG5cdFx0Ly8gV2hlbiB0aGUgbW9kdWxlIGlzIGRpc3Bvc2VkLCByZW1vdmUgdGhlIDxzdHlsZT4gdGFnc1xuXHRcdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xuXHR9XG5cbi8qKiovIH0sXG5cbi8qKiovIDY0Njpcbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdGV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IF9fd2VicGFja19yZXF1aXJlX18oNDg0KSgpO1xuXHQvLyBpbXBvcnRzXG5cdFxuXHRcblx0Ly8gbW9kdWxlXG5cdGV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi5kaXN0cmlidXRvci1zZWxlY3Rpb257Zm9udC1zaXplOjE2cHQ7cGFkZGluZzozcHg7bWFyZ2luOjNweH1ib2R5e21hcmdpbi10b3A6MTAwcHg7YmFja2dyb3VuZC1jb2xvcjp0cmFuc3BhcmVudH1AbWVkaWEgKG1pbi13aWR0aDo3NjhweCl7Ym9keXttYXJnaW4tdG9wOjUwcHh9fSN3cmFwcGVye3BhZGRpbmctbGVmdDowfSNwYWdlLXdyYXBwZXJ7d2lkdGg6MTAwJTtwYWRkaW5nOjA7YmFja2dyb3VuZC1jb2xvcjojZmZmfS5odWdle2ZvbnQtc2l6ZTo1MHB4O2xpbmUtaGVpZ2h0Om5vcm1hbH1AbWVkaWEgKG1pbi13aWR0aDo3NjhweCl7I3dyYXBwZXJ7cGFkZGluZy1sZWZ0OjIyNXB4fSNwYWdlLXdyYXBwZXJ7cGFkZGluZzoxMHB4fX0ubWFyZ2luLXRvcC0wNXttYXJnaW4tdG9wOi41ZW19Lm1hcmdpbi10b3AtMTV7bWFyZ2luLXRvcDoxLjVlbX0ubWFyZ2luLXRvcC0yMHttYXJnaW4tdG9wOjJlbX0ubWFyZ2luLXRvcC0yNXttYXJnaW4tdG9wOjIuNWVtfS5tYXJnaW4tdG9wLTUwe21hcmdpbi10b3A6NWVtfS5pc3N1ZS13YXJuaW5nLWJhY2tncm91bmR7YmFja2dyb3VuZC1jb2xvcjpvcmFuZ2V9Lmlzc3VlLXdhcm5pbmctdGV4dHtjb2xvcjpvcmFuZ2V9Lmlzc3VlLWRhbmdlci1iYWNrZ3JvdW5ke2JhY2tncm91bmQtY29sb3I6cmVkfS5pc3N1ZS1kYW5nZXItdGV4dHtjb2xvcjpyZWR9Lmlzc3VlLW5vcm1hbC1iYWNrZ3JvdW5ke2JhY2tncm91bmQtY29sb3I6Z3JlZW59Lmlzc3VlLW5vcm1hbC10ZXh0e2NvbG9yOmdyZWVufS51cC10cnVlLWJhY2tncm91bmR7YmFja2dyb3VuZC1jb2xvcjpncmVlbn0udXAtZmFsc2UtYmFja2dyb3VuZHtiYWNrZ3JvdW5kLWNvbG9yOnJlZH0ubmF2YmFyLWRlZmF1bHR7YmFja2dyb3VuZC1jb2xvcjojMWI3NWJiO2JvcmRlci1jb2xvcjojMTU1OThlfS5uYXZiYXItZGVmYXVsdCAubmF2YmFyLWJyYW5ke2NvbG9yOiNmZmZ9Lm5hdmJhci1kZWZhdWx0IC5uYXZiYXItYnJhbmQ6Zm9jdXMsLm5hdmJhci1kZWZhdWx0IC5uYXZiYXItYnJhbmQ6aG92ZXJ7Y29sb3I6IzU1YTdlN30ubmF2YmFyLWRlZmF1bHQgLm5hdmJhci1uYXY+bGk+YSwubmF2YmFyLWRlZmF1bHQgLm5hdmJhci1uYXY+bGk+YTpmb2N1cywubmF2YmFyLWRlZmF1bHQgLm5hdmJhci1uYXY+bGk+YTpob3Zlcntjb2xvcjojZmZmfS5uYXZiYXItZGVmYXVsdCAubmF2YmFyLW5hdj4uYWN0aXZlPmEsLm5hdmJhci1kZWZhdWx0IC5uYXZiYXItbmF2Pi5hY3RpdmU+YTpmb2N1cywubmF2YmFyLWRlZmF1bHQgLm5hdmJhci1uYXY+LmFjdGl2ZT5hOmhvdmVye2NvbG9yOiNmZmY7YmFja2dyb3VuZC1jb2xvcjojYWZkNWYzfS5uYXZiYXItZGVmYXVsdCAubmF2YmFyLW5hdj4ub3Blbj5hLC5uYXZiYXItZGVmYXVsdCAubmF2YmFyLW5hdj4ub3Blbj5hOmZvY3VzLC5uYXZiYXItZGVmYXVsdCAubmF2YmFyLW5hdj4ub3Blbj5hOmhvdmVye2NvbG9yOiM1NTU7YmFja2dyb3VuZC1jb2xvcjojZDVkNWQ1fS5uYXZiYXItZGVmYXVsdCAubmF2YmFyLW5hdj4uZHJvcGRvd24+YSAuY2FyZXR7Ym9yZGVyLXRvcC1jb2xvcjojNzc3O2JvcmRlci1ib3R0b20tY29sb3I6Izc3N30ubmF2YmFyLWRlZmF1bHQgLm5hdmJhci1uYXY+LmRyb3Bkb3duPmE6Zm9jdXMgLmNhcmV0LC5uYXZiYXItZGVmYXVsdCAubmF2YmFyLW5hdj4uZHJvcGRvd24+YTpob3ZlciAuY2FyZXR7Ym9yZGVyLXRvcC1jb2xvcjojMzMzO2JvcmRlci1ib3R0b20tY29sb3I6IzMzM30ubmF2YmFyLWRlZmF1bHQgLm5hdmJhci1uYXY+Lm9wZW4+YSAuY2FyZXQsLm5hdmJhci1kZWZhdWx0IC5uYXZiYXItbmF2Pi5vcGVuPmE6Zm9jdXMgLmNhcmV0LC5uYXZiYXItZGVmYXVsdCAubmF2YmFyLW5hdj4ub3Blbj5hOmhvdmVyIC5jYXJldHtib3JkZXItdG9wLWNvbG9yOiM1NTU7Ym9yZGVyLWJvdHRvbS1jb2xvcjojNTU1fS5uYXZiYXItZGVmYXVsdCAubmF2YmFyLXRvZ2dsZXtib3JkZXItY29sb3I6I2RkZH0ubmF2YmFyLWRlZmF1bHQgLm5hdmJhci10b2dnbGU6Zm9jdXMsLm5hdmJhci1kZWZhdWx0IC5uYXZiYXItdG9nZ2xlOmhvdmVye2JhY2tncm91bmQtY29sb3I6I2RkZH0ubmF2YmFyLWRlZmF1bHQgLm5hdmJhci10b2dnbGUgLmljb24tYmFye2JhY2tncm91bmQtY29sb3I6I2NjY31AbWVkaWEgKG1heC13aWR0aDo3NjdweCl7Lm5hdmJhci1kZWZhdWx0IC5uYXZiYXItbmF2IC5vcGVuIC5kcm9wZG93bi1tZW51PmxpPmF7Y29sb3I6Izc3N30ubmF2YmFyLWRlZmF1bHQgLm5hdmJhci1uYXYgLm9wZW4gLmRyb3Bkb3duLW1lbnU+bGk+YTpmb2N1cywubmF2YmFyLWRlZmF1bHQgLm5hdmJhci1uYXYgLm9wZW4gLmRyb3Bkb3duLW1lbnU+bGk+YTpob3Zlcntjb2xvcjojMzMzfX0udG9wLW5hdntwYWRkaW5nOjAgMTVweH0udG9wLW5hdj5saXtkaXNwbGF5OmlubGluZS1ibG9jaztmbG9hdDpsZWZ0fS50b3AtbmF2PmxpPmF7cGFkZGluZy10b3A6MTVweDtwYWRkaW5nLWJvdHRvbToxNXB4O2xpbmUtaGVpZ2h0OjIwcHg7Y29sb3I6I2VmZWZlZn0udG9wLW5hdj4ub3Blbj5hLC50b3AtbmF2Pi5vcGVuPmE6Zm9jdXMsLnRvcC1uYXY+Lm9wZW4+YTpob3ZlciwudG9wLW5hdj5saT5hOmZvY3VzLC50b3AtbmF2PmxpPmE6aG92ZXJ7Y29sb3I6I2ZmZjtiYWNrZ3JvdW5kLWNvbG9yOiMxYjc1YmJ9LnRvcC1uYXY+Lm9wZW4+LmRyb3Bkb3duLW1lbnV7ZmxvYXQ6bGVmdDtwb3NpdGlvbjphYnNvbHV0ZTttYXJnaW4tdG9wOjA7Ym9yZGVyOjFweCBzb2xpZCByZ2JhKDAsMCwwLC4xNSk7Ym9yZGVyLXRvcC1sZWZ0LXJhZGl1czowO2JvcmRlci10b3AtcmlnaHQtcmFkaXVzOjA7YmFja2dyb3VuZC1jb2xvcjojZmZmO2JveC1zaGFkb3c6MCA2cHggMTJweCByZ2JhKDAsMCwwLC4xNzUpfS50b3AtbmF2Pi5vcGVuPi5kcm9wZG93bi1tZW51PmxpPmF7d2hpdGUtc3BhY2U6bm9ybWFsfXVsLm1lc3NhZ2UtZHJvcGRvd257cGFkZGluZzowO21heC1oZWlnaHQ6MjUwcHg7b3ZlcmZsb3cteDpoaWRkZW47b3ZlcmZsb3cteTphdXRvfWxpLm1lc3NhZ2UtcHJldmlld3t3aWR0aDoyNzVweDtib3JkZXItYm90dG9tOjFweCBzb2xpZCByZ2JhKDAsMCwwLC4xNSl9bGkubWVzc2FnZS1wcmV2aWV3PmF7cGFkZGluZy10b3A6MTVweDtwYWRkaW5nLWJvdHRvbToxNXB4fWxpLm1lc3NhZ2UtZm9vdGVye21hcmdpbjo1cHggMH11bC5hbGVydC1kcm9wZG93bnt3aWR0aDoyMDBweH1AbWVkaWEgKG1pbi13aWR0aDo3NjhweCl7LnNpZGUtbmF2e3Bvc2l0aW9uOmZpeGVkO3RvcDo1MXB4O2xlZnQ6MjI1cHg7bWFyZ2luLWxlZnQ6LTIyNXB4O2JvcmRlcjpub25lO2JvcmRlci1yYWRpdXM6MDtvdmVyZmxvdy15OmF1dG87YmFja2dyb3VuZC1jb2xvcjojMWI3NWJiO2JvdHRvbTowO292ZXJmbG93LXg6aGlkZGVuO3BhZGRpbmctYm90dG9tOjQwcHh9LnNpZGUtbmF2LC5zaWRlLW5hdj5saT5he3dpZHRoOjIyNXB4fS5zaWRlLW5hdiBsaSBhOmZvY3VzLC5zaWRlLW5hdiBsaSBhOmhvdmVye291dGxpbmU6bm9uZTtiYWNrZ3JvdW5kLWNvbG9yOiMzZjljZTMhaW1wb3J0YW50fX0uc2lkZS1uYXY+bGk+dWx7cGFkZGluZzowfS5zaWRlLW5hdj5saT51bD5saT5he2Rpc3BsYXk6YmxvY2s7cGFkZGluZzoxMHB4IDE1cHggMTBweCAzOHB4O3RleHQtZGVjb3JhdGlvbjpub25lO2NvbG9yOiNkNGQ0ZDR9LnNpZGUtbmF2PmxpPnVsPmxpPmE6aG92ZXJ7Y29sb3I6I2ZmZn0uZmxvdC1jaGFydHtkaXNwbGF5OmJsb2NrO2hlaWdodDo0MDBweH0uZmxvdC1jaGFydC1jb250ZW50e3dpZHRoOjEwMCU7aGVpZ2h0OjEwMCV9Lmh1Z2V7Zm9udC1zaXplOjQwcHh9LnBhbmVsLWdyZWVue2JvcmRlci1jb2xvcjojNWNiODVjfS5wYW5lbC1ncmVlbj4ucGFuZWwtaGVhZGluZ3tib3JkZXItY29sb3I6IzVjYjg1Yztjb2xvcjojZmZmO2JhY2tncm91bmQtY29sb3I6IzVjYjg1Y30ucGFuZWwtZ3JlZW4+YXtjb2xvcjojNWNiODVjfS5wYW5lbC1ncmVlbj5hOmhvdmVye2NvbG9yOiMzZDhiM2R9LnBhbmVsLXJlZHtib3JkZXItY29sb3I6I2Q5NTM0Zn0ucGFuZWwtcmVkPi5wYW5lbC1oZWFkaW5ne2JvcmRlci1jb2xvcjojZDk1MzRmO2NvbG9yOiNmZmY7YmFja2dyb3VuZC1jb2xvcjojZDk1MzRmfS5wYW5lbC1yZWQ+YXtjb2xvcjojZDk1MzRmfS5wYW5lbC1yZWQ+YTpob3Zlcntjb2xvcjojYjUyYjI3fS5wYW5lbC15ZWxsb3d7Ym9yZGVyLWNvbG9yOiNmMGFkNGV9LnBhbmVsLXllbGxvdz4ucGFuZWwtaGVhZGluZ3tib3JkZXItY29sb3I6I2YwYWQ0ZTtjb2xvcjojZmZmO2JhY2tncm91bmQtY29sb3I6I2YwYWQ0ZX0ucGFuZWwteWVsbG93PmF7Y29sb3I6I2YwYWQ0ZX0ucGFuZWwteWVsbG93PmE6aG92ZXJ7Y29sb3I6I2RmOGExM30udG9vbGJhcnttYXJnaW4tYm90dG9tOjEwcHh9LmVudGl0eS1rZXl7Zm9udC1mYW1pbHk6TW9uYWNvLENvbnNvbGFzLEx1Y2lkYSBDb25zb2xlLGRlamF2dSBzYW5zIG1vbm8sbW9ub3NwYWNlO2ZvbnQtc2l6ZToxMXB4fS5wcm9vZi1vZi1wbGF5LWxhYmVse3BhZGRpbmctYm90dG9tOjEwcHg7cGFkZGluZy10b3A6MTBweH0uY29weS1yZWFkeS10cmFuc3BhcmVudHtjb2xvcjp0cmFuc3BhcmVudH0ubm8tZGV2aWNlc3t0ZXh0LWFsaWduOmNlbnRlcn0ucHJvcGVydGllcy13b3JkLWJyZWFre3dpZHRoOjM5MHB4O3dvcmQtd3JhcDpicmVhay13b3JkO2Rpc3BsYXk6YmxvY2t9LmNvbW1hbmQtaGlzdG9yeS1jb21tYW5ke3dpZHRoOjM3NXB4O3dvcmQtd3JhcDpicmVhay13b3JkO2Rpc3BsYXk6YmxvY2t9Lmhvc3RuYW1lLXdvcmQtYnJlYWt7d2lkdGg6MjAwcHg7d29yZC13cmFwOmJyZWFrLXdvcmQ7ZGlzcGxheTppbmxpbmUtYmxvY2t9W2RhdGEtbmctY2xpY2tdLFtuZy1jbGlja10sW3gtbmctY2xpY2tde2N1cnNvcjpwb2ludGVyfSNwcm9vZnBsYXktc2VsZWN0ZWQtaXRlbXN7bWluLXdpZHRoOjAhaW1wb3J0YW50O21hcmdpbjowIGF1dG87cGFkZGluZzowIGF1dG99LnJhZGlvLWJ1dHRvbntwYWRkaW5nOjNweH0uaG9yaXpvbnRhbC1zdWJtaXR7bWFyZ2luOi41ZW19Lmhvcml6b250YWwtc3VibWl0LC5yYWRpby1ob3Jpem9udGFse2Rpc3BsYXk6ZmxleDthbGlnbi1zZWxmOmNlbnRlcjstbXMtZmxleC1hbGlnbjpjZW50ZXI7LXdlYmtpdC1hbGlnbi1pdGVtczpjZW50ZXI7LXdlYmtpdC1ib3gtYWxpZ246Y2VudGVyfW1kLXRvb2xiYXIubWQtZGVmYXVsdC10aGVtZTpub3QoLm1kLW1lbnUtdG9vbGJhciksbWQtdG9vbGJhcjpub3QoLm1kLW1lbnUtdG9vbGJhcil7YmFja2dyb3VuZC1jb2xvcjojMWI3NWJiIWltcG9ydGFudDttYXgtaGVpZ2h0OjY0cHg7bWluLWhlaWdodDo2NHB4fS5tZC10b29sYmFyLXRvb2xze2JhY2tncm91bmQtY29sb3I6IzAwMCFpbXBvcnRhbnQ7bWF4LWhlaWdodDo2NHB4O21pbi1oZWlnaHQ6NjRweH0uc2t5a2l0LWltYWdle21heC13aWR0aDoxMDAlO2hlaWdodDozM3B4fUBtZWRpYSAobWF4LXdpZHRoOjc2N3B4KXttZC10b29sYmFyLm1kLWRlZmF1bHQtdGhlbWU6bm90KC5tZC1tZW51LXRvb2xiYXIpLG1kLXRvb2xiYXI6bm90KC5tZC1tZW51LXRvb2xiYXIpe21hcmdpbi10b3A6LTUwcHg7bWFyZ2luLWJvdHRvbTo1MHB4fX0uY2VudGVyLWJsb2Nre3RleHQtYWxpZ246Y2VudGVyfS5lbGxpcHNpcy1vdmVyZmxvdywucHJvb2Ytb2YtcGxheS1zZWxlY3RlZC1pdGVte3dpZHRoOjEwMCU7d2hpdGUtc3BhY2U6bm93cmFwO292ZXJmbG93OmhpZGRlbjt0ZXh0LWFsaWduOmxlZnQ7dGV4dC1vdmVyZmxvdzplbGxpcHNpc30ucHJvb2Ytb2YtcGxheS10ZW5hbnQtbmFtZS1vcHRpb257d2lkdGg6N2VtO3doaXRlLXNwYWNlOm5vd3JhcDtvdmVyZmxvdzpoaWRkZW47dGV4dC1hbGlnbjpjZW50ZXI7cG9zaXRpdGlvbjphYnNvbHV0ZTt0ZXh0LW92ZXJmbG93OmVsbGlwc2lzfS5wcm9vZi1vZi1wbGF5LWhvcml6b250YWwtdG9wLWJhcnthbGlnbi1zZWxmOmNlbnRlcjstbXMtZmxleC1hbGlnbjpjZW50ZXI7LXdlYmtpdC1hbGlnbi1pdGVtczpjZW50ZXI7LXdlYmtpdC1ib3gtYWxpZ246Y2VudGVyO21hcmdpbi10b3A6LjVlbTttYXJnaW4tYm90dG9tOi41ZW07YWxpZ24taXRlbXM6Y2VudGVyfS5teS1mbGV4LC5wcm9vZi1vZi1wbGF5LWhvcml6b250YWwtdG9wLWJhcntkaXNwbGF5OmZsZXg7anVzdGlmeS1jb250ZW50OmNlbnRlcn0uYmlnZ2VyLWJ1dHRvbnN7cGFkZGluZzouNGVtO21pbi13aWR0aDo4OHB4O2JvcmRlci1yYWRpdXM6NXB4O2ZvbnQtc2l6ZToxNnB4O3RleHQtYWxpZ246Y2VudGVyO3RleHQtZGVjb3JhdGlvbjpub25lO2JvcmRlcjpub25lO291dGxpbmU6bm9uZX0uYWRtaW4tY29udGFpbmVye2Rpc3BsYXk6ZmxleDthbGlnbi1jb250ZW50OmZsZXgtc3RhcnR9LnJlZ2lzdHJhdGlvbi1ldmVudC1jb2x1bW57aGVpZ2h0OjExMHB4O2Rpc3BsYXk6aW5saW5lLWJsb2NrO3ZlcnRpY2FsLWFsaWduOnRvcDtvdmVyZmxvdzpzY3JvbGx9LnB1bGwtY29tbWFuZC1zZW5kLWJ1dHRvbi11cHttYXJnaW4tdG9wOi0ycHh9aGVhZGVyLmR0cC1oZWFkZXJ7YmFja2dyb3VuZDojMWI3NWJiIWltcG9ydGFudH0uZHRwIGRpdi5kdHAtZGF0ZSwuZHRwIGRpdi5kdHAtdGltZXtiYWNrZ3JvdW5kOiMwMDB9LmR0cCAuZHRwLWFjdHVhbC1tZXJpZGllbiBhLnNlbGVjdGVkLC5kdHAgLmR0cC1waWNrZXItdGltZT5hLmR0cC1zZWxlY3QtaG91ci5zZWxlY3RlZCwuZHRwIHRhYmxlLmR0cC1waWNrZXItZGF5cyB0cj50ZD5hLnNlbGVjdGVke2JhY2tncm91bmQ6IzFiNzViYiFpbXBvcnRhbnR9LmR0cCAuZHRwLWhhbmQub257YmFja2dyb3VuZDojMDAwfS5kZXZpY2UtcHJvcGVydGllcy1zd2l0Y2h7bWFyZ2luLXRvcDotMXB4fS5tZC1jb250ZW50LWNvbW1hbmQtb3ZlcnJpZGUgbWQtY29udGVudHtvdmVyZmxvdzp1bnNldH0ucHVsbC10b29sdGlwLWxlZnR7bWFyZ2luLWxlZnQ6LTU1cHh9LmNvbW1hbmQtYnV0dG9uLXJpZ2h0e2Zsb2F0OnJpZ2h0O2ZsZXgtZGlyZWN0aW9uOnJvdy1yZXZlcnNlfW1kLXNlbGVjdHtkaXNwbGF5OmJsb2NrO21hcmdpbjoxMHB4IDAgOHB4O3BhZGRpbmctYm90dG9tOjJweDtwb3NpdGlvbjpyZWxhdGl2ZTttaW4td2lkdGg6MTgwcHg7bWF4LXdpZHRoOjE4MHB4fS5zbWFsbC1kZWxldGUtYnV0dG9ue2Zsb2F0OnJpZ2h0O21pbi13aWR0aDoyNXB4O21hcmdpbi10b3A6LTE1cHg7bWFyZ2luLXJpZ2h0Oi01cHh9LnRlbmFudC1pbWFnZS1uYW1le3dpZHRoOjEwZW07d2hpdGUtc3BhY2U6bm93cmFwO292ZXJmbG93OmhpZGRlbjt0ZXh0LW92ZXJmbG93OmVsbGlwc2lzfVwiLCBcIlwiXSk7XG5cdFxuXHQvLyBleHBvcnRzXG5cblxuLyoqKi8gfSxcblxuLyoqKi8gNjQ4OlxuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdFxuXHREZXZpY2VEZXRhaWxzQ29tbWFuZHNDdHJsLiRpbmplY3QgPSBbXCIkbG9nXCIsIFwiJHN0YXRlUGFyYW1zXCIsIFwiJHN0YXRlXCIsIFwiU2Vzc2lvbnNTZXJ2aWNlXCIsIFwiRGV2aWNlc1NlcnZpY2VcIiwgXCJMb2NhdGlvbnNTZXJ2aWNlXCIsIFwiQ29tbWFuZHNTZXJ2aWNlXCIsIFwiVGltZXpvbmVzU2VydmljZVwiLCBcInN3ZWV0XCIsIFwiUHJvZ3Jlc3NCYXJTZXJ2aWNlXCIsIFwiJG1kRGlhbG9nXCIsIFwiVG9hc3RzU2VydmljZVwiLCBcIiR0aW1lb3V0XCJdO1xuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0ICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblx0ZXhwb3J0cy5EZXZpY2VEZXRhaWxzQ29tbWFuZHNDdHJsID0gdW5kZWZpbmVkO1xuXHRcblx0dmFyIF9tb21lbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDM3Mik7XG5cdFxuXHR2YXIgX21vbWVudDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9tb21lbnQpO1xuXHRcblx0ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblx0XG5cdGZ1bmN0aW9uIERldmljZURldGFpbHNDb21tYW5kc0N0cmwoJGxvZywgJHN0YXRlUGFyYW1zLCAkc3RhdGUsIFNlc3Npb25zU2VydmljZSwgRGV2aWNlc1NlcnZpY2UsIExvY2F0aW9uc1NlcnZpY2UsIENvbW1hbmRzU2VydmljZSwgVGltZXpvbmVzU2VydmljZSwgc3dlZXQsIFByb2dyZXNzQmFyU2VydmljZSwgJG1kRGlhbG9nLCBUb2FzdHNTZXJ2aWNlLCAkdGltZW91dCkge1xuXHQgIFwibmdJbmplY3RcIjtcblx0XG5cdCAgdmFyIHZtID0gdGhpcztcblx0ICB2bS50ZW5hbnRLZXkgPSAkc3RhdGVQYXJhbXMudGVuYW50S2V5O1xuXHQgIHZtLmRldmljZUtleSA9ICRzdGF0ZVBhcmFtcy5kZXZpY2VLZXk7XG5cdCAgdm0uZnJvbURldmljZXMgPSAkc3RhdGVQYXJhbXMuZnJvbURldmljZXMgPT09IFwidHJ1ZVwiO1xuXHQgIHZtLmN1cnJlbnREZXZpY2UgPSB7fTtcblx0ICB2bS5jb21tYW5kRXZlbnRzID0gW107XG5cdFxuXHQgIHZtLmdlbmVyYXRlTG9jYWxGcm9tVVRDID0gZnVuY3Rpb24gKFVUQ1RpbWUpIHtcblx0ICAgIHZhciBsb2NhbFRpbWUgPSBfbW9tZW50Mi5kZWZhdWx0LnV0YyhVVENUaW1lKS50b0RhdGUoKTtcblx0ICAgIHJldHVybiBsb2NhbFRpbWUgPSAoMCwgX21vbWVudDIuZGVmYXVsdCkobG9jYWxUaW1lKS5mb3JtYXQoJ1lZWVktTU0tREQgaGg6bW06c3MgQScpO1xuXHQgIH07XG5cdFxuXHQgIHZtLnJlcGxhY2VDb21tYW5kVGltZSA9IGZ1bmN0aW9uIChpc3N1ZXMpIHtcblx0ICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaXNzdWVzLmxlbmd0aDsgaSsrKSB7XG5cdCAgICAgIHZhciBlYWNoID0gaXNzdWVzW2ldO1xuXHQgICAgICBpZiAoZWFjaC5wb3N0ZWRUaW1lKSB7XG5cdCAgICAgICAgZWFjaC5wb3N0ZWRUaW1lID0gdm0uZ2VuZXJhdGVMb2NhbEZyb21VVEMoZWFjaC5wb3N0ZWRUaW1lKTtcblx0ICAgICAgfVxuXHQgICAgICBpZiAoZWFjaC5jb25maXJtZWRUaW1lKSB7XG5cdCAgICAgICAgZWFjaC5jb25maXJtZWRUaW1lID0gdm0uZ2VuZXJhdGVMb2NhbEZyb21VVEMoZWFjaC5jb25maXJtZWRUaW1lKTtcblx0ICAgICAgfVxuXHQgICAgfVxuXHQgICAgcmV0dXJuO1xuXHQgIH07XG5cdFxuXHQgIHZtLmdldEV2ZW50cyA9IGZ1bmN0aW9uIChkZXZpY2VLZXksIHByZXYsIG5leHQpIHtcblx0ICAgIFByb2dyZXNzQmFyU2VydmljZS5zdGFydCgpO1xuXHQgICAgdmFyIGNvbW1hbmRFdmVudHNQcm9taXNlID0gRGV2aWNlc1NlcnZpY2UuZ2V0Q29tbWFuZEV2ZW50c0J5S2V5KGRldmljZUtleSwgcHJldiwgbmV4dCk7XG5cdCAgICByZXR1cm4gY29tbWFuZEV2ZW50c1Byb21pc2UudGhlbihmdW5jdGlvbiAoZGF0YSkge1xuXHQgICAgICB2bS5yZXBsYWNlQ29tbWFuZFRpbWUoZGF0YS5ldmVudHMpO1xuXHQgICAgICB2bS5ldmVudF9uZXh0X2N1cnNvciA9IGRhdGEubmV4dF9jdXJzb3I7XG5cdCAgICAgIHZtLmV2ZW50X3ByZXZfY3Vyc29yID0gZGF0YS5wcmV2X2N1cnNvcjtcblx0ICAgICAgdm0uY29tbWFuZEV2ZW50cyA9IGRhdGEuZXZlbnRzO1xuXHQgICAgICByZXR1cm4gUHJvZ3Jlc3NCYXJTZXJ2aWNlLmNvbXBsZXRlKCk7XG5cdCAgICB9KTtcblx0ICB9O1xuXHRcblx0ICB2bS5nZXRFdmVudHNUaW1lT3V0ID0gZnVuY3Rpb24gKGRldmljZUtleSwgcHJldiwgbmV4dCkge1xuXHQgICAgcmV0dXJuICR0aW1lb3V0KGZ1bmN0aW9uICgpIHtcblx0ICAgICAgcmV0dXJuIHZtLmdldEV2ZW50cyhkZXZpY2VLZXksIHByZXYsIG5leHQpO1xuXHQgICAgfSwgMTAwMCk7XG5cdCAgfTtcblx0XG5cdCAgdm0uY29tbWFuZEhpc3RvcnlTZWxlY3RlZCA9IGZ1bmN0aW9uICgpIHtcblx0ICAgIHJldHVybiB2bS5nZXRFdmVudHModm0uZGV2aWNlS2V5KTtcblx0ICB9O1xuXHRcblx0ICB2bS5wYWdpbmF0ZUV2ZW50Q2FsbCA9IGZ1bmN0aW9uIChmb3J3YXJkKSB7XG5cdCAgICBpZiAoZm9yd2FyZCkge1xuXHQgICAgICByZXR1cm4gdm0uZ2V0RXZlbnRzKHZtLmRldmljZUtleSwgbnVsbCwgdm0uZXZlbnRfbmV4dF9jdXJzb3IpO1xuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgcmV0dXJuIHZtLmdldEV2ZW50cyh2bS5kZXZpY2VLZXksIHZtLmV2ZW50X3ByZXZfY3Vyc29yLCBudWxsKTtcblx0ICAgIH1cblx0ICB9O1xuXHRcblx0ICB2bS5pbml0aWFsaXplID0gZnVuY3Rpb24gKCkge1xuXHQgICAgdmFyIGRldmljZVByb21pc2UgPSBEZXZpY2VzU2VydmljZS5nZXREZXZpY2VCeUtleSh2bS5kZXZpY2VLZXkpO1xuXHQgICAgZGV2aWNlUHJvbWlzZS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuXHQgICAgICByZXR1cm4gdm0ub25HZXREZXZpY2VTdWNjZXNzKHJlc3BvbnNlKTtcblx0ICAgIH0sIGZ1bmN0aW9uIChyZXNwb25zZSkge1xuXHQgICAgICByZXR1cm4gdm0ub25HZXREZXZpY2VGYWlsdXJlKHJlc3BvbnNlKTtcblx0ICAgIH0pO1xuXHRcblx0ICAgIHJldHVybiB2bS5nZXRFdmVudHModm0uZGV2aWNlS2V5KTtcblx0ICB9O1xuXHRcblx0ICB2bS5vbkdldERldmljZVN1Y2Nlc3MgPSBmdW5jdGlvbiAocmVzcG9uc2UpIHtcblx0ICAgIHZtLmN1cnJlbnREZXZpY2UgPSByZXNwb25zZTtcblx0ICAgIGlmIChyZXNwb25zZS50aW1lem9uZSAhPT0gdm0uc2VsZWN0ZWRUaW1lem9uZSkge1xuXHQgICAgICB2bS5zZWxlY3RlZFRpbWV6b25lID0gcmVzcG9uc2UudGltZXpvbmU7XG5cdCAgICB9XG5cdCAgICBpZiAodm0udGVuYW50S2V5ID09PSB1bmRlZmluZWQpIHtcblx0ICAgICAgdm0udGVuYW50S2V5ID0gdm0uY3VycmVudERldmljZS50ZW5hbnRLZXk7XG5cdCAgICB9XG5cdCAgICBpZiAoJHN0YXRlUGFyYW1zLmZyb21EZXZpY2VzID09PSBcInRydWVcIikge1xuXHQgICAgICB2bS5iYWNrVXJsID0gJy8jL2RldmljZXMnO1xuXHQgICAgICByZXR1cm4gdm0uYmFja1VybFRleHQgPSAnQmFjayB0byBkZXZpY2VzJztcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIGlmICh2bS5jdXJyZW50RGV2aWNlLmlzVW5tYW5hZ2VkRGV2aWNlID09PSB0cnVlKSB7XG5cdCAgICAgICAgdm0uYmFja1VybCA9IFwiLyMvdGVuYW50cy9cIiArIHZtLnRlbmFudEtleSArIFwiL3VubWFuYWdlZFwiO1xuXHQgICAgICAgIHJldHVybiB2bS5iYWNrVXJsVGV4dCA9ICdCYWNrIHRvIHRlbmFudCB1bm1hbmFnZWQgZGV2aWNlcyc7XG5cdCAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgdm0uYmFja1VybCA9IFwiLyMvdGVuYW50cy9cIiArIHZtLnRlbmFudEtleSArIFwiL21hbmFnZWRcIjtcblx0ICAgICAgICByZXR1cm4gdm0uYmFja1VybFRleHQgPSAnQmFjayB0byB0ZW5hbnQgbWFuYWdlZCBkZXZpY2VzJztcblx0ICAgICAgfVxuXHQgICAgfVxuXHQgIH07XG5cdFxuXHQgIHZtLm9uR2V0RGV2aWNlRmFpbHVyZSA9IGZ1bmN0aW9uIChyZXNwb25zZSkge1xuXHQgICAgVG9hc3RzU2VydmljZS5zaG93RXJyb3JUb2FzdCgnT29wcy4gV2Ugd2VyZSB1bmFibGUgdG8gZmV0Y2ggdGhlIGRldGFpbHMgZm9yIHRoaXMgZGV2aWNlIGF0IHRoaXMgdGltZS4nKTtcblx0ICAgIHZhciBlcnJvck1lc3NhZ2UgPSBcIk5vIGRldGFpbCBmb3IgZGV2aWNlX2tleSAjXCIgKyB2bS5kZXZpY2VLZXkgKyBcIi4gRXJyb3I6IFwiICsgcmVzcG9uc2Uuc3RhdHVzICsgXCIgXCIgKyByZXNwb25zZS5zdGF0dXNUZXh0O1xuXHQgICAgJGxvZy5lcnJvcihlcnJvck1lc3NhZ2UpO1xuXHQgICAgcmV0dXJuICRzdGF0ZS5nbygnZGV2aWNlcycpO1xuXHQgIH07XG5cdFxuXHQgIHZtLm9uUmVzZXRDb250ZW50ID0gZnVuY3Rpb24gKCkge1xuXHQgICAgUHJvZ3Jlc3NCYXJTZXJ2aWNlLnN0YXJ0KCk7XG5cdCAgICB2YXIgcHJvbWlzZSA9IENvbW1hbmRzU2VydmljZS5jb250ZW50RGVsZXRlKHZtLmRldmljZUtleSk7XG5cdCAgICByZXR1cm4gcHJvbWlzZS50aGVuKHZtLm9uUmVzZXRDb250ZW50U3VjY2Vzcywgdm0ub25SZXNldENvbnRlbnRGYWlsdXJlKTtcblx0ICB9O1xuXHRcblx0ICB2bS5vblJlc2V0Q29udGVudFN1Y2Nlc3MgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICBQcm9ncmVzc0JhclNlcnZpY2UuY29tcGxldGUoKTtcblx0ICAgIHZtLmdldEV2ZW50c1RpbWVPdXQodm0uZGV2aWNlS2V5KTtcblx0ICAgIHJldHVybiBUb2FzdHNTZXJ2aWNlLnNob3dTdWNjZXNzVG9hc3QoXCJXZSBwb3N0ZWQgeW91ciByZXNldCBjb250ZW50IGNvbW1hbmQgaW50byB0aGUgcGxheWVyJ3MgcXVldWUuXCIpO1xuXHQgIH07XG5cdFxuXHQgIHZtLm9uUmVzZXRDb250ZW50RmFpbHVyZSA9IGZ1bmN0aW9uIChlcnJvcikge1xuXHQgICAgUHJvZ3Jlc3NCYXJTZXJ2aWNlLmNvbXBsZXRlKCk7XG5cdCAgICAkbG9nLmVycm9yKFwiUmVzZXQgY29udGVudCBjb21tYW5kIGVycm9yOiBcIiArIGVycm9yLnN0YXR1cyArIFwiIFwiICsgZXJyb3Iuc3RhdHVzVGV4dCk7XG5cdCAgICByZXR1cm4gc3dlZXQuc2hvdygnT29wcy4uLicsIFwiV2Ugd2VyZSB1bmFibGUgdG8gcG9zdCB5b3VyIHJlc2V0IGNvbnRlbnQgY29tbWFuZCBpbnRvIHRoZSBwbGF5ZXIncyBxdWV1ZS5cIiwgJ2Vycm9yJyk7XG5cdCAgfTtcblx0XG5cdCAgdm0ub25VcGRhdGVDb250ZW50ID0gZnVuY3Rpb24gKCkge1xuXHQgICAgUHJvZ3Jlc3NCYXJTZXJ2aWNlLnN0YXJ0KCk7XG5cdCAgICB2YXIgcHJvbWlzZSA9IENvbW1hbmRzU2VydmljZS5jb250ZW50VXBkYXRlKHZtLmRldmljZUtleSk7XG5cdCAgICByZXR1cm4gcHJvbWlzZS50aGVuKHZtLm9uVXBkYXRlQ29udGVudFN1Y2Nlc3MsIHZtLm9uVXBkYXRlQ29udGVudEZhaWx1cmUpO1xuXHQgIH07XG5cdFxuXHQgIHZtLm9uVXBkYXRlQ29udGVudFN1Y2Nlc3MgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICBQcm9ncmVzc0JhclNlcnZpY2UuY29tcGxldGUoKTtcblx0ICAgIHZtLmdldEV2ZW50c1RpbWVPdXQodm0uZGV2aWNlS2V5KTtcblx0ICAgIHJldHVybiBUb2FzdHNTZXJ2aWNlLnNob3dTdWNjZXNzVG9hc3QoXCJXZSBwb3N0ZWQgeW91ciB1cGRhdGUgY29udGVudCBjb21tYW5kIGludG8gdGhlIHBsYXllcidzIHF1ZXVlLlwiKTtcblx0ICB9O1xuXHRcblx0ICB2bS5vblVwZGF0ZUNvbnRlbnRGYWlsdXJlID0gZnVuY3Rpb24gKGVycm9yKSB7XG5cdCAgICBQcm9ncmVzc0JhclNlcnZpY2UuY29tcGxldGUoKTtcblx0ICAgICRsb2cuZXJyb3IoXCJDb250ZW50IHVwZGF0ZSBjb21tYW5kIGVycm9yOiBcIiArIGVycm9yLnN0YXR1cyArIFwiIFwiICsgZXJyb3Iuc3RhdHVzVGV4dCk7XG5cdCAgICByZXR1cm4gc3dlZXQuc2hvdygnT29wcy4uLicsIFwiV2Ugd2VyZSB1bmFibGUgdG8gcG9zdCB5b3VyIHVwZGF0ZSBjb250ZW50IGNvbW1hbmQgaW50byB0aGUgcGxheWVyJ3MgcXVldWUuXCIsICdlcnJvcicpO1xuXHQgIH07XG5cdFxuXHQgIHZtLm9uUmVzZXRQbGF5ZXIgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICBQcm9ncmVzc0JhclNlcnZpY2Uuc3RhcnQoKTtcblx0ICAgIHZhciBwcm9taXNlID0gQ29tbWFuZHNTZXJ2aWNlLnJlc2V0KHZtLmRldmljZUtleSk7XG5cdCAgICByZXR1cm4gcHJvbWlzZS50aGVuKHZtLm9uUmVzZXRQbGF5ZXJTdWNjZXNzLCB2bS5vblJlc2V0UGxheWVyRmFpbHVyZSk7XG5cdCAgfTtcblx0XG5cdCAgdm0ub25SZXNldFBsYXllclN1Y2Nlc3MgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICBQcm9ncmVzc0JhclNlcnZpY2UuY29tcGxldGUoKTtcblx0ICAgIHZtLmdldEV2ZW50c1RpbWVPdXQodm0uZGV2aWNlS2V5KTtcblx0ICAgIHJldHVybiBUb2FzdHNTZXJ2aWNlLnNob3dTdWNjZXNzVG9hc3QoXCJXZSBwb3N0ZWQgeW91ciByZXNldCBwbGF5ZXIgY29tbWFuZCBpbnRvIHRoZSBwbGF5ZXIncyBxdWV1ZS5cIik7XG5cdCAgfTtcblx0XG5cdCAgdm0ub25SZXNldFBsYXllckZhaWx1cmUgPSBmdW5jdGlvbiAoZXJyb3IpIHtcblx0ICAgIFByb2dyZXNzQmFyU2VydmljZS5jb21wbGV0ZSgpO1xuXHQgICAgJGxvZy5lcnJvcihcIlJlc2V0IHBsYXllciBjb21tYW5kIGVycm9yOiBcIiArIGVycm9yLnN0YXR1cyArIFwiIFwiICsgZXJyb3Iuc3RhdHVzVGV4dCk7XG5cdCAgICByZXR1cm4gc3dlZXQuc2hvdygnT29wcy4uLicsIFwiV2Ugd2VyZSB1bmFibGUgdG8gcG9zdCB5b3VyIHJlc2V0IHBsYXllciBjb21tYW5kIGludG8gdGhlIHBsYXllcidzIHF1ZXVlLlwiLCAnZXJyb3InKTtcblx0ICB9O1xuXHRcblx0ICB2bS5vblBhbmVsT24gPSBmdW5jdGlvbiAoKSB7XG5cdCAgICBQcm9ncmVzc0JhclNlcnZpY2Uuc3RhcnQoKTtcblx0ICAgIHZhciBwcm9taXNlID0gQ29tbWFuZHNTZXJ2aWNlLnBvd2VyT24odm0uZGV2aWNlS2V5KTtcblx0ICAgIHJldHVybiBwcm9taXNlLnRoZW4odm0ub25QYW5lbE9uU3VjY2Vzcywgdm0ub25QYW5lbE9uRmFpbHVyZSk7XG5cdCAgfTtcblx0XG5cdCAgdm0ub25QYW5lbE9uU3VjY2VzcyA9IGZ1bmN0aW9uICgpIHtcblx0ICAgIFByb2dyZXNzQmFyU2VydmljZS5jb21wbGV0ZSgpO1xuXHQgICAgdm0uZ2V0RXZlbnRzVGltZU91dCh2bS5kZXZpY2VLZXkpO1xuXHQgICAgcmV0dXJuIFRvYXN0c1NlcnZpY2Uuc2hvd1N1Y2Nlc3NUb2FzdChcIldlIHBvc3RlZCB5b3VyIHBhbmVsIG9uIGNvbW1hbmQgaW50byB0aGUgcGxheWVyJ3MgcXVldWUuXCIpO1xuXHQgIH07XG5cdFxuXHQgIHZtLm9uUGFuZWxPbkZhaWx1cmUgPSBmdW5jdGlvbiAoZXJyb3IpIHtcblx0ICAgIFByb2dyZXNzQmFyU2VydmljZS5jb21wbGV0ZSgpO1xuXHQgICAgJGxvZy5lcnJvcihcIlBhbmVsIG9uIGNvbW1hbmQgZXJyb3I6IFwiICsgZXJyb3Iuc3RhdHVzICsgXCIgXCIgKyBlcnJvci5zdGF0dXNUZXh0KTtcblx0ICAgIHJldHVybiBzd2VldC5zaG93KCdPb3BzLi4uJywgXCJXZSB3ZXJlIHVuYWJsZSB0byBwb3N0IHlvdXIgcGFuZWwgb24gY29tbWFuZCBpbnRvIHRoZSBwbGF5ZXIncyBxdWV1ZS5cIiwgJ2Vycm9yJyk7XG5cdCAgfTtcblx0XG5cdCAgdm0ub25QYW5lbE9mZiA9IGZ1bmN0aW9uICgpIHtcblx0ICAgIFByb2dyZXNzQmFyU2VydmljZS5zdGFydCgpO1xuXHQgICAgdmFyIHByb21pc2UgPSBDb21tYW5kc1NlcnZpY2UucG93ZXJPZmYodm0uZGV2aWNlS2V5KTtcblx0ICAgIHJldHVybiBwcm9taXNlLnRoZW4odm0ub25QYW5lbE9mZlN1Y2Nlc3MsIHZtLm9uUGFuZWxPZmZGYWlsdXJlKTtcblx0ICB9O1xuXHRcblx0ICB2bS5vblBhbmVsT2ZmU3VjY2VzcyA9IGZ1bmN0aW9uICgpIHtcblx0ICAgIFByb2dyZXNzQmFyU2VydmljZS5jb21wbGV0ZSgpO1xuXHQgICAgdm0uZ2V0RXZlbnRzVGltZU91dCh2bS5kZXZpY2VLZXkpO1xuXHQgICAgcmV0dXJuIFRvYXN0c1NlcnZpY2Uuc2hvd1N1Y2Nlc3NUb2FzdChcIldlIHBvc3RlZCB5b3VyIHBhbmVsIG9mZiBjb21tYW5kIGludG8gdGhlIHBsYXllcidzIHF1ZXVlLlwiKTtcblx0ICB9O1xuXHRcblx0ICB2bS5vblBhbmVsT2ZmRmFpbHVyZSA9IGZ1bmN0aW9uIChlcnJvcikge1xuXHQgICAgUHJvZ3Jlc3NCYXJTZXJ2aWNlLmNvbXBsZXRlKCk7XG5cdCAgICAkbG9nLmVycm9yKFwiUGFuZWwgb2ZmIGNvbW1hbmQgZXJyb3I6IFwiICsgZXJyb3Iuc3RhdHVzICsgXCIgXCIgKyBlcnJvci5zdGF0dXNUZXh0KTtcblx0ICAgIHJldHVybiBzd2VldC5zaG93KCdPb3BzLi4uJywgXCJXZSB3ZXJlIHVuYWJsZSB0byBwb3N0IHlvdXIgcGFuZWwgb2ZmIGNvbW1hbmQgaW50byB0aGUgcGxheWVyJ3MgcXVldWUuXCIsICdlcnJvcicpO1xuXHQgIH07XG5cdFxuXHQgIHZtLm9uVXBkYXRlRGV2aWNlID0gZnVuY3Rpb24gKCkge1xuXHQgICAgUHJvZ3Jlc3NCYXJTZXJ2aWNlLnN0YXJ0KCk7XG5cdCAgICB2YXIgcHJvbWlzZSA9IENvbW1hbmRzU2VydmljZS51cGRhdGVEZXZpY2Uodm0uZGV2aWNlS2V5KTtcblx0ICAgIHJldHVybiBwcm9taXNlLnRoZW4odm0ub25VcGRhdGVEZXZpY2VTdWNjZXNzLCB2bS5vblVwZGF0ZURldmljZUZhaWx1cmUpO1xuXHQgIH07XG5cdFxuXHQgIHZtLm9uVXBkYXRlRGV2aWNlU3VjY2VzcyA9IGZ1bmN0aW9uICgpIHtcblx0ICAgIFByb2dyZXNzQmFyU2VydmljZS5jb21wbGV0ZSgpO1xuXHQgICAgdm0uZ2V0RXZlbnRzVGltZU91dCh2bS5kZXZpY2VLZXkpO1xuXHQgICAgcmV0dXJuIFRvYXN0c1NlcnZpY2Uuc2hvd1N1Y2Nlc3NUb2FzdChcIldlIHBvc3RlZCB5b3VyIHVwZGF0ZSBkZXZpY2UgY29tbWFuZCBpbnRvIHRoZSBwbGF5ZXIncyBxdWV1ZS5cIik7XG5cdCAgfTtcblx0XG5cdCAgdm0ub25VcGRhdGVEZXZpY2VGYWlsdXJlID0gZnVuY3Rpb24gKGVycm9yKSB7XG5cdCAgICBQcm9ncmVzc0JhclNlcnZpY2UuY29tcGxldGUoKTtcblx0ICAgICRsb2cuZXJyb3IoXCJVcGRhdGUgZGV2aWNlIGNvbW1hbmQgZXJyb3I6IFwiICsgZXJyb3Iuc3RhdHVzICsgXCIgXCIgKyBlcnJvci5zdGF0dXNUZXh0KTtcblx0ICAgIHJldHVybiBzd2VldC5zaG93KCdPb3BzLi4uJywgXCJXZSB3ZXJlIHVuYWJsZSB0byBwb3N0IHlvdXIgdXBkYXRlIGRldmljZSBjb21tYW5kIGludG8gdGhlIHBsYXllcidzIHF1ZXVlLlwiLCAnZXJyb3InKTtcblx0ICB9O1xuXHRcblx0ICB2bS5vblZvbHVtZUNoYW5nZSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgIFByb2dyZXNzQmFyU2VydmljZS5zdGFydCgpO1xuXHQgICAgdmFyIHByb21pc2UgPSBDb21tYW5kc1NlcnZpY2Uudm9sdW1lKHZtLmRldmljZUtleSwgdm0uY3VycmVudERldmljZS52b2x1bWUpO1xuXHQgICAgcmV0dXJuIHByb21pc2UudGhlbih2bS5vblZvbHVtZUNoYW5nZVN1Y2Nlc3Modm0uY3VycmVudERldmljZS52b2x1bWUpLCB2bS5vblZvbHVtZUNoYW5nZUZhaWx1cmUpO1xuXHQgIH07XG5cdFxuXHQgIHZtLm9uVm9sdW1lQ2hhbmdlU3VjY2VzcyA9IGZ1bmN0aW9uIChsZXZlbCkge1xuXHQgICAgUHJvZ3Jlc3NCYXJTZXJ2aWNlLmNvbXBsZXRlKCk7XG5cdCAgICB2bS5nZXRFdmVudHNUaW1lT3V0KHZtLmRldmljZUtleSk7XG5cdCAgICByZXR1cm4gVG9hc3RzU2VydmljZS5zaG93U3VjY2Vzc1RvYXN0KFwiV2UgcG9zdGVkIHlvdXIgdm9sdW1lIGNoYW5nZSBjb21tYW5kIG9mIFwiICsgbGV2ZWwgKyBcIiBpbnRvIHRoZSBwbGF5ZXIncyBxdWV1ZS5cIik7XG5cdCAgfTtcblx0XG5cdCAgdm0ub25Wb2x1bWVDaGFuZ2VGYWlsdXJlID0gZnVuY3Rpb24gKGVycm9yKSB7XG5cdCAgICBQcm9ncmVzc0JhclNlcnZpY2UuY29tcGxldGUoKTtcblx0ICAgICRsb2cuZXJyb3IoXCJWb2x1bWUgY2hhbmdlIGNvbW1hbmQgZXJyb3I6IFwiICsgZXJyb3Iuc3RhdHVzICsgXCIgXCIgKyBlcnJvci5zdGF0dXNUZXh0KTtcblx0ICAgIHJldHVybiBzd2VldC5zaG93KCdPb3BzLi4uJywgXCJXZSB3ZXJlIHVuYWJsZSB0byBwb3N0IHlvdXIgdm9sdW1lIGNoYW5nZSBjb21tYW5kIGludG8gdGhlIHBsYXllcidzIHF1ZXVlLlwiLCAnZXJyb3InKTtcblx0ICB9O1xuXHRcblx0ICB2bS5vbkN1c3RvbUNvbW1hbmQgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICBQcm9ncmVzc0JhclNlcnZpY2Uuc3RhcnQoKTtcblx0ICAgIHZhciBwcm9taXNlID0gQ29tbWFuZHNTZXJ2aWNlLmN1c3RvbSh2bS5kZXZpY2VLZXksIHZtLmN1cnJlbnREZXZpY2UuY3VzdG9tKTtcblx0ICAgIHJldHVybiBwcm9taXNlLnRoZW4odm0ub25DdXN0b21Db21tYW5kU3VjY2Vzcyh2bS5jdXJyZW50RGV2aWNlLmN1c3RvbSksIHZtLm9uQ3VzdG9tQ29tbWFuZEZhaWx1cmUpO1xuXHQgIH07XG5cdFxuXHQgIHZtLm9uQ3VzdG9tQ29tbWFuZFN1Y2Nlc3MgPSBmdW5jdGlvbiAoY29tbWFuZCkge1xuXHQgICAgUHJvZ3Jlc3NCYXJTZXJ2aWNlLmNvbXBsZXRlKCk7XG5cdCAgICB2bS5nZXRFdmVudHNUaW1lT3V0KHZtLmRldmljZUtleSk7XG5cdCAgICByZXR1cm4gVG9hc3RzU2VydmljZS5zaG93U3VjY2Vzc1RvYXN0KFwiV2UgcG9zdGVkIHlvdXIgY3VzdG9tIGNvbW1hbmQgJ1wiICsgY29tbWFuZCArIFwiJyBpbnRvIHRoZSBwbGF5ZXIncyBxdWV1ZS5cIik7XG5cdCAgfTtcblx0XG5cdCAgdm0ub25DdXN0b21Db21tYW5kRmFpbHVyZSA9IGZ1bmN0aW9uIChlcnJvcikge1xuXHQgICAgUHJvZ3Jlc3NCYXJTZXJ2aWNlLmNvbXBsZXRlKCk7XG5cdCAgICAkbG9nLmVycm9yKFwiQ3VzdG9tIGNvbW1hbmQgZXJyb3I6IFwiICsgZXJyb3Iuc3RhdHVzICsgXCIgXCIgKyBlcnJvci5zdGF0dXNUZXh0KTtcblx0ICAgIHJldHVybiBzd2VldC5zaG93KCdPb3BzLi4uJywgXCJXZSB3ZXJlIHVuYWJsZSB0byBwb3N0IHlvdXIgY3VzdG9tIGNvbW1hbmQgaW50byB0aGUgcGxheWVyJ3MgcXVldWUuXCIsICdlcnJvcicpO1xuXHQgIH07XG5cdFxuXHQgIHZtLm9uRGlhZ25vc3RpY3NUb2dnbGUgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICBQcm9ncmVzc0JhclNlcnZpY2Uuc3RhcnQoKTtcblx0ICAgIHZhciBwcm9taXNlID0gQ29tbWFuZHNTZXJ2aWNlLnRvZ2dsZURpYWdub3N0aWNzKHZtLmRldmljZUtleSk7XG5cdCAgICByZXR1cm4gcHJvbWlzZS50aGVuKHZtLm9uVG9nZ2xlRGlhZ25vc3RpY3NTdWNjZXNzLCB2bS5vblRvZ2dsZURpYWdub3N0aWNzRmFpbHVyZSk7XG5cdCAgfTtcblx0XG5cdCAgdm0ub25Ub2dnbGVEaWFnbm9zdGljc1N1Y2Nlc3MgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICBQcm9ncmVzc0JhclNlcnZpY2UuY29tcGxldGUoKTtcblx0ICAgIHJldHVybiBUb2FzdHNTZXJ2aWNlLnNob3dTdWNjZXNzVG9hc3QoXCJXZSBwb3N0ZWQgeW91ciBkaWFnbm9zdGljcyBjb21tYW5kIGludG8gdGhlIHBsYXllcidzIHF1ZXVlLlwiKTtcblx0ICB9O1xuXHRcblx0ICB2bS5vblRvZ2dsZURpYWdub3N0aWNzRmFpbHVyZSA9IGZ1bmN0aW9uIChlcnJvcikge1xuXHQgICAgUHJvZ3Jlc3NCYXJTZXJ2aWNlLmNvbXBsZXRlKCk7XG5cdCAgICAkbG9nLmVycm9yKFwiRGlhZ25vc3RpY3MgY29tbWFuZCBlcnJvcjogXCIgKyBlcnJvci5zdGF0dXMgKyBcIiBcIiArIGVycm9yLnN0YXR1c1RleHQpO1xuXHQgICAgcmV0dXJuIHN3ZWV0LnNob3coJ09vcHMuLi4nLCBcIldlIHdlcmUgdW5hYmxlIHRvIHBvc3QgeW91ciBkaWFnbm9zdGljcyBjb21tYW5kIGludG8gdGhlIHBsYXllcidzIHF1ZXVlLlwiLCAnZXJyb3InKTtcblx0ICB9O1xuXHRcblx0ICB2bS5vblJlc3RhcnQgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICBQcm9ncmVzc0JhclNlcnZpY2Uuc3RhcnQoKTtcblx0ICAgIHZhciBwcm9taXNlID0gQ29tbWFuZHNTZXJ2aWNlLnJlc3RhcnQodm0uZGV2aWNlS2V5KTtcblx0ICAgIHJldHVybiBwcm9taXNlLnRoZW4odm0ub25SZXN0YXJ0U3VjY2Vzcywgdm0ub25SZXN0YXJ0RmFpbHVyZSk7XG5cdCAgfTtcblx0XG5cdCAgdm0ub25SZXN0YXJ0U3VjY2VzcyA9IGZ1bmN0aW9uICgpIHtcblx0ICAgIFByb2dyZXNzQmFyU2VydmljZS5jb21wbGV0ZSgpO1xuXHQgICAgcmV0dXJuIFRvYXN0c1NlcnZpY2Uuc2hvd1N1Y2Nlc3NUb2FzdChcIldlIHBvc3RlZCB5b3VyIHJlc3RhcnQgY29tbWFuZCBpbnRvIHRoZSBwbGF5ZXIncyBxdWV1ZS5cIik7XG5cdCAgfTtcblx0XG5cdCAgdm0ub25SZXN0YXJ0RmFpbHVyZSA9IGZ1bmN0aW9uIChlcnJvcikge1xuXHQgICAgUHJvZ3Jlc3NCYXJTZXJ2aWNlLmNvbXBsZXRlKCk7XG5cdCAgICAkbG9nLmVycm9yKFwiUmVzdGFydCBjb21tYW5kIGVycm9yOiBcIiArIGVycm9yLnN0YXR1cyArIFwiIFwiICsgZXJyb3Iuc3RhdHVzVGV4dCk7XG5cdCAgICByZXR1cm4gc3dlZXQuc2hvdygnT29wcy4uLicsIFwiV2Ugd2VyZSB1bmFibGUgdG8gcG9zdCB5b3VyIHJlc3RhcnQgY29tbWFuZCBpbnRvIHRoZSBwbGF5ZXIncyBxdWV1ZS5cIiwgJ2Vycm9yJyk7XG5cdCAgfTtcblx0XG5cdCAgdm0ub25Qb3N0TG9nID0gZnVuY3Rpb24gKCkge1xuXHQgICAgUHJvZ3Jlc3NCYXJTZXJ2aWNlLnN0YXJ0KCk7XG5cdCAgICB2YXIgcHJvbWlzZSA9IENvbW1hbmRzU2VydmljZS5wb3N0TG9nKHZtLmRldmljZUtleSk7XG5cdCAgICByZXR1cm4gcHJvbWlzZS50aGVuKHZtLm9uUG9zdExvZ1N1Y2Nlc3MsIHZtLm9uUG9zdExvZ0ZhaWx1cmUpO1xuXHQgIH07XG5cdFxuXHQgIHZtLm9uUG9zdExvZ1N1Y2Nlc3MgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICBQcm9ncmVzc0JhclNlcnZpY2UuY29tcGxldGUoKTtcblx0ICAgIHJldHVybiBUb2FzdHNTZXJ2aWNlLnNob3dTdWNjZXNzVG9hc3QoXCJXZSBwb3N0ZWQgeW91ciBwb3N0IGxvZyBjb21tYW5kIGludG8gdGhlIHBsYXllcidzIHF1ZXVlLlwiKTtcblx0ICB9O1xuXHRcblx0ICB2bS5vblBvc3RMb2dGYWlsdXJlID0gZnVuY3Rpb24gKGVycm9yKSB7XG5cdCAgICBQcm9ncmVzc0JhclNlcnZpY2UuY29tcGxldGUoKTtcblx0ICAgICRsb2cuZXJyb3IoXCJQb3N0IGxvZyBjb21tYW5kIGVycm9yOiBcIiArIGVycm9yLnN0YXR1cyArIFwiIFwiICsgZXJyb3Iuc3RhdHVzVGV4dCk7XG5cdCAgICByZXR1cm4gc3dlZXQuc2hvdygnT29wcy4uLicsIFwiV2Ugd2VyZSB1bmFibGUgdG8gcG9zdCB5b3VyIHBvc3QgbG9nIGNvbW1hbmQgaW50byB0aGUgcGxheWVyJ3MgcXVldWUuXCIsICdlcnJvcicpO1xuXHQgIH07XG5cdFxuXHQgIHJldHVybiB2bTtcblx0fVxuXHRcblx0ZXhwb3J0cy5EZXZpY2VEZXRhaWxzQ29tbWFuZHNDdHJsID0gRGV2aWNlRGV0YWlsc0NvbW1hbmRzQ3RybDtcblxuLyoqKi8gfSxcblxuLyoqKi8gNjQ5OlxuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0RGV2aWNlRGV0YWlsc0N0cmwuJGluamVjdCA9IFtcIiRsb2dcIiwgXCIkc3RhdGVQYXJhbXNcIiwgXCIkc3RhdGVcIiwgXCJTZXNzaW9uc1NlcnZpY2VcIiwgXCJEZXZpY2VzU2VydmljZVwiLCBcIlRlbmFudHNTZXJ2aWNlXCIsIFwiTG9jYXRpb25zU2VydmljZVwiLCBcIkNvbW1hbmRzU2VydmljZVwiLCBcIlRpbWV6b25lc1NlcnZpY2VcIiwgXCJJbnRlZ3JhdGlvbkV2ZW50c1wiLCBcInN3ZWV0XCIsIFwiUHJvZ3Jlc3NCYXJTZXJ2aWNlXCIsIFwiJG1kRGlhbG9nXCIsIFwiVG9hc3RzU2VydmljZVwiLCBcIkRhdGVNYW5pcHVsYXRpb25TZXJ2aWNlXCIsIFwiJHRpbWVvdXRcIiwgXCJJbWFnZVNlcnZpY2VcIl07XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuXHQgIHZhbHVlOiB0cnVlXG5cdH0pO1xuXHRleHBvcnRzLkRldmljZURldGFpbHNDdHJsID0gdW5kZWZpbmVkO1xuXHRcblx0dmFyIF9nZXRJdGVyYXRvcjIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDY1MCk7XG5cdFxuXHR2YXIgX2dldEl0ZXJhdG9yMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2dldEl0ZXJhdG9yMik7XG5cdFxuXHR2YXIgX3NsaWNlZFRvQXJyYXkyID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2NTUpO1xuXHRcblx0dmFyIF9zbGljZWRUb0FycmF5MyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX3NsaWNlZFRvQXJyYXkyKTtcblx0XG5cdHZhciBfbW9tZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXygzNzIpO1xuXHRcblx0dmFyIF9tb21lbnQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfbW9tZW50KTtcblx0XG5cdHZhciBfamF2YXNjcmlwdE5hdHVyYWxTb3J0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2NTkpO1xuXHRcblx0dmFyIF9qYXZhc2NyaXB0TmF0dXJhbFNvcnQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfamF2YXNjcmlwdE5hdHVyYWxTb3J0KTtcblx0XG5cdGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cdFxuXHRmdW5jdGlvbiBEZXZpY2VEZXRhaWxzQ3RybCgkbG9nLCAkc3RhdGVQYXJhbXMsICRzdGF0ZSwgU2Vzc2lvbnNTZXJ2aWNlLCBEZXZpY2VzU2VydmljZSwgVGVuYW50c1NlcnZpY2UsIExvY2F0aW9uc1NlcnZpY2UsIENvbW1hbmRzU2VydmljZSwgVGltZXpvbmVzU2VydmljZSwgSW50ZWdyYXRpb25FdmVudHMsIHN3ZWV0LCBQcm9ncmVzc0JhclNlcnZpY2UsICRtZERpYWxvZywgVG9hc3RzU2VydmljZSwgRGF0ZU1hbmlwdWxhdGlvblNlcnZpY2UsICR0aW1lb3V0LCBJbWFnZVNlcnZpY2UpIHtcblx0ICBcIm5nSW5qZWN0XCI7XG5cdFxuXHQgIHZhciB2bSA9IHRoaXM7XG5cdCAgdm0udGVuYW50S2V5ID0gJHN0YXRlUGFyYW1zLnRlbmFudEtleTtcblx0ICB2bS5kZXZpY2VLZXkgPSAkc3RhdGVQYXJhbXMuZGV2aWNlS2V5O1xuXHQgIHZtLmZyb21EZXZpY2VzID0gJHN0YXRlUGFyYW1zLmZyb21EZXZpY2VzID09PSBcInRydWVcIjtcblx0ICB2bS5jdXJyZW50RGV2aWNlID0ge307XG5cdCAgdm0ubG9jYXRpb25zID0gW107XG5cdCAgdm0uY29tbWFuZEV2ZW50cyA9IFtdO1xuXHQgIHZtLmRheVJhbmdlID0gMzA7XG5cdCAgdm0uaXNzdWVzID0gW107XG5cdCAgdm0udGltZXpvbmVzID0gW107XG5cdCAgdm0uc2VsZWN0ZWRUaW1lem9uZSA9IHVuZGVmaW5lZDtcblx0XG5cdCAgdmFyIF9EYXRlTWFuaXB1bGF0aW9uU2VydiA9IERhdGVNYW5pcHVsYXRpb25TZXJ2aWNlLmNyZWF0ZUZvcm1hdHRlZFN0YXJ0QW5kRW5kRGF0ZUZyb21Ub2RheSgzMCk7XG5cdFxuXHQgIHZhciBfRGF0ZU1hbmlwdWxhdGlvblNlcnYyID0gKDAsIF9zbGljZWRUb0FycmF5My5kZWZhdWx0KShfRGF0ZU1hbmlwdWxhdGlvblNlcnYsIDIpO1xuXHRcblx0ICB2bS5zdGFydFRpbWUgPSBfRGF0ZU1hbmlwdWxhdGlvblNlcnYyWzBdO1xuXHQgIHZtLmVuZFRpbWUgPSBfRGF0ZU1hbmlwdWxhdGlvblNlcnYyWzFdO1xuXHRcblx0ICB2bS5lbnJvbGxtZW50RXZlbnRzID0gW107XG5cdCAgdm0ubG9nb0NoYW5nZSA9IGZhbHNlO1xuXHQgIHZtLmNvbnRyb2xzTW9kZU9wdGlvbnMgPSBbXCJ2aXNpYmxlXCIsIFwiaW52aXNpYmxlXCIsIFwiZGlzYWJsZWRcIl07XG5cdCAgdm0ub3ZlcmxheUNoYW5nZWQgPSBmYWxzZTtcblx0XG5cdCAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHQgIC8vIE92ZXJsYXlcblx0ICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdCAgdm0uY2hlY2tGb3JPdmVybGF5Q2hhbmdlcyA9IGZ1bmN0aW9uICgpIHtcblx0ICAgIHZhciBjaGFuZ2VkID0gZmFsc2U7XG5cdCAgICB2YXIgY3VycmVudERldmljZU92ZXJsYXlzID0gdm0uY3VycmVudERldmljZS5vdmVybGF5cztcblx0ICAgIHZhciBjdXJyZW50RGV2aWNlQ29weU92ZXJsYXlzID0gdm0uY3VycmVudERldmljZUNvcHkub3ZlcmxheXM7XG5cdCAgICB2YXIgcG9zaXRpb25zID0gWyd0b3BfbGVmdCcsICd0b3BfcmlnaHQnLCAnYm90dG9tX3JpZ2h0JywgJ2JvdHRvbV9sZWZ0J107XG5cdFxuXHQgICAgdmFyIF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSB0cnVlO1xuXHQgICAgdmFyIF9kaWRJdGVyYXRvckVycm9yID0gZmFsc2U7XG5cdCAgICB2YXIgX2l0ZXJhdG9yRXJyb3IgPSB1bmRlZmluZWQ7XG5cdFxuXHQgICAgdHJ5IHtcblx0ICAgICAgZm9yICh2YXIgX2l0ZXJhdG9yID0gKDAsIF9nZXRJdGVyYXRvcjMuZGVmYXVsdCkocG9zaXRpb25zKSwgX3N0ZXA7ICEoX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IChfc3RlcCA9IF9pdGVyYXRvci5uZXh0KCkpLmRvbmUpOyBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gdHJ1ZSkge1xuXHQgICAgICAgIHZhciBwb3MgPSBfc3RlcC52YWx1ZTtcblx0XG5cdCAgICAgICAgaWYgKGN1cnJlbnREZXZpY2VPdmVybGF5c1twb3NdLnNpemUgIT09IGN1cnJlbnREZXZpY2VDb3B5T3ZlcmxheXNbcG9zXS5zaXplKSB7XG5cdCAgICAgICAgICBjaGFuZ2VkID0gdHJ1ZTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgaWYgKGN1cnJlbnREZXZpY2VPdmVybGF5c1twb3NdLnR5cGUgIT09IGN1cnJlbnREZXZpY2VDb3B5T3ZlcmxheXNbcG9zXS50eXBlKSB7XG5cdCAgICAgICAgICBjaGFuZ2VkID0gdHJ1ZTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgaWYgKGN1cnJlbnREZXZpY2VPdmVybGF5c1twb3NdLnR5cGUgPT09ICdsb2dvJykge1xuXHQgICAgICAgICAgaWYgKGN1cnJlbnREZXZpY2VPdmVybGF5c1twb3NdLnR5cGUgKyBcIjogXCIgKyBjdXJyZW50RGV2aWNlT3ZlcmxheXNbcG9zXS5uYW1lICE9PSBjdXJyZW50RGV2aWNlQ29weU92ZXJsYXlzW3Bvc10ubmFtZSkge1xuXHQgICAgICAgICAgICBjaGFuZ2VkID0gdHJ1ZTtcblx0ICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgIH1cblx0ICAgIH0gY2F0Y2ggKGVycikge1xuXHQgICAgICBfZGlkSXRlcmF0b3JFcnJvciA9IHRydWU7XG5cdCAgICAgIF9pdGVyYXRvckVycm9yID0gZXJyO1xuXHQgICAgfSBmaW5hbGx5IHtcblx0ICAgICAgdHJ5IHtcblx0ICAgICAgICBpZiAoIV9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gJiYgX2l0ZXJhdG9yLnJldHVybikge1xuXHQgICAgICAgICAgX2l0ZXJhdG9yLnJldHVybigpO1xuXHQgICAgICAgIH1cblx0ICAgICAgfSBmaW5hbGx5IHtcblx0ICAgICAgICBpZiAoX2RpZEl0ZXJhdG9yRXJyb3IpIHtcblx0ICAgICAgICAgIHRocm93IF9pdGVyYXRvckVycm9yO1xuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXHQgICAgfVxuXHRcblx0ICAgIHZtLm92ZXJsYXlDaGFuZ2VkID0gY2hhbmdlZDtcblx0ICB9O1xuXHRcblx0ICB2bS5yZXZlcnRUb1RlbmFudE92ZXJsYXkgPSBmdW5jdGlvbiAoZXYpIHtcblx0ICAgIFByb2dyZXNzQmFyU2VydmljZS5zdGFydCgpO1xuXHQgICAgdm0ubG9hZGluZ092ZXJsYXlzID0gdHJ1ZTtcblx0ICAgIHZhciB0ZW5hbnRQcm9taXNlID0gVGVuYW50c1NlcnZpY2UuZ2V0VGVuYW50QnlLZXkoJHN0YXRlUGFyYW1zLnRlbmFudEtleSk7XG5cdCAgICB0ZW5hbnRQcm9taXNlLnRoZW4oZnVuY3Rpb24gKHRlbmFudCkge1xuXHQgICAgICB2YXIgY3VycmVudFRlbmFudE92ZXJsYXlzID0gdGVuYW50Lm92ZXJsYXlzO1xuXHQgICAgICBkZWxldGUgY3VycmVudFRlbmFudE92ZXJsYXlzLmtleTtcblx0XG5cdCAgICAgIGZvciAodmFyIGtleSBpbiBjdXJyZW50VGVuYW50T3ZlcmxheXMpIHtcblx0ICAgICAgICBpZiAoY3VycmVudFRlbmFudE92ZXJsYXlzW2tleV1bXCJ0eXBlXCJdID09PSBcImxvZ29cIikge1xuXHQgICAgICAgICAgY3VycmVudFRlbmFudE92ZXJsYXlzW2tleV1bXCJpbWFnZV9rZXlcIl0gPSBjdXJyZW50VGVuYW50T3ZlcmxheXNba2V5XVtcImltYWdlS2V5XCJdW1wia2V5XCJdO1xuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICBjdXJyZW50VGVuYW50T3ZlcmxheXNba2V5XVtcImltYWdlX2tleVwiXSA9IG51bGw7XG5cdCAgICAgICAgfVxuXHQgICAgICB9O1xuXHRcblx0ICAgICAgdmFyIHByb21pc2UgPSBEZXZpY2VzU2VydmljZS5zYXZlT3ZlcmxheVNldHRpbmdzKHZtLmRldmljZUtleSwgY3VycmVudFRlbmFudE92ZXJsYXlzLmJvdHRvbV9sZWZ0LCBjdXJyZW50VGVuYW50T3ZlcmxheXMuYm90dG9tX3JpZ2h0LCBjdXJyZW50VGVuYW50T3ZlcmxheXMudG9wX3JpZ2h0LCBjdXJyZW50VGVuYW50T3ZlcmxheXMudG9wX2xlZnQpO1xuXHRcblx0ICAgICAgcHJvbWlzZS50aGVuKGZ1bmN0aW9uIChyZXMpIHtcblx0ICAgICAgICB2YXIgZGV2aWNlUHJvbWlzZSA9IERldmljZXNTZXJ2aWNlLmdldERldmljZUJ5S2V5KHZtLmRldmljZUtleSk7XG5cdCAgICAgICAgZGV2aWNlUHJvbWlzZS50aGVuKGZ1bmN0aW9uIChjdXJyZW50RGV2aWNlKSB7XG5cdCAgICAgICAgICB2bS5jdXJyZW50RGV2aWNlLm92ZXJsYXlzID0gY3VycmVudERldmljZS5vdmVybGF5cztcblx0ICAgICAgICAgIHZtLmN1cnJlbnREZXZpY2VDb3B5Lm92ZXJsYXlzID0gYW5ndWxhci5jb3B5KHZtLmN1cnJlbnREZXZpY2Uub3ZlcmxheXMpO1xuXHQgICAgICAgICAgdm0ubG9hZGluZ092ZXJsYXlzID0gZmFsc2U7XG5cdCAgICAgICAgICBQcm9ncmVzc0JhclNlcnZpY2UuY29tcGxldGUoKTtcblx0ICAgICAgICAgIFRvYXN0c1NlcnZpY2Uuc2hvd1N1Y2Nlc3NUb2FzdCgnV2Ugc2F2ZWQgeW91ciB1cGRhdGUuJyk7XG5cdCAgICAgICAgfSk7XG5cdCAgICAgIH0pO1xuXHRcblx0ICAgICAgcHJvbWlzZS5jYXRjaChmdW5jdGlvbiAocmVzKSB7XG5cdCAgICAgICAgUHJvZ3Jlc3NCYXJTZXJ2aWNlLmNvbXBsZXRlKCk7XG5cdCAgICAgICAgVG9hc3RzU2VydmljZS5zaG93RXJyb3JUb2FzdCgnU29tZXRoaW5nIHdlbnQgd3JvbmcnKTtcblx0ICAgICAgfSk7XG5cdCAgICB9KTtcblx0ICB9O1xuXHRcblx0ICB2bS5hZGp1c3RDb250cm9sc01vZGUgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICB2YXIgY29udHJvbHNNb2RlID0gdm0uY3VycmVudERldmljZS5jb250cm9sc01vZGU7XG5cdCAgICBQcm9ncmVzc0JhclNlcnZpY2Uuc3RhcnQoKTtcblx0ICAgIHZhciBjb250cm9sc1Byb21pc2UgPSBEZXZpY2VzU2VydmljZS5hZGp1c3RDb250cm9sc01vZGUodm0uZGV2aWNlS2V5LCBjb250cm9sc01vZGUpO1xuXHQgICAgY29udHJvbHNQcm9taXNlLnRoZW4oZnVuY3Rpb24gKCkge1xuXHQgICAgICBQcm9ncmVzc0JhclNlcnZpY2UuY29tcGxldGUoKTtcblx0ICAgICAgVG9hc3RzU2VydmljZS5zaG93U3VjY2Vzc1RvYXN0KCdZb3VyIGNvbnRyb2xzIG1vZGUgc2VsZWN0aW9uIHdhcyBzdWNjZXNmdWxseSBjaGFuZ2VkIHRvOiAnICsgY29udHJvbHNNb2RlKTtcblx0ICAgIH0pO1xuXHQgICAgY29udHJvbHNQcm9taXNlLmNhdGNoKGZ1bmN0aW9uICgpIHtcblx0ICAgICAgUHJvZ3Jlc3NCYXJTZXJ2aWNlLmNvbXBsZXRlKCk7XG5cdCAgICAgIC8vVG9hc3RzU2VydmljZS5zaG93RXJyb3JUb2FzdChcIllvdXIgY29udHJvbHMgbW9kZSBjaGFuZ2UgZmFpbGVkIHRvIHNhdmUuIFBsZWFzZSBjb250YWN0IHN1cHBvcnQuXCIpXG5cdCAgICB9KTtcblx0ICB9O1xuXHRcblx0ICB2bS5hZGp1c3RPdmVybGF5U3RhdHVzID0gZnVuY3Rpb24gKHN0YXR1cykge1xuXHQgICAgdm0uY3VycmVudERldmljZS5vdmVybGF5U3RhdHVzID0gc3RhdHVzO1xuXHQgICAgUHJvZ3Jlc3NCYXJTZXJ2aWNlLnN0YXJ0KCk7XG5cdCAgICB2YXIgcHJvbWlzZSA9IERldmljZXNTZXJ2aWNlLnNhdmUodm0uY3VycmVudERldmljZSk7XG5cdCAgICByZXR1cm4gcHJvbWlzZS50aGVuKGZ1bmN0aW9uICgpIHtcblx0ICAgICAgdmFyIGRldmljZVByb21pc2UgPSBEZXZpY2VzU2VydmljZS5nZXREZXZpY2VCeUtleSh2bS5kZXZpY2VLZXkpO1xuXHQgICAgICBkZXZpY2VQcm9taXNlLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG5cdCAgICAgICAgdm0ub25HZXREZXZpY2VTdWNjZXNzKHJlc3BvbnNlKTtcblx0ICAgICAgICBQcm9ncmVzc0JhclNlcnZpY2UuY29tcGxldGUoKTtcblx0ICAgICAgfSwgZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG5cdCAgICAgICAgcmV0dXJuIHZtLm9uR2V0RGV2aWNlRmFpbHVyZShyZXNwb25zZSk7XG5cdCAgICAgIH0pO1xuXHQgICAgfSk7XG5cdCAgfTtcblx0XG5cdCAgdm0uc3VibWl0T3ZlcmxheVNldHRpbmdzID0gZnVuY3Rpb24gKCkge1xuXHQgICAgdmFyIG92ZXJsYXlTZXR0aW5ncyA9IGFuZ3VsYXIuY29weSh2bS5jdXJyZW50RGV2aWNlQ29weS5vdmVybGF5cyk7XG5cdCAgICBQcm9ncmVzc0JhclNlcnZpY2Uuc3RhcnQoKTtcblx0ICAgIHZtLmxvYWRpbmdPdmVybGF5cyA9IHRydWU7XG5cdCAgICB2YXIgcHJvbWlzZSA9IERldmljZXNTZXJ2aWNlLnNhdmVPdmVybGF5U2V0dGluZ3Modm0uZGV2aWNlS2V5LCBvdmVybGF5U2V0dGluZ3MuYm90dG9tX2xlZnQsIG92ZXJsYXlTZXR0aW5ncy5ib3R0b21fcmlnaHQsIG92ZXJsYXlTZXR0aW5ncy50b3BfcmlnaHQsIG92ZXJsYXlTZXR0aW5ncy50b3BfbGVmdCk7XG5cdCAgICBwcm9taXNlLnRoZW4oZnVuY3Rpb24gKHJlcykge1xuXHQgICAgICB2YXIgZGV2aWNlUHJvbWlzZSA9IERldmljZXNTZXJ2aWNlLmdldERldmljZUJ5S2V5KHZtLmRldmljZUtleSk7XG5cdCAgICAgIGRldmljZVByb21pc2UudGhlbihmdW5jdGlvbiAoY3VycmVudERldmljZSkge1xuXHQgICAgICAgIHZtLmN1cnJlbnREZXZpY2Uub3ZlcmxheXMgPSBjdXJyZW50RGV2aWNlLm92ZXJsYXlzO1xuXHQgICAgICAgIHZtLmN1cnJlbnREZXZpY2VDb3B5Lm92ZXJsYXlzID0gYW5ndWxhci5jb3B5KHZtLmN1cnJlbnREZXZpY2Uub3ZlcmxheXMpO1xuXHQgICAgICAgIHZtLmxvYWRpbmdPdmVybGF5cyA9IGZhbHNlO1xuXHQgICAgICAgIFByb2dyZXNzQmFyU2VydmljZS5jb21wbGV0ZSgpO1xuXHQgICAgICAgIFRvYXN0c1NlcnZpY2Uuc2hvd1N1Y2Nlc3NUb2FzdCgnV2Ugc2F2ZWQgeW91ciB1cGRhdGUuJyk7XG5cdCAgICAgIH0pO1xuXHQgICAgfSk7XG5cdFxuXHQgICAgcHJvbWlzZS5jYXRjaChmdW5jdGlvbiAocmVzKSB7XG5cdCAgICAgIFByb2dyZXNzQmFyU2VydmljZS5jb21wbGV0ZSgpO1xuXHQgICAgICBUb2FzdHNTZXJ2aWNlLnNob3dFcnJvclRvYXN0KCdTb21ldGhpbmcgd2VudCB3cm9uZycpO1xuXHQgICAgfSk7XG5cdCAgfTtcblx0XG5cdCAgdm0uZ2V0VGVuYW50SW1hZ2VzQW5kUmVmcmVzaERldmljZSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgIHZhciBkZXZpY2VQcm9taXNlID0gRGV2aWNlc1NlcnZpY2UuZ2V0RGV2aWNlQnlLZXkodm0uZGV2aWNlS2V5KTtcblx0ICAgIGRldmljZVByb21pc2UudGhlbihmdW5jdGlvbiAocmVzKSB7XG5cdCAgICAgIHZtLm9uR2V0RGV2aWNlU3VjY2VzcyhyZXMpO1xuXHQgICAgICB2bS5nZXRUZW5hbnRJbWFnZXMoKTtcblx0ICAgIH0pO1xuXHQgICAgZGV2aWNlUHJvbWlzZS5jYXRjaChmdW5jdGlvbiAocmVzKSB7XG5cdCAgICAgIHZtLm9uR2V0RGV2aWNlRmFpbHVyZShyZXMpO1xuXHQgICAgfSk7XG5cdCAgfTtcblx0XG5cdCAgdm0uZ2V0VGVuYW50SW1hZ2VzID0gZnVuY3Rpb24gKCkge1xuXHQgICAgdm0uT1ZFUkxBWV9UWVBFUyA9IFt7IHNpemU6IG51bGwsIHR5cGU6IG51bGwsIG5hbWU6IFwibm9uZVwiLCByZWFsTmFtZTogXCJub25lXCIsIG5ldzogZmFsc2UsIGltYWdlX2tleTogbnVsbCB9LCB7IHNpemU6IG51bGwsIHR5cGU6IFwiZGF0ZXRpbWVcIiwgbmFtZTogXCJkYXRldGltZVwiLCByZWFsTmFtZTogXCJkYXRldGltZVwiLCBuZXc6IHRydWUsIGltYWdlX2tleTogbnVsbCB9XTtcblx0XG5cdCAgICBQcm9ncmVzc0JhclNlcnZpY2Uuc3RhcnQoKTtcblx0ICAgIHZhciBwcm9taXNlID0gSW1hZ2VTZXJ2aWNlLmdldEltYWdlcyh2bS50ZW5hbnRLZXkpO1xuXHQgICAgcHJvbWlzZS50aGVuKGZ1bmN0aW9uIChyZXMpIHtcblx0ICAgICAgdm0udGVuYW50SW1hZ2VzID0gcmVzO1xuXHQgICAgICBQcm9ncmVzc0JhclNlcnZpY2UuY29tcGxldGUoKTtcblx0ICAgICAgdmFyIF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24yID0gdHJ1ZTtcblx0ICAgICAgdmFyIF9kaWRJdGVyYXRvckVycm9yMiA9IGZhbHNlO1xuXHQgICAgICB2YXIgX2l0ZXJhdG9yRXJyb3IyID0gdW5kZWZpbmVkO1xuXHRcblx0ICAgICAgdHJ5IHtcblx0ICAgICAgICBmb3IgKHZhciBfaXRlcmF0b3IyID0gKDAsIF9nZXRJdGVyYXRvcjMuZGVmYXVsdCkodm0udGVuYW50SW1hZ2VzKSwgX3N0ZXAyOyAhKF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24yID0gKF9zdGVwMiA9IF9pdGVyYXRvcjIubmV4dCgpKS5kb25lKTsgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbjIgPSB0cnVlKSB7XG5cdCAgICAgICAgICB2YXIgdmFsdWUgPSBfc3RlcDIudmFsdWU7XG5cdCAgICAgICAgICB2YXIgX2FyciA9IFtcInNtYWxsXCIsIFwibGFyZ2VcIl07XG5cdFxuXHQgICAgICAgICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IF9hcnIubGVuZ3RoOyBfaSsrKSB7XG5cdCAgICAgICAgICAgIHZhciBzaXplT3B0aW9uID0gX2FycltfaV07XG5cdCAgICAgICAgICAgIHZhciBuZXdWYWx1ZSA9IHtcblx0ICAgICAgICAgICAgICByZWFsTmFtZTogYW5ndWxhci5jb3B5KHZhbHVlLm5hbWUpLFxuXHQgICAgICAgICAgICAgIG5hbWU6IFwibG9nbzogXCIgKyB2YWx1ZS5uYW1lLFxuXHQgICAgICAgICAgICAgIHR5cGU6IFwibG9nb1wiLFxuXHQgICAgICAgICAgICAgIHNpemU6IHNpemVPcHRpb24sXG5cdCAgICAgICAgICAgICAgaW1hZ2Vfa2V5OiB2YWx1ZS5rZXlcblx0ICAgICAgICAgICAgfTtcblx0ICAgICAgICAgICAgdm0uT1ZFUkxBWV9UWVBFUy5wdXNoKG5ld1ZhbHVlKTtcblx0ICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgIH0gY2F0Y2ggKGVycikge1xuXHQgICAgICAgIF9kaWRJdGVyYXRvckVycm9yMiA9IHRydWU7XG5cdCAgICAgICAgX2l0ZXJhdG9yRXJyb3IyID0gZXJyO1xuXHQgICAgICB9IGZpbmFsbHkge1xuXHQgICAgICAgIHRyeSB7XG5cdCAgICAgICAgICBpZiAoIV9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24yICYmIF9pdGVyYXRvcjIucmV0dXJuKSB7XG5cdCAgICAgICAgICAgIF9pdGVyYXRvcjIucmV0dXJuKCk7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgfSBmaW5hbGx5IHtcblx0ICAgICAgICAgIGlmIChfZGlkSXRlcmF0b3JFcnJvcjIpIHtcblx0ICAgICAgICAgICAgdGhyb3cgX2l0ZXJhdG9yRXJyb3IyO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXHRcblx0ICAgICAgdm0uT1ZFUkxBWV9UWVBFUy5zb3J0KF9qYXZhc2NyaXB0TmF0dXJhbFNvcnQyLmRlZmF1bHQpO1xuXHQgICAgfSk7XG5cdFxuXHQgICAgcHJvbWlzZS5jYXRjaChmdW5jdGlvbiAoKSB7XG5cdCAgICAgIFByb2dyZXNzQmFyU2VydmljZS5jb21wbGV0ZSgpO1xuXHQgICAgICAvL1RvYXN0c1NlcnZpY2Uuc2hvd0Vycm9yVG9hc3QoXCJTT01FVEhJTkcgV0VOVCBXUk9ORyBSRVRSSUVWSU5HIFlPVVIgSU1BR0VTXCIpXG5cdCAgICB9KTtcblx0ICB9O1xuXHRcblx0ICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0ICAvLyBFdmVudHMgYW5kIElzc3VlcyBUYWJcblx0ICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0ICB2bS5yZXBsYWNlSXNzdWVUaW1lID0gZnVuY3Rpb24gKGlzc3Vlcykge1xuXHQgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBpc3N1ZXMubGVuZ3RoOyBpKyspIHtcblx0ICAgICAgdmFyIGVhY2ggPSBpc3N1ZXNbaV07XG5cdCAgICAgIGlmIChlYWNoLmNyZWF0ZWQpIHtcblx0ICAgICAgICBlYWNoLmNyZWF0ZWQgPSBEYXRlTWFuaXB1bGF0aW9uU2VydmljZS5nZW5lcmF0ZUxvY2FsRnJvbVVUQyhlYWNoLmNyZWF0ZWQpO1xuXHQgICAgICB9XG5cdCAgICAgIGlmIChlYWNoLnVwZGF0ZWQpIHtcblx0ICAgICAgICBlYWNoLnVwZGF0ZWQgPSBEYXRlTWFuaXB1bGF0aW9uU2VydmljZS5nZW5lcmF0ZUxvY2FsRnJvbVVUQyhlYWNoLnVwZGF0ZWQpO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgfTtcblx0XG5cdCAgdm0ucmVwbGFjZUNvbW1hbmRUaW1lID0gZnVuY3Rpb24gKGlzc3Vlcykge1xuXHQgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBpc3N1ZXMubGVuZ3RoOyBpKyspIHtcblx0ICAgICAgdmFyIGVhY2ggPSBpc3N1ZXNbaV07XG5cdCAgICAgIGlmIChlYWNoLnBvc3RlZFRpbWUpIHtcblx0ICAgICAgICBlYWNoLnBvc3RlZFRpbWUgPSBEYXRlTWFuaXB1bGF0aW9uU2VydmljZS5nZW5lcmF0ZUxvY2FsRnJvbVVUQyhlYWNoLnBvc3RlZFRpbWUpO1xuXHQgICAgICB9XG5cdCAgICAgIGlmIChlYWNoLmNvbmZpcm1lZFRpbWUpIHtcblx0ICAgICAgICBlYWNoLmNvbmZpcm1lZFRpbWUgPSBEYXRlTWFuaXB1bGF0aW9uU2VydmljZS5nZW5lcmF0ZUxvY2FsRnJvbVVUQyhlYWNoLmNvbmZpcm1lZFRpbWUpO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgfTtcblx0XG5cdCAgdm0ubG9jYWxGcm9tVXRjID0gZnVuY3Rpb24gKGV2ZW50cykge1xuXHQgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBldmVudHMubGVuZ3RoOyBpKyspIHtcblx0ICAgICAgdmFyIGVhY2ggPSBldmVudHNbaV07XG5cdCAgICAgIGlmIChlYWNoLnV0Y1RpbWVzdGFtcCkge1xuXHQgICAgICAgIGVhY2gudXRjVGltZXN0YW1wID0gRGF0ZU1hbmlwdWxhdGlvblNlcnZpY2UuZ2VuZXJhdGVMb2NhbEZyb21VVEMoZWFjaC51dGNUaW1lc3RhbXApO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgICByZXR1cm47XG5cdCAgfTtcblx0XG5cdCAgdm0uY29weURldmljZUtleSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgIHJldHVybiBUb2FzdHNTZXJ2aWNlLnNob3dTdWNjZXNzVG9hc3QoJ0RldmljZSBrZXkgY29waWVkIHRvIHlvdXIgY2xpcGJvYXJkJyk7XG5cdCAgfTtcblx0XG5cdCAgdm0uY29weUNvcnJlbGF0aW9uSWRlbnRpZmllciA9IGZ1bmN0aW9uICgpIHtcblx0ICAgIHJldHVybiBUb2FzdHNTZXJ2aWNlLnNob3dTdWNjZXNzVG9hc3QoJ0NvcnJlbGF0aW9uIElEIGNvcGllZCB0byB5b3VyIGNsaXBib2FyZCcpO1xuXHQgIH07XG5cdFxuXHQgIC8vIGV2ZW50IHRhYlxuXHQgIHZtLmdldElzc3VlcyA9IGZ1bmN0aW9uIChkZXZpY2UsIGVwb2NoU3RhcnQsIGVwb2NoRW5kLCBwcmV2LCBuZXh0KSB7XG5cdCAgICBQcm9ncmVzc0JhclNlcnZpY2Uuc3RhcnQoKTtcblx0ICAgIHZhciBpc3N1ZXNQcm9taXNlID0gRGV2aWNlc1NlcnZpY2UuZ2V0SXNzdWVzQnlLZXkoZGV2aWNlLCBlcG9jaFN0YXJ0LCBlcG9jaEVuZCwgcHJldiwgbmV4dCk7XG5cdCAgICByZXR1cm4gaXNzdWVzUHJvbWlzZS50aGVuKGZ1bmN0aW9uIChkYXRhKSB7XG5cdCAgICAgIHZtLnJlcGxhY2VJc3N1ZVRpbWUoZGF0YS5pc3N1ZXMpO1xuXHQgICAgICB2bS5pc3N1ZXMgPSBkYXRhLmlzc3Vlcztcblx0ICAgICAgdm0ucHJldl9jdXJzb3IgPSBkYXRhLnByZXY7XG5cdCAgICAgIHZtLm5leHRfY3Vyc29yID0gZGF0YS5uZXh0O1xuXHQgICAgICByZXR1cm4gUHJvZ3Jlc3NCYXJTZXJ2aWNlLmNvbXBsZXRlKCk7XG5cdCAgICB9KTtcblx0ICB9O1xuXHRcblx0ICAvLyBjb21tYW5kIGhpc3RvcnkgdGFiXG5cdCAgdm0uZ2V0RXZlbnRzID0gZnVuY3Rpb24gKGRldmljZUtleSwgcHJldiwgbmV4dCkge1xuXHQgICAgUHJvZ3Jlc3NCYXJTZXJ2aWNlLnN0YXJ0KCk7XG5cdCAgICB2YXIgY29tbWFuZEV2ZW50c1Byb21pc2UgPSBEZXZpY2VzU2VydmljZS5nZXRDb21tYW5kRXZlbnRzQnlLZXkoZGV2aWNlS2V5LCBwcmV2LCBuZXh0KTtcblx0ICAgIHJldHVybiBjb21tYW5kRXZlbnRzUHJvbWlzZS50aGVuKGZ1bmN0aW9uIChkYXRhKSB7XG5cdCAgICAgIHZtLnJlcGxhY2VDb21tYW5kVGltZShkYXRhLmV2ZW50cyk7XG5cdCAgICAgIHZtLmV2ZW50X25leHRfY3Vyc29yID0gZGF0YS5uZXh0X2N1cnNvcjtcblx0ICAgICAgdm0uZXZlbnRfcHJldl9jdXJzb3IgPSBkYXRhLnByZXZfY3Vyc29yO1xuXHQgICAgICB2bS5jb21tYW5kRXZlbnRzID0gZGF0YS5ldmVudHM7XG5cdCAgICAgIHJldHVybiBQcm9ncmVzc0JhclNlcnZpY2UuY29tcGxldGUoKTtcblx0ICAgIH0pO1xuXHQgIH07XG5cdFxuXHQgIC8vIGVucm9sbG1lbnQgdGFiXG5cdCAgdm0uZ2V0RW5yb2xsbWVudEV2ZW50cyA9IGZ1bmN0aW9uIChkZXZpY2VLZXkpIHtcblx0ICAgIFByb2dyZXNzQmFyU2VydmljZS5zdGFydCgpO1xuXHQgICAgdmFyIGVucm9sbG1lbnRFdmVudHNQcm9taXNlID0gSW50ZWdyYXRpb25FdmVudHMuZ2V0RW5yb2xsbWVudEV2ZW50cyhkZXZpY2VLZXkpO1xuXHQgICAgcmV0dXJuIGVucm9sbG1lbnRFdmVudHNQcm9taXNlLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcblx0ICAgICAgdm0uZW5yb2xsbWVudEV2ZW50cyA9IGRhdGE7XG5cdCAgICAgIHZtLmxvY2FsRnJvbVV0YyhkYXRhKTtcblx0ICAgICAgcmV0dXJuIFByb2dyZXNzQmFyU2VydmljZS5jb21wbGV0ZSgpO1xuXHQgICAgfSk7XG5cdCAgfTtcblx0XG5cdCAgdm0ucGFnaW5hdGVDYWxsID0gZnVuY3Rpb24gKGZvcndhcmQpIHtcblx0ICAgIGlmIChmb3J3YXJkKSB7XG5cdCAgICAgIHJldHVybiB2bS5nZXRJc3N1ZXModm0uZGV2aWNlS2V5LCB2bS5lcG9jaFN0YXJ0LCB2bS5lcG9jaEVuZCwgbnVsbCwgdm0ubmV4dF9jdXJzb3IpO1xuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgcmV0dXJuIHZtLmdldElzc3Vlcyh2bS5kZXZpY2VLZXksIHZtLmVwb2NoU3RhcnQsIHZtLmVwb2NoRW5kLCB2bS5wcmV2X2N1cnNvciwgbnVsbCk7XG5cdCAgICB9XG5cdCAgfTtcblx0XG5cdCAgdm0ucGFnaW5hdGVFdmVudENhbGwgPSBmdW5jdGlvbiAoZm9yd2FyZCkge1xuXHQgICAgaWYgKGZvcndhcmQpIHtcblx0ICAgICAgcmV0dXJuIHZtLmdldEV2ZW50cyh2bS5kZXZpY2VLZXksIG51bGwsIHZtLmV2ZW50X25leHRfY3Vyc29yKTtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIHJldHVybiB2bS5nZXRFdmVudHModm0uZGV2aWNlS2V5LCB2bS5ldmVudF9wcmV2X2N1cnNvciwgbnVsbCk7XG5cdCAgICB9XG5cdCAgfTtcblx0XG5cdCAgdm0uaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgIHZtLmVwb2NoU3RhcnQgPSAoMCwgX21vbWVudDIuZGVmYXVsdCkodm0uc3RhcnRUaW1lLCAnWVlZWS1NTS1ERCBoaDptbSBBJykudW5peCgpO1xuXHQgICAgdm0uZXBvY2hFbmQgPSAoMCwgX21vbWVudDIuZGVmYXVsdCkodm0uZW5kVGltZSwgJ1lZWVktTU0tREQgaGg6bW0gQScpLnVuaXgoKTtcblx0XG5cdCAgICB2YXIgdGltZXpvbmVQcm9taXNlID0gVGltZXpvbmVzU2VydmljZS5nZXRDdXN0b21UaW1lem9uZXMoKTtcblx0ICAgIHRpbWV6b25lUHJvbWlzZS50aGVuKGZ1bmN0aW9uIChkYXRhKSB7XG5cdCAgICAgIHJldHVybiB2bS50aW1lem9uZXMgPSBkYXRhO1xuXHQgICAgfSk7XG5cdFxuXHQgICAgdm0ucGFuZWxNb2RlbHMgPSBEZXZpY2VzU2VydmljZS5nZXRQYW5lbE1vZGVscygpO1xuXHQgICAgdm0ucGFuZWxJbnB1dHMgPSBEZXZpY2VzU2VydmljZS5nZXRQYW5lbElucHV0cygpO1xuXHRcblx0ICAgIHZhciBkZXZpY2VQcm9taXNlID0gRGV2aWNlc1NlcnZpY2UuZ2V0RGV2aWNlQnlLZXkodm0uZGV2aWNlS2V5KTtcblx0ICAgIGRldmljZVByb21pc2UudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcblx0ICAgICAgcmV0dXJuIHZtLm9uR2V0RGV2aWNlU3VjY2VzcyhyZXNwb25zZSk7XG5cdCAgICB9LCBmdW5jdGlvbiAocmVzcG9uc2UpIHtcblx0ICAgICAgcmV0dXJuIHZtLm9uR2V0RGV2aWNlRmFpbHVyZShyZXNwb25zZSk7XG5cdCAgICB9KTtcblx0XG5cdCAgICB2bS5nZXRUZW5hbnRJbWFnZXMoKTtcblx0ICAgIHZtLmdldEV2ZW50cyh2bS5kZXZpY2VLZXkpO1xuXHQgICAgdm0uZ2V0SXNzdWVzKHZtLmRldmljZUtleSwgdm0uZXBvY2hTdGFydCwgdm0uZXBvY2hFbmQpO1xuXHQgICAgcmV0dXJuIHZtLmdldEVucm9sbG1lbnRFdmVudHModm0uZGV2aWNlS2V5KTtcblx0ICB9O1xuXHRcblx0ICB2bS5vbkdldERldmljZVN1Y2Nlc3MgPSBmdW5jdGlvbiAocmVzcG9uc2UpIHtcblx0ICAgIHZtLmN1cnJlbnREZXZpY2UgPSByZXNwb25zZTtcblx0ICAgIHZtLmN1cnJlbnREZXZpY2VDb3B5ID0gYW5ndWxhci5jb3B5KHZtLmN1cnJlbnREZXZpY2UpO1xuXHQgICAgaWYgKHJlc3BvbnNlLnRpbWV6b25lICE9PSB2bS5zZWxlY3RlZFRpbWV6b25lKSB7XG5cdCAgICAgIHZtLnNlbGVjdGVkVGltZXpvbmUgPSByZXNwb25zZS50aW1lem9uZTtcblx0ICAgIH1cblx0ICAgIGlmICh2bS50ZW5hbnRLZXkgPT09IHVuZGVmaW5lZCkge1xuXHQgICAgICB2bS50ZW5hbnRLZXkgPSB2bS5jdXJyZW50RGV2aWNlLnRlbmFudEtleTtcblx0ICAgIH1cblx0XG5cdCAgICBpZiAoJHN0YXRlUGFyYW1zLmZyb21EZXZpY2VzID09PSBcInRydWVcIikge1xuXHQgICAgICB2bS5iYWNrVXJsID0gJy8jL2RldmljZXMnO1xuXHQgICAgICB2bS5iYWNrVXJsVGV4dCA9ICdCYWNrIHRvIGRldmljZXMnO1xuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgaWYgKHZtLmN1cnJlbnREZXZpY2UuaXNVbm1hbmFnZWREZXZpY2UgPT09IHRydWUpIHtcblx0ICAgICAgICB2bS5iYWNrVXJsID0gJy8jL3RlbmFudHMvJyArIHZtLnRlbmFudEtleSArICcvdW5tYW5hZ2VkJztcblx0ICAgICAgICB2bS5iYWNrVXJsVGV4dCA9ICdCYWNrIHRvIHRlbmFudCB1bm1hbmFnZWQgZGV2aWNlcyc7XG5cdCAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgdm0uYmFja1VybCA9ICcvIy90ZW5hbnRzLycgKyB2bS50ZW5hbnRLZXkgKyAnL21hbmFnZWQnO1xuXHQgICAgICAgIHZtLmJhY2tVcmxUZXh0ID0gJ0JhY2sgdG8gdGVuYW50IG1hbmFnZWQgZGV2aWNlcyc7XG5cdCAgICAgIH1cblx0ICAgIH1cblx0XG5cdCAgICB2YXIgbG9jYXRpb25zUHJvbWlzZSA9IExvY2F0aW9uc1NlcnZpY2UuZ2V0TG9jYXRpb25zQnlUZW5hbnRLZXkodm0udGVuYW50S2V5KTtcblx0ICAgIHJldHVybiBsb2NhdGlvbnNQcm9taXNlLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcblx0ICAgICAgdm0ubG9jYXRpb25zID0gZGF0YTtcblx0ICAgICAgcmV0dXJuIHZtLnNldFNlbGVjdGVkT3B0aW9ucygpO1xuXHQgICAgfSk7XG5cdCAgfTtcblx0XG5cdCAgdm0ub25HZXREZXZpY2VGYWlsdXJlID0gZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG5cdCAgICBUb2FzdHNTZXJ2aWNlLnNob3dFcnJvclRvYXN0KCdPb3BzLiBXZSB3ZXJlIHVuYWJsZSB0byBmZXRjaCB0aGUgZGV0YWlscyBmb3IgdGhpcyBkZXZpY2UgYXQgdGhpcyB0aW1lLicpO1xuXHQgICAgdmFyIGVycm9yTWVzc2FnZSA9ICdObyBkZXRhaWwgZm9yIGRldmljZV9rZXkgJyArIHZtLmRldmljZUtleSArICcuIEVycm9yOiAnICsgcmVzcG9uc2Uuc3RhdHVzICsgJyAnICsgcmVzcG9uc2Uuc3RhdHVzVGV4dDtcblx0ICAgICRsb2cuZXJyb3IoZXJyb3JNZXNzYWdlKTtcblx0ICAgIHJldHVybiAkc3RhdGUuZ28oJ2RldmljZXMnKTtcblx0ICB9O1xuXHRcblx0ICB2bS5zZXRTZWxlY3RlZE9wdGlvbnMgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICBpZiAodm0uY3VycmVudERldmljZS5wYW5lbE1vZGVsID09PSBudWxsKSB7XG5cdCAgICAgIHZtLmN1cnJlbnREZXZpY2UucGFuZWxNb2RlbCA9IHZtLnBhbmVsTW9kZWxzWzBdO1xuXHQgICAgICB2bS5jdXJyZW50RGV2aWNlLnBhbmVsSW5wdXQgPSB2bS5wYW5lbElucHV0c1swXTtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdm0ucGFuZWxNb2RlbHMubGVuZ3RoOyBpKyspIHtcblx0ICAgICAgICB2YXIgcGFuZWxNb2RlbCA9IHZtLnBhbmVsTW9kZWxzW2ldO1xuXHQgICAgICAgIGlmIChwYW5lbE1vZGVsLmlkID09PSB2bS5jdXJyZW50RGV2aWNlLnBhbmVsTW9kZWwpIHtcblx0ICAgICAgICAgIHZtLmN1cnJlbnREZXZpY2UucGFuZWxNb2RlbCA9IHBhbmVsTW9kZWw7XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdCAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgdm0ucGFuZWxJbnB1dHMubGVuZ3RoOyBqKyspIHtcblx0ICAgICAgICB2YXIgcGFuZWxJbnB1dCA9IHZtLnBhbmVsSW5wdXRzW2pdO1xuXHQgICAgICAgIHZhciBpc1BhcmVudCA9IHBhbmVsSW5wdXQucGFyZW50SWQgPT09IHZtLmN1cnJlbnREZXZpY2UucGFuZWxNb2RlbC5pZDtcblx0ICAgICAgICBpZiAoaXNQYXJlbnQgJiYgcGFuZWxJbnB1dC5pZC50b0xvd2VyQ2FzZSgpID09PSB2bS5jdXJyZW50RGV2aWNlLnBhbmVsSW5wdXQpIHtcblx0ICAgICAgICAgIHZtLmN1cnJlbnREZXZpY2UucGFuZWxJbnB1dCA9IHBhbmVsSW5wdXQ7XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgICBpZiAodm0uY3VycmVudERldmljZS5sb2NhdGlvbktleSAhPT0gbnVsbCkge1xuXHQgICAgICBmb3IgKHZhciBrID0gMDsgayA8IHZtLmxvY2F0aW9ucy5sZW5ndGg7IGsrKykge1xuXHQgICAgICAgIHZhciBsb2NhdGlvbiA9IHZtLmxvY2F0aW9uc1trXTtcblx0ICAgICAgICBpZiAobG9jYXRpb24ua2V5ID09PSB2bS5jdXJyZW50RGV2aWNlLmxvY2F0aW9uS2V5KSB7XG5cdCAgICAgICAgICB2bS5jdXJyZW50RGV2aWNlLmxvY2F0aW9uID0gbG9jYXRpb247XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdCAgICAgIHJldHVybjtcblx0ICAgIH1cblx0ICB9O1xuXHRcblx0ICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdCAgLy8gUHJvcGVydGllcyBUYWJcblx0ICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdCAgdm0ub25TYXZlRGV2aWNlID0gZnVuY3Rpb24gKCkge1xuXHQgICAgUHJvZ3Jlc3NCYXJTZXJ2aWNlLnN0YXJ0KCk7XG5cdCAgICBpZiAodm0uY3VycmVudERldmljZS5sb2NhdGlvbiAhPT0gdW5kZWZpbmVkICYmIHZtLmN1cnJlbnREZXZpY2UubG9jYXRpb24ua2V5ICE9PSB1bmRlZmluZWQpIHtcblx0ICAgICAgdm0uY3VycmVudERldmljZS5sb2NhdGlvbktleSA9IHZtLmN1cnJlbnREZXZpY2UubG9jYXRpb24ua2V5O1xuXHQgICAgfVxuXHQgICAgaWYgKHZtLmN1cnJlbnREZXZpY2UucGFuZWxNb2RlbC5pZCAhPT0gdW5kZWZpbmVkICYmIHZtLmN1cnJlbnREZXZpY2UucGFuZWxNb2RlbC5pZCAhPT0gJ05vbmUnKSB7XG5cdCAgICAgIHZtLmN1cnJlbnREZXZpY2UucGFuZWxNb2RlbE51bWJlciA9IHZtLmN1cnJlbnREZXZpY2UucGFuZWxNb2RlbC5pZDtcblx0ICAgIH1cblx0ICAgIGlmICh2bS5jdXJyZW50RGV2aWNlLnBhbmVsSW5wdXQuaWQgIT09IHVuZGVmaW5lZCAmJiB2bS5jdXJyZW50RGV2aWNlLnBhbmVsSW5wdXQuaWQgIT09ICdOb25lJykge1xuXHQgICAgICB2bS5jdXJyZW50RGV2aWNlLnBhbmVsU2VyaWFsSW5wdXQgPSB2bS5jdXJyZW50RGV2aWNlLnBhbmVsSW5wdXQuaWQudG9Mb3dlckNhc2UoKTtcblx0ICAgIH1cblx0ICAgIHZtLmN1cnJlbnREZXZpY2UudGltZXpvbmUgPSB2bS5zZWxlY3RlZFRpbWV6b25lO1xuXHQgICAgdmFyIHByb21pc2UgPSBEZXZpY2VzU2VydmljZS5zYXZlKHZtLmN1cnJlbnREZXZpY2UpO1xuXHQgICAgcmV0dXJuIHByb21pc2UudGhlbih2bS5vblN1Y2Nlc3NEZXZpY2VTYXZlLCB2bS5vbkZhaWx1cmVEZXZpY2VTYXZlKTtcblx0ICB9O1xuXHRcblx0ICB2bS5vblN1Y2Nlc3NEZXZpY2VTYXZlID0gZnVuY3Rpb24gKCkge1xuXHQgICAgUHJvZ3Jlc3NCYXJTZXJ2aWNlLmNvbXBsZXRlKCk7XG5cdCAgICByZXR1cm4gVG9hc3RzU2VydmljZS5zaG93U3VjY2Vzc1RvYXN0KCdXZSBzYXZlZCB5b3VyIHVwZGF0ZS4nKTtcblx0ICB9O1xuXHRcblx0ICB2bS5vbkZhaWx1cmVEZXZpY2VTYXZlID0gZnVuY3Rpb24gKGVycm9yKSB7XG5cdCAgICBQcm9ncmVzc0JhclNlcnZpY2UuY29tcGxldGUoKTtcblx0ICAgIGlmIChlcnJvci5zdGF0dXMgPT09IDQwOSkge1xuXHQgICAgICAkbG9nLmluZm8oJ0ZhaWx1cmUgc2F2aW5nIGRldmljZS4gQ3VzdG9tZXIgZGlzcGxheSBjb2RlIGFscmVhZHkgZXhpc3RzIGZvciB0ZW5hbnQ6ICcgKyBlcnJvci5zdGF0dXMgKyAnICcgKyBlcnJvci5zdGF0dXNUZXh0KTtcblx0ICAgICAgcmV0dXJuIHN3ZWV0LnNob3coJ09vcHMuLi4nLCAnVGhpcyBjdXN0b21lciBkaXNwbGF5IGNvZGUgYWxyZWFkeSBleGlzdHMgZm9yIHRoaXMgdGVuYW50LiBQbGVhc2UgY2hvb3NlIGFub3RoZXIuJywgJ2Vycm9yJyk7XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICAkbG9nLmVycm9yKCdGYWlsdXJlIHNhdmluZyBkZXZpY2U6ICcgKyBlcnJvci5zdGF0dXMgKyAnICcgKyBlcnJvci5zdGF0dXNUZXh0KTtcblx0ICAgICAgcmV0dXJuIFRvYXN0c1NlcnZpY2Uuc2hvd0Vycm9yVG9hc3QoJ09vcHMuIFdlIHdlcmUgdW5hYmxlIHRvIHNhdmUgeW91ciB1cGRhdGVzIHRvIHRoaXMgZGV2aWNlIGF0IHRoaXMgdGltZS4nKTtcblx0ICAgIH1cblx0ICB9O1xuXHRcblx0ICB2bS5vblBhbmVsU2xlZXAgPSBmdW5jdGlvbiAoY29tbWFuZCkge1xuXHQgICAgUHJvZ3Jlc3NCYXJTZXJ2aWNlLnN0YXJ0KCk7XG5cdCAgICB2YXIgcHJvbWlzZSA9IENvbW1hbmRzU2VydmljZS5wYW5lbFNsZWVwKHZtLmRldmljZUtleSwgY29tbWFuZCk7XG5cdCAgICByZXR1cm4gcHJvbWlzZS50aGVuKHZtLm9uUGFuZWxTbGVlcFN1Y2Nlc3MsIHZtLm9uUGFuZWxTbGVlcEZhaWx1cmUpO1xuXHQgIH07XG5cdFxuXHQgIHZtLm9uUGFuZWxTbGVlcFN1Y2Nlc3MgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICBQcm9ncmVzc0JhclNlcnZpY2UuY29tcGxldGUoKTtcblx0ICAgIHJldHVybiBUb2FzdHNTZXJ2aWNlLnNob3dTdWNjZXNzVG9hc3QoXCJXZSB0b2dnbGVkIHRoZSBwYW5lbCBzbGVlcCBhdHRyaWJ1dGUuIFRoZSBwbGF5ZXIgc2hvdWxkIGFkanVzdCB0byB0aGVzZSBjaGFuZ2VzIHdpdGhpbiAxNSBtaW51dGVzLlwiKTtcblx0ICB9O1xuXHRcblx0ICB2bS5vblBhbmVsU2xlZXBGYWlsdXJlID0gZnVuY3Rpb24gKGVycm9yKSB7XG5cdCAgICBQcm9ncmVzc0JhclNlcnZpY2UuY29tcGxldGUoKTtcblx0ICAgIHJldHVybiBzd2VldC5zaG93KCdPb3BzLi4uJywgXCJXZSB3ZXJlIHVuYWJsZSB0byB0b2dnbGUgdGhlIHBhbmVsIHNsZWVwIGF0dHJpYnV0ZS5cIiwgJ2Vycm9yJyk7XG5cdCAgfTtcblx0XG5cdCAgdm0uY29uZmlybURldmljZURlbGV0ZSA9IGZ1bmN0aW9uIChldmVudCwga2V5KSB7XG5cdCAgICB2YXIgY29uZmlybSA9ICRtZERpYWxvZy5jb25maXJtKHtcblx0ICAgICAgdGl0bGU6ICdBcmUgeW91IHN1cmUgdG8gZGVsZXRlIHRoaXMgZGV2aWNlPycsXG5cdCAgICAgIHRleHRDb250ZW50OiAnUGxlYXNlIHJlbWVtYmVyLCB5b3UgTVVTVCByZW1vdmUgdGhpcyBkZXZpY2UgZnJvbSBDb250ZW50IE1hbmFnZXIgYmVmb3JlIGRlbGV0aW5nIGl0IGZyb20gUHJvdmlzaW9uaW5nLicsXG5cdCAgICAgIHRhcmdldEV2ZW50OiBldmVudCxcblx0ICAgICAgb2s6ICdEZWxldGUnLFxuXHQgICAgICBjYW5jZWw6ICdDYW5jZWwnXG5cdCAgICB9KTtcblx0ICAgIHZhciBzaG93UHJvbWlzZSA9ICRtZERpYWxvZy5zaG93KGNvbmZpcm0pO1xuXHQgICAgdmFyIHN1Y2Nlc3MgPSBmdW5jdGlvbiBzdWNjZXNzKCkge1xuXHQgICAgICByZXR1cm4gdm0ub25Db25maXJtRGVsZXRlKGtleSk7XG5cdCAgICB9O1xuXHQgICAgdmFyIGZhaWx1cmUgPSBmdW5jdGlvbiBmYWlsdXJlKCkge1xuXHQgICAgICByZXR1cm4gdm0ub25Db25maXJtQ2FuY2VsKCk7XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIHNob3dQcm9taXNlLnRoZW4oc3VjY2VzcywgZmFpbHVyZSk7XG5cdCAgfTtcblx0XG5cdCAgdm0ub25Db25maXJtRGVsZXRlID0gZnVuY3Rpb24gKGtleSkge1xuXHQgICAgdmFyIHN1Y2Nlc3MgPSBmdW5jdGlvbiBzdWNjZXNzKCkge1xuXHQgICAgICBUb2FzdHNTZXJ2aWNlLnNob3dTdWNjZXNzVG9hc3QoJ1dlIHByb2Nlc3NlZCB5b3VyIGRlbGV0ZSByZXF1ZXN0LicpO1xuXHQgICAgICByZXR1cm4gJHN0YXRlLmdvKCdkZXZpY2VzJyk7XG5cdCAgICB9O1xuXHQgICAgdmFyIGZhaWx1cmUgPSBmdW5jdGlvbiBmYWlsdXJlKGVycm9yKSB7XG5cdCAgICAgIHZhciBmcmllbmRseU1lc3NhZ2UgPSAnV2Ugd2VyZSB1bmFibGUgdG8gY29tcGxldGUgeW91ciBkZWxldGUgcmVxdWVzdCBhdCB0aGlzIHRpbWUuJztcblx0ICAgICAgVG9hc3RzU2VydmljZS5zaG93RXJyb3JUb2FzdChmcmllbmRseU1lc3NhZ2UpO1xuXHQgICAgICByZXR1cm4gJGxvZy5lcnJvcignRGVsZXRlIGRldmljZSBmYWlsdXJlIGZvciBkZXZpY2Vfa2V5ICcgKyBrZXkgKyAnOiAnICsgZXJyb3Iuc3RhdHVzICsgJyAnICsgZXJyb3Iuc3RhdHVzVGV4dCk7XG5cdCAgICB9O1xuXHQgICAgdmFyIGRlbGV0ZVByb21pc2UgPSBEZXZpY2VzU2VydmljZS5kZWxldGUoa2V5KTtcblx0ICAgIHJldHVybiBkZWxldGVQcm9taXNlLnRoZW4oc3VjY2VzcywgZmFpbHVyZSk7XG5cdCAgfTtcblx0XG5cdCAgdm0ub25Db25maXJtQ2FuY2VsID0gZnVuY3Rpb24gKCkge1xuXHQgICAgcmV0dXJuIFRvYXN0c1NlcnZpY2Uuc2hvd0luZm9Ub2FzdCgnV2UgY2FuY2VsZWQgeW91ciBkZWxldGUgcmVxdWVzdC4nKTtcblx0ICB9O1xuXHRcblx0ICB2bS5vblByb29mT2ZQbGF5TG9nZ2luZ0NoZWNrID0gZnVuY3Rpb24gKCkge1xuXHQgICAgaWYgKHZtLmN1cnJlbnREZXZpY2UucHJvb2ZPZlBsYXlMb2dnaW5nKSB7XG5cdCAgICAgIHZhciBub0xvY2F0aW9uID0gdm0uY3VycmVudERldmljZS5sb2NhdGlvbktleSA9PT0gbnVsbDtcblx0ICAgICAgdmFyIG5vRGlzcGxheUNvZGUgPSB2bS5jdXJyZW50RGV2aWNlLmN1c3RvbWVyRGlzcGxheUNvZGUgPT09IG51bGw7XG5cdCAgICAgIGlmIChub0xvY2F0aW9uKSB7XG5cdCAgICAgICAgc3dlZXQuc2hvdygnT29wcy4uLicsIFwiWW91IG11c3QgaGF2ZSBhIExvY2F0aW9uIHRvIGVuYWJsZSBQcm9vZiBvZiBwbGF5LlwiLCAnZXJyb3InKTtcblx0ICAgICAgICByZXR1cm4gdm0uY3VycmVudERldmljZS5wcm9vZk9mUGxheUxvZ2dpbmcgPSBmYWxzZTtcblx0ICAgICAgfSBlbHNlIGlmIChub0Rpc3BsYXlDb2RlKSB7XG5cdCAgICAgICAgc3dlZXQuc2hvdygnT29wcy4uLicsIFwiWW91IG11c3QgaGF2ZSBhIERpc3BsYXkgY29kZSB0byBlbmFibGUgUHJvb2Ygb2YgcGxheS5cIiwgJ2Vycm9yJyk7XG5cdCAgICAgICAgcmV0dXJuIHZtLmN1cnJlbnREZXZpY2UucHJvb2ZPZlBsYXlMb2dnaW5nID0gZmFsc2U7XG5cdCAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgcmV0dXJuIHZtLm9uU2F2ZURldmljZSgpO1xuXHQgICAgICB9XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICByZXR1cm4gdm0ub25TYXZlRGV2aWNlKCk7XG5cdCAgICB9XG5cdCAgfTtcblx0XG5cdCAgdm0ub25VcGRhdGVMb2NhdGlvbiA9IGZ1bmN0aW9uICgpIHtcblx0ICAgIHJldHVybiB2bS5vblNhdmVEZXZpY2UoKTtcblx0ICB9O1xuXHRcblx0ICB2bS5hdXRvR2VuZXJhdGVDdXN0b21lckRpc3BsYXlDb2RlID0gZnVuY3Rpb24gKCkge1xuXHQgICAgdmFyIG5ld0Rpc3BsYXlDb2RlID0gJyc7XG5cdCAgICBpZiAodm0uY3VycmVudERldmljZS5jdXN0b21lckRpc3BsYXlOYW1lKSB7XG5cdCAgICAgIG5ld0Rpc3BsYXlDb2RlID0gdm0uY3VycmVudERldmljZS5jdXN0b21lckRpc3BsYXlOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdCAgICAgIG5ld0Rpc3BsYXlDb2RlID0gbmV3RGlzcGxheUNvZGUucmVwbGFjZSgvXFxzKy9nLCAnXycpO1xuXHQgICAgICBuZXdEaXNwbGF5Q29kZSA9IG5ld0Rpc3BsYXlDb2RlLnJlcGxhY2UoL1xcVysvZywgJycpO1xuXHQgICAgfVxuXHQgICAgcmV0dXJuIHZtLmN1cnJlbnREZXZpY2UuY3VzdG9tZXJEaXNwbGF5Q29kZSA9IG5ld0Rpc3BsYXlDb2RlO1xuXHQgIH07XG5cdFxuXHQgIHZtLmxvZ2dseUZvclVzZXIgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICB2YXIgdXNlckRvbWFpbiA9IFNlc3Npb25zU2VydmljZS5nZXRVc2VyRW1haWwoKS5zcGxpdChcIkBcIilbMV07XG5cdCAgICByZXR1cm4gdXNlckRvbWFpbiA9PT0gXCJkZW1vLmFnb3N0by5jb21cIiB8fCB1c2VyRG9tYWluID09PSBcImFnb3N0by5jb21cIjtcblx0ICB9O1xuXHRcblx0ICB2bS5vbkNsaWNrUmVmcmVzaEJ1dHRvbiA9IGZ1bmN0aW9uICgpIHtcblx0ICAgIFByb2dyZXNzQmFyU2VydmljZS5zdGFydCgpO1xuXHQgICAgdm0uc3RhcnRUaW1lID0gRGF0ZU1hbmlwdWxhdGlvblNlcnZpY2UuY29udmVydFRvTW9tZW50SWZOb3RBbHJlYWR5KHZtLnN0YXJ0VGltZSk7XG5cdCAgICB2bS5lbmRUaW1lID0gRGF0ZU1hbmlwdWxhdGlvblNlcnZpY2UuY29udmVydFRvTW9tZW50SWZOb3RBbHJlYWR5KHZtLmVuZFRpbWUpO1xuXHQgICAgdm0uZXBvY2hTdGFydCA9ICgwLCBfbW9tZW50Mi5kZWZhdWx0KSh2bS5zdGFydFRpbWUsICdZWVlZLU1NLUREIGhoOm1tIEEnKS51bml4KCk7XG5cdCAgICB2bS5lcG9jaEVuZCA9ICgwLCBfbW9tZW50Mi5kZWZhdWx0KSh2bS5lbmRUaW1lLCAnWVlZWS1NTS1ERCBoaDptbSBBJykudW5peCgpO1xuXHQgICAgdm0ucHJldl9jdXJzb3IgPSBudWxsO1xuXHQgICAgdm0ubmV4dF9jdXJzb3IgPSBudWxsO1xuXHQgICAgdmFyIGlzc3Vlc1Byb21pc2UgPSBEZXZpY2VzU2VydmljZS5nZXRJc3N1ZXNCeUtleSh2bS5kZXZpY2VLZXksIHZtLmVwb2NoU3RhcnQsIHZtLmVwb2NoRW5kLCB2bS5wcmV2X2N1cnNvciwgdm0ubmV4dF9jdXJzb3IpO1xuXHQgICAgcmV0dXJuIGlzc3Vlc1Byb21pc2UudGhlbihmdW5jdGlvbiAoZGF0YSkge1xuXHQgICAgICByZXR1cm4gdm0ub25SZWZyZXNoSXNzdWVzU3VjY2VzcyhkYXRhKTtcblx0ICAgIH0sIGZ1bmN0aW9uIChlcnJvcikge1xuXHQgICAgICByZXR1cm4gdm0ub25SZWZyZXNoSXNzdWVzRmFpbHVyZShlcnJvcik7XG5cdCAgICB9KTtcblx0ICB9O1xuXHRcblx0ICB2bS5vblJlZnJlc2hJc3N1ZXNTdWNjZXNzID0gZnVuY3Rpb24gKGRhdGEpIHtcblx0ICAgIHZtLnJlcGxhY2VJc3N1ZVRpbWUoZGF0YS5pc3N1ZXMpO1xuXHQgICAgdm0uaXNzdWVzID0gZGF0YS5pc3N1ZXM7XG5cdCAgICB2bS5wcmV2X2N1cnNvciA9IGRhdGEucHJldjtcblx0ICAgIHZtLm5leHRfY3Vyc29yID0gZGF0YS5uZXh0O1xuXHQgICAgcmV0dXJuIFByb2dyZXNzQmFyU2VydmljZS5jb21wbGV0ZSgpO1xuXHQgIH07XG5cdFxuXHQgIHZtLm9uUmVmcmVzaElzc3Vlc0ZhaWx1cmUgPSBmdW5jdGlvbiAoZXJyb3IpIHtcblx0ICAgIFByb2dyZXNzQmFyU2VydmljZS5jb21wbGV0ZSgpO1xuXHQgICAgVG9hc3RzU2VydmljZS5zaG93SW5mb1RvYXN0KCdXZSB3ZXJlIHVuYWJsZSB0byByZWZyZXNoIHRoZSBkZXZpY2UgaXNzdWVzIGxpc3QgYXQgdGhpcyB0aW1lLicpO1xuXHQgICAgcmV0dXJuICRsb2cuZXJyb3IoJ0ZhaWx1cmUgdG8gcmVmcmVzaCBkZXZpY2UgaXNzdWVzOiAnICsgZXJyb3Iuc3RhdHVzICsgJyAnICsgZXJyb3Iuc3RhdHVzVGV4dCk7XG5cdCAgfTtcblx0XG5cdCAgcmV0dXJuIHZtO1xuXHR9XG5cdFxuXHRleHBvcnRzLkRldmljZURldGFpbHNDdHJsID0gRGV2aWNlRGV0YWlsc0N0cmw7XG5cbi8qKiovIH0sXG5cbi8qKiovIDY2MDpcbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXHRcblx0RGV2aWNlc0xpc3RpbmdDdHJsLiRpbmplY3QgPSBbXCIkc3RhdGVQYXJhbXNcIiwgXCIkbG9nXCIsIFwiRGV2aWNlc1NlcnZpY2VcIiwgXCIkc3RhdGVcIiwgXCJTZXNzaW9uc1NlcnZpY2VcIiwgXCJQcm9ncmVzc0JhclNlcnZpY2VcIiwgXCJzd2VldFwiXTtcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG5cdCAgdmFsdWU6IHRydWVcblx0fSk7XG5cdGV4cG9ydHMuRGV2aWNlc0xpc3RpbmdDdHJsID0gdW5kZWZpbmVkO1xuXHRcblx0dmFyIF9nZXRJdGVyYXRvcjIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDY1MCk7XG5cdFxuXHR2YXIgX2dldEl0ZXJhdG9yMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2dldEl0ZXJhdG9yMik7XG5cdFxuXHRmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXHRcblx0ZnVuY3Rpb24gRGV2aWNlc0xpc3RpbmdDdHJsKCRzdGF0ZVBhcmFtcywgJGxvZywgRGV2aWNlc1NlcnZpY2UsICRzdGF0ZSwgU2Vzc2lvbnNTZXJ2aWNlLCBQcm9ncmVzc0JhclNlcnZpY2UsIHN3ZWV0KSB7XG5cdCAgXCJuZ0luamVjdFwiO1xuXHRcblx0ICB2YXIgdm0gPSB0aGlzO1xuXHQgIHZtLmRpc3RyaWJ1dG9yS2V5ID0gdW5kZWZpbmVkO1xuXHQgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0ICAvLyBNYW5hZ2VkXG5cdCAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHQgIHZtLmRldmljZXMgPSBbXTtcblx0ICB2bS5kZXZpY2VzUHJldiA9IG51bGw7XG5cdCAgdm0uZGV2aWNlc05leHQgPSBudWxsO1xuXHQgIHZtLnNlbGVjdGVkQnV0dG9uID0gXCJTZXJpYWwgTnVtYmVyXCI7XG5cdCAgdm0uc2VyaWFsRGV2aWNlcyA9IHt9O1xuXHQgIHZtLmRpc2FibGVkID0gdHJ1ZTtcblx0ICB2bS5tYWNEZXZpY2VzID0ge307XG5cdCAgdm0uZ2NtaWREZXZpY2VzID0ge307XG5cdFxuXHQgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0ICAvLyBVbm1hbmFnZWRcblx0ICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdCAgdm0udW5tYW5hZ2VkU2VsZWN0ZWRCdXR0b24gPSBcIk1BQ1wiO1xuXHQgIHZtLnVubWFuYWdlZFNlcmlhbERldmljZXMgPSB7fTtcblx0ICB2bS51bm1hbmFnZWREaXNhYmxlZCA9IHRydWU7XG5cdCAgdm0udW5tYW5hZ2VkRGV2aWNlc1ByZXYgPSBudWxsO1xuXHQgIHZtLnVubWFuYWdlZERldmljZXNOZXh0ID0gbnVsbDtcblx0ICB2bS51bm1hbmFnZWREZXZpY2VzID0gW107XG5cdCAgdm0udW5tYW5hZ2VkTWFjRGV2aWNlcyA9IHt9O1xuXHQgIHZtLnVubWFuYWdlZEdDTWlkRGV2aWNlcyA9IHt9O1xuXHQgIHZtLmRldmljZXNUb01hdGNoT25Vbm1hbmFnZWQgPSBbXTtcblx0ICB2bS5kZXZpY2VzVG9NYXRjaE9uTWFuYWdlZCA9IFtdO1xuXHRcblx0ICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdFxuXHQgIHZtLnJlZnJlc2hNYW5hZ2VkRGV2aWNlcyA9IGZ1bmN0aW9uICgpIHtcblx0ICAgIHZtLmRldmljZXNQcmV2ID0gbnVsbDtcblx0ICAgIHZtLmRldmljZXNOZXh0ID0gbnVsbDtcblx0ICAgIHJldHVybiB2bS5nZXRNYW5hZ2VkRGV2aWNlcyh2bS5kaXN0cmlidXRvcktleSwgdm0uZGV2aWNlc1ByZXYsIHZtLmRldmljZXNOZXh0KTtcblx0ICB9O1xuXHRcblx0ICB2bS5yZWZyZXNoVW5tYW5hZ2VkRGV2aWNlcyA9IGZ1bmN0aW9uICgpIHtcblx0ICAgIHZtLnVubWFuYWdlZERldmljZXNQcmV2ID0gbnVsbDtcblx0ICAgIHZtLnVubWFuYWdlZERldmljZXNOZXh0ID0gbnVsbDtcblx0ICAgIHJldHVybiB2bS5nZXRVbm1hbmFnZWREZXZpY2VzKHZtLmRpc3RyaWJ1dG9yS2V5LCB2bS51bm1hbmFnZWREZXZpY2VzUHJldiwgdm0udW5tYW5hZ2VkRGV2aWNlc05leHQpO1xuXHQgIH07XG5cdFxuXHQgIHZtLmNoYW5nZVJhZGlvID0gZnVuY3Rpb24gKHVubWFuYWdlZCkge1xuXHQgICAgaWYgKHVubWFuYWdlZCkge1xuXHQgICAgICB2bS51bm1hbmFnZWRTZWFyY2hUZXh0ID0gJyc7XG5cdCAgICAgIHZtLnVubWFuYWdlZERpc2FibGVkID0gdHJ1ZTtcblx0ICAgICAgdm0udW5tYW5hZ2VkU2VyaWFsRGV2aWNlcyA9IHt9O1xuXHQgICAgICB2bS51bm1hbmFnZWRNYWNEZXZpY2VzID0ge307XG5cdCAgICAgIHZtLmRldmljZXNUb01hdGNoT25Vbm1hbmFnZWQgPSBbXTtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIHZtLnNlYXJjaFRleHQgPSAnJztcblx0ICAgICAgdm0uZGlzYWJsZWQgPSB0cnVlO1xuXHQgICAgICB2bS5zZXJpYWxEZXZpY2VzID0ge307XG5cdCAgICAgIHZtLm1hY0RldmljZXMgPSB7fTtcblx0ICAgICAgdm0uZGV2aWNlc1RvTWF0Y2hPbk1hbmFnZWQgPSBbXTtcblx0ICAgIH1cblx0ICB9O1xuXHRcblx0ICB2bS5lZGl0SXRlbSA9IGZ1bmN0aW9uIChpdGVtKSB7XG5cdCAgICByZXR1cm4gRGV2aWNlc1NlcnZpY2UuZWRpdEl0ZW0oaXRlbSwgdHJ1ZSk7XG5cdCAgfTtcblx0XG5cdCAgdm0ucHJlcGFyZUZvckVkaXRWaWV3ID0gZnVuY3Rpb24gKHVubWFuYWdlZCwgc2VhcmNoVGV4dCkge1xuXHQgICAgdmFyIG1hYyA9IHZvaWQgMCxcblx0ICAgICAgICBzZXJpYWwgPSB2b2lkIDAsXG5cdCAgICAgICAgZ2NtaWQgPSB2b2lkIDA7XG5cdCAgICBpZiAodW5tYW5hZ2VkKSB7XG5cdCAgICAgIG1hYyA9IHZtLnVubWFuYWdlZFNlbGVjdGVkQnV0dG9uID09PSBcIk1BQ1wiO1xuXHQgICAgICBzZXJpYWwgPSB2bS51bm1hbmFnZWRTZWxlY3RlZEJ1dHRvbiA9PT0gXCJTZXJpYWwgTnVtYmVyXCI7XG5cdCAgICAgIGdjbWlkID0gdm0udW5tYW5hZ2VkU2VsZWN0ZWRCdXR0b24gPT09IFwiR0NNIElEXCI7XG5cdCAgICAgIGlmIChtYWMpIHtcblx0ICAgICAgICByZXR1cm4gdm0uZWRpdEl0ZW0odm0udW5tYW5hZ2VkTWFjRGV2aWNlc1tzZWFyY2hUZXh0XSk7XG5cdCAgICAgIH0gZWxzZSBpZiAoc2VyaWFsKSB7XG5cdCAgICAgICAgcmV0dXJuIHZtLmVkaXRJdGVtKHZtLnVubWFuYWdlZFNlcmlhbERldmljZXNbc2VhcmNoVGV4dF0pO1xuXHQgICAgICB9IGVsc2Uge1xuXHQgICAgICAgIHJldHVybiB2bS5lZGl0SXRlbSh2bS51bm1hbmFnZWRHQ01pZERldmljZXNbc2VhcmNoVGV4dF0pO1xuXHQgICAgICB9XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICBtYWMgPSB2bS5zZWxlY3RlZEJ1dHRvbiA9PT0gXCJNQUNcIjtcblx0ICAgICAgc2VyaWFsID0gdm0uc2VsZWN0ZWRCdXR0b24gPT09IFwiU2VyaWFsIE51bWJlclwiO1xuXHQgICAgICBnY21pZCA9IHZtLnNlbGVjdGVkQnV0dG9uID09PSBcIkdDTSBJRFwiO1xuXHQgICAgICBpZiAobWFjKSB7XG5cdCAgICAgICAgcmV0dXJuIHZtLmVkaXRJdGVtKHZtLm1hY0RldmljZXNbc2VhcmNoVGV4dF0pO1xuXHQgICAgICB9IGVsc2UgaWYgKHNlcmlhbCkge1xuXHQgICAgICAgIHJldHVybiB2bS5lZGl0SXRlbSh2bS5zZXJpYWxEZXZpY2VzW3NlYXJjaFRleHRdKTtcblx0ICAgICAgfSBlbHNlIHtcblx0ICAgICAgICByZXR1cm4gdm0uZWRpdEl0ZW0odm0uZ2NtaWREZXZpY2VzW3NlYXJjaFRleHRdKTtcblx0ICAgICAgfVxuXHQgICAgfVxuXHQgIH07XG5cdFxuXHQgIHZtLmNvbnRyb2xPcGVuQnV0dG9uID0gZnVuY3Rpb24gKHVubWFuYWdlZCwgaXNNYXRjaCkge1xuXHQgICAgaWYgKCF1bm1hbmFnZWQpIHtcblx0ICAgICAgdm0uZGlzYWJsZWQgPSAhaXNNYXRjaDtcblx0ICAgICAgdm0uZGlzYWJsZWRCdXR0b25Mb2FkaW5nID0gZmFsc2U7XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICB2bS51bm1hbmFnZWREaXNhYmxlZCA9ICFpc01hdGNoO1xuXHQgICAgICB2bS51bm1hbmFnZWREaXNhYmxlZEJ1dHRvbkxvYWRpbmcgPSBmYWxzZTtcblx0ICAgIH1cblx0ICB9O1xuXHRcblx0ICB2bS5pc1Jlc291cmNlVmFsaWQgPSBmdW5jdGlvbiAodW5tYW5hZ2VkLCByZXNvdXJjZSkge1xuXHQgICAgdmFyIGRldmljZXNUb01hdGNoT24gPSB1bm1hbmFnZWQgPyB2bS5kZXZpY2VzVG9NYXRjaE9uVW5tYW5hZ2VkIDogdm0uZGV2aWNlc1RvTWF0Y2hPbk1hbmFnZWQ7XG5cdCAgICB2YXIgZm91bmRNYXRjaCA9IGZhbHNlO1xuXHQgICAgdmFyIF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSB0cnVlO1xuXHQgICAgdmFyIF9kaWRJdGVyYXRvckVycm9yID0gZmFsc2U7XG5cdCAgICB2YXIgX2l0ZXJhdG9yRXJyb3IgPSB1bmRlZmluZWQ7XG5cdFxuXHQgICAgdHJ5IHtcblx0ICAgICAgZm9yICh2YXIgX2l0ZXJhdG9yID0gKDAsIF9nZXRJdGVyYXRvcjMuZGVmYXVsdCkoZGV2aWNlc1RvTWF0Y2hPbiksIF9zdGVwOyAhKF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSAoX3N0ZXAgPSBfaXRlcmF0b3IubmV4dCgpKS5kb25lKTsgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IHRydWUpIHtcblx0ICAgICAgICB2YXIgaXRlbSA9IF9zdGVwLnZhbHVlO1xuXHRcblx0ICAgICAgICBpZiAocmVzb3VyY2UgPT09IGl0ZW0pIHtcblx0ICAgICAgICAgIGZvdW5kTWF0Y2ggPSB0cnVlO1xuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXHQgICAgfSBjYXRjaCAoZXJyKSB7XG5cdCAgICAgIF9kaWRJdGVyYXRvckVycm9yID0gdHJ1ZTtcblx0ICAgICAgX2l0ZXJhdG9yRXJyb3IgPSBlcnI7XG5cdCAgICB9IGZpbmFsbHkge1xuXHQgICAgICB0cnkge1xuXHQgICAgICAgIGlmICghX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiAmJiBfaXRlcmF0b3IucmV0dXJuKSB7XG5cdCAgICAgICAgICBfaXRlcmF0b3IucmV0dXJuKCk7XG5cdCAgICAgICAgfVxuXHQgICAgICB9IGZpbmFsbHkge1xuXHQgICAgICAgIGlmIChfZGlkSXRlcmF0b3JFcnJvcikge1xuXHQgICAgICAgICAgdGhyb3cgX2l0ZXJhdG9yRXJyb3I7XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdCAgICB9XG5cdFxuXHQgICAgdm0uY29udHJvbE9wZW5CdXR0b24odW5tYW5hZ2VkLCBmb3VuZE1hdGNoKTtcblx0ICAgIHJldHVybiBmb3VuZE1hdGNoO1xuXHQgIH07XG5cdFxuXHQgIHZtLnNlYXJjaERldmljZXMgPSBmdW5jdGlvbiAodW5tYW5hZ2VkLCBwYXJ0aWFsKSB7XG5cdCAgICB2YXIgYnV0dG9uID0gdm9pZCAwO1xuXHQgICAgaWYgKHVubWFuYWdlZCkge1xuXHQgICAgICBidXR0b24gPSB2bS51bm1hbmFnZWRTZWxlY3RlZEJ1dHRvbjtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIGJ1dHRvbiA9IHZtLnNlbGVjdGVkQnV0dG9uO1xuXHQgICAgfVxuXHRcblx0ICAgIHZhciBieVRlbmFudCA9IGZhbHNlO1xuXHQgICAgdmFyIHRlbmFudEtleSA9IG51bGw7XG5cdFxuXHQgICAgcmV0dXJuIERldmljZXNTZXJ2aWNlLnNlYXJjaERldmljZXMocGFydGlhbCwgYnV0dG9uLCBieVRlbmFudCwgdGVuYW50S2V5LCB2bS5kaXN0cmlidXRvcktleSwgdW5tYW5hZ2VkKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuXHQgICAgICB2YXIgZGV2aWNlc1RvUmV0dXJuID0gdm9pZCAwO1xuXHQgICAgICBpZiAocmVzcG9uc2Uuc3VjY2Vzcykge1xuXHQgICAgICAgIHZhciBkZXZpY2VzID0gcmVzcG9uc2UuZGV2aWNlcztcblx0ICAgICAgICBpZiAoYnV0dG9uID09PSBcIlNlcmlhbCBOdW1iZXJcIikge1xuXHQgICAgICAgICAgaWYgKHVubWFuYWdlZCkge1xuXHQgICAgICAgICAgICB2bS51bm1hbmFnZWRTZXJpYWxEZXZpY2VzID0gZGV2aWNlc1sxXTtcblx0ICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgIHZtLnNlcmlhbERldmljZXMgPSBkZXZpY2VzWzFdO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgICAgZGV2aWNlc1RvUmV0dXJuID0gZGV2aWNlc1swXTtcblx0ICAgICAgICB9IGVsc2UgaWYgKGJ1dHRvbiA9PT0gXCJNQUNcIikge1xuXHQgICAgICAgICAgaWYgKHVubWFuYWdlZCkge1xuXHQgICAgICAgICAgICB2bS51bm1hbmFnZWRNYWNEZXZpY2VzID0gZGV2aWNlc1sxXTtcblx0ICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgIHZtLm1hY0RldmljZXMgPSBkZXZpY2VzWzFdO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgICAgZGV2aWNlc1RvUmV0dXJuID0gZGV2aWNlc1swXTtcblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgaWYgKHVubWFuYWdlZCkge1xuXHQgICAgICAgICAgICB2bS51bm1hbmFnZWRHQ01pZERldmljZXMgPSBkZXZpY2VzWzFdO1xuXHQgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgdm0uZ2NtaWREZXZpY2VzID0gZGV2aWNlc1sxXTtcblx0ICAgICAgICAgIH1cblx0ICAgICAgICAgIGRldmljZXNUb1JldHVybiA9IGRldmljZXNbMF07XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGlmICh1bm1hbmFnZWQpIHtcblx0ICAgICAgICAgIHZtLmRldmljZXNUb01hdGNoT25Vbm1hbmFnZWQgPSBkZXZpY2VzVG9SZXR1cm47XG5cdCAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgIHZtLmRldmljZXNUb01hdGNoT25NYW5hZ2VkID0gZGV2aWNlc1RvUmV0dXJuO1xuXHQgICAgICAgIH1cblx0ICAgICAgICByZXR1cm4gZGV2aWNlc1RvUmV0dXJuO1xuXHQgICAgICB9IGVsc2Uge1xuXHQgICAgICAgIHJldHVybiBbXTtcblx0ICAgICAgfVxuXHQgICAgfSk7XG5cdCAgfTtcblx0XG5cdCAgdm0uZ2V0TWFuYWdlZERldmljZXMgPSBmdW5jdGlvbiAoa2V5LCBwcmV2LCBuZXh0KSB7XG5cdCAgICBQcm9ncmVzc0JhclNlcnZpY2Uuc3RhcnQoKTtcblx0ICAgIHZhciBkZXZpY2VzUHJvbWlzZSA9IERldmljZXNTZXJ2aWNlLmdldERldmljZXNCeURpc3RyaWJ1dG9yKGtleSwgcHJldiwgbmV4dCk7XG5cdCAgICByZXR1cm4gZGV2aWNlc1Byb21pc2UudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcblx0ICAgICAgdm0uZGV2aWNlcyA9IHJlc3BvbnNlLmRldmljZXM7XG5cdCAgICAgIHZtLmRldmljZXNOZXh0ID0gcmVzcG9uc2UubmV4dF9jdXJzb3I7XG5cdCAgICAgIHZtLmRldmljZXNQcmV2ID0gcmVzcG9uc2UucHJldl9jdXJzb3I7XG5cdCAgICAgIHJldHVybiB2bS5nZXRGZXRjaFN1Y2Nlc3MoKTtcblx0ICAgIH0sIGZ1bmN0aW9uIChyZXNwb25zZSkge1xuXHQgICAgICByZXR1cm4gdm0uZ2V0RmV0Y2hGYWlsdXJlKHJlc3BvbnNlKTtcblx0ICAgIH0pO1xuXHQgIH07XG5cdFxuXHQgIHZtLmdldFVubWFuYWdlZERldmljZXMgPSBmdW5jdGlvbiAoa2V5LCBwcmV2LCBuZXh0KSB7XG5cdCAgICBQcm9ncmVzc0JhclNlcnZpY2Uuc3RhcnQoKTtcblx0ICAgIHZhciB1bm1hbmFnZWREZXZpY2VzUHJvbWlzZSA9IERldmljZXNTZXJ2aWNlLmdldFVubWFuYWdlZERldmljZXNCeURpc3RyaWJ1dG9yKGtleSwgcHJldiwgbmV4dCk7XG5cdCAgICByZXR1cm4gdW5tYW5hZ2VkRGV2aWNlc1Byb21pc2UudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcblx0ICAgICAgdm0udW5tYW5hZ2VkRGV2aWNlcyA9IHJlc3BvbnNlLmRldmljZXM7XG5cdCAgICAgIHZtLnVubWFuYWdlZERldmljZXNQcmV2ID0gcmVzcG9uc2UucHJldl9jdXJzb3I7XG5cdCAgICAgIHZtLnVubWFuYWdlZERldmljZXNOZXh0ID0gcmVzcG9uc2UubmV4dF9jdXJzb3I7XG5cdCAgICAgIHJldHVybiB2bS5nZXRGZXRjaFN1Y2Nlc3MoKTtcblx0ICAgIH0sIGZ1bmN0aW9uIChyZXNwb25zZSkge1xuXHQgICAgICByZXR1cm4gdm0uZ2V0RmV0Y2hGYWlsdXJlKHJlc3BvbnNlKTtcblx0ICAgIH0pO1xuXHQgIH07XG5cdFxuXHQgIHZtLmluaXRpYWxpemUgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICB2bS5kaXN0cmlidXRvcktleSA9IFNlc3Npb25zU2VydmljZS5nZXRDdXJyZW50RGlzdHJpYnV0b3JLZXkoKTtcblx0ICAgIHZtLmdldE1hbmFnZWREZXZpY2VzKHZtLmRpc3RyaWJ1dG9yS2V5LCB2bS5kZXZpY2VzUHJldiwgdm0uZGV2aWNlc05leHQpO1xuXHQgICAgcmV0dXJuIHZtLmdldFVubWFuYWdlZERldmljZXModm0uZGlzdHJpYnV0b3JLZXksIHZtLnVubWFuYWdlZERldmljZXNQcmV2LCB2bS51bm1hbmFnZWREZXZpY2VzTmV4dCk7XG5cdCAgfTtcblx0XG5cdCAgdm0uZ2V0RmV0Y2hTdWNjZXNzID0gZnVuY3Rpb24gKCkge1xuXHQgICAgcmV0dXJuIFByb2dyZXNzQmFyU2VydmljZS5jb21wbGV0ZSgpO1xuXHQgIH07XG5cdFxuXHQgIHZtLmdldEZldGNoRmFpbHVyZSA9IGZ1bmN0aW9uIChyZXNwb25zZSkge1xuXHQgICAgUHJvZ3Jlc3NCYXJTZXJ2aWNlLmNvbXBsZXRlKCk7XG5cdCAgICB2YXIgZXJyb3JNZXNzYWdlID0gXCJVbmFibGUgdG8gZmV0Y2ggZGV2aWNlcy4gRXJyb3I6IFwiICsgcmVzcG9uc2Uuc3RhdHVzICsgXCIgXCIgKyByZXNwb25zZS5zdGF0dXNUZXh0ICsgXCIuXCI7XG5cdCAgICByZXR1cm4gc3dlZXQuc2hvdygnT29wcy4uLicsIGVycm9yTWVzc2FnZSwgJ2Vycm9yJyk7XG5cdCAgfTtcblx0XG5cdCAgdm0ucGFnaW5hdGVDYWxsID0gZnVuY3Rpb24gKGZvcndhcmQsIG1hbmFnZWQpIHtcblx0ICAgIGlmIChmb3J3YXJkKSB7XG5cdCAgICAgIGlmIChtYW5hZ2VkKSB7XG5cdCAgICAgICAgdm0uZ2V0TWFuYWdlZERldmljZXModm0uZGlzdHJpYnV0b3JLZXksIG51bGwsIHZtLmRldmljZXNOZXh0KTtcblx0ICAgICAgfVxuXHQgICAgICBpZiAoIW1hbmFnZWQpIHtcblx0ICAgICAgICB2bS5nZXRVbm1hbmFnZWREZXZpY2VzKHZtLmRpc3RyaWJ1dG9yS2V5LCBudWxsLCB2bS51bm1hbmFnZWREZXZpY2VzTmV4dCk7XG5cdCAgICAgIH1cblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIGlmIChtYW5hZ2VkKSB7XG5cdCAgICAgICAgdm0uZ2V0TWFuYWdlZERldmljZXModm0uZGlzdHJpYnV0b3JLZXksIHZtLmRldmljZXNQcmV2LCBudWxsKTtcblx0ICAgICAgfVxuXHQgICAgICBpZiAoIW1hbmFnZWQpIHtcblx0ICAgICAgICByZXR1cm4gdm0uZ2V0VW5tYW5hZ2VkRGV2aWNlcyh2bS5kaXN0cmlidXRvcktleSwgdm0udW5tYW5hZ2VkRGV2aWNlc1ByZXYsIG51bGwpO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgfTtcblx0XG5cdCAgcmV0dXJuIHZtO1xuXHR9XG5cdGV4cG9ydHMuRGV2aWNlc0xpc3RpbmdDdHJsID0gRGV2aWNlc0xpc3RpbmdDdHJsO1xuXG4vKioqLyB9LFxuXG4vKioqLyA2NjE6XG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0XG5cdEFkbWluQ3RybC4kaW5qZWN0ID0gW1wiQWRtaW5TZXJ2aWNlXCIsIFwiU2Vzc2lvbnNTZXJ2aWNlXCIsIFwiVG9hc3RzU2VydmljZVwiLCBcIiRtZERpYWxvZ1wiLCBcIkRpc3RyaWJ1dG9yc1NlcnZpY2VcIl07XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuXHQgIHZhbHVlOiB0cnVlXG5cdH0pO1xuXHRmdW5jdGlvbiBBZG1pbkN0cmwoQWRtaW5TZXJ2aWNlLCBTZXNzaW9uc1NlcnZpY2UsIFRvYXN0c1NlcnZpY2UsICRtZERpYWxvZywgRGlzdHJpYnV0b3JzU2VydmljZSkge1xuXHQgIFwibmdJbmplY3RcIjtcblx0XG5cdCAgdmFyIHZtID0gdGhpcztcblx0XG5cdCAgdm0uZ2V0QWxsRGlzdHJpYnV0b3JzID0gZnVuY3Rpb24gKCkge1xuXHQgICAgdm0ubG9hZGluZ0FsbERpc3RyaWJ1dG9ycyA9IHRydWU7XG5cdCAgICB2YXIgZ2V0QWxsRGlzdHJpYnV0b3JzUHJvbWlzZSA9IEFkbWluU2VydmljZS5nZXRBbGxEaXN0cmlidXRvcnMoKTtcblx0ICAgIHJldHVybiBnZXRBbGxEaXN0cmlidXRvcnNQcm9taXNlLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcblx0ICAgICAgdm0ubG9hZGluZ0FsbERpc3RyaWJ1dG9ycyA9IGZhbHNlO1xuXHQgICAgICByZXR1cm4gdm0uYWxsRGlzdHJpYnV0b3JzID0gZGF0YTtcblx0ICAgIH0pO1xuXHQgIH07XG5cdFxuXHQgIHZtLmFkZFVzZXJUb0Rpc3RyaWJ1dG9yID0gZnVuY3Rpb24gKGV2LCB1c2VyRW1haWwsIGRpc3RyaWJ1dG9yQWRtaW4sIHdoaWNoRGlzdHJpYnV0b3IsIGZvcm0pIHtcblx0ICAgIGlmICghZGlzdHJpYnV0b3JBZG1pbikge1xuXHQgICAgICBkaXN0cmlidXRvckFkbWluID0gZmFsc2U7XG5cdCAgICB9XG5cdCAgICB2YXIgd2l0aE9yV2l0aG91dCA9IGRpc3RyaWJ1dG9yQWRtaW4gPyBcIndpdGhcIiA6IFwid2l0aG91dFwiO1xuXHRcblx0ICAgIC8vIG5vIG9wdGlvbiB0byBzZWxlY3QgZGlzdHJpYnV0b3IgaXMgZ2l2ZW4gd2hlbiB0aGVyZSBpcyBvbmx5IG9uZSBvcHRpb25cblx0ICAgIGlmICghd2hpY2hEaXN0cmlidXRvcikge1xuXHQgICAgICB3aGljaERpc3RyaWJ1dG9yID0gdm0uZGlzdHJpYnV0b3JzQXNBZG1pblswXTtcblx0ICAgIH1cblx0XG5cdCAgICB2YXIgY29uZmlybSA9ICRtZERpYWxvZy5jb25maXJtKHtcblx0ICAgICAgdGl0bGU6ICdBcmUgeW91IHN1cmU/Jyxcblx0ICAgICAgdGV4dENvbnRlbnQ6IHVzZXJFbWFpbCArIFwiIHdpbGwgYmUgYWRkZWQgdG8gXCIgKyB3aGljaERpc3RyaWJ1dG9yICsgXCJcXG4gICAgICAgIFwiICsgd2l0aE9yV2l0aG91dCArIFwiIGFkbWluaXN0cmF0b3IgcHJpdmlsZWdlc1wiLFxuXHQgICAgICB0YXJnZXRFdmVudDogZXYsXG5cdCAgICAgIG9rOiAnT2YgY291cnNlIScsXG5cdCAgICAgIGNhbmNlbDogJ09vcHMsIG5ldmVybWluZC4nXG5cdCAgICB9KTtcblx0XG5cdCAgICByZXR1cm4gJG1kRGlhbG9nLnNob3coY29uZmlybSkudGhlbihmdW5jdGlvbiAoKSB7XG5cdCAgICAgIHZhciBhZGRVc2VyVG9EaXN0cmlidXRvclByb21pc2UgPSBBZG1pblNlcnZpY2UuYWRkVXNlclRvRGlzdHJpYnV0b3IodXNlckVtYWlsLCB3aGljaERpc3RyaWJ1dG9yLCBkaXN0cmlidXRvckFkbWluKTtcblx0ICAgICAgYWRkVXNlclRvRGlzdHJpYnV0b3JQcm9taXNlLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcblx0ICAgICAgICBUb2FzdHNTZXJ2aWNlLnNob3dTdWNjZXNzVG9hc3QoZGF0YS5tZXNzYWdlKTtcblx0ICAgICAgICB2bS51c2VyID0ge307XG5cdCAgICAgICAgZm9ybS4kc2V0UHJpc3RpbmUoKTtcblx0ICAgICAgICBmb3JtLiRzZXRVbnRvdWNoZWQoKTtcblx0ICAgICAgICByZXR1cm4gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICByZXR1cm4gdm0uZ2V0VXNlcnNPZkRpc3RyaWJ1dG9yKCk7XG5cdCAgICAgICAgfSwgMjAwMCk7XG5cdCAgICAgIH0pO1xuXHRcblx0ICAgICAgcmV0dXJuIGFkZFVzZXJUb0Rpc3RyaWJ1dG9yUHJvbWlzZS5jYXRjaChmdW5jdGlvbiAoZGF0YSkge1xuXHQgICAgICAgIHJldHVybiBUb2FzdHNTZXJ2aWNlLnNob3dFcnJvclRvYXN0KGRhdGEuZGF0YS5tZXNzYWdlKTtcblx0ICAgICAgfSk7XG5cdCAgICB9KTtcblx0ICB9O1xuXHRcblx0ICB2bS5tYWtlRGlzdHJpYnV0b3IgPSBmdW5jdGlvbiAoZXYsIGRpc3RyaWJ1dG9yTmFtZSwgYWRtaW5FbWFpbCwgZm9ybSkge1xuXHQgICAgdmFyIGNvbmZpcm0gPSAkbWREaWFsb2cuY29uZmlybSh7XG5cdCAgICAgIHRpdGxlOiAnQXJlIHlvdSBzdXJlPycsXG5cdCAgICAgIHRleHRDb250ZW50OiBcIklmIHlvdSBwcm9jZWVkLCBcIiArIGRpc3RyaWJ1dG9yTmFtZSArIFwiIHdpbGwgYmUgY3JlYXRlZC5cIixcblx0ICAgICAgdGFyZ2V0RXZlbnQ6IGV2LFxuXHQgICAgICBhcmlhTGFiZWw6ICdMdWNreSBkYXknLFxuXHQgICAgICBvazogJ1llYWghJyxcblx0ICAgICAgY2FuY2VsOiAnRm9yZ2V0IGl0Lidcblx0ICAgIH0pO1xuXHQgICAgcmV0dXJuICRtZERpYWxvZy5zaG93KGNvbmZpcm0pLnRoZW4oZnVuY3Rpb24gKCkge1xuXHQgICAgICB2YXIgbWFrZURpc3RyaWJ1dG9yUHJvbWlzZSA9IEFkbWluU2VydmljZS5tYWtlRGlzdHJpYnV0b3IoZGlzdHJpYnV0b3JOYW1lLCBhZG1pbkVtYWlsKTtcblx0ICAgICAgbWFrZURpc3RyaWJ1dG9yUHJvbWlzZS50aGVuKGZ1bmN0aW9uIChkYXRhKSB7XG5cdCAgICAgICAgdm0uZGlzdHJpYnV0b3IgPSB7fTtcblx0ICAgICAgICBmb3JtLiRzZXRQcmlzdGluZSgpO1xuXHQgICAgICAgIGZvcm0uJHNldFVudG91Y2hlZCgpO1xuXHQgICAgICAgIFRvYXN0c1NlcnZpY2Uuc2hvd1N1Y2Nlc3NUb2FzdChkYXRhLm1lc3NhZ2UpO1xuXHQgICAgICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICAgIHJldHVybiB2bS5hbGxEaXN0cmlidXRvcnMgPSB2bS5nZXRBbGxEaXN0cmlidXRvcnMoKTtcblx0ICAgICAgICB9LCAyMDAwKTtcblx0ICAgICAgfSk7XG5cdFxuXHQgICAgICByZXR1cm4gbWFrZURpc3RyaWJ1dG9yUHJvbWlzZS5jYXRjaChmdW5jdGlvbiAoZGF0YSkge1xuXHQgICAgICAgIHJldHVybiBUb2FzdHNTZXJ2aWNlLnNob3dFcnJvclRvYXN0KGRhdGEuZGF0YS5tZXNzYWdlKTtcblx0ICAgICAgfSk7XG5cdCAgICB9KTtcblx0ICB9O1xuXHRcblx0ICB2bS5nZXRVc2Vyc09mRGlzdHJpYnV0b3IgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICB2bS5sb2FkaW5nVXNlcnNPZkRpc3RyaWJ1dG9yID0gdHJ1ZTtcblx0ICAgIHZhciBjdXJyZW50RGlzdHJpYnV0b3JLZXkgPSBTZXNzaW9uc1NlcnZpY2UuZ2V0Q3VycmVudERpc3RyaWJ1dG9yS2V5KCk7XG5cdCAgICB2YXIgdXNlcnNvZkRpc3RyaWJ1dG9yUHJvbWlzZSA9IEFkbWluU2VydmljZS5nZXRVc2Vyc09mRGlzdHJpYnV0b3IoY3VycmVudERpc3RyaWJ1dG9yS2V5KTtcblx0ICAgIHJldHVybiB1c2Vyc29mRGlzdHJpYnV0b3JQcm9taXNlLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcblx0ICAgICAgdm0ubG9hZGluZ1VzZXJzT2ZEaXN0cmlidXRvciA9IGZhbHNlO1xuXHQgICAgICByZXR1cm4gdm0udXNlcnNPZkRpc3RyaWJ1dG9yID0gZGF0YTtcblx0ICAgIH0pO1xuXHQgIH07XG5cdFxuXHQgIHZtLnN3aXRjaERpc3RyaWJ1dG9yID0gZnVuY3Rpb24gKGRpc3RyaWJ1dG9yKSB7XG5cdCAgICBEaXN0cmlidXRvcnNTZXJ2aWNlLnN3aXRjaERpc3RyaWJ1dG9yKGRpc3RyaWJ1dG9yKTtcblx0ICAgIHJldHVybiBUb2FzdHNTZXJ2aWNlLnNob3dTdWNjZXNzVG9hc3QoXCJEaXN0cmlidXRvciBcIiArIGRpc3RyaWJ1dG9yLm5hbWUgKyBcIiBzZWxlY3RlZCFcIik7XG5cdCAgfTtcblx0XG5cdCAgdm0uaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgIHZtLmdldFVzZXJzT2ZEaXN0cmlidXRvcigpO1xuXHQgICAgdm0uZ2V0QWxsRGlzdHJpYnV0b3JzKCk7XG5cdCAgICB2bS5pc0FkbWluID0gU2Vzc2lvbnNTZXJ2aWNlLmdldElzQWRtaW4oKTtcblx0ICAgIHZtLmRpc3RyaWJ1dG9yc0FzQWRtaW4gPSBTZXNzaW9uc1NlcnZpY2UuZ2V0RGlzdHJpYnV0b3JzQXNBZG1pbigpO1xuXHQgICAgdm0uY3VycmVudERpc3RyaWJ1dG9yTmFtZSA9IFNlc3Npb25zU2VydmljZS5nZXRDdXJyZW50RGlzdHJpYnV0b3JOYW1lKCk7XG5cdFxuXHQgICAgaWYgKHZtLmlzQWRtaW4pIHtcblx0ICAgICAgcmV0dXJuIHZtLmdldEFsbERpc3RyaWJ1dG9ycygpO1xuXHQgICAgfVxuXHQgIH07XG5cdFxuXHQgIHJldHVybiB2bTtcblx0fVxuXHRcblx0ZXhwb3J0cy5BZG1pbkN0cmwgPSBBZG1pbkN0cmw7XG5cbi8qKiovIH0sXG5cbi8qKiovIDY2Mjpcbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdEF1dGhlbnRpY2F0aW9uQ3RybC4kaW5qZWN0ID0gW1wiJHNjb3BlXCIsIFwiJGxvZ1wiLCBcIiRzdGF0ZVwiLCBcIiR0aW1lb3V0XCIsIFwiaWRlbnRpdHlcIiwgXCJzd2VldFwiLCBcIlNlc3Npb25zU2VydmljZVwiLCBcIlByb2dyZXNzQmFyU2VydmljZVwiLCBcIlByb29mUGxheVNlcnZpY2VcIiwgXCJEZXZpY2VzU2VydmljZVwiLCBcIlRlbmFudHNTZXJ2aWNlXCJdO1xuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0ICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblx0ZnVuY3Rpb24gQXV0aGVudGljYXRpb25DdHJsKCRzY29wZSwgJGxvZywgJHN0YXRlLCAkdGltZW91dCwgaWRlbnRpdHksIHN3ZWV0LCBTZXNzaW9uc1NlcnZpY2UsIFByb2dyZXNzQmFyU2VydmljZSwgUHJvb2ZQbGF5U2VydmljZSwgRGV2aWNlc1NlcnZpY2UsIFRlbmFudHNTZXJ2aWNlKSB7XG5cdCAgXCJuZ0luamVjdFwiO1xuXHRcblx0ICB2YXIgdm0gPSB0aGlzO1xuXHRcblx0ICB2bS5vbkdvb2dsZVBsdXNTaWduSW5TdWNjZXNzID0gZnVuY3Rpb24gKGV2ZW50LCBhdXRoUmVzdWx0KSB7XG5cdCAgICBpZiAoIXZtLmdvb2dsZVBsdXNTaWduSW5CdXR0b25DbGlja2VkKSB7XG5cdCAgICAgIFByb2dyZXNzQmFyU2VydmljZS5zdGFydCgpO1xuXHQgICAgfVxuXHQgICAgU2Vzc2lvbnNTZXJ2aWNlLnJlbW92ZVVzZXJJbmZvKCk7XG5cdCAgICB2YXIgcHJvbWlzZSA9IFNlc3Npb25zU2VydmljZS5sb2dpbihhdXRoUmVzdWx0KTtcblx0ICAgIHJldHVybiBwcm9taXNlLnRoZW4odm0ubG9naW5TdWNjZXNzLCB2bS5sb2dpbkZhaWx1cmUpO1xuXHQgIH07XG5cdFxuXHQgIHZtLm9uR29vZ2xlUGx1c1NpZ25JbkZhaWx1cmUgPSBmdW5jdGlvbiAoZXZlbnQsIGF1dGhSZXN1bHQpIHtcblx0ICAgIGlmICh2bS5nb29nbGVQbHVzU2lnbkluQnV0dG9uQ2xpY2tlZCkge1xuXHQgICAgICBQcm9ncmVzc0JhclNlcnZpY2UuY29tcGxldGUoKTtcblx0ICAgICAgcmV0dXJuIHN3ZWV0LnNob3coJ09vcHMuLi4nLCAnVW5hYmxlIHRvIGF1dGhlbnRpY2F0ZSB0byBHb29nbGUrLicsICdlcnJvcicpO1xuXHQgICAgfVxuXHQgIH07XG5cdFxuXHQgICRzY29wZS4kb24oJ2V2ZW50Omdvb2dsZS1wbHVzLXNpZ25pbi1zdWNjZXNzJywgdm0ub25Hb29nbGVQbHVzU2lnbkluU3VjY2Vzcyk7XG5cdCAgJHNjb3BlLiRvbignZXZlbnQ6Z29vZ2xlLXBsdXMtc2lnbmluLWZhaWx1cmUnLCB2bS5vbkdvb2dsZVBsdXNTaWduSW5GYWlsdXJlKTtcblx0XG5cdCAgdm0uaW5pdGlhbGl6ZVNpZ25JbiA9IGZ1bmN0aW9uICgpIHtcblx0ICAgIHZtLmNsaWVudElkID0gaWRlbnRpdHkuT0FVVEhfQ0xJRU5UX0lEO1xuXHQgICAgdm0uc3RhdGUgPSBpZGVudGl0eS5TVEFURTtcblx0ICAgIHJldHVybiB2bS5nb29nbGVQbHVzU2lnbkluQnV0dG9uQ2xpY2tlZCA9IGZhbHNlO1xuXHQgIH07XG5cdFxuXHQgIHZtLmluaXRpYWxpemVTaWduT3V0ID0gZnVuY3Rpb24gKCkge1xuXHQgICAgU2Vzc2lvbnNTZXJ2aWNlLnJlbW92ZVVzZXJJbmZvKCk7XG5cdCAgICByZXR1cm4gJHRpbWVvdXQodm0ucHJvY2VlZFRvU2lnbmVkT3V0LCA1MCk7XG5cdCAgfTtcblx0XG5cdCAgdm0ubG9naW5TdWNjZXNzID0gZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG5cdCAgICBQcm9ncmVzc0JhclNlcnZpY2UuY29tcGxldGUoKTtcblx0ICAgIHJldHVybiAkc3RhdGUuZ28oJ2Rpc3RyaWJ1dG9yX3NlbGVjdGlvbicpO1xuXHQgIH07XG5cdFxuXHQgIHZtLmxvZ2luRmFpbHVyZSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgIFByb2dyZXNzQmFyU2VydmljZS5jb21wbGV0ZSgpO1xuXHQgICAgcmV0dXJuIHN3ZWV0LnNob3coJ09vcHMuLi4nLCAnVW5hYmxlIHRvIGF1dGhlbnRpY2F0ZSB0byBTdG9ybXBhdGguJywgJ2Vycm9yJyk7XG5cdCAgfTtcblx0XG5cdCAgdm0ucHJvY2VlZFRvU2lnbmVkT3V0ID0gZnVuY3Rpb24gKCkge1xuXHQgICAgcmV0dXJuICRzdGF0ZS5nbygnc2lnbmVkX291dCcpO1xuXHQgIH07XG5cdFxuXHQgIHZtLnByb2NlZWRUb1NpZ25JbiA9IGZ1bmN0aW9uICgpIHtcblx0ICAgIHJldHVybiAkc3RhdGUuZ28oJ3NpZ25faW4nKTtcblx0ICB9O1xuXHRcblx0ICB2bS5vbkNsaWNrR29vZ2xlUGx1c1NpZ25JbiA9IGZ1bmN0aW9uICgpIHtcblx0ICAgIHZtLmdvb2dsZVBsdXNTaWduSW5CdXR0b25DbGlja2VkID0gdHJ1ZTtcblx0ICAgIHJldHVybiBQcm9ncmVzc0JhclNlcnZpY2Uuc3RhcnQoKTtcblx0ICB9O1xuXHRcblx0ICByZXR1cm4gdm07XG5cdH1cblx0XG5cdGV4cG9ydHMuQXV0aGVudGljYXRpb25DdHJsID0gQXV0aGVudGljYXRpb25DdHJsO1xuXG4vKioqLyB9LFxuXG4vKioqLyA2NjM6XG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQndXNlIHN0cmljdCc7XG5cdFxuXHRBcHBDb250cm9sbGVyLiRpbmplY3QgPSBbXCIkbWRTaWRlbmF2XCIsIFwiJHN0YXRlXCIsIFwiJHdpbmRvd1wiLCBcIlNlc3Npb25zU2VydmljZVwiXTtcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG5cdCAgdmFsdWU6IHRydWVcblx0fSk7XG5cdGV4cG9ydHMuQXBwQ29udHJvbGxlciA9IHVuZGVmaW5lZDtcblx0XG5cdHZhciBfbG9kYXNoID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2NjQpO1xuXHRcblx0dmFyIF9sb2Rhc2gyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfbG9kYXNoKTtcblx0XG5cdGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cdFxuXHRmdW5jdGlvbiBBcHBDb250cm9sbGVyKCRtZFNpZGVuYXYsICRzdGF0ZSwgJHdpbmRvdywgU2Vzc2lvbnNTZXJ2aWNlKSB7XG5cdCAgXCJuZ0luamVjdFwiO1xuXHRcblx0ICB2YXIgdm0gPSB0aGlzO1xuXHRcblx0ICB2bS5jdXJyZW50RGlzdHJpYnV0ZXJJbkRpc3RyaWJ1dGVyQWRtaW5MaXN0ID0gZnVuY3Rpb24gKCkge1xuXHQgICAgdmFyIGN1cnJlbnREaXN0cmlidXRvck5hbWUgPSBTZXNzaW9uc1NlcnZpY2UuZ2V0Q3VycmVudERpc3RyaWJ1dG9yTmFtZSgpO1xuXHQgICAgdmFyIGRpc3RyaWJ1dG9yc0FzQWRtaW4gPSBTZXNzaW9uc1NlcnZpY2UuZ2V0RGlzdHJpYnV0b3JzQXNBZG1pbigpO1xuXHQgICAgcmV0dXJuICgwLCBfbG9kYXNoMi5kZWZhdWx0KShkaXN0cmlidXRvcnNBc0FkbWluLCBjdXJyZW50RGlzdHJpYnV0b3JOYW1lKTtcblx0ICB9O1xuXHRcblx0ICB2bS5nZXRJZGVudGl0eSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgIHJldHVybiB7XG5cdCAgICAgIGtleTogU2Vzc2lvbnNTZXJ2aWNlLmdldFVzZXJLZXkoKSxcblx0ICAgICAgZW1haWw6IFNlc3Npb25zU2VydmljZS5nZXRVc2VyRW1haWwoKSxcblx0ICAgICAgYWRtaW46IFNlc3Npb25zU2VydmljZS5nZXRJc0FkbWluKCksXG5cdCAgICAgIGRpc3RyaWJ1dG9yX2FkbWluOiBTZXNzaW9uc1NlcnZpY2UuZ2V0RGlzdHJpYnV0b3JzQXNBZG1pbigpLFxuXHQgICAgICBhZG1pbl9vZl9jdXJyZW50X2Rpc3RyaWJ1dG9yOiB2bS5jdXJyZW50RGlzdHJpYnV0ZXJJbkRpc3RyaWJ1dGVyQWRtaW5MaXN0KCksXG5cdCAgICAgIGRpc3RyaWJ1dG9yS2V5OiBTZXNzaW9uc1NlcnZpY2UuZ2V0Q3VycmVudERpc3RyaWJ1dG9yS2V5KCksXG5cdCAgICAgIGRpc3RyaWJ1dG9yTmFtZTogU2Vzc2lvbnNTZXJ2aWNlLmdldEN1cnJlbnREaXN0cmlidXRvck5hbWUoKVxuXHQgICAgfTtcblx0ICB9O1xuXHRcblx0ICB2bS5pc0N1cnJlbnRVUkxEaXN0cmlidXRvclNlbGVjdG9yID0gZnVuY3Rpb24gKCkge1xuXHQgICAgdmFyIHRlc3QgPSAkd2luZG93LmxvY2F0aW9uLmhyZWYuc2VhcmNoKC9kaXN0cmlidXRvcl9zZWxlY3Rpb24vKTtcblx0ICAgIHZhciByZXN1bHQgPSB0ZXN0ID49IDA7XG5cdCAgICByZXR1cm4gcmVzdWx0O1xuXHQgIH07XG5cdFxuXHQgIHZtLmluaXRpYWxpemUgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICByZXR1cm4gdm0uZ2V0SWRlbnRpdHkoKTtcblx0ICB9O1xuXHRcblx0ICB2bS50b2dnbGVTaWRlbmF2ID0gZnVuY3Rpb24gKCkge1xuXHQgICAgcmV0dXJuICRtZFNpZGVuYXYoJ2xlZnQnKS50b2dnbGUoKTtcblx0ICB9O1xuXHRcblx0ICB2bS5nb1RvID0gZnVuY3Rpb24gKHN0YXRlTmFtZSwgaWQpIHtcblx0ICAgICRzdGF0ZS5nbyhzdGF0ZU5hbWUsIHsgaWQ6IGlkIH0pO1xuXHQgICAgaWYgKCRtZFNpZGVuYXYoJ2xlZnQnKS5pc09wZW4oKSkge1xuXHQgICAgICByZXR1cm4gJG1kU2lkZW5hdignbGVmdCcpLmNsb3NlKCk7XG5cdCAgICB9XG5cdCAgfTtcblx0XG5cdCAgdm0uaW5pdGlhbGl6ZSgpO1xuXHRcblx0ICByZXR1cm4gdm07XG5cdH1cblx0XG5cdGV4cG9ydHMuQXBwQ29udHJvbGxlciA9IEFwcENvbnRyb2xsZXI7XG5cbi8qKiovIH0sXG5cbi8qKiovIDY4Njpcbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXHRcblx0RGlzdHJpYnV0b3JTZWxlY3RvckN0cmwuJGluamVjdCA9IFtcIiRzdGF0ZVwiLCBcIkRpc3RyaWJ1dG9yc1NlcnZpY2VcIiwgXCJTZXNzaW9uc1NlcnZpY2VcIl07XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuXHQgIHZhbHVlOiB0cnVlXG5cdH0pO1xuXHRmdW5jdGlvbiBEaXN0cmlidXRvclNlbGVjdG9yQ3RybCgkc3RhdGUsIERpc3RyaWJ1dG9yc1NlcnZpY2UsIFNlc3Npb25zU2VydmljZSkge1xuXHQgIFwibmdJbmplY3RcIjtcblx0XG5cdCAgdmFyIHZtID0gdGhpcztcblx0ICB2bS5kaXN0cmlidXRvcnMgPSBbXTtcblx0ICB2bS5jdXJyZW50RGlzdHJpYnV0b3IgPSB1bmRlZmluZWQ7XG5cdCAgdm0ubG9hZGluZyA9IHRydWU7XG5cdFxuXHQgIHZtLmluaXRpYWxpemUgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICB2bS5sb2VhZGluZyA9IHRydWU7XG5cdCAgICB2YXIgZGlzdHJpYnV0b3JzUHJvbWlzZSA9IERpc3RyaWJ1dG9yc1NlcnZpY2UuZmV0Y2hBbGxCeVVzZXIoU2Vzc2lvbnNTZXJ2aWNlLmdldFVzZXJLZXkoKSk7XG5cdCAgICByZXR1cm4gZGlzdHJpYnV0b3JzUHJvbWlzZS50aGVuKGZ1bmN0aW9uIChkYXRhKSB7XG5cdCAgICAgIHZtLmRpc3RyaWJ1dG9ycyA9IGRhdGE7XG5cdCAgICAgIGlmICh2bS5kaXN0cmlidXRvcnMubGVuZ3RoID09PSAxKSB7XG5cdCAgICAgICAgcmV0dXJuIHZtLnNlbGVjdERpc3RyaWJ1dG9yKHZtLmRpc3RyaWJ1dG9yc1swXSk7XG5cdCAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgcmV0dXJuIHZtLmxvYWRpbmcgPSBmYWxzZTtcblx0ICAgICAgfVxuXHQgICAgfSk7XG5cdCAgfTtcblx0XG5cdCAgdm0uc2VsZWN0RGlzdHJpYnV0b3IgPSBmdW5jdGlvbiAoZGlzdHJpYnV0b3IpIHtcblx0ICAgIHJldHVybiBEaXN0cmlidXRvcnNTZXJ2aWNlLnN3aXRjaERpc3RyaWJ1dG9yKGRpc3RyaWJ1dG9yKTtcblx0ICB9O1xuXHRcblx0ICByZXR1cm4gdm07XG5cdH1cblx0XG5cdGV4cG9ydHMuRGlzdHJpYnV0b3JTZWxlY3RvckN0cmwgPSBEaXN0cmlidXRvclNlbGVjdG9yQ3RybDtcblxuLyoqKi8gfSxcblxuLyoqKi8gNjg3OlxuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdFxuXHREaXN0cmlidXRvcnNDdHJsLiRpbmplY3QgPSBbXCIkc3RhdGVcIl07XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuXHQgIHZhbHVlOiB0cnVlXG5cdH0pO1xuXHRmdW5jdGlvbiBEaXN0cmlidXRvcnNDdHJsKCRzdGF0ZSkge1xuXHQgIFwibmdJbmplY3RcIjtcblx0XG5cdCAgdmFyIHZtID0gdGhpcztcblx0ICB2bS5kaXN0cmlidXRvcnMgPSBbXTtcblx0XG5cdCAgcmV0dXJuIHZtO1xuXHR9XG5cdFxuXHRleHBvcnRzLkRpc3RyaWJ1dG9yc0N0cmwgPSBEaXN0cmlidXRvcnNDdHJsO1xuXG4vKioqLyB9LFxuXG4vKioqLyA2ODg6XG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0XG5cdERvbWFpbnNDdHJsLiRpbmplY3QgPSBbXCIkc3RhdGVcIiwgXCJEb21haW5zU2VydmljZVwiLCBcInN3ZWV0XCJdO1xuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0ICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblx0ZnVuY3Rpb24gRG9tYWluc0N0cmwoJHN0YXRlLCBEb21haW5zU2VydmljZSwgc3dlZXQpIHtcblx0ICBcIm5nSW5qZWN0XCI7XG5cdFxuXHQgIHZhciB2bSA9IHRoaXM7XG5cdCAgdm0uZG9tYWlucyA9IFtdO1xuXHRcblx0ICB2bS5pbml0aWFsaXplID0gZnVuY3Rpb24gKCkge1xuXHQgICAgdmFyIHByb21pc2UgPSBEb21haW5zU2VydmljZS5mZXRjaEFsbERvbWFpbnMoKTtcblx0ICAgIHJldHVybiBwcm9taXNlLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcblx0ICAgICAgcmV0dXJuIHZtLmRvbWFpbnMgPSBkYXRhO1xuXHQgICAgfSk7XG5cdCAgfTtcblx0XG5cdCAgdm0uZWRpdEl0ZW0gPSBmdW5jdGlvbiAoaXRlbSkge1xuXHQgICAgcmV0dXJuICRzdGF0ZS5nbygnZWRpdERvbWFpbicsIHsgZG9tYWluS2V5OiBpdGVtLmtleSB9KTtcblx0ICB9O1xuXHRcblx0ICB2bS5kZWxldGVJdGVtID0gZnVuY3Rpb24gKGl0ZW0pIHtcblx0ICAgIHZhciBjYWxsYmFjayA9IGZ1bmN0aW9uIGNhbGxiYWNrKCkge1xuXHQgICAgICB2YXIgcHJvbWlzZSA9IERvbWFpbnNTZXJ2aWNlLmRlbGV0ZShpdGVtKTtcblx0ICAgICAgcmV0dXJuIHByb21pc2UudGhlbihmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgcmV0dXJuIHZtLmluaXRpYWxpemUoKTtcblx0ICAgICAgfSk7XG5cdCAgICB9O1xuXHQgICAgcmV0dXJuIHN3ZWV0LnNob3coe1xuXHQgICAgICB0aXRsZTogXCJBcmUgeW91IHN1cmU/XCIsXG5cdCAgICAgIHRleHQ6IFwiVGhpcyB3aWxsIHBlcm1hbmVudGx5IHJlbW92ZSB0aGUgZG9tYWluIGZyb20gdGhlIGRpc3RyaWJ1dG9yIGFuZCBkaXNjb25uZWN0IGZyb20gdGVuYW50cy5cIixcblx0ICAgICAgdHlwZTogXCJ3YXJuaW5nXCIsXG5cdCAgICAgIHNob3dDYW5jZWxCdXR0b246IHRydWUsXG5cdCAgICAgIGNvbmZpcm1CdXR0b25Db2xvcjogXCIjREQ2QjU1XCIsXG5cdCAgICAgIGNvbmZpcm1CdXR0b25UZXh0OiBcIlllcywgcmVtb3ZlIHRoZSBkb21haW4hXCIsXG5cdCAgICAgIGNsb3NlT25Db25maXJtOiB0cnVlXG5cdCAgICB9LCBjYWxsYmFjayk7XG5cdCAgfTtcblx0XG5cdCAgcmV0dXJuIHZtO1xuXHR9XG5cdFxuXHRleHBvcnRzLkRvbWFpbnNDdHJsID0gRG9tYWluc0N0cmw7XG5cbi8qKiovIH0sXG5cbi8qKiovIDY4OTpcbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdERvbWFpbkRldGFpbHNDdHJsLiRpbmplY3QgPSBbXCIkbG9nXCIsIFwiJHN0YXRlUGFyYW1zXCIsIFwiRG9tYWluc1NlcnZpY2VcIiwgXCIkc3RhdGVcIiwgXCJzd2VldFwiLCBcIlByb2dyZXNzQmFyU2VydmljZVwiLCBcIlRvYXN0c1NlcnZpY2VcIiwgXCJTZXNzaW9uc1NlcnZpY2VcIl07XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuXHQgIHZhbHVlOiB0cnVlXG5cdH0pO1xuXHRmdW5jdGlvbiBEb21haW5EZXRhaWxzQ3RybCgkbG9nLCAkc3RhdGVQYXJhbXMsIERvbWFpbnNTZXJ2aWNlLCAkc3RhdGUsIHN3ZWV0LCBQcm9ncmVzc0JhclNlcnZpY2UsIFRvYXN0c1NlcnZpY2UsIFNlc3Npb25zU2VydmljZSkge1xuXHQgIFwibmdJbmplY3RcIjtcblx0XG5cdCAgdmFyIHZtID0gdGhpcztcblx0ICB2bS5jdXJyZW50RG9tYWluID0ge1xuXHQgICAga2V5OiB1bmRlZmluZWQsXG5cdCAgICBuYW1lOiB1bmRlZmluZWQsXG5cdCAgICBpbXBlcnNvbmF0aW9uX2FkbWluX2VtYWlsX2FkZHJlc3M6IHVuZGVmaW5lZCxcblx0ICAgIGRpc3RyaWJ1dG9yX2tleTogdW5kZWZpbmVkLFxuXHQgICAgb3JnYW5pemF0aW9uX3VuaXRfcGF0aDogJy9za3lraXQnLFxuXHQgICAgYWN0aXZlOiB0cnVlXG5cdCAgfTtcblx0ICB2bS5kZXZpY2VzQWNjZXNzID0gZmFsc2U7XG5cdCAgdm0ub3JnVW5pdHNBY2Nlc3MgPSBmYWxzZTtcblx0ICB2bS51c2Vyc0FjY2VzcyA9IGZhbHNlO1xuXHQgIHZtLmN1cnJlbnREb21haW5zID0gW107XG5cdCAgdm0uZWRpdE1vZGUgPSAhISRzdGF0ZVBhcmFtcy5kb21haW5LZXk7XG5cdFxuXHQgIGlmICh2bS5lZGl0TW9kZSkge1xuXHQgICAgdmFyIGRvbWFpblByb21pc2UgPSBEb21haW5zU2VydmljZS5nZXREb21haW5CeUtleSgkc3RhdGVQYXJhbXMuZG9tYWluS2V5KTtcblx0ICAgIGRvbWFpblByb21pc2UudGhlbihmdW5jdGlvbiAoZGF0YSkge1xuXHQgICAgICByZXR1cm4gdm0uY3VycmVudERvbWFpbiA9IGRhdGE7XG5cdCAgICB9KTtcblx0ICB9IGVsc2Uge1xuXHQgICAgdm0uY3VycmVudERvbWFpbi5kaXN0cmlidXRvcl9rZXkgPSBTZXNzaW9uc1NlcnZpY2UuZ2V0Q3VycmVudERpc3RyaWJ1dG9yS2V5KCk7XG5cdCAgfVxuXHRcblx0ICB2bS5pbml0aWFsaXplID0gZnVuY3Rpb24gKCkge1xuXHQgICAgaWYgKHZtLmVkaXRNb2RlKSB7XG5cdCAgICAgIFByb2dyZXNzQmFyU2VydmljZS5zdGFydCgpO1xuXHQgICAgICB2YXIgY29ubmVjdGl2aXR5UHJvbWlzZSA9IERvbWFpbnNTZXJ2aWNlLmdldERpcmVjdG9yeUFwaUNvbm5lY3Rpdml0eUluZm9ybWF0aW9uKCRzdGF0ZVBhcmFtcy5kb21haW5LZXkpO1xuXHQgICAgICByZXR1cm4gY29ubmVjdGl2aXR5UHJvbWlzZS50aGVuKHZtLm9uU3VjY2Vzc0RldGVybWluaW5nQ29ubmVjdGl2aXR5LCB2bS5vbkZhaWx1cmVEZXRlcm1pbmluZ0Nvbm5lY3Rpdml0eSk7XG5cdCAgICB9XG5cdCAgfTtcblx0XG5cdCAgdm0ub25TdWNjZXNzRGV0ZXJtaW5pbmdDb25uZWN0aXZpdHkgPSBmdW5jdGlvbiAoZGF0YSkge1xuXHQgICAgdm0uZGV2aWNlc0FjY2VzcyA9IGRhdGEuZGV2aWNlc0FjY2Vzcztcblx0ICAgIHZtLm9yZ1VuaXRzQWNjZXNzID0gZGF0YS5vcmdVbml0c0FjY2Vzcztcblx0ICAgIHZtLnVzZXJzQWNjZXNzID0gZGF0YS51c2Vyc0FjY2Vzcztcblx0ICAgIHZtLmRldmljZXNBY2Nlc3NFeGNlcHRpb24gPSBkYXRhLmRldmljZXNBY2Nlc3NFeGNlcHRpb247XG5cdCAgICB2bS5vcmdVbml0c0FjY2Vzc0V4Y2VwdGlvbiA9IGRhdGEub3JnVW5pdHNBY2Nlc3NFeGNlcHRpb247XG5cdCAgICB2bS51c2Vyc0FjY2Vzc0V4Y2VwdGlvbiA9IGRhdGEudXNlcnNBY2Nlc3NFeGNlcHRpb247XG5cdCAgICBQcm9ncmVzc0JhclNlcnZpY2UuY29tcGxldGUoKTtcblx0ICB9O1xuXHRcblx0ICB2bS5vbkZhaWx1cmVEZXRlcm1pbmluZ0Nvbm5lY3Rpdml0eSA9IGZ1bmN0aW9uIChlcnJvcikge1xuXHQgICAgUHJvZ3Jlc3NCYXJTZXJ2aWNlLmNvbXBsZXRlKCk7XG5cdCAgICAkbG9nLmVycm9yKCdGYWlsdXJlIGRldGVybWluaW5nIGRpcmVjdG9yeSBBUEkgY29ubmVjdGl2aXR5OiAnICsgZXJyb3Iuc3RhdHVzICsgJyAnICsgZXJyb3Iuc3RhdHVzVGV4dCk7XG5cdCAgICByZXR1cm4gVG9hc3RzU2VydmljZS5zaG93RXJyb3JUb2FzdCgnT29wcy4gV2Ugd2VyZSB1bmFibGUgZGV0ZXJtaW5lIHlvdXIgZGV2aWNlIGNvbm5lY3Rpdml0eSBhdCB0aGlzIHRpbWUuJyk7XG5cdCAgfTtcblx0XG5cdCAgdm0ub25TYXZlRG9tYWluID0gZnVuY3Rpb24gKCkge1xuXHQgICAgUHJvZ3Jlc3NCYXJTZXJ2aWNlLnN0YXJ0KCk7XG5cdCAgICB2YXIgcHJvbWlzZSA9IERvbWFpbnNTZXJ2aWNlLnNhdmUodm0uY3VycmVudERvbWFpbik7XG5cdCAgICByZXR1cm4gcHJvbWlzZS50aGVuKHZtLm9uU3VjY2Vzc1NhdmVEb21haW4sIHZtLm9uRmFpbHVyZVNhdmVEb21haW4pO1xuXHQgIH07XG5cdFxuXHQgIHZtLm9uU3VjY2Vzc1NhdmVEb21haW4gPSBmdW5jdGlvbiAoKSB7XG5cdCAgICBQcm9ncmVzc0JhclNlcnZpY2UuY29tcGxldGUoKTtcblx0ICAgIHJldHVybiBUb2FzdHNTZXJ2aWNlLnNob3dTdWNjZXNzVG9hc3QoJ1dlIHNhdmVkIHlvdXIgdXBkYXRlLicpO1xuXHQgIH07XG5cdFxuXHQgIHZtLm9uRmFpbHVyZVNhdmVEb21haW4gPSBmdW5jdGlvbiAoZXJyb3IpIHtcblx0ICAgIFByb2dyZXNzQmFyU2VydmljZS5jb21wbGV0ZSgpO1xuXHQgICAgaWYgKGVycm9yLnN0YXR1cyA9PT0gNDA5KSB7XG5cdCAgICAgICRsb2cuaW5mbygnRmFpbHVyZSBzYXZpbmcgZG9tYWluLiBEb21haW4gYWxyZWFkeSBleGlzdHM6ICcgKyBlcnJvci5zdGF0dXMgKyAnICcgKyBlcnJvci5zdGF0dXNUZXh0KTtcblx0ICAgICAgcmV0dXJuIHN3ZWV0LnNob3coJ09vcHMuLi4nLCAnVGhpcyBkb21haW4gbmFtZSBhbHJlYWR5IGV4aXN0LiBQbGVhc2UgZW50ZXIgYSB1bmlxdWUgZG9tYWluIG5hbWUuJywgJ2Vycm9yJyk7XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICAkbG9nLmVycm9yKCdGYWlsdXJlIHNhdmluZyBkb21haW46ICcgKyBlcnJvci5zdGF0dXMgKyAnICcgKyBlcnJvci5zdGF0dXNUZXh0KTtcblx0ICAgICAgcmV0dXJuIFRvYXN0c1NlcnZpY2Uuc2hvd0Vycm9yVG9hc3QoJ09vcHMuIFdlIHdlcmUgdW5hYmxlIHRvIHNhdmUgeW91ciB1cGRhdGVzIGF0IHRoaXMgdGltZS4nKTtcblx0ICAgIH1cblx0ICB9O1xuXHRcblx0ICB2bS5lZGl0SXRlbSA9IGZ1bmN0aW9uIChpdGVtKSB7XG5cdCAgICByZXR1cm4gJHN0YXRlLmdvKCdlZGl0RG9tYWluJywgeyBkb21haW5LZXk6IGl0ZW0ua2V5IH0pO1xuXHQgIH07XG5cdFxuXHQgIHJldHVybiB2bTtcblx0fVxuXHRcblx0ZXhwb3J0cy5Eb21haW5EZXRhaWxzQ3RybCA9IERvbWFpbkRldGFpbHNDdHJsO1xuXG4vKioqLyB9LFxuXG4vKioqLyA2OTA6XG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQndXNlIHN0cmljdCc7XG5cdFxuXHRQcm9vZk9mUGxheU11bHRpTG9jYXRpb25DdHJsLiRpbmplY3QgPSBbXCJQcm9vZlBsYXlTZXJ2aWNlXCIsIFwiJHN0YXRlUGFyYW1zXCIsIFwiJHN0YXRlXCIsIFwiVG9hc3RzU2VydmljZVwiXTtcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG5cdCAgdmFsdWU6IHRydWVcblx0fSk7XG5cdGV4cG9ydHMuUHJvb2ZPZlBsYXlNdWx0aUxvY2F0aW9uQ3RybCA9IHVuZGVmaW5lZDtcblx0XG5cdHZhciBfbW9tZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXygzNzIpO1xuXHRcblx0dmFyIF9tb21lbnQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfbW9tZW50KTtcblx0XG5cdGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cdFxuXHRmdW5jdGlvbiBQcm9vZk9mUGxheU11bHRpTG9jYXRpb25DdHJsKFByb29mUGxheVNlcnZpY2UsICRzdGF0ZVBhcmFtcywgJHN0YXRlLCBUb2FzdHNTZXJ2aWNlKSB7XG5cdCAgXCJuZ0luamVjdFwiO1xuXHRcblx0ICB2YXIgdm0gPSB0aGlzO1xuXHQgIHZtLnJhZGlvQnV0dG9uQ2hvaWNlcyA9IHtcblx0ICAgIGdyb3VwMTogJ0J5IERldmljZScsXG5cdCAgICBncm91cDI6ICdTdW1tYXJpemVkJyxcblx0ICAgIHNlbGVjdGlvbjogbnVsbFxuXHQgIH07XG5cdFxuXHQgIHZtLmRhdGVUaW1lU2VsZWN0aW9uID0ge1xuXHQgICAgc3RhcnQ6IG51bGwsXG5cdCAgICBlbmQ6IG51bGxcblx0ICB9O1xuXHRcblx0ICB2bS5mb3JtVmFsaWRpdHkgPSB7XG5cdCAgICBzdGFydF9kYXRlOiBmYWxzZSxcblx0ICAgIGVuZF9kYXRlOiBmYWxzZSxcblx0ICAgIGxvY2F0aW9uczogZmFsc2Vcblx0ICB9O1xuXHRcblx0ICB2bS50ZW5hbnQgPSAkc3RhdGVQYXJhbXMudGVuYW50O1xuXHQgIHZtLm5vX2NhY2hlID0gdHJ1ZTtcblx0ICB2bS5sb2FkaW5nID0gdHJ1ZTtcblx0ICB2bS5kaXNhYmxlZCA9IHRydWU7XG5cdCAgdm0uZGlzYWJsZWRUZW5hbnQgPSB0cnVlO1xuXHQgIHZtLnNlbGVjdGVkX2xvY2F0aW9ucyA9IFtdO1xuXHRcblx0ICB2bS5pbml0aWFsaXplID0gZnVuY3Rpb24gKCkge1xuXHQgICAgcmV0dXJuIFByb29mUGxheVNlcnZpY2UuZ2V0QWxsTG9jYXRpb25zKHZtLnRlbmFudCkudGhlbihmdW5jdGlvbiAoZGF0YSkge1xuXHQgICAgICB2bS5sb2FkaW5nID0gZmFsc2U7XG5cdCAgICAgIHZtLmxvY2F0aW9ucyA9IGRhdGEuZGF0YS5sb2NhdGlvbnM7XG5cdCAgICAgIGlmICh2bS5sb2NhdGlvbnMubGVuZ3RoID4gMCkge1xuXHQgICAgICAgIHJldHVybiB2bS5oYWRfc29tZV9pdGVtcyA9IHRydWU7XG5cdCAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgcmV0dXJuIHZtLmhhZF9zb21lX2l0ZW1zID0gZmFsc2U7XG5cdCAgICAgIH1cblx0ICAgIH0pO1xuXHQgIH07XG5cdFxuXHQgIHZtLnJlZnJlc2hMb2NhdGlvbnMgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICB2bS5zZWFyY2hUZXh0ID0gJyc7XG5cdCAgICB2bS5zZWxlY3RlZEl0ZW0gPSAnJztcblx0ICAgIHZtLmxvYWRpbmcgPSB0cnVlO1xuXHQgICAgdm0uZGlzYWJsZWQgPSB0cnVlO1xuXHQgICAgdm0uc2VsZWN0ZWRfbG9jYXRpb25zID0gW107XG5cdCAgICB2bS5pbml0aWFsaXplKCk7XG5cdCAgfTtcblx0XG5cdCAgdm0uYWRkVG9TZWxlY3RlZExvY2F0aW9ucyA9IGZ1bmN0aW9uIChzZWFyY2hUZXh0KSB7XG5cdCAgICBpZiAodm0uaXNMb2NhdGlvblZhbGlkKHNlYXJjaFRleHQpKSB7XG5cdCAgICAgIHZtLnNlbGVjdGVkX2xvY2F0aW9ucy5wdXNoKHNlYXJjaFRleHQpO1xuXHQgICAgICB2YXIgaW5kZXggPSB2bS5sb2NhdGlvbnMuaW5kZXhPZihzZWFyY2hUZXh0KTtcblx0ICAgICAgdm0ubG9jYXRpb25zLnNwbGljZShpbmRleCwgMSk7XG5cdCAgICAgIHZtLnNlYXJjaFRleHQgPSAnJztcblx0ICAgIH1cblx0ICAgIHZtLmFyZUxvY2F0aW9uc1ZhbGlkKCk7XG5cdCAgICByZXR1cm4gdm0uaXNEaXNhYmxlZCgpO1xuXHQgIH07XG5cdFxuXHQgIHZtLnF1ZXJ5U2VhcmNoID0gZnVuY3Rpb24gKGxvY2F0aW9ucywgc2VhcmNoVGV4dCkge1xuXHQgICAgcmV0dXJuIFByb29mUGxheVNlcnZpY2UucXVlcnlTZWFyY2gobG9jYXRpb25zLCBzZWFyY2hUZXh0KTtcblx0ICB9O1xuXHRcblx0ICB2bS5pc1JhZGlvVmFsaWQgPSBmdW5jdGlvbiAoc2VsZWN0aW9uKSB7XG5cdCAgICB2bS5mb3JtVmFsaWRpdHkudHlwZSA9IHNlbGVjdGlvbjtcblx0ICAgIHJldHVybiB2bS5pc0Rpc2FibGVkKCk7XG5cdCAgfTtcblx0XG5cdCAgdm0uaXNMb2NhdGlvblZhbGlkID0gZnVuY3Rpb24gKHNlYXJjaFRleHQpIHtcblx0ICAgIGlmIChfX2luX18oc2VhcmNoVGV4dCwgdm0ubG9jYXRpb25zKSkge1xuXHQgICAgICBpZiAoIV9faW5fXyhzZWFyY2hUZXh0LCB2bS5zZWxlY3RlZF9sb2NhdGlvbnMpKSB7XG5cdCAgICAgICAgcmV0dXJuIHRydWU7XG5cdCAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgcmV0dXJuIGZhbHNlO1xuXHQgICAgICB9XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICByZXR1cm4gZmFsc2U7XG5cdCAgICB9XG5cdCAgfTtcblx0XG5cdCAgdm0uYXJlTG9jYXRpb25zVmFsaWQgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICB2bS5mb3JtVmFsaWRpdHkubG9jYXRpb25zID0gdm0uc2VsZWN0ZWRfbG9jYXRpb25zLmxlbmd0aCA+IDA7XG5cdCAgICByZXR1cm4gdm0uaXNEaXNhYmxlZCgpO1xuXHQgIH07XG5cdFxuXHQgIHZtLmlzU3RhcnREYXRlVmFsaWQgPSBmdW5jdGlvbiAoc3RhcnRfZGF0ZSkge1xuXHQgICAgdm0uZm9ybVZhbGlkaXR5LnN0YXJ0X2RhdGUgPSBzdGFydF9kYXRlIGluc3RhbmNlb2YgRGF0ZTtcblx0ICAgIHJldHVybiB2bS5pc0Rpc2FibGVkKCk7XG5cdCAgfTtcblx0XG5cdCAgdm0uaXNFbmREYXRlVmFsaWQgPSBmdW5jdGlvbiAoZW5kX2RhdGUpIHtcblx0ICAgIHZtLmZvcm1WYWxpZGl0eS5lbmRfZGF0ZSA9IGVuZF9kYXRlIGluc3RhbmNlb2YgRGF0ZTtcblx0ICAgIHJldHVybiB2bS5pc0Rpc2FibGVkKCk7XG5cdCAgfTtcblx0XG5cdCAgdm0ucmVtb3ZlRnJvbVNlbGVjdGVkTG9jYXRpb24gPSBmdW5jdGlvbiAoaXRlbSkge1xuXHQgICAgdmFyIGluZGV4ID0gdm0uc2VsZWN0ZWRfbG9jYXRpb25zLmluZGV4T2YoaXRlbSk7XG5cdCAgICB2bS5zZWxlY3RlZF9sb2NhdGlvbnMuc3BsaWNlKGluZGV4LCAxKTtcblx0ICAgIHZtLmxvY2F0aW9ucy5wdXNoKGl0ZW0pO1xuXHQgICAgdm0uYXJlTG9jYXRpb25zVmFsaWQoKTtcblx0ICAgIHJldHVybiB2bS5pc0Rpc2FibGVkKCk7XG5cdCAgfTtcblx0XG5cdCAgdm0uaXNEaXNhYmxlZCA9IGZ1bmN0aW9uICgpIHtcblx0ICAgIGlmICh2bS5mb3JtVmFsaWRpdHkuc3RhcnRfZGF0ZSAmJiB2bS5mb3JtVmFsaWRpdHkuZW5kX2RhdGUgJiYgdm0uZm9ybVZhbGlkaXR5LmxvY2F0aW9ucyAmJiB2bS5mb3JtVmFsaWRpdHkudHlwZSkge1xuXHQgICAgICB2bS5kaXNhYmxlZCA9IGZhbHNlO1xuXHQgICAgICByZXR1cm4gdm0uZmluYWwgPSB7XG5cdCAgICAgICAgc3RhcnRfZGF0ZV91bml4OiAoMCwgX21vbWVudDIuZGVmYXVsdCkodm0uZGF0ZVRpbWVTZWxlY3Rpb24uc3RhcnQpLnVuaXgoKSxcblx0ICAgICAgICBlbmRfZGF0ZV91bml4OiAoMCwgX21vbWVudDIuZGVmYXVsdCkodm0uZGF0ZVRpbWVTZWxlY3Rpb24uZW5kKS51bml4KCksXG5cdCAgICAgICAgbG9jYXRpb25zOiB2bS5zZWxlY3RlZF9sb2NhdGlvbnMsXG5cdCAgICAgICAgdHlwZTogdm0ucmFkaW9CdXR0b25DaG9pY2VzLnNlbGVjdGlvblxuXHRcblx0ICAgICAgfTtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIHJldHVybiB2bS5kaXNhYmxlZCA9IHRydWU7XG5cdCAgICB9XG5cdCAgfTtcblx0XG5cdCAgdm0uc3VibWl0ID0gZnVuY3Rpb24gKCkge1xuXHQgICAgaWYgKHZtLmZpbmFsLnR5cGUgPT09IFwiMVwiKSB7XG5cdCAgICAgIHJldHVybiBQcm9vZlBsYXlTZXJ2aWNlLmRvd25sb2FkQ1NWRm9yTXVsdGlwbGVMb2NhdGlvbnNCeURldmljZSh2bS5maW5hbC5zdGFydF9kYXRlX3VuaXgsIHZtLmZpbmFsLmVuZF9kYXRlX3VuaXgsIHZtLmZpbmFsLmxvY2F0aW9ucywgdm0udGVuYW50KTtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIHJldHVybiBQcm9vZlBsYXlTZXJ2aWNlLmRvd25sb2FkQ1NWRm9yTXVsdGlwbGVMb2NhdGlvbnNTdW1tYXJpemVkKHZtLmZpbmFsLnN0YXJ0X2RhdGVfdW5peCwgdm0uZmluYWwuZW5kX2RhdGVfdW5peCwgdm0uZmluYWwubG9jYXRpb25zLCB2bS50ZW5hbnQpO1xuXHQgICAgfVxuXHQgIH07XG5cdFxuXHQgIHZtLnRlbmFudHMgPSBudWxsO1xuXHQgIHZtLmN1cnJlbnRUZW5hbnQgPSB2bS50ZW5hbnQ7XG5cdFxuXHQgIHZtLmluaXRpYWxpemVfdGVuYW50X3NlbGVjdCA9IGZ1bmN0aW9uICgpIHtcblx0ICAgIHJldHVybiBQcm9vZlBsYXlTZXJ2aWNlLmdldEFsbFRlbmFudHMoKS50aGVuKGZ1bmN0aW9uIChkYXRhKSB7XG5cdCAgICAgIHJldHVybiB2bS50ZW5hbnRzID0gZGF0YS5kYXRhLnRlbmFudHM7XG5cdCAgICB9KTtcblx0ICB9O1xuXHRcblx0ICB2bS5xdWVyeVNlYXJjaCA9IGZ1bmN0aW9uIChyZXNvdXJjZXMsIHNlYXJjaFRleHQpIHtcblx0ICAgIHJldHVybiBQcm9vZlBsYXlTZXJ2aWNlLnF1ZXJ5U2VhcmNoKHJlc291cmNlcywgc2VhcmNoVGV4dCk7XG5cdCAgfTtcblx0XG5cdCAgdm0uaXNTZWxlY3Rpb25WYWxpZCA9IGZ1bmN0aW9uIChzZWFyY2gpIHtcblx0ICAgIGlmIChfX2luX18oc2VhcmNoLCB2bS50ZW5hbnRzKSkge1xuXHQgICAgICByZXR1cm4gdm0uZGlzYWJsZWRUZW5hbnQgPSBmYWxzZTtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIHJldHVybiB2bS5kaXNhYmxlZFRlbmFudCA9IHRydWU7XG5cdCAgICB9XG5cdCAgfTtcblx0XG5cdCAgdm0uc3VibWl0VGVuYW50ID0gZnVuY3Rpb24gKHRlbmFudCkge1xuXHQgICAgaWYgKHRlbmFudCAhPT0gdm0uY3VycmVudFRlbmFudCkge1xuXHQgICAgICAkc3RhdGUuZ28oJ3Byb29mRGV0YWlsJywge1xuXHQgICAgICAgIHRlbmFudDogdGVuYW50XG5cdCAgICAgIH0pO1xuXHRcblx0ICAgICAgcmV0dXJuIFRvYXN0c1NlcnZpY2Uuc2hvd1N1Y2Nlc3NUb2FzdCgnUHJvb2Ygb2YgUGxheSByZXBvcnRpbmcgc2V0IHRvICcgKyB0ZW5hbnQpO1xuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgcmV0dXJuIFRvYXN0c1NlcnZpY2Uuc2hvd0Vycm9yVG9hc3QoJ1Byb29mIG9mIFBsYXkgcmVwb3J0aW5nIGlzIGFscmVhZHkgc2V0IHRvICcgKyB0ZW5hbnQpO1xuXHQgICAgfVxuXHQgIH07XG5cdFxuXHQgIHJldHVybiB2bTtcblx0fTtcblx0XG5cdGZ1bmN0aW9uIF9faW5fXyhuZWVkbGUsIGhheXN0YWNrKSB7XG5cdCAgcmV0dXJuIGhheXN0YWNrLmluZGV4T2YobmVlZGxlKSA+PSAwO1xuXHR9XG5cdFxuXHRleHBvcnRzLlByb29mT2ZQbGF5TXVsdGlMb2NhdGlvbkN0cmwgPSBQcm9vZk9mUGxheU11bHRpTG9jYXRpb25DdHJsO1xuXG4vKioqLyB9LFxuXG4vKioqLyA2OTE6XG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQndXNlIHN0cmljdCc7XG5cdFxuXHRQcm9vZk9mUGxheU11bHRpRGlzcGxheUN0cmwuJGluamVjdCA9IFtcIlByb29mUGxheVNlcnZpY2VcIiwgXCIkc3RhdGVQYXJhbXNcIiwgXCIkc3RhdGVcIiwgXCJUb2FzdHNTZXJ2aWNlXCJdO1xuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0ICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblx0ZXhwb3J0cy5Qcm9vZk9mUGxheU11bHRpRGlzcGxheUN0cmwgPSB1bmRlZmluZWQ7XG5cdFxuXHR2YXIgX21vbWVudCA9IF9fd2VicGFja19yZXF1aXJlX18oMzcyKTtcblx0XG5cdHZhciBfbW9tZW50MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX21vbWVudCk7XG5cdFxuXHRmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXHRcblx0ZnVuY3Rpb24gUHJvb2ZPZlBsYXlNdWx0aURpc3BsYXlDdHJsKFByb29mUGxheVNlcnZpY2UsICRzdGF0ZVBhcmFtcywgJHN0YXRlLCBUb2FzdHNTZXJ2aWNlKSB7XG5cdCAgXCJuZ0luamVjdFwiO1xuXHRcblx0ICB2YXIgdm0gPSB0aGlzO1xuXHRcblx0ICB2bS5yYWRpb0J1dHRvbkNob2ljZXMgPSB7XG5cdCAgICBncm91cDE6ICdCeSBEYXRlJyxcblx0ICAgIGdyb3VwMjogJ1N1bW1hcml6ZWQnLFxuXHQgICAgc2VsZWN0aW9uOiBudWxsXG5cdCAgfTtcblx0XG5cdCAgdm0uZGF0ZVRpbWVTZWxlY3Rpb24gPSB7XG5cdCAgICBzdGFydDogbnVsbCxcblx0ICAgIGVuZDogbnVsbFxuXHQgIH07XG5cdFxuXHQgIHZtLmZvcm1WYWxpZGl0eSA9IHtcblx0ICAgIHN0YXJ0X2RhdGU6IGZhbHNlLFxuXHQgICAgZW5kX2RhdGU6IGZhbHNlLFxuXHQgICAgZGlzcGxheXM6IGZhbHNlXG5cdCAgfTtcblx0XG5cdCAgdm0udGVuYW50ID0gJHN0YXRlUGFyYW1zLnRlbmFudDtcblx0ICB2bS5ub19jYWNoZSA9IHRydWU7XG5cdCAgdm0ubG9hZGluZyA9IHRydWU7XG5cdCAgdm0uZGlzYWJsZWQgPSB0cnVlO1xuXHQgIHZtLmRpc2FibGVkVGVuYW50ID0gdHJ1ZTtcblx0ICB2bS5zZWxlY3RlZF9kaXNwbGF5cyA9IFtdO1xuXHRcblx0ICB2bS5pbml0aWFsaXplID0gZnVuY3Rpb24gKCkge1xuXHQgICAgcmV0dXJuIFByb29mUGxheVNlcnZpY2UuZ2V0QWxsRGlzcGxheXModm0udGVuYW50KS50aGVuKGZ1bmN0aW9uIChkYXRhKSB7XG5cdCAgICAgIHZtLmxvYWRpbmcgPSBmYWxzZTtcblx0ICAgICAgdm0uZGlzcGxheXMgPSBkYXRhLmRhdGEuZGV2aWNlcztcblx0ICAgICAgaWYgKHZtLmRpc3BsYXlzLmxlbmd0aCA+IDApIHtcblx0ICAgICAgICByZXR1cm4gdm0uaGFkX3NvbWVfaXRlbXMgPSB0cnVlO1xuXHQgICAgICB9IGVsc2Uge1xuXHQgICAgICAgIHJldHVybiB2bS5oYWRfc29tZV9pdGVtcyA9IGZhbHNlO1xuXHQgICAgICB9XG5cdCAgICB9KTtcblx0ICB9O1xuXHRcblx0ICB2bS5yZWZyZXNoRGlzcGxheXMgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICB2bS5zZWFyY2hUZXh0ID0gJyc7XG5cdCAgICB2bS5zZWxlY3RlZEl0ZW0gPSAnJztcblx0ICAgIHZtLmxvYWRpbmcgPSB0cnVlO1xuXHQgICAgdm0uZGlzYWJsZWQgPSB0cnVlO1xuXHQgICAgdm0uc2VsZWN0ZWRfZGlzcGxheXMgPSBbXTtcblx0ICAgIHZtLmluaXRpYWxpemUoKTtcblx0ICB9O1xuXHRcblx0ICB2bS5hZGRUb1NlbGVjdGVkRGlzcGxheXMgPSBmdW5jdGlvbiAoc2VhcmNoVGV4dCkge1xuXHQgICAgaWYgKHZtLmlzRGlzcGxheVZhbGlkKHNlYXJjaFRleHQpKSB7XG5cdCAgICAgIHZtLnNlbGVjdGVkX2Rpc3BsYXlzLnB1c2goc2VhcmNoVGV4dCk7XG5cdCAgICAgIHZhciBpbmRleCA9IHZtLmRpc3BsYXlzLmluZGV4T2Yoc2VhcmNoVGV4dCk7XG5cdCAgICAgIHZtLmRpc3BsYXlzLnNwbGljZShpbmRleCwgMSk7XG5cdCAgICAgIHZtLnNlYXJjaFRleHQgPSAnJztcblx0ICAgIH1cblx0ICAgIHZtLmFyZURpc3BsYXlzVmFsaWQoKTtcblx0ICAgIHJldHVybiB2bS5pc0Rpc2FibGVkKCk7XG5cdCAgfTtcblx0XG5cdCAgdm0ucXVlcnlTZWFyY2ggPSBmdW5jdGlvbiAoZGlzcGxheXMsIHNlYXJjaFRleHQpIHtcblx0ICAgIHJldHVybiBQcm9vZlBsYXlTZXJ2aWNlLnF1ZXJ5U2VhcmNoKGRpc3BsYXlzLCBzZWFyY2hUZXh0KTtcblx0ICB9O1xuXHRcblx0ICB2bS5pc1JhZGlvVmFsaWQgPSBmdW5jdGlvbiAoc2VsZWN0aW9uKSB7XG5cdCAgICB2bS5mb3JtVmFsaWRpdHkudHlwZSA9IHNlbGVjdGlvbjtcblx0ICAgIHJldHVybiB2bS5pc0Rpc2FibGVkKCk7XG5cdCAgfTtcblx0XG5cdCAgdm0uaXNEaXNwbGF5VmFsaWQgPSBmdW5jdGlvbiAoc2VhcmNoVGV4dCkge1xuXHQgICAgaWYgKF9faW5fXyhzZWFyY2hUZXh0LCB2bS5kaXNwbGF5cykpIHtcblx0ICAgICAgaWYgKCFfX2luX18oc2VhcmNoVGV4dCwgdm0uc2VsZWN0ZWRfZGlzcGxheXMpKSB7XG5cdCAgICAgICAgcmV0dXJuIHRydWU7XG5cdCAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgcmV0dXJuIGZhbHNlO1xuXHQgICAgICB9XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICByZXR1cm4gZmFsc2U7XG5cdCAgICB9XG5cdCAgfTtcblx0XG5cdCAgdm0uYXJlRGlzcGxheXNWYWxpZCA9IGZ1bmN0aW9uICgpIHtcblx0ICAgIHZtLmZvcm1WYWxpZGl0eS5kaXNwbGF5cyA9IHZtLnNlbGVjdGVkX2Rpc3BsYXlzLmxlbmd0aCA+IDA7XG5cdCAgICByZXR1cm4gdm0uaXNEaXNhYmxlZCgpO1xuXHQgIH07XG5cdFxuXHQgIHZtLmlzU3RhcnREYXRlVmFsaWQgPSBmdW5jdGlvbiAoc3RhcnRfZGF0ZSkge1xuXHQgICAgdm0uZm9ybVZhbGlkaXR5LnN0YXJ0X2RhdGUgPSBzdGFydF9kYXRlIGluc3RhbmNlb2YgRGF0ZTtcblx0ICAgIHJldHVybiB2bS5pc0Rpc2FibGVkKCk7XG5cdCAgfTtcblx0XG5cdCAgdm0uaXNFbmREYXRlVmFsaWQgPSBmdW5jdGlvbiAoZW5kX2RhdGUpIHtcblx0ICAgIHZtLmZvcm1WYWxpZGl0eS5lbmRfZGF0ZSA9IGVuZF9kYXRlIGluc3RhbmNlb2YgRGF0ZTtcblx0ICAgIHJldHVybiB2bS5pc0Rpc2FibGVkKCk7XG5cdCAgfTtcblx0XG5cdCAgdm0ucmVtb3ZlRnJvbVNlbGVjdGVkRGlzcGxheSA9IGZ1bmN0aW9uIChpdGVtKSB7XG5cdCAgICB2YXIgaW5kZXggPSB2bS5zZWxlY3RlZF9kaXNwbGF5cy5pbmRleE9mKGl0ZW0pO1xuXHQgICAgdm0uc2VsZWN0ZWRfZGlzcGxheXMuc3BsaWNlKGluZGV4LCAxKTtcblx0ICAgIHZtLmRpc3BsYXlzLnB1c2goaXRlbSk7XG5cdCAgICB2bS5hcmVEaXNwbGF5c1ZhbGlkKCk7XG5cdCAgICByZXR1cm4gdm0uaXNEaXNhYmxlZCgpO1xuXHQgIH07XG5cdFxuXHQgIHZtLmlzRGlzYWJsZWQgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICBpZiAodm0uZm9ybVZhbGlkaXR5LnN0YXJ0X2RhdGUgJiYgdm0uZm9ybVZhbGlkaXR5LmVuZF9kYXRlICYmIHZtLmZvcm1WYWxpZGl0eS5kaXNwbGF5cyAmJiB2bS5mb3JtVmFsaWRpdHkudHlwZSkge1xuXHQgICAgICB2bS5kaXNhYmxlZCA9IGZhbHNlO1xuXHQgICAgICByZXR1cm4gdm0uZmluYWwgPSB7XG5cdCAgICAgICAgc3RhcnRfZGF0ZV91bml4OiAoMCwgX21vbWVudDIuZGVmYXVsdCkodm0uZGF0ZVRpbWVTZWxlY3Rpb24uc3RhcnQpLnVuaXgoKSxcblx0ICAgICAgICBlbmRfZGF0ZV91bml4OiAoMCwgX21vbWVudDIuZGVmYXVsdCkodm0uZGF0ZVRpbWVTZWxlY3Rpb24uZW5kKS51bml4KCksXG5cdCAgICAgICAgZGlzcGxheXM6IHZtLnNlbGVjdGVkX2Rpc3BsYXlzLFxuXHQgICAgICAgIHR5cGU6IHZtLnJhZGlvQnV0dG9uQ2hvaWNlcy5zZWxlY3Rpb25cblx0XG5cdCAgICAgIH07XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICByZXR1cm4gdm0uZGlzYWJsZWQgPSB0cnVlO1xuXHQgICAgfVxuXHQgIH07XG5cdFxuXHQgIHZtLnN1Ym1pdCA9IGZ1bmN0aW9uICgpIHtcblx0ICAgIGlmICh2bS5maW5hbC50eXBlID09PSBcIjFcIikge1xuXHQgICAgICByZXR1cm4gUHJvb2ZQbGF5U2VydmljZS5kb3dubG9hZENTVkZvck11bHRpcGxlRGV2aWNlc0J5RGF0ZSh2bS5maW5hbC5zdGFydF9kYXRlX3VuaXgsIHZtLmZpbmFsLmVuZF9kYXRlX3VuaXgsIHZtLmZpbmFsLmRpc3BsYXlzLCB2bS50ZW5hbnQpO1xuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgcmV0dXJuIFByb29mUGxheVNlcnZpY2UuZG93bmxvYWRDU1ZGb3JNdWx0aXBsZURldmljZXNTdW1tYXJpemVkKHZtLmZpbmFsLnN0YXJ0X2RhdGVfdW5peCwgdm0uZmluYWwuZW5kX2RhdGVfdW5peCwgdm0uZmluYWwuZGlzcGxheXMsIHZtLnRlbmFudCk7XG5cdCAgICB9XG5cdCAgfTtcblx0XG5cdCAgdm0udGVuYW50cyA9IG51bGw7XG5cdCAgdm0uY3VycmVudFRlbmFudCA9IHZtLnRlbmFudDtcblx0XG5cdCAgdm0uaW5pdGlhbGl6ZV90ZW5hbnRfc2VsZWN0ID0gZnVuY3Rpb24gKCkge1xuXHQgICAgcmV0dXJuIFByb29mUGxheVNlcnZpY2UuZ2V0QWxsVGVuYW50cygpLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcblx0ICAgICAgcmV0dXJuIHZtLnRlbmFudHMgPSBkYXRhLmRhdGEudGVuYW50cztcblx0ICAgIH0pO1xuXHQgIH07XG5cdFxuXHQgIHZtLnN1Ym1pdFRlbmFudCA9IGZ1bmN0aW9uICh0ZW5hbnQpIHtcblx0ICAgIGlmICh0ZW5hbnQgIT09IHZtLmN1cnJlbnRUZW5hbnQpIHtcblx0ICAgICAgJHN0YXRlLmdvKCdwcm9vZkRldGFpbCcsIHtcblx0ICAgICAgICB0ZW5hbnQ6IHRlbmFudFxuXHQgICAgICB9KTtcblx0XG5cdCAgICAgIHJldHVybiBUb2FzdHNTZXJ2aWNlLnNob3dTdWNjZXNzVG9hc3QoJ1Byb29mIG9mIFBsYXkgcmVwb3J0aW5nIHNldCB0byAnICsgdGVuYW50KTtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIHJldHVybiBUb2FzdHNTZXJ2aWNlLnNob3dFcnJvclRvYXN0KCdQcm9vZiBvZiBQbGF5IHJlcG9ydGluZyBpcyBhbHJlYWR5IHNldCB0byAnICsgdGVuYW50KTtcblx0ICAgIH1cblx0ICB9O1xuXHRcblx0ICB2bS5xdWVyeVNlYXJjaCA9IGZ1bmN0aW9uIChyZXNvdXJjZXMsIHNlYXJjaFRleHQpIHtcblx0ICAgIHJldHVybiBQcm9vZlBsYXlTZXJ2aWNlLnF1ZXJ5U2VhcmNoKHJlc291cmNlcywgc2VhcmNoVGV4dCk7XG5cdCAgfTtcblx0XG5cdCAgdm0uaXNTZWxlY3Rpb25WYWxpZCA9IGZ1bmN0aW9uIChzZWFyY2gpIHtcblx0ICAgIGlmIChfX2luX18oc2VhcmNoLCB2bS50ZW5hbnRzKSkge1xuXHQgICAgICByZXR1cm4gdm0uZGlzYWJsZWRUZW5hbnQgPSBmYWxzZTtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIHJldHVybiB2bS5kaXNhYmxlZFRlbmFudCA9IHRydWU7XG5cdCAgICB9XG5cdCAgfTtcblx0XG5cdCAgcmV0dXJuIHZtO1xuXHR9O1xuXHRcblx0ZnVuY3Rpb24gX19pbl9fKG5lZWRsZSwgaGF5c3RhY2spIHtcblx0ICByZXR1cm4gaGF5c3RhY2suaW5kZXhPZihuZWVkbGUpID49IDA7XG5cdH1cblx0XG5cdGV4cG9ydHMuUHJvb2ZPZlBsYXlNdWx0aURpc3BsYXlDdHJsID0gUHJvb2ZPZlBsYXlNdWx0aURpc3BsYXlDdHJsO1xuXG4vKioqLyB9LFxuXG4vKioqLyA2OTI6XG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQndXNlIHN0cmljdCc7XG5cdFxuXHRQcm9vZk9mUGxheU11bHRpUmVzb3VyY2VDdHJsLiRpbmplY3QgPSBbXCJQcm9vZlBsYXlTZXJ2aWNlXCIsIFwiJHN0YXRlUGFyYW1zXCIsIFwiJHN0YXRlXCIsIFwiVG9hc3RzU2VydmljZVwiXTtcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG5cdCAgdmFsdWU6IHRydWVcblx0fSk7XG5cdGV4cG9ydHMuUHJvb2ZPZlBsYXlNdWx0aVJlc291cmNlQ3RybCA9IHVuZGVmaW5lZDtcblx0XG5cdHZhciBfbW9tZW50ID0gX193ZWJwYWNrX3JlcXVpcmVfXygzNzIpO1xuXHRcblx0dmFyIF9tb21lbnQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfbW9tZW50KTtcblx0XG5cdGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cdFxuXHRmdW5jdGlvbiBQcm9vZk9mUGxheU11bHRpUmVzb3VyY2VDdHJsKFByb29mUGxheVNlcnZpY2UsICRzdGF0ZVBhcmFtcywgJHN0YXRlLCBUb2FzdHNTZXJ2aWNlKSB7XG5cdCAgXCJuZ0luamVjdFwiO1xuXHRcblx0ICB2YXIgdm0gPSB0aGlzO1xuXHQgIHZtLnJhZGlvQnV0dG9uQ2hvaWNlcyA9IHtcblx0ICAgIGdyb3VwMTogJ0J5IERldmljZScsXG5cdCAgICBncm91cDI6ICdCeSBEYXRlJyxcblx0ICAgIHNlbGVjdGlvbjogbnVsbFxuXHQgIH07XG5cdFxuXHQgIHZtLmRhdGVUaW1lU2VsZWN0aW9uID0ge1xuXHQgICAgc3RhcnQ6IG51bGwsXG5cdCAgICBlbmQ6IG51bGxcblx0ICB9O1xuXHRcblx0ICB2bS5mb3JtVmFsaWRpdHkgPSB7XG5cdCAgICBzdGFydF9kYXRlOiBmYWxzZSxcblx0ICAgIGVuZF9kYXRlOiBmYWxzZSxcblx0ICAgIHJlc291cmNlczogZmFsc2Vcblx0ICB9O1xuXHRcblx0ICB2bS50ZW5hbnQgPSAkc3RhdGVQYXJhbXMudGVuYW50O1xuXHQgIHZtLm5vX2NhY2hlID0gdHJ1ZTtcblx0ICB2bS5sb2FkaW5nID0gdHJ1ZTtcblx0ICB2bS5kaXNhYmxlZCA9IHRydWU7XG5cdCAgdm0uZGlzYWJsZWRUZW5hbnQgPSB0cnVlO1xuXHQgIHZtLnNlbGVjdGVkX3Jlc291cmNlcyA9IFtdO1xuXHRcblx0ICB2bS5pbml0aWFsaXplID0gZnVuY3Rpb24gKCkge1xuXHQgICAgcmV0dXJuIFByb29mUGxheVNlcnZpY2UuZ2V0QWxsUmVzb3VyY2VzKHZtLnRlbmFudCkudGhlbihmdW5jdGlvbiAoZGF0YSkge1xuXHQgICAgICB2bS5sb2FkaW5nID0gZmFsc2U7XG5cdCAgICAgIHZtLmZ1bGxfcmVzb3VyY2VfbWFwID0gZGF0YS5kYXRhLnJlc291cmNlcztcblx0ICAgICAgdm0ucmVzb3VyY2VzID0gW107XG5cdCAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGF0YS5kYXRhLnJlc291cmNlcy5sZW5ndGg7IGkrKykge1xuXHQgICAgICAgIHZhciByZXNvdXJjZSA9IGRhdGEuZGF0YS5yZXNvdXJjZXNbaV07XG5cdCAgICAgICAgdm0ucmVzb3VyY2VzLnB1c2gocmVzb3VyY2UucmVzb3VyY2VfbmFtZSk7XG5cdCAgICAgIH1cblx0XG5cdCAgICAgIGlmICh2bS5yZXNvdXJjZXMubGVuZ3RoID4gMCkge1xuXHQgICAgICAgIHJldHVybiB2bS5oYWRfc29tZV9pdGVtcyA9IHRydWU7XG5cdCAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgcmV0dXJuIHZtLmhhZF9zb21lX2l0ZW1zID0gZmFsc2U7XG5cdCAgICAgIH1cblx0ICAgIH0pO1xuXHQgIH07XG5cdFxuXHQgIHZtLnJlZnJlc2hSZXNvdXJjZXMgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICB2bS5zZWFyY2hUZXh0ID0gJyc7XG5cdCAgICB2bS5zZWxlY3RlZEl0ZW0gPSAnJztcblx0ICAgIHZtLmxvYWRpbmcgPSB0cnVlO1xuXHQgICAgdm0uZGlzYWJsZWQgPSB0cnVlO1xuXHQgICAgdm0uc2VsZWN0ZWRfcmVzb3VyY2VzID0gW107XG5cdCAgICB2bS5pbml0aWFsaXplKCk7XG5cdCAgfTtcblx0XG5cdCAgdm0uYWRkVG9TZWxlY3RlZFJlc291cmNlcyA9IGZ1bmN0aW9uIChzZWFyY2hUZXh0KSB7XG5cdCAgICBpZiAodm0uaXNSZXNvdXJjZVZhbGlkKHNlYXJjaFRleHQpKSB7XG5cdCAgICAgIHZtLnNlbGVjdGVkX3Jlc291cmNlcy5wdXNoKHNlYXJjaFRleHQpO1xuXHQgICAgICB2YXIgaW5kZXggPSB2bS5yZXNvdXJjZXMuaW5kZXhPZihzZWFyY2hUZXh0KTtcblx0ICAgICAgdm0ucmVzb3VyY2VzLnNwbGljZShpbmRleCwgMSk7XG5cdCAgICAgIHZtLnNlYXJjaFRleHQgPSAnJztcblx0ICAgIH1cblx0ICAgIHZtLmFyZVJlc291cmNlc1ZhbGlkKCk7XG5cdCAgICByZXR1cm4gdm0uaXNEaXNhYmxlZCgpO1xuXHQgIH07XG5cdFxuXHQgIHZtLnF1ZXJ5U2VhcmNoID0gZnVuY3Rpb24gKHJlc291cmNlcywgc2VhcmNoVGV4dCkge1xuXHQgICAgcmV0dXJuIFByb29mUGxheVNlcnZpY2UucXVlcnlTZWFyY2gocmVzb3VyY2VzLCBzZWFyY2hUZXh0KTtcblx0ICB9O1xuXHRcblx0ICB2bS5pc1JhZGlvVmFsaWQgPSBmdW5jdGlvbiAoc2VsZWN0aW9uKSB7XG5cdCAgICB2bS5mb3JtVmFsaWRpdHkudHlwZSA9IHNlbGVjdGlvbjtcblx0ICAgIHJldHVybiB2bS5pc0Rpc2FibGVkKCk7XG5cdCAgfTtcblx0XG5cdCAgdm0uaXNSZXNvdXJjZVZhbGlkID0gZnVuY3Rpb24gKHNlYXJjaFRleHQpIHtcblx0ICAgIGlmIChfX2luX18oc2VhcmNoVGV4dCwgdm0ucmVzb3VyY2VzKSkge1xuXHQgICAgICBpZiAoIV9faW5fXyhzZWFyY2hUZXh0LCB2bS5zZWxlY3RlZF9yZXNvdXJjZXMpKSB7XG5cdCAgICAgICAgcmV0dXJuIHRydWU7XG5cdCAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgcmV0dXJuIGZhbHNlO1xuXHQgICAgICB9XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICByZXR1cm4gZmFsc2U7XG5cdCAgICB9XG5cdCAgfTtcblx0XG5cdCAgdm0uYXJlUmVzb3VyY2VzVmFsaWQgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICB2bS5mb3JtVmFsaWRpdHkucmVzb3VyY2VzID0gdm0uc2VsZWN0ZWRfcmVzb3VyY2VzLmxlbmd0aCA+IDA7XG5cdCAgICByZXR1cm4gdm0uaXNEaXNhYmxlZCgpO1xuXHQgIH07XG5cdFxuXHQgIHZtLmlzU3RhcnREYXRlVmFsaWQgPSBmdW5jdGlvbiAoc3RhcnRfZGF0ZSkge1xuXHQgICAgdm0uZm9ybVZhbGlkaXR5LnN0YXJ0X2RhdGUgPSBzdGFydF9kYXRlIGluc3RhbmNlb2YgRGF0ZTtcblx0ICAgIHJldHVybiB2bS5pc0Rpc2FibGVkKCk7XG5cdCAgfTtcblx0XG5cdCAgdm0uaXNFbmREYXRlVmFsaWQgPSBmdW5jdGlvbiAoZW5kX2RhdGUpIHtcblx0ICAgIHZtLmZvcm1WYWxpZGl0eS5lbmRfZGF0ZSA9IGVuZF9kYXRlIGluc3RhbmNlb2YgRGF0ZTtcblx0ICAgIHJldHVybiB2bS5pc0Rpc2FibGVkKCk7XG5cdCAgfTtcblx0XG5cdCAgdm0ucmVtb3ZlRnJvbVNlbGVjdGVkUmVzb3VyY2UgPSBmdW5jdGlvbiAoaXRlbSkge1xuXHQgICAgdmFyIGluZGV4ID0gdm0uc2VsZWN0ZWRfcmVzb3VyY2VzLmluZGV4T2YoaXRlbSk7XG5cdCAgICB2bS5zZWxlY3RlZF9yZXNvdXJjZXMuc3BsaWNlKGluZGV4LCAxKTtcblx0ICAgIHZtLnJlc291cmNlcy5wdXNoKGl0ZW0pO1xuXHQgICAgdm0uYXJlUmVzb3VyY2VzVmFsaWQoKTtcblx0ICAgIHJldHVybiB2bS5pc0Rpc2FibGVkKCk7XG5cdCAgfTtcblx0XG5cdCAgdm0uaXNEaXNhYmxlZCA9IGZ1bmN0aW9uICgpIHtcblx0ICAgIGlmICh2bS5mb3JtVmFsaWRpdHkuc3RhcnRfZGF0ZSAmJiB2bS5mb3JtVmFsaWRpdHkuZW5kX2RhdGUgJiYgdm0uZm9ybVZhbGlkaXR5LnJlc291cmNlcyAmJiB2bS5mb3JtVmFsaWRpdHkudHlwZSkge1xuXHQgICAgICB2bS5kaXNhYmxlZCA9IGZhbHNlO1xuXHQgICAgICByZXR1cm4gdm0uZmluYWwgPSB7XG5cdCAgICAgICAgc3RhcnRfZGF0ZV91bml4OiAoMCwgX21vbWVudDIuZGVmYXVsdCkodm0uZGF0ZVRpbWVTZWxlY3Rpb24uc3RhcnQpLnVuaXgoKSxcblx0ICAgICAgICBlbmRfZGF0ZV91bml4OiAoMCwgX21vbWVudDIuZGVmYXVsdCkodm0uZGF0ZVRpbWVTZWxlY3Rpb24uZW5kKS51bml4KCksXG5cdCAgICAgICAgcmVzb3VyY2VzOiB2bS5zZWxlY3RlZF9yZXNvdXJjZXMsXG5cdCAgICAgICAgdHlwZTogdm0ucmFkaW9CdXR0b25DaG9pY2VzLnNlbGVjdGlvblxuXHQgICAgICB9O1xuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgcmV0dXJuIHZtLmRpc2FibGVkID0gdHJ1ZTtcblx0ICAgIH1cblx0ICB9O1xuXHRcblx0ICB2bS5zdWJtaXQgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICB2YXIgcmVzb3VyY2VzX2FzX2lkcyA9IFtdO1xuXHQgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2bS5maW5hbC5yZXNvdXJjZXMubGVuZ3RoOyBpKyspIHtcblx0ICAgICAgdmFyIGl0ZW0gPSB2bS5maW5hbC5yZXNvdXJjZXNbaV07XG5cdCAgICAgIGZvciAodmFyIGogPSAwOyBqIDwgdm0uZnVsbF9yZXNvdXJjZV9tYXAubGVuZ3RoOyBqKyspIHtcblx0ICAgICAgICB2YXIgZWFjaCA9IHZtLmZ1bGxfcmVzb3VyY2VfbWFwW2pdO1xuXHQgICAgICAgIGlmIChlYWNoW1wicmVzb3VyY2VfbmFtZVwiXSA9PT0gaXRlbSkge1xuXHQgICAgICAgICAgcmVzb3VyY2VzX2FzX2lkcy5wdXNoKGVhY2hbXCJyZXNvdXJjZV9pZGVudGlmaWVyXCJdKTtcblx0ICAgICAgICB9XG5cdCAgICAgIH1cblx0ICAgIH1cblx0XG5cdCAgICBpZiAodm0uZmluYWwudHlwZSA9PT0gXCIxXCIpIHtcblx0ICAgICAgcmV0dXJuIFByb29mUGxheVNlcnZpY2UuZG93bmxvYWRDU1ZGb3JNdWx0aXBsZVJlc291cmNlc0J5RGV2aWNlKHZtLmZpbmFsLnN0YXJ0X2RhdGVfdW5peCwgdm0uZmluYWwuZW5kX2RhdGVfdW5peCwgcmVzb3VyY2VzX2FzX2lkcywgdm0udGVuYW50KTtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIHJldHVybiBQcm9vZlBsYXlTZXJ2aWNlLmRvd25sb2FkQ1NWRm9yTXVsdGlwbGVSZXNvdXJjZXNCeURhdGUodm0uZmluYWwuc3RhcnRfZGF0ZV91bml4LCB2bS5maW5hbC5lbmRfZGF0ZV91bml4LCByZXNvdXJjZXNfYXNfaWRzLCB2bS50ZW5hbnQpO1xuXHQgICAgfVxuXHQgIH07XG5cdFxuXHQgIHZtLnRlbmFudHMgPSBudWxsO1xuXHQgIHZtLmN1cnJlbnRUZW5hbnQgPSB2bS50ZW5hbnQ7XG5cdFxuXHQgIHZtLmluaXRpYWxpemVfdGVuYW50X3NlbGVjdCA9IGZ1bmN0aW9uICgpIHtcblx0ICAgIHJldHVybiBQcm9vZlBsYXlTZXJ2aWNlLmdldEFsbFRlbmFudHMoKS50aGVuKGZ1bmN0aW9uIChkYXRhKSB7XG5cdCAgICAgIHJldHVybiB2bS50ZW5hbnRzID0gZGF0YS5kYXRhLnRlbmFudHM7XG5cdCAgICB9KTtcblx0ICB9O1xuXHRcblx0ICB2bS5xdWVyeVNlYXJjaCA9IGZ1bmN0aW9uIChyZXNvdXJjZXMsIHNlYXJjaFRleHQpIHtcblx0ICAgIHJldHVybiBQcm9vZlBsYXlTZXJ2aWNlLnF1ZXJ5U2VhcmNoKHJlc291cmNlcywgc2VhcmNoVGV4dCk7XG5cdCAgfTtcblx0XG5cdCAgdm0uaXNTZWxlY3Rpb25WYWxpZCA9IGZ1bmN0aW9uIChzZWFyY2gpIHtcblx0ICAgIGlmIChfX2luX18oc2VhcmNoLCB2bS50ZW5hbnRzKSkge1xuXHQgICAgICByZXR1cm4gdm0uZGlzYWJsZWRUZW5hbnQgPSBmYWxzZTtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIHJldHVybiB2bS5kaXNhYmxlZFRlbmFudCA9IHRydWU7XG5cdCAgICB9XG5cdCAgfTtcblx0XG5cdCAgdm0uc3VibWl0VGVuYW50ID0gZnVuY3Rpb24gKHRlbmFudCkge1xuXHQgICAgaWYgKHRlbmFudCAhPT0gdm0uY3VycmVudFRlbmFudCkge1xuXHQgICAgICAkc3RhdGUuZ28oJ3Byb29mRGV0YWlsJywge1xuXHQgICAgICAgIHRlbmFudDogdGVuYW50XG5cdCAgICAgIH0pO1xuXHQgICAgICByZXR1cm4gVG9hc3RzU2VydmljZS5zaG93U3VjY2Vzc1RvYXN0KCdQcm9vZiBvZiBQbGF5IHJlcG9ydGluZyBzZXQgdG8gJyArIHRlbmFudCk7XG5cdCAgICB9IGVsc2Uge1xuXHQgICAgICByZXR1cm4gVG9hc3RzU2VydmljZS5zaG93RXJyb3JUb2FzdCgnUHJvb2Ygb2YgUGxheSByZXBvcnRpbmcgaXMgYWxyZWFkeSBzZXQgdG8gJyArIHRlbmFudCk7XG5cdCAgICB9XG5cdCAgfTtcblx0XG5cdCAgcmV0dXJuIHZtO1xuXHR9O1xuXHRcblx0ZnVuY3Rpb24gX19pbl9fKG5lZWRsZSwgaGF5c3RhY2spIHtcblx0ICByZXR1cm4gaGF5c3RhY2suaW5kZXhPZihuZWVkbGUpID49IDA7XG5cdH1cblx0XG5cdGV4cG9ydHMuUHJvb2ZPZlBsYXlNdWx0aVJlc291cmNlQ3RybCA9IFByb29mT2ZQbGF5TXVsdGlSZXNvdXJjZUN0cmw7XG5cbi8qKiovIH0sXG5cbi8qKiovIDY5Mzpcbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXHRcblx0UHJvb2ZPZlBsYXlDdHJsLiRpbmplY3QgPSBbXCJQcm9vZlBsYXlTZXJ2aWNlXCIsIFwiJHN0YXRlUGFyYW1zXCIsIFwiJHN0YXRlXCIsIFwiVG9hc3RzU2VydmljZVwiXTtcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG5cdCAgdmFsdWU6IHRydWVcblx0fSk7XG5cdGZ1bmN0aW9uIFByb29mT2ZQbGF5Q3RybChQcm9vZlBsYXlTZXJ2aWNlLCAkc3RhdGVQYXJhbXMsICRzdGF0ZSwgVG9hc3RzU2VydmljZSkge1xuXHQgIFwibmdJbmplY3RcIjtcblx0XG5cdCAgdmFyIHZtID0gdGhpcztcblx0ICB2bS5yZXNvdXJjZSA9IHsgdGl0bGU6IFwiUmVzb3VyY2UgUmVwb3J0XCIgfTtcblx0ICB2bS5sb2NhdGlvbiA9IHsgdGl0bGU6IFwiTG9jYXRpb24gUmVwb3J0XCIgfTtcblx0ICB2bS5kaXNwbGF5ID0geyB0aXRsZTogXCJEaXNwbGF5IFJlcG9ydFwiIH07XG5cdFxuXHQgIHZtLmNob3Nlbl90ZW5hbnQgPSBudWxsO1xuXHQgIHZtLnRlbmFudHMgPSBudWxsO1xuXHQgIHZtLmRpc2FibGVkID0gdHJ1ZTtcblx0XG5cdCAgdm0uaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgIHJldHVybiBQcm9vZlBsYXlTZXJ2aWNlLmdldEFsbFRlbmFudHMoKS50aGVuKGZ1bmN0aW9uIChkYXRhKSB7XG5cdCAgICAgIHJldHVybiB2bS50ZW5hbnRzID0gZGF0YS5kYXRhLnRlbmFudHM7XG5cdCAgICB9KTtcblx0ICB9O1xuXHRcblx0ICB2bS5xdWVyeVNlYXJjaCA9IGZ1bmN0aW9uIChyZXNvdXJjZXMsIHNlYXJjaFRleHQpIHtcblx0ICAgIHJldHVybiBQcm9vZlBsYXlTZXJ2aWNlLnF1ZXJ5U2VhcmNoKHJlc291cmNlcywgc2VhcmNoVGV4dCk7XG5cdCAgfTtcblx0XG5cdCAgdm0uaXNTZWxlY3Rpb25WYWxpZCA9IGZ1bmN0aW9uIChzZWFyY2gpIHtcblx0ICAgIGlmIChfX2luX18oc2VhcmNoLCB2bS50ZW5hbnRzKSkge1xuXHQgICAgICByZXR1cm4gdm0uZGlzYWJsZWQgPSBmYWxzZTtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIHJldHVybiB2bS5kaXNhYmxlZCA9IHRydWU7XG5cdCAgICB9XG5cdCAgfTtcblx0XG5cdCAgdm0uc3VibWl0VGVuYW50ID0gZnVuY3Rpb24gKHRlbmFudCkge1xuXHQgICAgaWYgKHRlbmFudCkge1xuXHQgICAgICB2bS5jaG9zZW5fdGVuYW50ID0gdGVuYW50O1xuXHQgICAgICByZXR1cm4gJHN0YXRlLmdvKCdwcm9vZkRldGFpbCcsIHtcblx0ICAgICAgICB0ZW5hbnQ6IHZtLmNob3Nlbl90ZW5hbnRcblx0ICAgICAgfSk7XG5cdCAgICB9XG5cdCAgfTtcblx0XG5cdCAgdm0ucmVmcmVzaFRlbmFudHMgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICB2bS50ZW5hbnRzID0gbnVsbDtcblx0ICAgIHZhciB1cmwgPSBQcm9vZlBsYXlTZXJ2aWNlLm1ha2VIVFRQVVJMKFwiL3JldHJpZXZlX215X3RlbmFudHNcIiwgJycpO1xuXHQgICAgdm0uaW5pdGlhbGl6ZSgpO1xuXHQgIH07XG5cdFxuXHQgIHJldHVybiB2bTtcblx0fTtcblx0XG5cdGZ1bmN0aW9uIF9faW5fXyhuZWVkbGUsIGhheXN0YWNrKSB7XG5cdCAgcmV0dXJuIGhheXN0YWNrLmluZGV4T2YobmVlZGxlKSA+PSAwO1xuXHR9XG5cdFxuXHRleHBvcnRzLlByb29mT2ZQbGF5Q3RybCA9IFByb29mT2ZQbGF5Q3RybDtcblxuLyoqKi8gfSxcblxuLyoqKi8gNjk0OlxuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0LyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovKGZ1bmN0aW9uKCQpIHsndXNlIHN0cmljdCc7XG5cdFxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0ICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblx0XG5cdHZhciBfY2xhc3NDYWxsQ2hlY2syID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2OTUpO1xuXHRcblx0dmFyIF9jbGFzc0NhbGxDaGVjazMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbGFzc0NhbGxDaGVjazIpO1xuXHRcblx0dmFyIF9jcmVhdGVDbGFzczIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDY5Nik7XG5cdFxuXHR2YXIgX2NyZWF0ZUNsYXNzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZUNsYXNzMik7XG5cdFxuXHRmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXHRcblx0dmFyIEltYWdlU2VydmljZSA9IGZ1bmN0aW9uICgpIHtcblx0ICBJbWFnZVNlcnZpY2UuJGluamVjdCA9IFtcIlJlc3Rhbmd1bGFyXCIsIFwiU2Vzc2lvbnNTZXJ2aWNlXCJdO1xuXHQgIGZ1bmN0aW9uIEltYWdlU2VydmljZShSZXN0YW5ndWxhciwgU2Vzc2lvbnNTZXJ2aWNlKSB7XG5cdCAgICAnbmdJbmplY3QnO1xuXHRcblx0ICAgICgwLCBfY2xhc3NDYWxsQ2hlY2szLmRlZmF1bHQpKHRoaXMsIEltYWdlU2VydmljZSk7XG5cdCAgICB0aGlzLlJlc3Rhbmd1bGFyID0gUmVzdGFuZ3VsYXI7XG5cdCAgICB0aGlzLlNlc3Npb25zU2VydmljZSA9IFNlc3Npb25zU2VydmljZTtcblx0ICB9XG5cdFxuXHQgICgwLCBfY3JlYXRlQ2xhc3MzLmRlZmF1bHQpKEltYWdlU2VydmljZSwgW3tcblx0ICAgIGtleTogJ2dldEltYWdlcycsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0SW1hZ2VzKHRlbmFudF91cmxzYWZlX2tleSkge1xuXHQgICAgICByZXR1cm4gdGhpcy5SZXN0YW5ndWxhci5vbmVVcmwoJ2ltYWdlJywgJy9hcGkvdjEvaW1hZ2UvdGVuYW50LycgKyB0ZW5hbnRfdXJsc2FmZV9rZXkpLmdldExpc3QoKTtcblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6ICdzYXZlSW1hZ2UnLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIHNhdmVJbWFnZSh0ZW5hbnRfdXJsc2FmZV9rZXksIGZvcm1EYXRhKSB7XG5cdCAgICAgIC8vIGpRdWVyeSBhamF4IHVzZWQgaGVyZSBpbnN0ZWFkIG9mIGFuZ3VsYXIgLyBSZXN0YW5ndWxhciBkdWUgdG8gYW5ndWxhciBidWcgd2l0aCBwb3N0aW5nIGZvcm0gZGF0YVxuXHQgICAgICByZXR1cm4gJC5hamF4KHtcblx0ICAgICAgICB0eXBlOiBcIlBPU1RcIixcblx0ICAgICAgICB1cmw6ICcvYXBpL3YxL2ltYWdlL3RlbmFudC8nICsgdGVuYW50X3VybHNhZmVfa2V5LFxuXHQgICAgICAgIGRhdGE6IGZvcm1EYXRhLFxuXHQgICAgICAgIHByb2Nlc3NEYXRhOiBmYWxzZSxcblx0ICAgICAgICBjb250ZW50VHlwZTogZmFsc2Vcblx0ICAgICAgfSk7XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiAnZGVsZXRlSW1hZ2UnLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIGRlbGV0ZUltYWdlKGltYWdlX3VybHNhZmVfa2V5KSB7XG5cdCAgICAgIHZhciBwcm9taXNlID0gdGhpcy5SZXN0YW5ndWxhci5vbmVVcmwoJ2ltYWdlJywgJy9hcGkvdjEvaW1hZ2UvJyArIGltYWdlX3VybHNhZmVfa2V5KS5yZW1vdmUoKTtcblx0ICAgICAgcmV0dXJuIHByb21pc2U7XG5cdCAgICB9XG5cdCAgfV0pO1xuXHQgIHJldHVybiBJbWFnZVNlcnZpY2U7XG5cdH0oKTtcblx0XG5cdGV4cG9ydHMuZGVmYXVsdCA9IEltYWdlU2VydmljZTtcblx0LyogV0VCUEFDSyBWQVIgSU5KRUNUSU9OICovfS5jYWxsKGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18oNTEyKSkpXG5cbi8qKiovIH0sXG5cbi8qKiovIDcwMDpcbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdFwidXNlIHN0cmljdFwiO1xuXHRcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG5cdCAgdmFsdWU6IHRydWVcblx0fSk7XG5cdFxuXHR2YXIgX2NsYXNzQ2FsbENoZWNrMiA9IF9fd2VicGFja19yZXF1aXJlX18oNjk1KTtcblx0XG5cdHZhciBfY2xhc3NDYWxsQ2hlY2szID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2xhc3NDYWxsQ2hlY2syKTtcblx0XG5cdHZhciBfY3JlYXRlQ2xhc3MyID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2OTYpO1xuXHRcblx0dmFyIF9jcmVhdGVDbGFzczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVDbGFzczIpO1xuXHRcblx0ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblx0XG5cdHZhciBBZG1pblNlcnZpY2UgPSBmdW5jdGlvbiAoKSB7XG5cdCAgQWRtaW5TZXJ2aWNlLiRpbmplY3QgPSBbXCJSZXN0YW5ndWxhclwiXTtcblx0ICBmdW5jdGlvbiBBZG1pblNlcnZpY2UoUmVzdGFuZ3VsYXIpIHtcblx0ICAgICduZ0luamVjdCc7XG5cdFxuXHQgICAgKDAsIF9jbGFzc0NhbGxDaGVjazMuZGVmYXVsdCkodGhpcywgQWRtaW5TZXJ2aWNlKTtcblx0ICAgIHRoaXMuUmVzdGFuZ3VsYXIgPSBSZXN0YW5ndWxhcjtcblx0ICAgIHRoaXMuVVNFUl9TRVJWSUNFID0gXCJ1c2Vyc1wiO1xuXHQgICAgdGhpcy5ESVNUUklCVVRPUl9TRVJWSUNFID0gXCJkaXN0cmlidXRvcnNcIjtcblx0ICB9XG5cdFxuXHQgICgwLCBfY3JlYXRlQ2xhc3MzLmRlZmF1bHQpKEFkbWluU2VydmljZSwgW3tcblx0ICAgIGtleTogXCJtYWtlRGlzdHJpYnV0b3JcIixcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBtYWtlRGlzdHJpYnV0b3IoZGlzdHJpYnV0b3IsIGFkbWluX2VtYWlsKSB7XG5cdCAgICAgIHZhciBwYXlsb2FkID0ge1xuXHQgICAgICAgIGRpc3RyaWJ1dG9yOiBkaXN0cmlidXRvcixcblx0ICAgICAgICBhZG1pbl9lbWFpbDogYWRtaW5fZW1haWxcblx0ICAgICAgfTtcblx0XG5cdCAgICAgIHZhciBwcm9taXNlID0gdGhpcy5SZXN0YW5ndWxhci5vbmVVcmwodGhpcy5ESVNUUklCVVRPUl9TRVJWSUNFLCAnL2FwaS92MS9kaXN0cmlidXRvcnMnKS5jdXN0b21QT1NUKHBheWxvYWQpO1xuXHQgICAgICByZXR1cm4gcHJvbWlzZTtcblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6IFwiYWRkVXNlclRvRGlzdHJpYnV0b3JcIixcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBhZGRVc2VyVG9EaXN0cmlidXRvcih1c2VyRW1haWwsIGRpc3RyaWJ1dG9yLCBkaXN0cmlidXRvckFkbWluKSB7XG5cdCAgICAgIHZhciBwYXlsb2FkID0ge1xuXHQgICAgICAgIHVzZXJfZW1haWw6IHVzZXJFbWFpbCxcblx0ICAgICAgICBkaXN0cmlidXRvcjogZGlzdHJpYnV0b3IsXG5cdCAgICAgICAgZGlzdHJpYnV0b3JfYWRtaW46IGRpc3RyaWJ1dG9yQWRtaW5cblx0ICAgICAgfTtcblx0XG5cdCAgICAgIHZhciBwcm9taXNlID0gdGhpcy5SZXN0YW5ndWxhci5vbmVVcmwodGhpcy5VU0VSX1NFUlZJQ0UsIFwiL2FwaS92MS91c2Vyc1wiKS5jdXN0b21QT1NUKHBheWxvYWQpO1xuXHQgICAgICByZXR1cm4gcHJvbWlzZTtcblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6IFwiZ2V0VXNlcnNPZkRpc3RyaWJ1dG9yXCIsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0VXNlcnNPZkRpc3RyaWJ1dG9yKGRpc3RyaWJ1dG9yS2V5KSB7XG5cdCAgICAgIHZhciBwcm9taXNlID0gdGhpcy5SZXN0YW5ndWxhci5vbmVVcmwodGhpcy5ESVNUUklCVVRPUl9TRVJWSUNFLCBcIi9hcGkvdjEvYW5hbHl0aWNzL2Rpc3RyaWJ1dG9ycy9cIiArIGRpc3RyaWJ1dG9yS2V5ICsgXCIvdXNlcnNcIikuZ2V0KCk7XG5cdCAgICAgIHJldHVybiBwcm9taXNlO1xuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogXCJnZXRBbGxEaXN0cmlidXRvcnNcIixcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRBbGxEaXN0cmlidXRvcnMoKSB7XG5cdCAgICAgIHZhciBwcm9taXNlID0gdGhpcy5SZXN0YW5ndWxhci5vbmVVcmwodGhpcy5ESVNUUklCVVRPUl9TRVJWSUNFLCBcIi9hcGkvdjEvZGlzdHJpYnV0b3JzXCIpLmdldCgpO1xuXHQgICAgICByZXR1cm4gcHJvbWlzZTtcblx0ICAgIH1cblx0ICB9XSk7XG5cdCAgcmV0dXJuIEFkbWluU2VydmljZTtcblx0fSgpO1xuXHRcblx0ZXhwb3J0cy5kZWZhdWx0ID0gQWRtaW5TZXJ2aWNlO1xuXG4vKioqLyB9LFxuXG4vKioqLyA3MDE6XG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQndXNlIHN0cmljdCc7XG5cdFxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0ICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblx0XG5cdHZhciBfY2xhc3NDYWxsQ2hlY2syID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2OTUpO1xuXHRcblx0dmFyIF9jbGFzc0NhbGxDaGVjazMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbGFzc0NhbGxDaGVjazIpO1xuXHRcblx0dmFyIF9jcmVhdGVDbGFzczIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDY5Nik7XG5cdFxuXHR2YXIgX2NyZWF0ZUNsYXNzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZUNsYXNzMik7XG5cdFxuXHRmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXHRcblx0dmFyIEF1dGhvcml6YXRpb25TZXJ2aWNlID0gZnVuY3Rpb24gKCkge1xuXHQgIEF1dGhvcml6YXRpb25TZXJ2aWNlLiRpbmplY3QgPSBbXCJTZXNzaW9uc1NlcnZpY2VcIiwgXCIkcVwiXTtcblx0ICBmdW5jdGlvbiBBdXRob3JpemF0aW9uU2VydmljZShTZXNzaW9uc1NlcnZpY2UsICRxKSB7XG5cdCAgICAnbmdJbmplY3QnO1xuXHRcblx0ICAgICgwLCBfY2xhc3NDYWxsQ2hlY2szLmRlZmF1bHQpKHRoaXMsIEF1dGhvcml6YXRpb25TZXJ2aWNlKTtcblx0ICAgIHRoaXMuJHEgPSAkcTtcblx0ICAgIHRoaXMuU2Vzc2lvbnNTZXJ2aWNlID0gU2Vzc2lvbnNTZXJ2aWNlO1xuXHQgIH1cblx0XG5cdCAgKDAsIF9jcmVhdGVDbGFzczMuZGVmYXVsdCkoQXV0aG9yaXphdGlvblNlcnZpY2UsIFt7XG5cdCAgICBrZXk6ICdhdXRoZW50aWNhdGVkJyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBhdXRoZW50aWNhdGVkKCkge1xuXHQgICAgICB2YXIgZGVmZXJyZWQgPSB0aGlzLiRxLmRlZmVyKCk7XG5cdCAgICAgIHZhciB1c2VyS2V5ID0gdGhpcy5TZXNzaW9uc1NlcnZpY2UuZ2V0VXNlcktleSgpO1xuXHQgICAgICBpZiAodXNlcktleSkge1xuXHQgICAgICAgIGRlZmVycmVkLnJlc29sdmUodHJ1ZSk7XG5cdCAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgZGVmZXJyZWQucmVqZWN0KFtcImF1dGhFcnJvclwiLCAnc2lnbl9pbiddKTtcblx0ICAgICAgfVxuXHQgICAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6ICdub3RBdXRoZW50aWNhdGVkJyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBub3RBdXRoZW50aWNhdGVkKCkge1xuXHQgICAgICB2YXIgZGVmZXJyZWQgPSB0aGlzLiRxLmRlZmVyKCk7XG5cdCAgICAgIHZhciB1c2VyS2V5ID0gdGhpcy5TZXNzaW9uc1NlcnZpY2UuZ2V0VXNlcktleSgpO1xuXHQgICAgICBpZiAoIXVzZXJLZXkpIHtcblx0ICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKHRydWUpO1xuXHQgICAgICB9IGVsc2Uge1xuXHQgICAgICAgIGRlZmVycmVkLnJlamVjdChbXCJhdXRoRXJyb3JcIiwgJ2hvbWUnXSk7XG5cdCAgICAgIH1cblx0ICAgICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2U7XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiAnaXNBZG1pbk9yRGlzdHJpYnV0b3JBZG1pbicsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gaXNBZG1pbk9yRGlzdHJpYnV0b3JBZG1pbigpIHtcblx0ICAgICAgdmFyIGRlZmVycmVkID0gdGhpcy4kcS5kZWZlcigpO1xuXHQgICAgICB2YXIgYWRtaW4gPSB0aGlzLlNlc3Npb25zU2VydmljZS5nZXRJc0FkbWluKCk7XG5cdCAgICAgIHZhciBkaXN0cmlidXRvckFkbWluID0gdGhpcy5TZXNzaW9uc1NlcnZpY2UuZ2V0RGlzdHJpYnV0b3JzQXNBZG1pbigpO1xuXHQgICAgICB2YXIgaGFzQXRMZWFzdE9uZURpc3RyaWJ1dG9yQWRtaW4gPSBmYWxzZTtcblx0ICAgICAgaWYgKGRpc3RyaWJ1dG9yQWRtaW4gJiYgZGlzdHJpYnV0b3JBZG1pbi5sZW5ndGggPiAwKSB7XG5cdCAgICAgICAgaGFzQXRMZWFzdE9uZURpc3RyaWJ1dG9yQWRtaW4gPSB0cnVlO1xuXHQgICAgICB9XG5cdCAgICAgIHZhciB1c2VyS2V5ID0gdGhpcy5TZXNzaW9uc1NlcnZpY2UuZ2V0VXNlcktleSgpO1xuXHQgICAgICBpZiAoIXVzZXJLZXkpIHtcblx0ICAgICAgICBkZWZlcnJlZC5yZWplY3QoJ3NpZ25faW4nKTtcblx0ICAgICAgfSBlbHNlIGlmICghYWRtaW4gJiYgIWhhc0F0TGVhc3RPbmVEaXN0cmlidXRvckFkbWluKSB7XG5cdCAgICAgICAgZGVmZXJyZWQucmVqZWN0KFtcImF1dGhFcnJvclwiLCAnaG9tZSddKTtcblx0ICAgICAgfSBlbHNlIHtcblx0ICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKHRydWUpO1xuXHQgICAgICB9XG5cdCAgICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xuXHQgICAgfVxuXHQgIH1dKTtcblx0ICByZXR1cm4gQXV0aG9yaXphdGlvblNlcnZpY2U7XG5cdH0oKTtcblx0XG5cdGV4cG9ydHMuZGVmYXVsdCA9IEF1dGhvcml6YXRpb25TZXJ2aWNlO1xuXG4vKioqLyB9LFxuXG4vKioqLyA3MDI6XG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQndXNlIHN0cmljdCc7XG5cdFxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0ICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblx0XG5cdHZhciBfY2xhc3NDYWxsQ2hlY2syID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2OTUpO1xuXHRcblx0dmFyIF9jbGFzc0NhbGxDaGVjazMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbGFzc0NhbGxDaGVjazIpO1xuXHRcblx0dmFyIF9jcmVhdGVDbGFzczIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDY5Nik7XG5cdFxuXHR2YXIgX2NyZWF0ZUNsYXNzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZUNsYXNzMik7XG5cdFxuXHRmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXHRcblx0dmFyIENvbW1hbmRzU2VydmljZSA9IGZ1bmN0aW9uICgpIHtcblx0ICBDb21tYW5kc1NlcnZpY2UuJGluamVjdCA9IFtcIlJlc3Rhbmd1bGFyXCJdO1xuXHQgIGZ1bmN0aW9uIENvbW1hbmRzU2VydmljZShSZXN0YW5ndWxhcikge1xuXHQgICAgJ25nSW5qZWN0Jztcblx0XG5cdCAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMy5kZWZhdWx0KSh0aGlzLCBDb21tYW5kc1NlcnZpY2UpO1xuXHQgICAgdGhpcy5SZXN0YW5ndWxhciA9IFJlc3Rhbmd1bGFyO1xuXHQgICAgdGhpcy5TRVJWSUNFX05BTUUgPSAnZGV2aWNlcyc7XG5cdCAgfVxuXHRcblx0ICAoMCwgX2NyZWF0ZUNsYXNzMy5kZWZhdWx0KShDb21tYW5kc1NlcnZpY2UsIFt7XG5cdCAgICBrZXk6ICdwYW5lbFNsZWVwJyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBwYW5lbFNsZWVwKGtleSwgX3BhbmVsU2xlZXApIHtcblx0ICAgICAgLyoqIHBhbmVsU2xlZXA6IGJvb2xlYW4gKiovXG5cdCAgICAgIHZhciBwYXlsb2FkID0ge1xuXHQgICAgICAgIHBhbmVsU2xlZXA6IF9wYW5lbFNsZWVwXG5cdCAgICAgIH07XG5cdFxuXHQgICAgICB2YXIgcHJvbWlzZSA9IHRoaXMuUmVzdGFuZ3VsYXIub25lVXJsKHRoaXMuU0VSVklDRV9OQU1FLCAnYXBpL3YxL2RldmljZXMvJyArIGtleSArICcvcGFuZWwtc2xlZXAnKS5jdXN0b21QVVQocGF5bG9hZCk7XG5cdCAgICAgIHJldHVybiBwcm9taXNlO1xuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogJ3Jlc2V0Jyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiByZXNldChrZXkpIHtcblx0ICAgICAgdmFyIHByb21pc2UgPSB0aGlzLlJlc3Rhbmd1bGFyLm9uZVVybCh0aGlzLlNFUlZJQ0VfTkFNRSwgJ2FwaS92MS9kZXZpY2VzLycgKyBrZXkgKyAnL2NvbW1hbmRzL3Jlc2V0JykucG9zdCgpO1xuXHQgICAgICByZXR1cm4gcHJvbWlzZTtcblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6ICdjb250ZW50RGVsZXRlJyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBjb250ZW50RGVsZXRlKGtleSkge1xuXHQgICAgICB2YXIgcHJvbWlzZSA9IHRoaXMuUmVzdGFuZ3VsYXIub25lVXJsKHRoaXMuU0VSVklDRV9OQU1FLCAnYXBpL3YxL2RldmljZXMvJyArIGtleSArICcvY29tbWFuZHMvY29udGVudC1kZWxldGUnKS5wb3N0KCk7XG5cdCAgICAgIHJldHVybiBwcm9taXNlO1xuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogJ2NvbnRlbnRVcGRhdGUnLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIGNvbnRlbnRVcGRhdGUoa2V5KSB7XG5cdCAgICAgIHZhciBwcm9taXNlID0gdGhpcy5SZXN0YW5ndWxhci5vbmVVcmwodGhpcy5TRVJWSUNFX05BTUUsICdhcGkvdjEvZGV2aWNlcy8nICsga2V5ICsgJy9jb21tYW5kcy9jb250ZW50LXVwZGF0ZScpLnBvc3QoKTtcblx0ICAgICAgcmV0dXJuIHByb21pc2U7XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiAndXBkYXRlRGV2aWNlJyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiB1cGRhdGVEZXZpY2Uoa2V5KSB7XG5cdCAgICAgIHZhciBwcm9taXNlID0gdGhpcy5SZXN0YW5ndWxhci5vbmVVcmwodGhpcy5TRVJWSUNFX05BTUUsICdhcGkvdjEvZGV2aWNlcy8nICsga2V5ICsgJy9jb21tYW5kcy9yZWZyZXNoLWRldmljZS1yZXByZXNlbnRhdGlvbicpLnBvc3QoKTtcblx0ICAgICAgcmV0dXJuIHByb21pc2U7XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiAndG9nZ2xlRGlhZ25vc3RpY3MnLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIHRvZ2dsZURpYWdub3N0aWNzKGtleSkge1xuXHQgICAgICB2YXIgcHJvbWlzZSA9IHRoaXMuUmVzdGFuZ3VsYXIub25lVXJsKHRoaXMuU0VSVklDRV9OQU1FLCAnYXBpL3YxL2RldmljZXMvJyArIGtleSArICcvY29tbWFuZHMvZGlhZ25vc3RpY3MnKS5wb3N0KCk7XG5cdCAgICAgIHJldHVybiBwcm9taXNlO1xuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogJ3Jlc3RhcnQnLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIHJlc3RhcnQoa2V5KSB7XG5cdCAgICAgIHZhciBwcm9taXNlID0gdGhpcy5SZXN0YW5ndWxhci5vbmVVcmwodGhpcy5TRVJWSUNFX05BTUUsICdhcGkvdjEvZGV2aWNlcy8nICsga2V5ICsgJy9jb21tYW5kcy9yZXN0YXJ0JykucG9zdCgpO1xuXHQgICAgICByZXR1cm4gcHJvbWlzZTtcblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6ICdwb3N0TG9nJyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBwb3N0TG9nKGtleSkge1xuXHQgICAgICB2YXIgcHJvbWlzZSA9IHRoaXMuUmVzdGFuZ3VsYXIub25lVXJsKHRoaXMuU0VSVklDRV9OQU1FLCAnYXBpL3YxL2RldmljZXMvJyArIGtleSArICcvY29tbWFuZHMvcG9zdC1sb2cnKS5wb3N0KCk7XG5cdCAgICAgIHJldHVybiBwcm9taXNlO1xuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogJ3Bvd2VyT24nLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIHBvd2VyT24oa2V5KSB7XG5cdCAgICAgIHZhciBwcm9taXNlID0gdGhpcy5SZXN0YW5ndWxhci5vbmVVcmwodGhpcy5TRVJWSUNFX05BTUUsICdhcGkvdjEvZGV2aWNlcy8nICsga2V5ICsgJy9jb21tYW5kcy9wb3dlci1vbicpLnBvc3QoKTtcblx0ICAgICAgcmV0dXJuIHByb21pc2U7XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiAncG93ZXJPZmYnLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIHBvd2VyT2ZmKGtleSkge1xuXHQgICAgICB2YXIgcHJvbWlzZSA9IHRoaXMuUmVzdGFuZ3VsYXIub25lVXJsKHRoaXMuU0VSVklDRV9OQU1FLCAnYXBpL3YxL2RldmljZXMvJyArIGtleSArICcvY29tbWFuZHMvcG93ZXItb2ZmJykucG9zdCgpO1xuXHQgICAgICByZXR1cm4gcHJvbWlzZTtcblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6ICd2b2x1bWUnLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIHZvbHVtZShrZXksIF92b2x1bWUpIHtcblx0ICAgICAgdmFyIHBheWxvYWQgPSB7XG5cdCAgICAgICAgdm9sdW1lOiBfdm9sdW1lXG5cdCAgICAgIH07XG5cdCAgICAgIHZhciBwcm9taXNlID0gdGhpcy5SZXN0YW5ndWxhci5vbmVVcmwodGhpcy5TRVJWSUNFX05BTUUsICdhcGkvdjEvZGV2aWNlcy8nICsga2V5KS5jdXN0b21QT1NUKHBheWxvYWQsICdjb21tYW5kcy92b2x1bWUnKTtcblx0ICAgICAgcmV0dXJuIHByb21pc2U7XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiAnY3VzdG9tJyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBjdXN0b20oa2V5LCBjb21tYW5kKSB7XG5cdCAgICAgIHZhciBwYXlsb2FkID0ge1xuXHQgICAgICAgIGNvbW1hbmQ6IGNvbW1hbmRcblx0ICAgICAgfTtcblx0ICAgICAgdmFyIHByb21pc2UgPSB0aGlzLlJlc3Rhbmd1bGFyLm9uZVVybCh0aGlzLlNFUlZJQ0VfTkFNRSwgJ2FwaS92MS9kZXZpY2VzLycgKyBrZXkpLmN1c3RvbVBPU1QocGF5bG9hZCwgJ2NvbW1hbmRzL2N1c3RvbScpO1xuXHQgICAgICByZXR1cm4gcHJvbWlzZTtcblx0ICAgIH1cblx0ICB9XSk7XG5cdCAgcmV0dXJuIENvbW1hbmRzU2VydmljZTtcblx0fSgpO1xuXHRcblx0ZXhwb3J0cy5kZWZhdWx0ID0gQ29tbWFuZHNTZXJ2aWNlO1xuXG4vKioqLyB9LFxuXG4vKioqLyA3MDM6XG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQndXNlIHN0cmljdCc7XG5cdFxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0ICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblx0XG5cdHZhciBfY2xhc3NDYWxsQ2hlY2syID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2OTUpO1xuXHRcblx0dmFyIF9jbGFzc0NhbGxDaGVjazMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbGFzc0NhbGxDaGVjazIpO1xuXHRcblx0dmFyIF9jcmVhdGVDbGFzczIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDY5Nik7XG5cdFxuXHR2YXIgX2NyZWF0ZUNsYXNzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZUNsYXNzMik7XG5cdFxuXHR2YXIgX21vbWVudCA9IF9fd2VicGFja19yZXF1aXJlX18oMzcyKTtcblx0XG5cdHZhciBfbW9tZW50MiA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX21vbWVudCk7XG5cdFxuXHRmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXHRcblx0dmFyIERhdGVNYW5pcHVsYXRpb25TZXJ2aWNlID0gZnVuY3Rpb24gKCkge1xuXHQgIGZ1bmN0aW9uIERhdGVNYW5pcHVsYXRpb25TZXJ2aWNlKCkge1xuXHQgICAgKDAsIF9jbGFzc0NhbGxDaGVjazMuZGVmYXVsdCkodGhpcywgRGF0ZU1hbmlwdWxhdGlvblNlcnZpY2UpO1xuXHQgIH1cblx0XG5cdCAgKDAsIF9jcmVhdGVDbGFzczMuZGVmYXVsdCkoRGF0ZU1hbmlwdWxhdGlvblNlcnZpY2UsIFt7XG5cdCAgICBrZXk6ICdjb252ZXJ0VG9Nb21lbnRJZk5vdEFscmVhZHknLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIGNvbnZlcnRUb01vbWVudElmTm90QWxyZWFkeShkYXRlKSB7XG5cdCAgICAgIGlmICghX21vbWVudDIuZGVmYXVsdC5pc01vbWVudChkYXRlKSkge1xuXHQgICAgICAgIHJldHVybiAoMCwgX21vbWVudDIuZGVmYXVsdCkobmV3IERhdGUoZGF0ZSkpO1xuXHQgICAgICB9IGVsc2Uge1xuXHQgICAgICAgIHJldHVybiBkYXRlO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiAnY3JlYXRlRm9ybWF0dGVkU3RhcnRBbmRFbmREYXRlRnJvbVRvZGF5Jyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBjcmVhdGVGb3JtYXR0ZWRTdGFydEFuZEVuZERhdGVGcm9tVG9kYXkoZGF5c0JhY2spIHtcblx0ICAgICAgdmFyIHN0YXJ0VGltZSA9ICgwLCBfbW9tZW50Mi5kZWZhdWx0KSgpLmZvcm1hdCgnWVlZWS1NTS1ERCcpO1xuXHQgICAgICB2YXIgc3RhcnRUaW1lTWlkTmlnaHQgPSAoMCwgX21vbWVudDIuZGVmYXVsdCkoc3RhcnRUaW1lLCAnWVlZWS1NTS1ERCcpLmZvcm1hdCgnWVlZWS1NTS1ERCBoaDptbSBBJyk7XG5cdCAgICAgIHZhciBzdGFydFRpbWVFbmRPZkRheSA9ICgwLCBfbW9tZW50Mi5kZWZhdWx0KShzdGFydFRpbWVNaWROaWdodCwgJ1lZWVktTU0tREQgaGg6bW0gQScpLmFkZCgxLCAnZGF5Jykuc3VidHJhY3QoNjAsICdzZWNvbmRzJykuZm9ybWF0KCdZWVlZLU1NLUREIGhoOm1tIEEnKTtcblx0XG5cdCAgICAgIHZhciBlbmRUaW1lID0gKDAsIF9tb21lbnQyLmRlZmF1bHQpKCkuc3VidHJhY3QoMzAsICdkYXlzJykuZm9ybWF0KCdZWVlZLU1NLUREJyk7XG5cdCAgICAgIHZhciBlbmRUaW1lTWlkTmlnaHQgPSAoMCwgX21vbWVudDIuZGVmYXVsdCkoZW5kVGltZSwgJ1lZWVktTU0tREQnKS5mb3JtYXQoJ1lZWVktTU0tREQgaGg6bW0gQScpO1xuXHRcblx0ICAgICAgcmV0dXJuIFtlbmRUaW1lTWlkTmlnaHQsIHN0YXJ0VGltZUVuZE9mRGF5XTtcblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6ICdnZW5lcmF0ZUxvY2FsRnJvbVVUQycsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gZ2VuZXJhdGVMb2NhbEZyb21VVEMoVVRDVGltZSkge1xuXHQgICAgICB2YXIgbG9jYWxUaW1lID0gX21vbWVudDIuZGVmYXVsdC51dGMoVVRDVGltZSkudG9EYXRlKCk7XG5cdCAgICAgIHJldHVybiAoMCwgX21vbWVudDIuZGVmYXVsdCkobG9jYWxUaW1lKS5mb3JtYXQoJ1lZWVktTU0tREQgaGg6bW06c3MgQScpO1xuXHQgICAgfVxuXHQgIH1dKTtcblx0ICByZXR1cm4gRGF0ZU1hbmlwdWxhdGlvblNlcnZpY2U7XG5cdH0oKTtcblx0XG5cdGV4cG9ydHMuZGVmYXVsdCA9IERhdGVNYW5pcHVsYXRpb25TZXJ2aWNlO1xuXG4vKioqLyB9LFxuXG4vKioqLyA3MDQ6XG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQndXNlIHN0cmljdCc7XG5cdFxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0ICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblx0XG5cdHZhciBfY2xhc3NDYWxsQ2hlY2syID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2OTUpO1xuXHRcblx0dmFyIF9jbGFzc0NhbGxDaGVjazMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbGFzc0NhbGxDaGVjazIpO1xuXHRcblx0dmFyIF9jcmVhdGVDbGFzczIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDY5Nik7XG5cdFxuXHR2YXIgX2NyZWF0ZUNsYXNzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZUNsYXNzMik7XG5cdFxuXHRfX3dlYnBhY2tfcmVxdWlyZV9fKDYwNCk7XG5cdFxuXHRmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXHRcblx0dmFyIERldmljZXNTZXJ2aWNlID0gZnVuY3Rpb24gKCkge1xuXHQgIERldmljZXNTZXJ2aWNlLiRpbmplY3QgPSBbXCIkbG9nXCIsIFwiUmVzdGFuZ3VsYXJcIiwgXCIkcVwiLCBcIiRodHRwXCIsIFwiJHN0YXRlXCJdO1xuXHQgIGZ1bmN0aW9uIERldmljZXNTZXJ2aWNlKCRsb2csIFJlc3Rhbmd1bGFyLCAkcSwgJGh0dHAsICRzdGF0ZSkge1xuXHQgICAgJ25nSW5qZWN0Jztcblx0XG5cdCAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMy5kZWZhdWx0KSh0aGlzLCBEZXZpY2VzU2VydmljZSk7XG5cdCAgICB0aGlzLiRsb2cgPSAkbG9nO1xuXHQgICAgdGhpcy5SZXN0YW5ndWxhciA9IFJlc3Rhbmd1bGFyO1xuXHQgICAgdGhpcy4kcSA9ICRxO1xuXHQgICAgdGhpcy4kaHR0cCA9ICRodHRwO1xuXHQgICAgdGhpcy4kc3RhdGUgPSAkc3RhdGU7XG5cdCAgICB0aGlzLlNFUlZJQ0VfTkFNRSA9ICdkZXZpY2VzJztcblx0ICAgIHRoaXMudXJpQmFzZSA9ICd2MS9kZXZpY2VzJztcblx0ICB9XG5cdFxuXHQgICgwLCBfY3JlYXRlQ2xhc3MzLmRlZmF1bHQpKERldmljZXNTZXJ2aWNlLCBbe1xuXHQgICAga2V5OiAnYWRqdXN0Q29udHJvbHNNb2RlJyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBhZGp1c3RDb250cm9sc01vZGUoZGV2aWNlS2V5LCBjb250cm9sc01vZGUpIHtcblx0ICAgICAgdmFyIHBheWxvYWQgPSB7XG5cdCAgICAgICAgY29udHJvbHNNb2RlOiBjb250cm9sc01vZGVcblx0ICAgICAgfTtcblx0XG5cdCAgICAgIHZhciBwcm9taXNlID0gdGhpcy5SZXN0YW5ndWxhci5vbmVVcmwodGhpcy5TRVJWSUNFX05BTUUsICcvYXBpL3YxL2RldmljZXMvJyArIGRldmljZUtleSArICcvY29udHJvbHMtbW9kZScpLmN1c3RvbVBVVChwYXlsb2FkKTtcblx0ICAgICAgcmV0dXJuIHByb21pc2U7XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiAnZ2V0RGV2aWNlQnlNYWNBZGRyZXNzJyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBnZXREZXZpY2VCeU1hY0FkZHJlc3MobWFjQWRkcmVzcykge1xuXHQgICAgICB2YXIgdXJsID0gJ2FwaS92MS9kZXZpY2VzP21hY19hZGRyZXNzPScgKyBtYWNBZGRyZXNzO1xuXHQgICAgICByZXR1cm4gdGhpcy5SZXN0YW5ndWxhci5vbmVVcmwoJ2FwaS92MS9kZXZpY2VzJywgdXJsKS5nZXQoKTtcblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6ICdnZXREZXZpY2VCeUtleScsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0RGV2aWNlQnlLZXkoZGV2aWNlS2V5KSB7XG5cdCAgICAgIHZhciB1cmwgPSAnYXBpL3YxL2RldmljZXMvJyArIGRldmljZUtleTtcblx0ICAgICAgdmFyIHByb21pc2UgPSB0aGlzLlJlc3Rhbmd1bGFyLm9uZVVybCh0aGlzLlNFUlZJQ0VfTkFNRSwgdXJsKS5nZXQoKTtcblx0ICAgICAgcmV0dXJuIHByb21pc2U7XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiAncmV0cml2ZUZpbHRlcmVkRGljdGlvbmFyeVZhbHVlJyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiByZXRyaXZlRmlsdGVyZWREaWN0aW9uYXJ5VmFsdWUoZGljdGlvbmFyeSwgdmFsdWUpIHtcblx0ICAgICAgdmFyIHJlc3VsdHMgPSBbXTtcblx0ICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBkaWN0aW9uYXJ5Lmxlbmd0aDsgaSsrKSB7XG5cdCAgICAgICAgdmFyIGVhY2ggPSBkaWN0aW9uYXJ5W2ldO1xuXHQgICAgICAgIHJlc3VsdHMucHVzaChlYWNoW3ZhbHVlXSk7XG5cdCAgICAgIH1cblx0ICAgICAgcmV0dXJuIHJlc3VsdHM7XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiAnZXhlY3V0ZVNlYXJjaGluZ1BhcnRpYWxTZXJpYWxCeVRlbmFudCcsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gZXhlY3V0ZVNlYXJjaGluZ1BhcnRpYWxTZXJpYWxCeVRlbmFudCh0ZW5hbnRLZXksIHBhcnRpYWxTZWFyY2gsIHVubWFuYWdlZCkge1xuXHQgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuXHRcblx0ICAgICAgcmV0dXJuIHRoaXMuc2VhcmNoRGV2aWNlc0J5UGFydGlhbFNlcmlhbEJ5VGVuYW50KHRlbmFudEtleSwgcGFydGlhbFNlYXJjaCwgdW5tYW5hZ2VkKS50aGVuKGZ1bmN0aW9uIChyZXMpIHtcblx0ICAgICAgICB2YXIgcmVzdWx0ID0gcmVzW1wibWF0Y2hlc1wiXTtcblx0ICAgICAgICB2YXIgaXNNYWMgPSBmYWxzZTtcblx0ICAgICAgICB2YXIgaXNHQ01pZCA9IGZhbHNlO1xuXHQgICAgICAgIHZhciBzZXJpYWxEZXZpY2VzRGljdCA9IF90aGlzLmNvbnZlcnREZXZpY2VzQXJyYXlUb0RpY3Rpb25hcnlPYmoocmVzdWx0LCBpc01hYywgaXNHQ01pZCk7XG5cdCAgICAgICAgdmFyIGRldmljZVNlcmlhbHNPbmx5ID0gX3RoaXMucmV0cml2ZUZpbHRlcmVkRGljdGlvbmFyeVZhbHVlKHJlc3VsdCwgXCJzZXJpYWxcIik7XG5cdCAgICAgICAgcmV0dXJuIFtkZXZpY2VTZXJpYWxzT25seSwgc2VyaWFsRGV2aWNlc0RpY3RdO1xuXHQgICAgICB9KTtcblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6ICdleGVjdXRlU2VhcmNoaW5nUGFydGlhbFNlcmlhbEJ5RGlzdHJpYnV0b3InLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIGV4ZWN1dGVTZWFyY2hpbmdQYXJ0aWFsU2VyaWFsQnlEaXN0cmlidXRvcihkaXN0cmlidXRvcktleSwgcGFydGlhbFNlYXJjaCwgdW5tYW5hZ2VkKSB7XG5cdCAgICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXHRcblx0ICAgICAgcmV0dXJuIHRoaXMuc2VhcmNoRGV2aWNlc0J5UGFydGlhbFNlcmlhbChkaXN0cmlidXRvcktleSwgcGFydGlhbFNlYXJjaCwgdW5tYW5hZ2VkKS50aGVuKGZ1bmN0aW9uIChyZXMpIHtcblx0ICAgICAgICB2YXIgcmVzdWx0ID0gcmVzW1wibWF0Y2hlc1wiXTtcblx0ICAgICAgICB2YXIgc2VyaWFsRGV2aWNlc0RpY3QgPSB2b2lkIDA7XG5cdCAgICAgICAgdmFyIGlzTWFjID0gZmFsc2U7XG5cdCAgICAgICAgdmFyIGlzR0NNaWQgPSBmYWxzZTtcblx0ICAgICAgICBpZiAodW5tYW5hZ2VkKSB7XG5cdCAgICAgICAgICBzZXJpYWxEZXZpY2VzRGljdCA9IF90aGlzMi5jb252ZXJ0RGV2aWNlc0FycmF5VG9EaWN0aW9uYXJ5T2JqKHJlc3VsdCwgaXNNYWMsIGlzR0NNaWQpO1xuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICBzZXJpYWxEZXZpY2VzRGljdCA9IF90aGlzMi5jb252ZXJ0RGV2aWNlc0FycmF5VG9EaWN0aW9uYXJ5T2JqKHJlc3VsdCwgaXNNYWMsIGlzR0NNaWQpO1xuXHQgICAgICAgIH1cblx0ICAgICAgICB2YXIgc2VyaWFsRGV2aWNlc09ubHkgPSBfdGhpczIucmV0cml2ZUZpbHRlcmVkRGljdGlvbmFyeVZhbHVlKHJlc3VsdCwgXCJzZXJpYWxcIik7XG5cdCAgICAgICAgcmV0dXJuIFtzZXJpYWxEZXZpY2VzT25seSwgc2VyaWFsRGV2aWNlc0RpY3RdO1xuXHQgICAgICB9KTtcblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6ICdleGVjdXRlU2VhcmNoaW5nUGFydGlhbE1hY0J5VGVuYW50Jyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBleGVjdXRlU2VhcmNoaW5nUGFydGlhbE1hY0J5VGVuYW50KHRlbmFudEtleSwgcGFydGlhbFNlYXJjaCwgdW5tYW5hZ2VkKSB7XG5cdCAgICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXHRcblx0ICAgICAgcmV0dXJuIHRoaXMuc2VhcmNoRGV2aWNlc0J5UGFydGlhbE1hY0J5VGVuYW50KHRlbmFudEtleSwgcGFydGlhbFNlYXJjaCwgdW5tYW5hZ2VkKS50aGVuKGZ1bmN0aW9uIChyZXMpIHtcblx0ICAgICAgICB2YXIgcmVzdWx0ID0gcmVzW1wibWF0Y2hlc1wiXTtcblx0ICAgICAgICB2YXIgbWFjRGV2aWNlc0RpY3QgPSBfdGhpczMuY29udmVydERldmljZXNBcnJheVRvRGljdGlvbmFyeU9iaihyZXN1bHQsIHRydWUpO1xuXHQgICAgICAgIHZhciBkZXZpY2VNYWNzT25seSA9IF90aGlzMy5yZXRyaXZlRmlsdGVyZWREaWN0aW9uYXJ5VmFsdWUocmVzdWx0LCBcIm1hY1wiKTtcblx0ICAgICAgICByZXR1cm4gW2RldmljZU1hY3NPbmx5LCBtYWNEZXZpY2VzRGljdF07XG5cdCAgICAgIH0pO1xuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogJ2V4ZWN1dGVTZWFyY2hpbmdQYXJ0aWFsTWFjQnlEaXN0cmlidXRvcicsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gZXhlY3V0ZVNlYXJjaGluZ1BhcnRpYWxNYWNCeURpc3RyaWJ1dG9yKGRpc3RyaWJ1dG9yS2V5LCBwYXJ0aWFsU2VhcmNoLCB1bm1hbmFnZWQpIHtcblx0ICAgICAgdmFyIF90aGlzNCA9IHRoaXM7XG5cdFxuXHQgICAgICByZXR1cm4gdGhpcy5zZWFyY2hEZXZpY2VzQnlQYXJ0aWFsTWFjKGRpc3RyaWJ1dG9yS2V5LCBwYXJ0aWFsU2VhcmNoLCB1bm1hbmFnZWQpLnRoZW4oZnVuY3Rpb24gKHJlcykge1xuXHQgICAgICAgIHZhciByZXN1bHQgPSByZXNbXCJtYXRjaGVzXCJdO1xuXHQgICAgICAgIHZhciBtYWNEZXZpY2VzRGljdCA9IHZvaWQgMDtcblx0ICAgICAgICB2YXIgaXNNYWMgPSB0cnVlO1xuXHQgICAgICAgIHZhciBpc0dDTWlkID0gZmFsc2U7XG5cdCAgICAgICAgaWYgKHVubWFuYWdlZCkge1xuXHQgICAgICAgICAgbWFjRGV2aWNlc0RpY3QgPSBfdGhpczQuY29udmVydERldmljZXNBcnJheVRvRGljdGlvbmFyeU9iaihyZXN1bHQsIGlzTWFjLCBpc0dDTWlkKTtcblx0ICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgbWFjRGV2aWNlc0RpY3QgPSBfdGhpczQuY29udmVydERldmljZXNBcnJheVRvRGljdGlvbmFyeU9iaihyZXN1bHQsIGlzTWFjLCBpc0dDTWlkKTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgdmFyIG1hY0RldmljZXMgPSBfdGhpczQucmV0cml2ZUZpbHRlcmVkRGljdGlvbmFyeVZhbHVlKHJlc3VsdCwgXCJtYWNcIik7XG5cdCAgICAgICAgcmV0dXJuIFttYWNEZXZpY2VzLCBtYWNEZXZpY2VzRGljdF07XG5cdCAgICAgIH0pO1xuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogJ2V4ZWN1dGVTZWFyY2hpbmdQYXJ0aWFsR0NNaWRCeVRlbmFudCcsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gZXhlY3V0ZVNlYXJjaGluZ1BhcnRpYWxHQ01pZEJ5VGVuYW50KHRlbmFudEtleSwgcGFydGlhbFNlYXJjaCwgdW5tYW5hZ2VkKSB7XG5cdCAgICAgIHZhciBfdGhpczUgPSB0aGlzO1xuXHRcblx0ICAgICAgcmV0dXJuIHRoaXMuc2VhcmNoRGlzdHJpYnV0b3JEZXZpY2VzQnlQYXJ0aWFsR0NNaWRCeVRlbmFudCh0ZW5hbnRLZXksIHBhcnRpYWxTZWFyY2gsIHVubWFuYWdlZCkudGhlbihmdW5jdGlvbiAocmVzKSB7XG5cdCAgICAgICAgdmFyIHJlc3VsdCA9IHJlc1tcIm1hdGNoZXNcIl07XG5cdCAgICAgICAgdmFyIGdjbWlkRGV2aWNlc0RpY3QgPSBfdGhpczUuY29udmVydERldmljZXNBcnJheVRvRGljdGlvbmFyeU9iaihyZXN1bHQsIGZhbHNlLCB0cnVlKTtcblx0ICAgICAgICB2YXIgZ2NtaWREZXZpY2VzT25seSA9IF90aGlzNS5yZXRyaXZlRmlsdGVyZWREaWN0aW9uYXJ5VmFsdWUocmVzdWx0LCBcImdjbWlkXCIpO1xuXHQgICAgICAgIHJldHVybiBbZ2NtaWREZXZpY2VzT25seSwgZ2NtaWREZXZpY2VzRGljdF07XG5cdCAgICAgIH0pO1xuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogJ2V4ZWN1dGVTZWFyY2hpbmdQYXJ0aWFsR0NNaWRCeURpc3RyaWJ1dG9yJyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBleGVjdXRlU2VhcmNoaW5nUGFydGlhbEdDTWlkQnlEaXN0cmlidXRvcihkaXN0cmlidXRvcktleSwgcGFydGlhbFNlYXJjaCwgdW5tYW5hZ2VkKSB7XG5cdCAgICAgIHZhciBfdGhpczYgPSB0aGlzO1xuXHRcblx0ICAgICAgcmV0dXJuIHRoaXMuc2VhcmNoRGlzdHJpYnV0b3JEZXZpY2VzQnlQYXJ0aWFsR0NNaWQoZGlzdHJpYnV0b3JLZXksIHBhcnRpYWxTZWFyY2gsIHVubWFuYWdlZCkudGhlbihmdW5jdGlvbiAocmVzKSB7XG5cdCAgICAgICAgdmFyIHJlc3VsdCA9IHJlc1tcIm1hdGNoZXNcIl07XG5cdCAgICAgICAgdmFyIEdDTWlkRGV2aWNlc0RpY3QgPSB2b2lkIDA7XG5cdCAgICAgICAgaWYgKHVubWFuYWdlZCkge1xuXHQgICAgICAgICAgR0NNaWREZXZpY2VzRGljdCA9IF90aGlzNi5jb252ZXJ0RGV2aWNlc0FycmF5VG9EaWN0aW9uYXJ5T2JqKHJlc3VsdCwgZmFsc2UsIHRydWUpO1xuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICBHQ01pZERldmljZXNEaWN0ID0gX3RoaXM2LmNvbnZlcnREZXZpY2VzQXJyYXlUb0RpY3Rpb25hcnlPYmoocmVzdWx0LCBmYWxzZSwgdHJ1ZSk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIHZhciBnY21pZERldmljZXNPbmx5ID0gX3RoaXM2LnJldHJpdmVGaWx0ZXJlZERpY3Rpb25hcnlWYWx1ZShyZXN1bHQsIFwiZ2NtaWRcIik7XG5cdCAgICAgICAgcmV0dXJuIFtnY21pZERldmljZXNPbmx5LCBHQ01pZERldmljZXNEaWN0XTtcblx0ICAgICAgfSk7XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiAncmVqZWN0ZWRQcm9taXNlJyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiByZWplY3RlZFByb21pc2UoKSB7XG5cdCAgICAgIHZhciBkZXZpY2VEZWZlcnJlZCA9IHRoaXMuJHEuZGVmZXIoKTtcblx0ICAgICAgZGV2aWNlRGVmZXJyZWQucmVqZWN0KCk7XG5cdCAgICAgIHJldHVybiBkZXZpY2VEZWZlcnJlZC5wcm9taXNlO1xuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogJ3NlYXJjaERldmljZXMnLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIHNlYXJjaERldmljZXMocGFydGlhbFNlYXJjaCwgYnV0dG9uLCBieVRlbmFudCwgdGVuYW50S2V5LCBkaXN0cmlidXRvcktleSwgdW5tYW5hZ2VkKSB7XG5cdCAgICAgIHZhciBkZWZlcnJlZCA9IHRoaXMuJHEuZGVmZXIoKTtcblx0ICAgICAgdmFyIGRldmljZXNQcm9taXNlID0gdm9pZCAwO1xuXHQgICAgICBpZiAocGFydGlhbFNlYXJjaCkge1xuXHQgICAgICAgIGlmIChwYXJ0aWFsU2VhcmNoLmxlbmd0aCA+IDIpIHtcblx0ICAgICAgICAgIGlmIChidXR0b24gPT09IFwiU2VyaWFsIE51bWJlclwiKSB7XG5cdCAgICAgICAgICAgIGlmIChieVRlbmFudCkge1xuXHQgICAgICAgICAgICAgIGRldmljZXNQcm9taXNlID0gdGhpcy5leGVjdXRlU2VhcmNoaW5nUGFydGlhbFNlcmlhbEJ5VGVuYW50KHRlbmFudEtleSwgcGFydGlhbFNlYXJjaCwgdW5tYW5hZ2VkKTtcblx0ICAgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgICBkZXZpY2VzUHJvbWlzZSA9IHRoaXMuZXhlY3V0ZVNlYXJjaGluZ1BhcnRpYWxTZXJpYWxCeURpc3RyaWJ1dG9yKGRpc3RyaWJ1dG9yS2V5LCBwYXJ0aWFsU2VhcmNoLCB1bm1hbmFnZWQpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICB9IGVsc2UgaWYgKGJ1dHRvbiA9PT0gXCJNQUNcIikge1xuXHQgICAgICAgICAgICBpZiAoYnlUZW5hbnQpIHtcblx0ICAgICAgICAgICAgICBkZXZpY2VzUHJvbWlzZSA9IHRoaXMuZXhlY3V0ZVNlYXJjaGluZ1BhcnRpYWxNYWNCeVRlbmFudCh0ZW5hbnRLZXksIHBhcnRpYWxTZWFyY2gsIHVubWFuYWdlZCk7XG5cdCAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgZGV2aWNlc1Byb21pc2UgPSB0aGlzLmV4ZWN1dGVTZWFyY2hpbmdQYXJ0aWFsTWFjQnlEaXN0cmlidXRvcihkaXN0cmlidXRvcktleSwgcGFydGlhbFNlYXJjaCwgdW5tYW5hZ2VkKTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgICAgaWYgKGJ5VGVuYW50KSB7XG5cdCAgICAgICAgICAgICAgZGV2aWNlc1Byb21pc2UgPSB0aGlzLmV4ZWN1dGVTZWFyY2hpbmdQYXJ0aWFsR0NNaWRCeVRlbmFudCh0ZW5hbnRLZXksIHBhcnRpYWxTZWFyY2gsIHVubWFuYWdlZCk7XG5cdCAgICAgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICAgICAgZGV2aWNlc1Byb21pc2UgPSB0aGlzLmV4ZWN1dGVTZWFyY2hpbmdQYXJ0aWFsR0NNaWRCeURpc3RyaWJ1dG9yKGRpc3RyaWJ1dG9yS2V5LCBwYXJ0aWFsU2VhcmNoLCB1bm1hbmFnZWQpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgIGRldmljZXNQcm9taXNlID0gdGhpcy5yZWplY3RlZFByb21pc2UoKTtcblx0ICAgICAgICB9XG5cdCAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgZGV2aWNlc1Byb21pc2UgPSB0aGlzLnJlamVjdGVkUHJvbWlzZSgpO1xuXHQgICAgICB9XG5cdFxuXHQgICAgICBkZXZpY2VzUHJvbWlzZS50aGVuKGZ1bmN0aW9uIChkZXZpY2VzUmVzdWx0KSB7XG5cdCAgICAgICAgZGVmZXJyZWQucmVzb2x2ZSh7XG5cdCAgICAgICAgICBcInN1Y2Nlc3NcIjogdHJ1ZSxcblx0ICAgICAgICAgIFwiZGV2aWNlc1wiOiBkZXZpY2VzUmVzdWx0XG5cdCAgICAgICAgfSk7XG5cdCAgICAgIH0pO1xuXHRcblx0ICAgICAgZGV2aWNlc1Byb21pc2UuY2F0Y2goZnVuY3Rpb24gKGRldmljZXNSZXN1bHQpIHtcblx0ICAgICAgICBkZWZlcnJlZC5yZXNvbHZlKHtcblx0ICAgICAgICAgIFwic3VjY2Vzc1wiOiBmYWxzZSxcblx0ICAgICAgICAgIFwiZGV2aWNlc1wiOiBbXVxuXHQgICAgICAgIH0pO1xuXHQgICAgICB9KTtcblx0XG5cdCAgICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogJ2NvbnZlcnREZXZpY2VzQXJyYXlUb0RpY3Rpb25hcnlPYmonLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIGNvbnZlcnREZXZpY2VzQXJyYXlUb0RpY3Rpb25hcnlPYmoodGhlQXJyYXksIG1hYywgZ2NtKSB7XG5cdCAgICAgIC8qKiBDb252ZXJ0cyBhcnJheSB0byBkaWN0aW9uYXJ5IHdpdGggbWFjLCBnY21pZCwgb3Igc2VyaWFsIGFzIHRoZSBrZXkgKiovXG5cdCAgICAgIHZhciBkZXZpY2VzID0ge307XG5cdCAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhlQXJyYXkubGVuZ3RoOyBpKyspIHtcblx0ICAgICAgICB2YXIgaXRlbSA9IHRoZUFycmF5W2ldO1xuXHQgICAgICAgIGlmIChtYWMpIHtcblx0ICAgICAgICAgIGRldmljZXNbaXRlbS5tYWNdID0gaXRlbTtcblx0ICAgICAgICB9IGVsc2UgaWYgKGdjbSkge1xuXHQgICAgICAgICAgZGV2aWNlc1tpdGVtLmdjbWlkXSA9IGl0ZW07XG5cdCAgICAgICAgfSBlbHNlIHtcblx0ICAgICAgICAgIGRldmljZXNbaXRlbS5zZXJpYWxdID0gaXRlbTtcblx0ICAgICAgICB9XG5cdCAgICAgIH1cblx0ICAgICAgcmV0dXJuIGRldmljZXM7XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiAnZWRpdEl0ZW0nLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIGVkaXRJdGVtKGl0ZW0sIGZyb21EZXZpY2VzKSB7XG5cdCAgICAgIGlmICghZnJvbURldmljZXMpIHtcblx0ICAgICAgICBmcm9tRGV2aWNlcyA9IGZhbHNlO1xuXHQgICAgICB9XG5cdCAgICAgIHRoaXMuJHN0YXRlLmdvKCdlZGl0RGV2aWNlJywge1xuXHQgICAgICAgIGRldmljZUtleTogaXRlbS5rZXksXG5cdCAgICAgICAgdGVuYW50S2V5OiBpdGVtLnRlbmFudEtleSxcblx0ICAgICAgICBmcm9tRGV2aWNlczogZnJvbURldmljZXNcblx0ICAgICAgfSk7XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiAncHJlcHJhdGVGb3JFZGl0VmlldycsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gcHJlcHJhdGVGb3JFZGl0VmlldyhidXR0b24sIHRlbmFudEtleSwgc2VhcmNoVGV4dCwgbWFjRGV2aWNlcywgc2VyaWFsRGV2aWNlcywgZ2NtaWREZXZpY2VzKSB7XG5cdCAgICAgIHZhciBtYWMgPSB2b2lkIDAsXG5cdCAgICAgICAgICBzZXJpYWwgPSB2b2lkIDAsXG5cdCAgICAgICAgICBnY21pZCA9IHZvaWQgMDtcblx0XG5cdCAgICAgIG1hYyA9IGJ1dHRvbiA9PT0gXCJNQUNcIjtcblx0ICAgICAgc2VyaWFsID0gYnV0dG9uID09PSBcIlNlcmlhbCBOdW1iZXJcIjtcblx0ICAgICAgZ2NtaWQgPSBidXR0b24gPT09IFwiR0NNIElEXCI7XG5cdFxuXHQgICAgICBpZiAobWFjKSB7XG5cdCAgICAgICAgcmV0dXJuIHRoaXMuZWRpdEl0ZW0obWFjRGV2aWNlc1tzZWFyY2hUZXh0XSk7XG5cdCAgICAgIH0gZWxzZSBpZiAoc2VyaWFsKSB7XG5cdCAgICAgICAgcmV0dXJuIHRoaXMuZWRpdEl0ZW0oc2VyaWFsRGV2aWNlc1tzZWFyY2hUZXh0XSk7XG5cdCAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgcmV0dXJuIHRoaXMuZWRpdEl0ZW0oZ2NtaWREZXZpY2VzW3NlYXJjaFRleHRdKTtcblx0ICAgICAgfVxuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogJ2dldElzc3Vlc0J5S2V5Jyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRJc3N1ZXNCeUtleShkZXZpY2VLZXksIHN0YXJ0RXBvY2gsIGVuZEVwb2NoLCBwcmV2LCBuZXh0KSB7XG5cdCAgICAgIHByZXYgPSBwcmV2ID09PSB1bmRlZmluZWQgfHwgbnVsbCA/IG51bGwgOiBwcmV2O1xuXHQgICAgICBuZXh0ID0gbmV4dCA9PT0gdW5kZWZpbmVkIHx8IG51bGwgPyBudWxsIDogbmV4dDtcblx0ICAgICAgdmFyIHVybCA9ICcvYXBpL3YxL2RldmljZXMvJyArIHByZXYgKyAnLycgKyBuZXh0ICsgJy8nICsgZGV2aWNlS2V5ICsgJy9pc3N1ZXM/c3RhcnQ9JyArIHN0YXJ0RXBvY2ggKyAnJmVuZD0nICsgZW5kRXBvY2g7XG5cdCAgICAgIHZhciBwcm9taXNlID0gdGhpcy5SZXN0YW5ndWxhci5vbmVVcmwodGhpcy5TRVJWSUNFX05BTUUsIHVybCkuZ2V0KCk7XG5cdCAgICAgIHJldHVybiBwcm9taXNlO1xuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogJ2dldENvbW1hbmRFdmVudHNCeUtleScsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0Q29tbWFuZEV2ZW50c0J5S2V5KGRldmljZUtleSwgcHJldiwgbmV4dCkge1xuXHQgICAgICBwcmV2ID0gcHJldiA9PT0gdW5kZWZpbmVkIHx8IG51bGwgPyBudWxsIDogcHJldjtcblx0ICAgICAgbmV4dCA9IG5leHQgPT09IHVuZGVmaW5lZCB8fCBudWxsID8gbnVsbCA6IG5leHQ7XG5cdCAgICAgIHZhciB1cmwgPSAnL2FwaS92MS9wbGF5ZXItY29tbWFuZC1ldmVudHMvJyArIHByZXYgKyAnLycgKyBuZXh0ICsgJy8nICsgZGV2aWNlS2V5O1xuXHQgICAgICB2YXIgcHJvbWlzZSA9IHRoaXMuUmVzdGFuZ3VsYXIub25lVXJsKHRoaXMuU0VSVklDRV9OQU1FLCB1cmwpLmdldCgpO1xuXHQgICAgICByZXR1cm4gcHJvbWlzZTtcblx0ICAgIH1cblx0XG5cdCAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdCAgICAvLyBURU5BTlQgVklFV1xuXHQgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHRcblx0ICB9LCB7XG5cdCAgICBrZXk6ICdnZXREZXZpY2VzQnlUZW5hbnQnLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIGdldERldmljZXNCeVRlbmFudCh0ZW5hbnRLZXksIHByZXYsIG5leHQpIHtcblx0ICAgICAgaWYgKHRlbmFudEtleSAhPT0gdW5kZWZpbmVkKSB7XG5cdCAgICAgICAgdmFyIHVybCA9IHRoaXMubWFrZURldmljZXNCeVRlbmFudFVSTCh0ZW5hbnRLZXksIHByZXYsIG5leHQsIGZhbHNlKTtcblx0ICAgICAgICByZXR1cm4gdGhpcy5SZXN0YW5ndWxhci5vbmVVcmwodGhpcy5TRVJWSUNFX05BTUUsIHVybCkuZ2V0KCk7XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6ICdnZXRVbm1hbmFnZWREZXZpY2VzQnlUZW5hbnQnLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIGdldFVubWFuYWdlZERldmljZXNCeVRlbmFudCh0ZW5hbnRLZXksIHByZXYsIG5leHQpIHtcblx0ICAgICAgaWYgKHRlbmFudEtleSAhPT0gdW5kZWZpbmVkKSB7XG5cdCAgICAgICAgdmFyIGRlZmVycmVkID0gdGhpcy4kcS5kZWZlcigpO1xuXHQgICAgICAgIHZhciB1cmwgPSB0aGlzLm1ha2VEZXZpY2VzQnlUZW5hbnRVUkwodGVuYW50S2V5LCBwcmV2LCBuZXh0LCB0cnVlKTtcblx0ICAgICAgICByZXR1cm4gdGhpcy5SZXN0YW5ndWxhci5vbmVVcmwodGhpcy5TRVJWSUNFX05BTUUsIHVybCkuZ2V0KCk7XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6ICdzZWFyY2hEZXZpY2VzQnlQYXJ0aWFsU2VyaWFsQnlUZW5hbnQnLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIHNlYXJjaERldmljZXNCeVBhcnRpYWxTZXJpYWxCeVRlbmFudCh0ZW5hbnRLZXksIHBhcnRpYWxfc2VyaWFsLCB1bm1hbmFnZWQpIHtcblx0ICAgICAgaWYgKHRlbmFudEtleSAhPT0gdW5kZWZpbmVkKSB7XG5cdCAgICAgICAgdmFyIHVybCA9ICcvYXBpL3YxL3RlbmFudHMvc2VhcmNoLycgKyB0ZW5hbnRLZXkgKyAnL2RldmljZXM/dW5tYW5hZ2VkPScgKyB1bm1hbmFnZWQgKyAnJnBhcnRpYWxfc2VyaWFsPScgKyBwYXJ0aWFsX3NlcmlhbDtcblx0ICAgICAgICB2YXIgcHJvbWlzZSA9IHRoaXMuUmVzdGFuZ3VsYXIub25lVXJsKHRoaXMuU0VSVklDRV9OQU1FLCB1cmwpLmdldCgpO1xuXHQgICAgICAgIHJldHVybiBwcm9taXNlO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiAnc2VhcmNoRGV2aWNlc0J5UGFydGlhbE1hY0J5VGVuYW50Jyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBzZWFyY2hEZXZpY2VzQnlQYXJ0aWFsTWFjQnlUZW5hbnQodGVuYW50S2V5LCBwYXJ0aWFsX21hYywgdW5tYW5hZ2VkKSB7XG5cdCAgICAgIGlmICh0ZW5hbnRLZXkgIT09IHVuZGVmaW5lZCkge1xuXHQgICAgICAgIHZhciB1cmwgPSAnL2FwaS92MS90ZW5hbnRzL3NlYXJjaC8nICsgdGVuYW50S2V5ICsgJy9kZXZpY2VzP3VubWFuYWdlZD0nICsgdW5tYW5hZ2VkICsgJyZwYXJ0aWFsX21hYz0nICsgcGFydGlhbF9tYWM7XG5cdCAgICAgICAgdmFyIHByb21pc2UgPSB0aGlzLlJlc3Rhbmd1bGFyLm9uZVVybCh0aGlzLlNFUlZJQ0VfTkFNRSwgdXJsKS5nZXQoKTtcblx0ICAgICAgICByZXR1cm4gcHJvbWlzZTtcblx0ICAgICAgfVxuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogJ3NlYXJjaERpc3RyaWJ1dG9yRGV2aWNlc0J5UGFydGlhbEdDTWlkQnlUZW5hbnQnLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIHNlYXJjaERpc3RyaWJ1dG9yRGV2aWNlc0J5UGFydGlhbEdDTWlkQnlUZW5hbnQodGVuYW50S2V5LCBwYXJ0aWFsX2djbWlkLCB1bm1hbmFnZWQpIHtcblx0ICAgICAgaWYgKHRlbmFudEtleSAhPT0gdW5kZWZpbmVkKSB7XG5cdCAgICAgICAgdmFyIHVybCA9ICcvYXBpL3YxL3RlbmFudHMvc2VhcmNoLycgKyB0ZW5hbnRLZXkgKyAnL2RldmljZXM/dW5tYW5hZ2VkPScgKyB1bm1hbmFnZWQgKyAnJnBhcnRpYWxfZ2NtaWQ9JyArIHBhcnRpYWxfZ2NtaWQ7XG5cdCAgICAgICAgdmFyIHByb21pc2UgPSB0aGlzLlJlc3Rhbmd1bGFyLm9uZVVybCh0aGlzLlNFUlZJQ0VfTkFNRSwgdXJsKS5nZXQoKTtcblx0ICAgICAgICByZXR1cm4gcHJvbWlzZTtcblx0ICAgICAgfVxuXHQgICAgfVxuXHRcblx0ICAgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0ICAgIC8vIERFVklDRVMgVklFV1xuXHQgICAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHRcblx0ICB9LCB7XG5cdCAgICBrZXk6ICdzZWFyY2hEZXZpY2VzQnlQYXJ0aWFsU2VyaWFsJyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBzZWFyY2hEZXZpY2VzQnlQYXJ0aWFsU2VyaWFsKGRpc3RyaWJ1dG9yS2V5LCBwYXJ0aWFsX3NlcmlhbCwgdW5tYW5hZ2VkKSB7XG5cdCAgICAgIGlmIChkaXN0cmlidXRvcktleSAhPT0gdW5kZWZpbmVkKSB7XG5cdCAgICAgICAgdmFyIHVybCA9ICcvYXBpL3YxL2Rpc3RyaWJ1dG9ycy9zZWFyY2gvJyArIGRpc3RyaWJ1dG9yS2V5ICsgJy9kZXZpY2VzP3VubWFuYWdlZD0nICsgdW5tYW5hZ2VkICsgJyZwYXJ0aWFsX3NlcmlhbD0nICsgcGFydGlhbF9zZXJpYWw7XG5cdCAgICAgICAgdmFyIHByb21pc2UgPSB0aGlzLlJlc3Rhbmd1bGFyLm9uZVVybCh0aGlzLlNFUlZJQ0VfTkFNRSwgdXJsKS5nZXQoKTtcblx0ICAgICAgICByZXR1cm4gcHJvbWlzZTtcblx0ICAgICAgfVxuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogJ3NlYXJjaERldmljZXNCeVBhcnRpYWxNYWMnLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIHNlYXJjaERldmljZXNCeVBhcnRpYWxNYWMoZGlzdHJpYnV0b3JLZXksIHBhcnRpYWxfbWFjLCB1bm1hbmFnZWQpIHtcblx0ICAgICAgaWYgKGRpc3RyaWJ1dG9yS2V5ICE9PSB1bmRlZmluZWQpIHtcblx0ICAgICAgICB2YXIgdXJsID0gJy9hcGkvdjEvZGlzdHJpYnV0b3JzL3NlYXJjaC8nICsgZGlzdHJpYnV0b3JLZXkgKyAnL2RldmljZXM/dW5tYW5hZ2VkPScgKyB1bm1hbmFnZWQgKyAnJnBhcnRpYWxfbWFjPScgKyBwYXJ0aWFsX21hYztcblx0ICAgICAgICB2YXIgcHJvbWlzZSA9IHRoaXMuUmVzdGFuZ3VsYXIub25lVXJsKHRoaXMuU0VSVklDRV9OQU1FLCB1cmwpLmdldCgpO1xuXHQgICAgICAgIHJldHVybiBwcm9taXNlO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiAnc2VhcmNoRGlzdHJpYnV0b3JEZXZpY2VzQnlQYXJ0aWFsR0NNaWQnLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIHNlYXJjaERpc3RyaWJ1dG9yRGV2aWNlc0J5UGFydGlhbEdDTWlkKGRpc3RyaWJ1dG9yS2V5LCBwYXJ0aWFsX2djbWlkLCB1bm1hbmFnZWQpIHtcblx0ICAgICAgaWYgKGRpc3RyaWJ1dG9yS2V5ICE9PSB1bmRlZmluZWQpIHtcblx0ICAgICAgICB2YXIgdXJsID0gJy9hcGkvdjEvZGlzdHJpYnV0b3JzL3NlYXJjaC8nICsgZGlzdHJpYnV0b3JLZXkgKyAnL2RldmljZXM/dW5tYW5hZ2VkPScgKyB1bm1hbmFnZWQgKyAnJnBhcnRpYWxfZ2NtaWQ9JyArIHBhcnRpYWxfZ2NtaWQ7XG5cdCAgICAgICAgdmFyIHByb21pc2UgPSB0aGlzLlJlc3Rhbmd1bGFyLm9uZVVybCh0aGlzLlNFUlZJQ0VfTkFNRSwgdXJsKS5nZXQoKTtcblx0ICAgICAgICByZXR1cm4gcHJvbWlzZTtcblx0ICAgICAgfVxuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogJ2dldERldmljZXNCeURpc3RyaWJ1dG9yJyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBnZXREZXZpY2VzQnlEaXN0cmlidXRvcihkaXN0cmlidXRvcktleSwgcHJldiwgbmV4dCkge1xuXHQgICAgICBpZiAoZGlzdHJpYnV0b3JLZXkgIT09IHVuZGVmaW5lZCkge1xuXHQgICAgICAgIHZhciB1cmwgPSB0aGlzLm1ha2VEZXZpY2VzQnlEaXN0cmlidXRvclVSTChkaXN0cmlidXRvcktleSwgcHJldiwgbmV4dCwgZmFsc2UpO1xuXHQgICAgICAgIHJldHVybiB0aGlzLlJlc3Rhbmd1bGFyLm9uZVVybCh0aGlzLlNFUlZJQ0VfTkFNRSwgdXJsKS5nZXQoKTtcblx0ICAgICAgfVxuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogJ2dldFVubWFuYWdlZERldmljZXNCeURpc3RyaWJ1dG9yJyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRVbm1hbmFnZWREZXZpY2VzQnlEaXN0cmlidXRvcihkaXN0cmlidXRvcktleSwgcHJldiwgbmV4dCkge1xuXHQgICAgICBpZiAoZGlzdHJpYnV0b3JLZXkgIT09IHVuZGVmaW5lZCkge1xuXHQgICAgICAgIHZhciB1cmwgPSB0aGlzLm1ha2VEZXZpY2VzQnlEaXN0cmlidXRvclVSTChkaXN0cmlidXRvcktleSwgcHJldiwgbmV4dCwgdHJ1ZSk7XG5cdCAgICAgICAgcmV0dXJuIHRoaXMuUmVzdGFuZ3VsYXIub25lVXJsKHRoaXMuU0VSVklDRV9OQU1FLCB1cmwpLmdldCgpO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiAnZ2V0RGV2aWNlcycsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0RGV2aWNlcygpIHtcblx0ICAgICAgdmFyIHByb21pc2UgPSB0aGlzLlJlc3Rhbmd1bGFyLmFsbCh0aGlzLlNFUlZJQ0VfTkFNRSkuZ2V0TGlzdCgpO1xuXHQgICAgICByZXR1cm4gcHJvbWlzZTtcblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6ICdzYXZlJyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBzYXZlKGRldmljZSkge1xuXHQgICAgICBpZiAoZGV2aWNlLmtleSAhPT0gdW5kZWZpbmVkKSB7XG5cdCAgICAgICAgdmFyIHByb21pc2UgPSBkZXZpY2UucHV0KCk7XG5cdCAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgdmFyIHByb21pc2UgPSB0aGlzLlJlc3Rhbmd1bGFyLnNlcnZpY2UoJ2RldmljZXMnKS5wb3N0KGRldmljZSk7XG5cdCAgICAgIH1cblx0ICAgICAgcmV0dXJuIHByb21pc2U7XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiAnc2F2ZU92ZXJsYXlTZXR0aW5ncycsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gc2F2ZU92ZXJsYXlTZXR0aW5ncyhkZXZpY2VfdXJsc2FmZV9rZXksIGJvdHRvbV9sZWZ0LCBib3R0b21fcmlnaHQsIHRvcF9yaWdodCwgdG9wX2xlZnQpIHtcblx0ICAgICAgdmFyIHBheWxvYWQgPSB7XG5cdCAgICAgICAgYm90dG9tX2xlZnQ6IGJvdHRvbV9sZWZ0LFxuXHQgICAgICAgIGJvdHRvbV9yaWdodDogYm90dG9tX3JpZ2h0LFxuXHQgICAgICAgIHRvcF9yaWdodDogdG9wX3JpZ2h0LFxuXHQgICAgICAgIHRvcF9sZWZ0OiB0b3BfbGVmdFxuXHQgICAgICB9O1xuXHRcblx0ICAgICAgcmV0dXJuIHRoaXMuUmVzdGFuZ3VsYXIub25lVXJsKCdvdmVybGF5JywgJy9hcGkvdjEvb3ZlcmxheS9kZXZpY2UvJyArIGRldmljZV91cmxzYWZlX2tleSkuY3VzdG9tUE9TVChwYXlsb2FkKTtcblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6ICdkZWxldGUnLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIF9kZWxldGUoZGV2aWNlS2V5KSB7XG5cdCAgICAgIHZhciBwcm9taXNlID0gdGhpcy5SZXN0YW5ndWxhci5vbmUodGhpcy5TRVJWSUNFX05BTUUsIGRldmljZUtleSkucmVtb3ZlKCk7XG5cdCAgICAgIHJldHVybiBwcm9taXNlO1xuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogJ2dldFBhbmVsTW9kZWxzJyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRQYW5lbE1vZGVscygpIHtcblx0ICAgICAgcmV0dXJuIFt7XG5cdCAgICAgICAgJ2lkJzogJ05vbmUnLFxuXHQgICAgICAgICdkaXNwbGF5TmFtZSc6ICdOb25lJ1xuXHQgICAgICB9LCB7XG5cdCAgICAgICAgJ2lkJzogJ1NvbnktRlhENDBMWDJGJyxcblx0ICAgICAgICAnZGlzcGxheU5hbWUnOiAnU29ueSBGWEQ0MExYMkYnXG5cdCAgICAgIH0sIHtcblx0ICAgICAgICAnaWQnOiAnTkVDLUxDRDQyMTUnLFxuXHQgICAgICAgICdkaXNwbGF5TmFtZSc6ICdORUMgTENENDIxNSdcblx0ICAgICAgfSwge1xuXHQgICAgICAgICdpZCc6ICdQaGlsbGlwcy1CREw1NTYwRUwnLFxuXHQgICAgICAgICdkaXNwbGF5TmFtZSc6ICdQaGlsbGlwcyBCREw1NTYwRUwnXG5cdCAgICAgIH0sIHtcblx0ICAgICAgICAnaWQnOiAnUGFuYXNvbmljLVRINTVMRjZVJyxcblx0ICAgICAgICAnZGlzcGxheU5hbWUnOiAnUGFuYXNvbmljIFRINTVMRjZVJ1xuXHQgICAgICB9LCB7XG5cdCAgICAgICAgJ2lkJzogJ1NoYXJwLVBORTUyMScsXG5cdCAgICAgICAgJ2Rpc3BsYXlOYW1lJzogJ1NoYXJwIFBORTUyMSdcblx0ICAgICAgfV07XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiAnZ2V0UGFuZWxJbnB1dHMnLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIGdldFBhbmVsSW5wdXRzKCkge1xuXHQgICAgICByZXR1cm4gW3tcblx0ICAgICAgICAnaWQnOiAnTm9uZScsXG5cdCAgICAgICAgJ3BhcmVudElkJzogJ05vbmUnXG5cdCAgICAgIH0sIHtcblx0ICAgICAgICAnaWQnOiAnSERNSTEnLFxuXHQgICAgICAgICdwYXJlbnRJZCc6ICdTb255LUZYRDQwTFgyRidcblx0ICAgICAgfSwge1xuXHQgICAgICAgICdpZCc6ICdIRE1JMicsXG5cdCAgICAgICAgJ3BhcmVudElkJzogJ1NvbnktRlhENDBMWDJGJ1xuXHQgICAgICB9LCB7XG5cdCAgICAgICAgJ2lkJzogJ0hETUkxJyxcblx0ICAgICAgICAncGFyZW50SWQnOiAnUGhpbGxpcHMtQkRMNTU2MEVMJ1xuXHQgICAgICB9LCB7XG5cdCAgICAgICAgJ2lkJzogJ0hETUkyJyxcblx0ICAgICAgICAncGFyZW50SWQnOiAnUGhpbGxpcHMtQkRMNTU2MEVMJ1xuXHQgICAgICB9LCB7XG5cdCAgICAgICAgJ2lkJzogJ0RWSScsXG5cdCAgICAgICAgJ3BhcmVudElkJzogJ1BoaWxsaXBzLUJETDU1NjBFTCdcblx0ICAgICAgfSwge1xuXHQgICAgICAgICdpZCc6ICdIRE1JMScsXG5cdCAgICAgICAgJ3BhcmVudElkJzogJ1BhbmFzb25pYy1USDU1TEY2VSdcblx0ICAgICAgfSwge1xuXHQgICAgICAgICdpZCc6ICdIRE1JMicsXG5cdCAgICAgICAgJ3BhcmVudElkJzogJ1BhbmFzb25pYy1USDU1TEY2VSdcblx0ICAgICAgfSwge1xuXHQgICAgICAgICdpZCc6ICdEVkknLFxuXHQgICAgICAgICdwYXJlbnRJZCc6ICdQYW5hc29uaWMtVEg1NUxGNlUnXG5cdCAgICAgIH0sIHtcblx0ICAgICAgICAnaWQnOiAnSERNSTEnLFxuXHQgICAgICAgICdwYXJlbnRJZCc6ICdTaGFycC1QTkU1MjEnXG5cdCAgICAgIH0sIHtcblx0ICAgICAgICAnaWQnOiAnSERNSTInLFxuXHQgICAgICAgICdwYXJlbnRJZCc6ICdTaGFycC1QTkU1MjEnXG5cdCAgICAgIH0sIHtcblx0ICAgICAgICAnaWQnOiAnRFZJJyxcblx0ICAgICAgICAncGFyZW50SWQnOiAnU2hhcnAtUE5FNTIxJ1xuXHQgICAgICB9LCB7XG5cdCAgICAgICAgJ2lkJzogJ1ZHQScsXG5cdCAgICAgICAgJ3BhcmVudElkJzogJ05FQy1MQ0Q0MjE1J1xuXHQgICAgICB9LCB7XG5cdCAgICAgICAgJ2lkJzogJ0RWSTEnLFxuXHQgICAgICAgICdwYXJlbnRJZCc6ICdORUMtTENENDIxNSdcblx0ICAgICAgfV07XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiAnbWFrZURldmljZXNCeURpc3RyaWJ1dG9yVVJMJyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBtYWtlRGV2aWNlc0J5RGlzdHJpYnV0b3JVUkwoZGlzdHJpYnV0b3JLZXksIHByZXYsIG5leHQsIHVubWFuYWdlZCkge1xuXHQgICAgICB2YXIgdXJsID0gJy9hcGkvdjEvZGlzdHJpYnV0b3JzLycgKyBkaXN0cmlidXRvcktleSArICcvZGV2aWNlcz91bm1hbmFnZWQ9JyArIHVubWFuYWdlZCArICcmbmV4dF9jdXJzb3I9JyArIG5leHQgKyAnJnByZXZfY3Vyc29yPScgKyBwcmV2O1xuXHQgICAgICByZXR1cm4gdXJsO1xuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogJ21ha2VEZXZpY2VzQnlUZW5hbnRVUkwnLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIG1ha2VEZXZpY2VzQnlUZW5hbnRVUkwodGVuYW50S2V5LCBwcmV2LCBuZXh0LCB1bm1hbmFnZWQpIHtcblx0ICAgICAgdmFyIHVybCA9ICcvYXBpL3YxL3RlbmFudHMvJyArIHRlbmFudEtleSArICcvZGV2aWNlcz91bm1hbmFnZWQ9JyArIHVubWFuYWdlZCArICcmbmV4dF9jdXJzb3I9JyArIG5leHQgKyAnJnByZXZfY3Vyc29yPScgKyBwcmV2O1xuXHQgICAgICByZXR1cm4gdXJsO1xuXHQgICAgfVxuXHQgIH1dKTtcblx0ICByZXR1cm4gRGV2aWNlc1NlcnZpY2U7XG5cdH0oKTtcblx0XG5cdGV4cG9ydHMuZGVmYXVsdCA9IERldmljZXNTZXJ2aWNlO1xuXG4vKioqLyB9LFxuXG4vKioqLyA3MDU6XG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQndXNlIHN0cmljdCc7XG5cdFxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0ICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblx0XG5cdHZhciBfY2xhc3NDYWxsQ2hlY2syID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2OTUpO1xuXHRcblx0dmFyIF9jbGFzc0NhbGxDaGVjazMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbGFzc0NhbGxDaGVjazIpO1xuXHRcblx0dmFyIF9jcmVhdGVDbGFzczIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDY5Nik7XG5cdFxuXHR2YXIgX2NyZWF0ZUNsYXNzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZUNsYXNzMik7XG5cdFxuXHRmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXHRcblx0dmFyIERpc3RyaWJ1dG9yc1NlcnZpY2UgPSBmdW5jdGlvbiAoKSB7XG5cdCAgRGlzdHJpYnV0b3JzU2VydmljZS4kaW5qZWN0ID0gW1wiUmVzdGFuZ3VsYXJcIiwgXCIkc3RhdGVcIiwgXCJTZXNzaW9uc1NlcnZpY2VcIl07XG5cdCAgZnVuY3Rpb24gRGlzdHJpYnV0b3JzU2VydmljZShSZXN0YW5ndWxhciwgJHN0YXRlLCBTZXNzaW9uc1NlcnZpY2UpIHtcblx0ICAgICduZ0luamVjdCc7XG5cdFxuXHQgICAgKDAsIF9jbGFzc0NhbGxDaGVjazMuZGVmYXVsdCkodGhpcywgRGlzdHJpYnV0b3JzU2VydmljZSk7XG5cdCAgICB0aGlzLlJlc3Rhbmd1bGFyID0gUmVzdGFuZ3VsYXI7XG5cdCAgICB0aGlzLiRzdGF0ZSA9ICRzdGF0ZTtcblx0ICAgIHRoaXMuU2Vzc2lvbnNTZXJ2aWNlID0gU2Vzc2lvbnNTZXJ2aWNlO1xuXHQgICAgdGhpcy5ESVNUUklCVVRPUl9TRVJWSUNFID0gJ2Rpc3RyaWJ1dG9ycyc7XG5cdCAgfVxuXHRcblx0ICAoMCwgX2NyZWF0ZUNsYXNzMy5kZWZhdWx0KShEaXN0cmlidXRvcnNTZXJ2aWNlLCBbe1xuXHQgICAga2V5OiAnc2F2ZScsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gc2F2ZSh0ZW5hbnQpIHtcblx0ICAgICAgaWYgKHRlbmFudC5rZXkgIT09IHVuZGVmaW5lZCkge1xuXHQgICAgICAgIHZhciBwcm9taXNlID0gdGVuYW50LnB1dCgpO1xuXHQgICAgICB9IGVsc2Uge1xuXHQgICAgICAgIHZhciBwcm9taXNlID0gdGhpcy5SZXN0YW5ndWxhci5zZXJ2aWNlKHRoaXMuRElTVFJJQlVUT1JfU0VSVklDRSkucG9zdCh0ZW5hbnQpO1xuXHQgICAgICB9XG5cdCAgICAgIHJldHVybiBwcm9taXNlO1xuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogJ2ZldGNoQWxsJyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBmZXRjaEFsbCgpIHtcblx0ICAgICAgdmFyIHByb21pc2UgPSB0aGlzLlJlc3Rhbmd1bGFyLmFsbCh0aGlzLkRJU1RSSUJVVE9SX1NFUlZJQ0UpLmdldExpc3QoKTtcblx0ICAgICAgcmV0dXJuIHByb21pc2U7XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiAnZmV0Y2hBbGxCeVVzZXInLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIGZldGNoQWxsQnlVc2VyKHVzZXJLZXkpIHtcblx0ICAgICAgaWYgKHVzZXJLZXkpIHtcblx0ICAgICAgICB2YXIgcHJvbWlzZSA9IHRoaXMuUmVzdGFuZ3VsYXIub25lKCd1c2VycycsIHVzZXJLZXkpLmRvR0VUKHRoaXMuRElTVFJJQlVUT1JfU0VSVklDRSk7XG5cdCAgICAgICAgcmV0dXJuIHByb21pc2U7XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6ICdnZXRCeUtleScsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0QnlLZXkoa2V5KSB7XG5cdCAgICAgIHZhciBwcm9taXNlID0gdGhpcy5SZXN0YW5ndWxhci5vbmVVcmwodGhpcy5ESVNUUklCVVRPUl9TRVJWSUNFLCAnYXBpL3YxL2Rpc3RyaWJ1dG9ycy8nICsga2V5KS5nZXQoKTtcblx0ICAgICAgcmV0dXJuIHByb21pc2U7XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiAnZGVsZXRlJyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBfZGVsZXRlKGVudGl0eSkge1xuXHQgICAgICBpZiAoZW50aXR5LmtleSkge1xuXHQgICAgICAgIHZhciBwcm9taXNlID0gdGhpcy5SZXN0YW5ndWxhci5vbmUodGhpcy5ESVNUUklCVVRPUl9TRVJWSUNFLCBlbnRpdHkua2V5KS5yZW1vdmUoKTtcblx0ICAgICAgICByZXR1cm4gcHJvbWlzZTtcblx0ICAgICAgfVxuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogJ2dldEJ5TmFtZScsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0QnlOYW1lKG5hbWUpIHtcblx0ICAgICAgdmFyIHByb21pc2UgPSB0aGlzLlJlc3Rhbmd1bGFyLmFsbCh0aGlzLkRJU1RSSUJVVE9SX1NFUlZJQ0UpLmdldExpc3QoeyBkaXN0cmlidXRvck5hbWU6IG5hbWUgfSk7XG5cdCAgICAgIHJldHVybiBwcm9taXNlO1xuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogJ2dldERvbWFpbnNCeUtleScsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0RG9tYWluc0J5S2V5KGtleSkge1xuXHQgICAgICB2YXIgcHJvbWlzZSA9IHRoaXMuUmVzdGFuZ3VsYXIub25lVXJsKHRoaXMuRElTVFJJQlVUT1JfU0VSVklDRSwgJ2FwaS92MS9kaXN0cmlidXRvcnMvJyArIGtleSArICcvZG9tYWlucycpLmdldCgpO1xuXHQgICAgICByZXR1cm4gcHJvbWlzZTtcblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6ICdzd2l0Y2hEaXN0cmlidXRvcicsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gc3dpdGNoRGlzdHJpYnV0b3IoZGlzdHJpYnV0b3IpIHtcblx0ICAgICAgdGhpcy5TZXNzaW9uc1NlcnZpY2Uuc2V0Q3VycmVudERpc3RyaWJ1dG9yTmFtZShkaXN0cmlidXRvci5uYW1lKTtcblx0ICAgICAgdGhpcy5TZXNzaW9uc1NlcnZpY2Uuc2V0Q3VycmVudERpc3RyaWJ1dG9yS2V5KGRpc3RyaWJ1dG9yLmtleSk7XG5cdCAgICAgIHJldHVybiB0aGlzLiRzdGF0ZS5nbygnd2VsY29tZScpO1xuXHQgICAgfVxuXHQgIH1dKTtcblx0ICByZXR1cm4gRGlzdHJpYnV0b3JzU2VydmljZTtcblx0fSgpO1xuXHRcblx0ZXhwb3J0cy5kZWZhdWx0ID0gRGlzdHJpYnV0b3JzU2VydmljZTtcblxuLyoqKi8gfSxcblxuLyoqKi8gNzA2OlxuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG5cdCAgdmFsdWU6IHRydWVcblx0fSk7XG5cdFxuXHR2YXIgX2NsYXNzQ2FsbENoZWNrMiA9IF9fd2VicGFja19yZXF1aXJlX18oNjk1KTtcblx0XG5cdHZhciBfY2xhc3NDYWxsQ2hlY2szID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2xhc3NDYWxsQ2hlY2syKTtcblx0XG5cdHZhciBfY3JlYXRlQ2xhc3MyID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2OTYpO1xuXHRcblx0dmFyIF9jcmVhdGVDbGFzczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVDbGFzczIpO1xuXHRcblx0ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblx0XG5cdHZhciBEb21haW5zU2VydmljZSA9IGZ1bmN0aW9uICgpIHtcblx0ICBEb21haW5zU2VydmljZS4kaW5qZWN0ID0gW1wiUmVzdGFuZ3VsYXJcIl07XG5cdCAgZnVuY3Rpb24gRG9tYWluc1NlcnZpY2UoUmVzdGFuZ3VsYXIpIHtcblx0ICAgICduZ0luamVjdCc7XG5cdFxuXHQgICAgKDAsIF9jbGFzc0NhbGxDaGVjazMuZGVmYXVsdCkodGhpcywgRG9tYWluc1NlcnZpY2UpO1xuXHQgICAgdGhpcy5SZXN0YW5ndWxhciA9IFJlc3Rhbmd1bGFyO1xuXHQgIH1cblx0XG5cdCAgKDAsIF9jcmVhdGVDbGFzczMuZGVmYXVsdCkoRG9tYWluc1NlcnZpY2UsIFt7XG5cdCAgICBrZXk6ICdzYXZlJyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBzYXZlKGRvbWFpbikge1xuXHQgICAgICBpZiAoZG9tYWluLmtleSAhPT0gdW5kZWZpbmVkKSB7XG5cdCAgICAgICAgdmFyIHByb21pc2UgPSBkb21haW4ucHV0KCk7XG5cdCAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgdmFyIHByb21pc2UgPSB0aGlzLlJlc3Rhbmd1bGFyLnNlcnZpY2UoJ2RvbWFpbnMnKS5wb3N0KGRvbWFpbik7XG5cdCAgICAgIH1cblx0ICAgICAgcmV0dXJuIHByb21pc2U7XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiAnZmV0Y2hBbGxEb21haW5zJyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBmZXRjaEFsbERvbWFpbnMoKSB7XG5cdCAgICAgIHZhciBwcm9taXNlID0gdGhpcy5SZXN0YW5ndWxhci5hbGwoJ2RvbWFpbnMnKS5nZXRMaXN0KCk7XG5cdCAgICAgIHJldHVybiBwcm9taXNlO1xuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogJ2dldERvbWFpbkJ5S2V5Jyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBnZXREb21haW5CeUtleShkb21haW5LZXkpIHtcblx0ICAgICAgdmFyIHByb21pc2UgPSB0aGlzLlJlc3Rhbmd1bGFyLm9uZVVybCgnZG9tYWlucycsICdhcGkvdjEvZG9tYWlucy8nICsgZG9tYWluS2V5KS5nZXQoKTtcblx0ICAgICAgcmV0dXJuIHByb21pc2U7XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiAnZ2V0RGlyZWN0b3J5QXBpQ29ubmVjdGl2aXR5SW5mb3JtYXRpb24nLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIGdldERpcmVjdG9yeUFwaUNvbm5lY3Rpdml0eUluZm9ybWF0aW9uKGRvbWFpbktleSkge1xuXHQgICAgICB2YXIgcHJvbWlzZSA9IHRoaXMuUmVzdGFuZ3VsYXIub25lVXJsKCdkb21haW5zJywgJ2FwaS92MS9kb21haW5zLycgKyBkb21haW5LZXkgKyAnL2RpcmVjdG9yeV9hcGknKS5nZXQoKTtcblx0ICAgICAgcmV0dXJuIHByb21pc2U7XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiAnZGVsZXRlJyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBfZGVsZXRlKGRvbWFpbikge1xuXHQgICAgICBpZiAoZG9tYWluLmtleSAhPT0gdW5kZWZpbmVkKSB7XG5cdCAgICAgICAgdmFyIHByb21pc2UgPSB0aGlzLlJlc3Rhbmd1bGFyLm9uZShcImRvbWFpbnNcIiwgZG9tYWluLmtleSkucmVtb3ZlKCk7XG5cdCAgICAgICAgcmV0dXJuIHByb21pc2U7XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICB9XSk7XG5cdCAgcmV0dXJuIERvbWFpbnNTZXJ2aWNlO1xuXHR9KCk7XG5cdFxuXHRleHBvcnRzLmRlZmF1bHQgPSBEb21haW5zU2VydmljZTtcblxuLyoqKi8gfSxcblxuLyoqKi8gNzA3OlxuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG5cdCAgdmFsdWU6IHRydWVcblx0fSk7XG5cdFxuXHR2YXIgX2NsYXNzQ2FsbENoZWNrMiA9IF9fd2VicGFja19yZXF1aXJlX18oNjk1KTtcblx0XG5cdHZhciBfY2xhc3NDYWxsQ2hlY2szID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2xhc3NDYWxsQ2hlY2syKTtcblx0XG5cdHZhciBfY3JlYXRlQ2xhc3MyID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2OTYpO1xuXHRcblx0dmFyIF9jcmVhdGVDbGFzczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVDbGFzczIpO1xuXHRcblx0ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblx0XG5cdHZhciBJZGVudGl0eVNlcnZpY2UgPSBmdW5jdGlvbiAoKSB7XG5cdCAgSWRlbnRpdHlTZXJ2aWNlLiRpbmplY3QgPSBbXCJSZXN0YW5ndWxhclwiXTtcblx0ICBmdW5jdGlvbiBJZGVudGl0eVNlcnZpY2UoUmVzdGFuZ3VsYXIpIHtcblx0ICAgICduZ0luamVjdCc7XG5cdFxuXHQgICAgKDAsIF9jbGFzc0NhbGxDaGVjazMuZGVmYXVsdCkodGhpcywgSWRlbnRpdHlTZXJ2aWNlKTtcblx0ICAgIHRoaXMuUmVzdGFuZ3VsYXIgPSBSZXN0YW5ndWxhcjtcblx0ICB9XG5cdFxuXHQgICgwLCBfY3JlYXRlQ2xhc3MzLmRlZmF1bHQpKElkZW50aXR5U2VydmljZSwgW3tcblx0ICAgIGtleTogJ2dldElkZW50aXR5Jyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRJZGVudGl0eSgpIHtcblx0ICAgICAgcmV0dXJuIHRoaXMuUmVzdGFuZ3VsYXIub25lVXJsKCdpZGVudGl0eScpLmdldCgpO1xuXHQgICAgfVxuXHQgIH1dKTtcblx0ICByZXR1cm4gSWRlbnRpdHlTZXJ2aWNlO1xuXHR9KCk7XG5cdFxuXHRleHBvcnRzLmRlZmF1bHQgPSBJZGVudGl0eVNlcnZpY2U7XG5cbi8qKiovIH0sXG5cbi8qKiovIDcwODpcbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuXHQgIHZhbHVlOiB0cnVlXG5cdH0pO1xuXHRcblx0dmFyIF9jbGFzc0NhbGxDaGVjazIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDY5NSk7XG5cdFxuXHR2YXIgX2NsYXNzQ2FsbENoZWNrMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NsYXNzQ2FsbENoZWNrMik7XG5cdFxuXHR2YXIgX2NyZWF0ZUNsYXNzMiA9IF9fd2VicGFja19yZXF1aXJlX18oNjk2KTtcblx0XG5cdHZhciBfY3JlYXRlQ2xhc3MzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlQ2xhc3MyKTtcblx0XG5cdGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cdFxuXHR2YXIgSW50ZWdyYXRpb25FdmVudHMgPSBmdW5jdGlvbiAoKSB7XG5cdCAgSW50ZWdyYXRpb25FdmVudHMuJGluamVjdCA9IFtcIlJlc3Rhbmd1bGFyXCJdO1xuXHQgIGZ1bmN0aW9uIEludGVncmF0aW9uRXZlbnRzKFJlc3Rhbmd1bGFyKSB7XG5cdCAgICAnbmdJbmplY3QnO1xuXHRcblx0ICAgICgwLCBfY2xhc3NDYWxsQ2hlY2szLmRlZmF1bHQpKHRoaXMsIEludGVncmF0aW9uRXZlbnRzKTtcblx0ICAgIHRoaXMuUmVzdGFuZ3VsYXIgPSBSZXN0YW5ndWxhcjtcblx0ICAgIHRoaXMuQ1JFQVRFX1RFTkFOVF9FVkVOVFMgPSAnaW50ZWdyYXRpb25fZXZlbnRzL3RlbmFudF9jcmVhdGUnO1xuXHQgICAgdGhpcy5FTlJPTExNRU5UX0VWRU5UUyA9ICdpbnRlZ3JhdGlvbl9ldmVudHMvZW5yb2xsbWVudCc7XG5cdCAgfVxuXHRcblx0ICAoMCwgX2NyZWF0ZUNsYXNzMy5kZWZhdWx0KShJbnRlZ3JhdGlvbkV2ZW50cywgW3tcblx0ICAgIGtleTogJ2dldFRlbmFudENyZWF0ZUV2ZW50cycsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0VGVuYW50Q3JlYXRlRXZlbnRzKHRlbmFudEtleSkge1xuXHQgICAgICB2YXIgcXVlcnkgPSB7XG5cdCAgICAgICAgdGVuYW50S2V5OiB0ZW5hbnRLZXlcblx0ICAgICAgfTtcblx0ICAgICAgcmV0dXJuIHRoaXMuUmVzdGFuZ3VsYXIuYWxsKHRoaXMuQ1JFQVRFX1RFTkFOVF9FVkVOVFMpLmN1c3RvbUdFVCgnJywgcXVlcnkpO1xuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogJ2dldEVucm9sbG1lbnRFdmVudHMnLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIGdldEVucm9sbG1lbnRFdmVudHMoZGV2aWNlS2V5KSB7XG5cdCAgICAgIHZhciBxdWVyeSA9IHtcblx0ICAgICAgICBkZXZpY2VLZXk6IGRldmljZUtleVxuXHQgICAgICB9O1xuXHQgICAgICByZXR1cm4gdGhpcy5SZXN0YW5ndWxhci5hbGwodGhpcy5FTlJPTExNRU5UX0VWRU5UUykuY3VzdG9tR0VUKCcnLCBxdWVyeSk7XG5cdCAgICB9XG5cdCAgfV0pO1xuXHQgIHJldHVybiBJbnRlZ3JhdGlvbkV2ZW50cztcblx0fSgpO1xuXHRcblx0ZXhwb3J0cy5kZWZhdWx0ID0gSW50ZWdyYXRpb25FdmVudHM7XG5cbi8qKiovIH0sXG5cbi8qKiovIDcwOTpcbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuXHQgIHZhbHVlOiB0cnVlXG5cdH0pO1xuXHRcblx0dmFyIF9jbGFzc0NhbGxDaGVjazIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDY5NSk7XG5cdFxuXHR2YXIgX2NsYXNzQ2FsbENoZWNrMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NsYXNzQ2FsbENoZWNrMik7XG5cdFxuXHR2YXIgX2NyZWF0ZUNsYXNzMiA9IF9fd2VicGFja19yZXF1aXJlX18oNjk2KTtcblx0XG5cdHZhciBfY3JlYXRlQ2xhc3MzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlQ2xhc3MyKTtcblx0XG5cdGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cdFxuXHR2YXIgTG9jYXRpb25zU2VydmljZSA9IGZ1bmN0aW9uICgpIHtcblx0ICBMb2NhdGlvbnNTZXJ2aWNlLiRpbmplY3QgPSBbXCJSZXN0YW5ndWxhclwiXTtcblx0ICBmdW5jdGlvbiBMb2NhdGlvbnNTZXJ2aWNlKFJlc3Rhbmd1bGFyKSB7XG5cdCAgICAnbmdJbmplY3QnO1xuXHRcblx0ICAgICgwLCBfY2xhc3NDYWxsQ2hlY2szLmRlZmF1bHQpKHRoaXMsIExvY2F0aW9uc1NlcnZpY2UpO1xuXHQgICAgdGhpcy5SZXN0YW5ndWxhciA9IFJlc3Rhbmd1bGFyO1xuXHQgIH1cblx0XG5cdCAgKDAsIF9jcmVhdGVDbGFzczMuZGVmYXVsdCkoTG9jYXRpb25zU2VydmljZSwgW3tcblx0ICAgIGtleTogJ3NhdmUnLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIHNhdmUobG9jYXRpb24pIHtcblx0ICAgICAgaWYgKGxvY2F0aW9uLmtleSAhPT0gdW5kZWZpbmVkKSB7XG5cdCAgICAgICAgdmFyIHByb21pc2UgPSBsb2NhdGlvbi5wdXQoKTtcblx0ICAgICAgfSBlbHNlIHtcblx0ICAgICAgICB2YXIgcHJvbWlzZSA9IHRoaXMuUmVzdGFuZ3VsYXIuc2VydmljZSgnbG9jYXRpb25zJykucG9zdChsb2NhdGlvbik7XG5cdCAgICAgIH1cblx0ICAgICAgcmV0dXJuIHByb21pc2U7XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiAnc2VhcmNoQWxsVGVuYW50TG9jYXRpb25zQnlOYW1lJyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBzZWFyY2hBbGxUZW5hbnRMb2NhdGlvbnNCeU5hbWUodGVuYW50S2V5LCBjdXN0b21lcl9sb2NhdGlvbl9uYW1lKSB7XG5cdCAgICAgIHZhciBwcm9taXNlID0gdGhpcy5SZXN0YW5ndWxhci5hbGwoJ3RlbmFudHMnKS5jdXN0b21HRVRMSVNUKHRlbmFudEtleSArIFwiL2xvY2F0aW9uc1wiLCB7IGN1c3RvbWVyX2xvY2F0aW9uX25hbWU6IGN1c3RvbWVyX2xvY2F0aW9uX25hbWUgfSk7XG5cdCAgICAgIHJldHVybiBwcm9taXNlO1xuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogJ2dldExvY2F0aW9uc0J5VGVuYW50S2V5Jyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRMb2NhdGlvbnNCeVRlbmFudEtleSh0ZW5hbnRLZXkpIHtcblx0ICAgICAgdmFyIHByb21pc2UgPSB0aGlzLlJlc3Rhbmd1bGFyLm9uZVVybCgndGVuYW50cycsICdhcGkvdjEvdGVuYW50cy8nICsgdGVuYW50S2V5ICsgJy9sb2NhdGlvbnMnKS5nZXQoKTtcblx0ICAgICAgcmV0dXJuIHByb21pc2U7XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiAnZ2V0TG9jYXRpb25zQnlUZW5hbnRLZXlQYWdpbmF0ZWQnLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIGdldExvY2F0aW9uc0J5VGVuYW50S2V5UGFnaW5hdGVkKHRlbmFudEtleSwgcHJldiwgbmV4dCkge1xuXHQgICAgICBwcmV2ID0gcHJldiA9PT0gdW5kZWZpbmVkIHx8IG51bGwgPyBudWxsIDogcHJldjtcblx0ICAgICAgbmV4dCA9IG5leHQgPT09IHVuZGVmaW5lZCB8fCBudWxsID8gbnVsbCA6IG5leHQ7XG5cdCAgICAgIHZhciBwcm9taXNlID0gdGhpcy5SZXN0YW5ndWxhci5vbmVVcmwoJ3RlbmFudHMnLCAnYXBpL3YxL3RlbmFudHMvJyArIHRlbmFudEtleSArICcvJyArIHByZXYgKyAnLycgKyBuZXh0ICsgJy9sb2NhdGlvbnMnKS5nZXQoKTtcblx0ICAgICAgcmV0dXJuIHByb21pc2U7XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiAnZ2V0TG9jYXRpb25CeUtleScsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0TG9jYXRpb25CeUtleShsb2NhdGlvbktleSkge1xuXHQgICAgICB2YXIgcHJvbWlzZSA9IHRoaXMuUmVzdGFuZ3VsYXIub25lVXJsKCdsb2NhdGlvbnMnLCAnYXBpL3YxL2xvY2F0aW9ucy8nICsgbG9jYXRpb25LZXkpLmdldCgpO1xuXHQgICAgICByZXR1cm4gcHJvbWlzZTtcblx0ICAgIH1cblx0ICB9XSk7XG5cdCAgcmV0dXJuIExvY2F0aW9uc1NlcnZpY2U7XG5cdH0oKTtcblx0XG5cdGV4cG9ydHMuZGVmYXVsdCA9IExvY2F0aW9uc1NlcnZpY2U7XG5cbi8qKiovIH0sXG5cbi8qKiovIDcxMDpcbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuXHQgIHZhbHVlOiB0cnVlXG5cdH0pO1xuXHRcblx0dmFyIF9jbGFzc0NhbGxDaGVjazIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDY5NSk7XG5cdFxuXHR2YXIgX2NsYXNzQ2FsbENoZWNrMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NsYXNzQ2FsbENoZWNrMik7XG5cdFxuXHR2YXIgX2NyZWF0ZUNsYXNzMiA9IF9fd2VicGFja19yZXF1aXJlX18oNjk2KTtcblx0XG5cdHZhciBfY3JlYXRlQ2xhc3MzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlQ2xhc3MyKTtcblx0XG5cdGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cdFxuXHR2YXIgUHJvZ3Jlc3NCYXJTZXJ2aWNlID0gZnVuY3Rpb24gKCkge1xuXHQgIFByb2dyZXNzQmFyU2VydmljZS4kaW5qZWN0ID0gW1wibmdQcm9ncmVzc0ZhY3RvcnlcIl07XG5cdCAgZnVuY3Rpb24gUHJvZ3Jlc3NCYXJTZXJ2aWNlKG5nUHJvZ3Jlc3NGYWN0b3J5KSB7XG5cdCAgICAnbmdJbmplY3QnO1xuXHRcblx0ICAgICgwLCBfY2xhc3NDYWxsQ2hlY2szLmRlZmF1bHQpKHRoaXMsIFByb2dyZXNzQmFyU2VydmljZSk7XG5cdCAgICB0aGlzLm5nUHJvZ3Jlc3NGYWN0b3J5ID0gbmdQcm9ncmVzc0ZhY3Rvcnk7XG5cdCAgICB0aGlzLnByb2dyZXNzQmFyID0gdGhpcy5uZ1Byb2dyZXNzRmFjdG9yeS5jcmVhdGVJbnN0YW5jZSgpO1xuXHQgIH1cblx0XG5cdCAgKDAsIF9jcmVhdGVDbGFzczMuZGVmYXVsdCkoUHJvZ3Jlc3NCYXJTZXJ2aWNlLCBbe1xuXHQgICAga2V5OiAnc3RhcnQnLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIHN0YXJ0KCkge1xuXHQgICAgICB0aGlzLnByb2dyZXNzQmFyLnNldENvbG9yKCcjMDBGQ0ZGJyk7XG5cdCAgICAgIHRoaXMucHJvZ3Jlc3NCYXIuc2V0SGVpZ2h0KCc0cHgnKTtcblx0ICAgICAgcmV0dXJuIHRoaXMucHJvZ3Jlc3NCYXIuc3RhcnQoKTtcblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6ICdjb21wbGV0ZScsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gY29tcGxldGUoKSB7XG5cdCAgICAgIHJldHVybiB0aGlzLnByb2dyZXNzQmFyLmNvbXBsZXRlKCk7XG5cdCAgICB9XG5cdCAgfV0pO1xuXHQgIHJldHVybiBQcm9ncmVzc0JhclNlcnZpY2U7XG5cdH0oKTtcblx0XG5cdGV4cG9ydHMuZGVmYXVsdCA9IFByb2dyZXNzQmFyU2VydmljZTtcblxuLyoqKi8gfSxcblxuLyoqKi8gNzExOlxuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG5cdCAgdmFsdWU6IHRydWVcblx0fSk7XG5cdFxuXHR2YXIgX2NsYXNzQ2FsbENoZWNrMiA9IF9fd2VicGFja19yZXF1aXJlX18oNjk1KTtcblx0XG5cdHZhciBfY2xhc3NDYWxsQ2hlY2szID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2xhc3NDYWxsQ2hlY2syKTtcblx0XG5cdHZhciBfY3JlYXRlQ2xhc3MyID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2OTYpO1xuXHRcblx0dmFyIF9jcmVhdGVDbGFzczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVDbGFzczIpO1xuXHRcblx0ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblx0XG5cdHZhciBQcm9vZlBsYXlTZXJ2aWNlID0gZnVuY3Rpb24gKCkge1xuXHQgIFByb29mUGxheVNlcnZpY2UuJGluamVjdCA9IFtcIiRodHRwXCIsIFwiJHFcIiwgXCIkd2luZG93XCIsIFwiU2Vzc2lvbnNTZXJ2aWNlXCIsIFwiJHN0YXRlUGFyYW1zXCIsIFwiJHN0YXRlXCIsIFwiVG9hc3RzU2VydmljZVwiXTtcblx0ICBmdW5jdGlvbiBQcm9vZlBsYXlTZXJ2aWNlKCRodHRwLCAkcSwgJHdpbmRvdywgU2Vzc2lvbnNTZXJ2aWNlLCAkc3RhdGVQYXJhbXMsICRzdGF0ZSwgVG9hc3RzU2VydmljZSkge1xuXHQgICAgJ25nSW5qZWN0Jztcblx0XG5cdCAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMy5kZWZhdWx0KSh0aGlzLCBQcm9vZlBsYXlTZXJ2aWNlKTtcblx0ICAgIHRoaXMuJGh0dHAgPSAkaHR0cDtcblx0ICAgIHRoaXMuJHEgPSAkcTtcblx0ICAgIHRoaXMuJHdpbmRvdyA9ICR3aW5kb3c7XG5cdCAgICB0aGlzLlNlc3Npb25zU2VydmljZSA9IFNlc3Npb25zU2VydmljZTtcblx0ICAgIHRoaXMuJHN0YXRlUGFyYW1zID0gJHN0YXRlUGFyYW1zO1xuXHQgICAgdGhpcy4kc3RhdGUgPSAkc3RhdGU7XG5cdCAgICB0aGlzLlRvYXN0c1NlcnZpY2UgPSBUb2FzdHNTZXJ2aWNlO1xuXHQgICAgdGhpcy5tYWtlSFRUUFJlcXVlc3QgPSB0aGlzLm1ha2VIVFRQUmVxdWVzdC5iaW5kKHRoaXMpO1xuXHQgICAgdGhpcy51cmlCYXNlID0gJ3Byb29mcGxheS9hcGkvdjEnO1xuXHQgIH1cblx0XG5cdCAgKDAsIF9jcmVhdGVDbGFzczMuZGVmYXVsdCkoUHJvb2ZQbGF5U2VydmljZSwgW3tcblx0ICAgIGtleTogJ21ha2VIVFRQVVJMJyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBtYWtlSFRUUFVSTCh3aGVyZV90b19nbywgdGVuYW50KSB7XG5cdCAgICAgIHJldHVybiB0aGlzLnVyaUJhc2UgKyB3aGVyZV90b19nbyArIHRlbmFudDtcblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6ICdtYWtlSFRUUFJlcXVlc3QnLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIG1ha2VIVFRQUmVxdWVzdCh3aGVyZV90b19nbywgdGVuYW50KSB7XG5cdCAgICAgIHZhciBkZWZlcnJlZCA9IHRoaXMuJHEuZGVmZXIoKTtcblx0ICAgICAgdmFyIHVybCA9IHRoaXMubWFrZUhUVFBVUkwod2hlcmVfdG9fZ28sIHRlbmFudCk7XG5cdCAgICAgIHJldHVybiB0aGlzLiRodHRwLmdldCh1cmwpO1xuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogJ2dldEFsbFJlc291cmNlcycsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0QWxsUmVzb3VyY2VzKHRlbmFudCkge1xuXHQgICAgICB2YXIgciA9IHRoaXMubWFrZUhUVFBSZXF1ZXN0KFwiL3JldHJpZXZlX2FsbF9yZXNvdXJjZXMvXCIsIHRlbmFudCk7XG5cdCAgICAgIC8vIHRoZSBjYXRjaCBpcyBvbmx5IGRvbmUgaGVyZSBiZWNhdXNlIDMgcHJvb2Ygb2YgcGxheSB2aWV3cyBhcmUgaW5pdGlsaXplZCBhdCB0aGUgc2FtZSB0aW1lXG5cdCAgICAgIC8vIHNvIHRoaXMgY2F0Y2ggd2lsbCBiZSBkb25lIDMgdGltZXMgd2l0aCAzIGVycm9yIG1lc3NhZ2VzIGlmIHdlIGFkZCBpdCB0byBnZXRBbGxEaXNwbGF5cyBhbmQgZ2V0QWxsTG9jYXRpb25zXG5cdCAgICAgIHIuY2F0Y2goZnVuY3Rpb24gKGVyciwgZGF0YSkge1xuXHQgICAgICAgIHZhciBzdGF0dXMgPSBlcnIuc3RhdHVzO1xuXHRcblx0ICAgICAgICBpZiAoc3RhdHVzID09PSA0MDMpIHtcblx0ICAgICAgICAgIHRoaXMuVG9hc3RzU2VydmljZS5zaG93RXJyb3JUb2FzdChcIllvdSBhcmUgbm90IGFsbG93ZWQgdG8gdmlldyB0aGlzIHRlbmFudCFcIik7XG5cdCAgICAgICAgICB0aGlzLiRzdGF0ZS5nbygncHJvb2YnLCB7fSk7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGlmIChzdGF0dXMgPT09IDQwNCkge1xuXHQgICAgICAgICAgdGhpcy5Ub2FzdHNTZXJ2aWNlLnNob3dFcnJvclRvYXN0KFwiWW91IG11c3Qgc2VsZWN0IGEgdGVuYW50IGZpcnN0IVwiKTtcblx0ICAgICAgICAgIHJldHVybiB0aGlzLiRzdGF0ZS5nbygncHJvb2YnLCB7fSk7XG5cdCAgICAgICAgfVxuXHQgICAgICB9KTtcblx0XG5cdCAgICAgIHJldHVybiByLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcblx0ICAgICAgICByZXR1cm4gZGF0YTtcblx0ICAgICAgfSk7XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiAnZ2V0QWxsRGlzcGxheXMnLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIGdldEFsbERpc3BsYXlzKHRlbmFudCkge1xuXHQgICAgICByZXR1cm4gdGhpcy5tYWtlSFRUUFJlcXVlc3QoXCIvcmV0cmlldmVfYWxsX2Rpc3BsYXlzL1wiLCB0ZW5hbnQpO1xuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogJ2dldEFsbExvY2F0aW9ucycsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0QWxsTG9jYXRpb25zKHRlbmFudCkge1xuXHQgICAgICByZXR1cm4gdGhpcy5tYWtlSFRUUFJlcXVlc3QoXCIvcmV0cmlldmVfYWxsX2xvY2F0aW9ucy9cIiwgdGVuYW50KTtcblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6ICdnZXRBbGxUZW5hbnRzJyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRBbGxUZW5hbnRzKCkge1xuXHQgICAgICByZXR1cm4gdGhpcy5tYWtlSFRUUFJlcXVlc3QoXCIvcmV0cmlldmVfbXlfdGVuYW50c1wiLCAnJyk7XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiAnZG93bmxvYWRDU1ZGb3JNdWx0aXBsZVJlc291cmNlc0J5RGF0ZScsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gZG93bmxvYWRDU1ZGb3JNdWx0aXBsZVJlc291cmNlc0J5RGF0ZShzdGFydF9kYXRlLCBlbmRfZGF0ZSwgcmVzb3VyY2VzLCB0ZW5hbnQpIHtcblx0ICAgICAgdmFyIGFsbFJlc291cmNlcyA9ICcnO1xuXHRcblx0ICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCByZXNvdXJjZXMubGVuZ3RoOyBpKyspIHtcblx0ICAgICAgICB2YXIgZWFjaCA9IHJlc291cmNlc1tpXTtcblx0ICAgICAgICBhbGxSZXNvdXJjZXMgPSBhbGxSZXNvdXJjZXMgKyBcInxcIiArIGVhY2g7XG5cdCAgICAgIH1cblx0XG5cdCAgICAgIHRoaXMuJHdpbmRvdy5vcGVuKHRoaXMudXJpQmFzZSArICcvbXVsdGlfcmVzb3VyY2VfYnlfZGF0ZS8nICsgc3RhcnRfZGF0ZSArICcvJyArIGVuZF9kYXRlICsgJy8nICsgYWxsUmVzb3VyY2VzICsgJy8nICsgdGVuYW50ICsgXCIvXCIgKyB0aGlzLlNlc3Npb25zU2VydmljZS5nZXRDdXJyZW50RGlzdHJpYnV0b3JLZXkoKSwgJ19ibGFuaycpO1xuXHQgICAgICByZXR1cm4gdHJ1ZTtcblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6ICdkb3dubG9hZENTVkZvck11bHRpcGxlUmVzb3VyY2VzQnlEZXZpY2UnLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIGRvd25sb2FkQ1NWRm9yTXVsdGlwbGVSZXNvdXJjZXNCeURldmljZShzdGFydF9kYXRlLCBlbmRfZGF0ZSwgcmVzb3VyY2VzLCB0ZW5hbnQpIHtcblx0ICAgICAgdmFyIGFsbFJlc291cmNlcyA9ICcnO1xuXHRcblx0ICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCByZXNvdXJjZXMubGVuZ3RoOyBpKyspIHtcblx0ICAgICAgICB2YXIgZWFjaCA9IHJlc291cmNlc1tpXTtcblx0ICAgICAgICBhbGxSZXNvdXJjZXMgPSBhbGxSZXNvdXJjZXMgKyBcInxcIiArIGVhY2g7XG5cdCAgICAgIH1cblx0XG5cdCAgICAgIHRoaXMuJHdpbmRvdy5vcGVuKHRoaXMudXJpQmFzZSArICcvbXVsdGlfcmVzb3VyY2VfYnlfZGV2aWNlLycgKyBzdGFydF9kYXRlICsgJy8nICsgZW5kX2RhdGUgKyAnLycgKyBhbGxSZXNvdXJjZXMgKyAnLycgKyB0ZW5hbnQgKyBcIi9cIiArIHRoaXMuU2Vzc2lvbnNTZXJ2aWNlLmdldEN1cnJlbnREaXN0cmlidXRvcktleSgpLCAnX2JsYW5rJyk7XG5cdCAgICAgIHJldHVybiB0cnVlO1xuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogJ2Rvd25sb2FkQ1NWRm9yTXVsdGlwbGVEZXZpY2VzU3VtbWFyaXplZCcsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gZG93bmxvYWRDU1ZGb3JNdWx0aXBsZURldmljZXNTdW1tYXJpemVkKHN0YXJ0X2RhdGUsIGVuZF9kYXRlLCBkZXZpY2VzLCB0ZW5hbnQpIHtcblx0ICAgICAgdmFyIGFsbERldmljZXMgPSAnJztcblx0XG5cdCAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGV2aWNlcy5sZW5ndGg7IGkrKykge1xuXHQgICAgICAgIHZhciBlYWNoID0gZGV2aWNlc1tpXTtcblx0ICAgICAgICBhbGxEZXZpY2VzID0gYWxsRGV2aWNlcyArIFwifFwiICsgZWFjaDtcblx0ICAgICAgfVxuXHRcblx0ICAgICAgdGhpcy4kd2luZG93Lm9wZW4odGhpcy51cmlCYXNlICsgJy9tdWx0aV9kZXZpY2Vfc3VtbWFyaXplZC8nICsgc3RhcnRfZGF0ZSArICcvJyArIGVuZF9kYXRlICsgJy8nICsgYWxsRGV2aWNlcyArICcvJyArIHRlbmFudCArIFwiL1wiICsgdGhpcy5TZXNzaW9uc1NlcnZpY2UuZ2V0Q3VycmVudERpc3RyaWJ1dG9yS2V5KCksICdfYmxhbmsnKTtcblx0ICAgICAgcmV0dXJuIHRydWU7XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiAnZG93bmxvYWRDU1ZGb3JNdWx0aXBsZURldmljZXNCeURhdGUnLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIGRvd25sb2FkQ1NWRm9yTXVsdGlwbGVEZXZpY2VzQnlEYXRlKHN0YXJ0X2RhdGUsIGVuZF9kYXRlLCBkZXZpY2VzLCB0ZW5hbnQpIHtcblx0ICAgICAgdmFyIGFsbERldmljZXMgPSAnJztcblx0XG5cdCAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGV2aWNlcy5sZW5ndGg7IGkrKykge1xuXHQgICAgICAgIHZhciBlYWNoID0gZGV2aWNlc1tpXTtcblx0ICAgICAgICBhbGxEZXZpY2VzID0gYWxsRGV2aWNlcyArIFwifFwiICsgZWFjaDtcblx0ICAgICAgfVxuXHRcblx0ICAgICAgdGhpcy4kd2luZG93Lm9wZW4odGhpcy51cmlCYXNlICsgJy9tdWx0aV9kZXZpY2VfYnlfZGF0ZS8nICsgc3RhcnRfZGF0ZSArICcvJyArIGVuZF9kYXRlICsgJy8nICsgYWxsRGV2aWNlcyArICcvJyArIHRlbmFudCArIFwiL1wiICsgdGhpcy5TZXNzaW9uc1NlcnZpY2UuZ2V0Q3VycmVudERpc3RyaWJ1dG9yS2V5KCksICdfYmxhbmsnKTtcblx0ICAgICAgcmV0dXJuIHRydWU7XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiAnZG93bmxvYWRDU1ZGb3JNdWx0aXBsZUxvY2F0aW9uc0J5RGV2aWNlJyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBkb3dubG9hZENTVkZvck11bHRpcGxlTG9jYXRpb25zQnlEZXZpY2Uoc3RhcnRfZGF0ZSwgZW5kX2RhdGUsIGxvY2F0aW9ucywgdGVuYW50KSB7XG5cdCAgICAgIHZhciBhbGxMb2NhdGlvbnMgPSAnJztcblx0XG5cdCAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbG9jYXRpb25zLmxlbmd0aDsgaSsrKSB7XG5cdCAgICAgICAgdmFyIGVhY2ggPSBsb2NhdGlvbnNbaV07XG5cdCAgICAgICAgYWxsTG9jYXRpb25zID0gYWxsTG9jYXRpb25zICsgXCJ8XCIgKyBlYWNoO1xuXHQgICAgICB9XG5cdFxuXHQgICAgICB0aGlzLiR3aW5kb3cub3Blbih0aGlzLnVyaUJhc2UgKyAnL211bHRpX2xvY2F0aW9uX2J5X2RldmljZS8nICsgc3RhcnRfZGF0ZSArICcvJyArIGVuZF9kYXRlICsgJy8nICsgYWxsTG9jYXRpb25zICsgJy8nICsgdGVuYW50ICsgXCIvXCIgKyB0aGlzLlNlc3Npb25zU2VydmljZS5nZXRDdXJyZW50RGlzdHJpYnV0b3JLZXkoKSwgJ19ibGFuaycpO1xuXHQgICAgICByZXR1cm4gdHJ1ZTtcblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6ICdkb3dubG9hZENTVkZvck11bHRpcGxlTG9jYXRpb25zU3VtbWFyaXplZCcsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gZG93bmxvYWRDU1ZGb3JNdWx0aXBsZUxvY2F0aW9uc1N1bW1hcml6ZWQoc3RhcnRfZGF0ZSwgZW5kX2RhdGUsIGxvY2F0aW9ucywgdGVuYW50KSB7XG5cdCAgICAgIHZhciBhbGxMb2NhdGlvbnMgPSAnJztcblx0XG5cdCAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbG9jYXRpb25zLmxlbmd0aDsgaSsrKSB7XG5cdCAgICAgICAgdmFyIGVhY2ggPSBsb2NhdGlvbnNbaV07XG5cdCAgICAgICAgYWxsTG9jYXRpb25zID0gYWxsTG9jYXRpb25zICsgXCJ8XCIgKyBlYWNoO1xuXHQgICAgICB9XG5cdFxuXHQgICAgICB0aGlzLiR3aW5kb3cub3Blbih0aGlzLnVyaUJhc2UgKyAnL211bHRpX2xvY2F0aW9uX3N1bW1hcml6ZWQvJyArIHN0YXJ0X2RhdGUgKyAnLycgKyBlbmRfZGF0ZSArICcvJyArIGFsbExvY2F0aW9ucyArICcvJyArIHRlbmFudCArIFwiL1wiICsgdGhpcy5TZXNzaW9uc1NlcnZpY2UuZ2V0Q3VycmVudERpc3RyaWJ1dG9yS2V5KCksICdfYmxhbmsnKTtcblx0ICAgICAgcmV0dXJuIHRydWU7XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiAnY3JlYXRlRmlsdGVyRm9yJyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBjcmVhdGVGaWx0ZXJGb3IocXVlcnkpIHtcblx0ICAgICAgcXVlcnkgPSBhbmd1bGFyLmxvd2VyY2FzZShxdWVyeSk7XG5cdCAgICAgIHJldHVybiBmdW5jdGlvbiAocmVzb3VyY2UpIHtcblx0ICAgICAgICByZXNvdXJjZSA9IGFuZ3VsYXIubG93ZXJjYXNlKHJlc291cmNlKTtcblx0ICAgICAgICByZXR1cm4gcmVzb3VyY2UuaW5kZXhPZihxdWVyeSkgPT09IDA7XG5cdCAgICAgIH07XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiAncXVlcnlTZWFyY2gnLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIHF1ZXJ5U2VhcmNoKHJlc291cmNlcywgc2VhcmNoVGV4dCkge1xuXHQgICAgICBpZiAoc2VhcmNoVGV4dCkge1xuXHQgICAgICAgIHJldHVybiByZXNvdXJjZXMuZmlsdGVyKHRoaXMuY3JlYXRlRmlsdGVyRm9yKHNlYXJjaFRleHQpKTtcblx0ICAgICAgfSBlbHNlIHtcblx0ICAgICAgICByZXR1cm4gcmVzb3VyY2VzO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgfV0pO1xuXHQgIHJldHVybiBQcm9vZlBsYXlTZXJ2aWNlO1xuXHR9KCk7XG5cdFxuXHRleHBvcnRzLmRlZmF1bHQgPSBQcm9vZlBsYXlTZXJ2aWNlO1xuXG4vKioqLyB9LFxuXG4vKioqLyA3MTI6XG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQndXNlIHN0cmljdCc7XG5cdFxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0ICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblx0XG5cdHZhciBfY2xhc3NDYWxsQ2hlY2syID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2OTUpO1xuXHRcblx0dmFyIF9jbGFzc0NhbGxDaGVjazMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbGFzc0NhbGxDaGVjazIpO1xuXHRcblx0dmFyIF9jcmVhdGVDbGFzczIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDY5Nik7XG5cdFxuXHR2YXIgX2NyZWF0ZUNsYXNzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZUNsYXNzMik7XG5cdFxuXHRmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXHRcblx0dmFyIFNlc3Npb25zU2VydmljZSA9IGZ1bmN0aW9uICgpIHtcblx0ICBTZXNzaW9uc1NlcnZpY2UuJGluamVjdCA9IFtcIiRodHRwXCIsIFwiJGxvZ1wiLCBcIlN0b3JhZ2VTZXJ2aWNlXCIsIFwiSWRlbnRpdHlTZXJ2aWNlXCIsIFwiUmVzdGFuZ3VsYXJcIiwgXCIkcVwiXTtcblx0ICBmdW5jdGlvbiBTZXNzaW9uc1NlcnZpY2UoJGh0dHAsICRsb2csIFN0b3JhZ2VTZXJ2aWNlLCBJZGVudGl0eVNlcnZpY2UsIFJlc3Rhbmd1bGFyLCAkcSkge1xuXHQgICAgJ25nSW5qZWN0Jztcblx0XG5cdCAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMy5kZWZhdWx0KSh0aGlzLCBTZXNzaW9uc1NlcnZpY2UpO1xuXHQgICAgdGhpcy4kaHR0cCA9ICRodHRwO1xuXHQgICAgdGhpcy4kbG9nID0gJGxvZztcblx0ICAgIHRoaXMuU3RvcmFnZVNlcnZpY2UgPSBTdG9yYWdlU2VydmljZTtcblx0ICAgIHRoaXMuSWRlbnRpdHlTZXJ2aWNlID0gSWRlbnRpdHlTZXJ2aWNlO1xuXHQgICAgdGhpcy5SZXN0YW5ndWxhciA9IFJlc3Rhbmd1bGFyO1xuXHQgICAgdGhpcy4kcSA9ICRxO1xuXHQgICAgdGhpcy5zZXRJZGVudGl0eSA9IHRoaXMuc2V0SWRlbnRpdHkuYmluZCh0aGlzKTtcblx0ICAgIHRoaXMudXJpQmFzZSA9ICd2MS9zZXNzaW9ucyc7XG5cdCAgfVxuXHRcblx0ICAoMCwgX2NyZWF0ZUNsYXNzMy5kZWZhdWx0KShTZXNzaW9uc1NlcnZpY2UsIFt7XG5cdCAgICBrZXk6ICdzZXREaXN0cmlidXRvcnMnLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIHNldERpc3RyaWJ1dG9ycyhkaXN0cmlidXRvcnMpIHtcblx0ICAgICAgcmV0dXJuIHRoaXMuU3RvcmFnZVNlcnZpY2Uuc2V0KCdkaXN0cmlidXRvcnMnLCBkaXN0cmlidXRvcnMpO1xuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogJ3NldERpc3RyaWJ1dG9yc0FzQWRtaW4nLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIHNldERpc3RyaWJ1dG9yc0FzQWRtaW4oZGlzdHJpYnV0b3JzQXNBZG1pbikge1xuXHQgICAgICByZXR1cm4gdGhpcy5TdG9yYWdlU2VydmljZS5zZXQoJ2Rpc3RyaWJ1dG9yc0FzQWRtaW4nLCBkaXN0cmlidXRvcnNBc0FkbWluKTtcblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6ICdzZXRJc0FkbWluJyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRJc0FkbWluKGlzQWRtaW4pIHtcblx0ICAgICAgcmV0dXJuIHRoaXMuU3RvcmFnZVNlcnZpY2Uuc2V0KCdpc0FkbWluJywgaXNBZG1pbik7XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiAnc2V0VXNlcktleScsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gc2V0VXNlcktleSh2YWx1ZSkge1xuXHQgICAgICByZXR1cm4gdGhpcy5TdG9yYWdlU2VydmljZS5zZXQoJ3VzZXJLZXknLCB2YWx1ZSk7XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiAnc2V0VXNlckVtYWlsJyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRVc2VyRW1haWwodmFsdWUpIHtcblx0ICAgICAgcmV0dXJuIHRoaXMuU3RvcmFnZVNlcnZpY2Uuc2V0KCd1c2VyRW1haWwnLCB2YWx1ZSk7XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiAnc2V0Q3VycmVudERpc3RyaWJ1dG9yS2V5Jyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBzZXRDdXJyZW50RGlzdHJpYnV0b3JLZXkodmFsdWUpIHtcblx0ICAgICAgcmV0dXJuIHRoaXMuU3RvcmFnZVNlcnZpY2Uuc2V0KCdjdXJyZW50RGlzdHJpYnV0b3JLZXknLCB2YWx1ZSk7XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiAnc2V0Q3VycmVudERpc3RyaWJ1dG9yTmFtZScsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gc2V0Q3VycmVudERpc3RyaWJ1dG9yTmFtZSh2YWx1ZSkge1xuXHQgICAgICByZXR1cm4gdGhpcy5TdG9yYWdlU2VydmljZS5zZXQoJ2N1cnJlbnREaXN0cmlidXRvck5hbWUnLCB2YWx1ZSk7XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiAnZ2V0VXNlcktleScsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0VXNlcktleSgpIHtcblx0ICAgICAgcmV0dXJuIHRoaXMuU3RvcmFnZVNlcnZpY2UuZ2V0KCd1c2VyS2V5Jyk7XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiAnZ2V0VXNlckVtYWlsJyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRVc2VyRW1haWwoKSB7XG5cdCAgICAgIHJldHVybiB0aGlzLlN0b3JhZ2VTZXJ2aWNlLmdldCgndXNlckVtYWlsJyk7XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiAnZ2V0RGlzdHJpYnV0b3JzJyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBnZXREaXN0cmlidXRvcnMoKSB7XG5cdCAgICAgIHJldHVybiB0aGlzLlN0b3JhZ2VTZXJ2aWNlLmdldCgnZGlzdHJpYnV0b3JzJyk7XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiAnZ2V0Q3VycmVudERpc3RyaWJ1dG9yTmFtZScsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0Q3VycmVudERpc3RyaWJ1dG9yTmFtZSgpIHtcblx0ICAgICAgcmV0dXJuIHRoaXMuU3RvcmFnZVNlcnZpY2UuZ2V0KCdjdXJyZW50RGlzdHJpYnV0b3JOYW1lJyk7XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiAnZ2V0Q3VycmVudERpc3RyaWJ1dG9yS2V5Jyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRDdXJyZW50RGlzdHJpYnV0b3JLZXkoKSB7XG5cdCAgICAgIHJldHVybiB0aGlzLlN0b3JhZ2VTZXJ2aWNlLmdldCgnY3VycmVudERpc3RyaWJ1dG9yS2V5Jyk7XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiAnZ2V0RGlzdHJpYnV0b3JzQXNBZG1pbicsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0RGlzdHJpYnV0b3JzQXNBZG1pbigpIHtcblx0ICAgICAgcmV0dXJuIHRoaXMuU3RvcmFnZVNlcnZpY2UuZ2V0KCdkaXN0cmlidXRvcnNBc0FkbWluJyk7XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiAnZ2V0SXNBZG1pbicsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0SXNBZG1pbigpIHtcblx0ICAgICAgcmV0dXJuIHRoaXMuU3RvcmFnZVNlcnZpY2UuZ2V0KCdpc0FkbWluJyk7XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiAnbG9naW4nLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIGxvZ2luKGNyZWRlbnRpYWxzKSB7XG5cdCAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cdFxuXHQgICAgICB2YXIgYXV0aGVudGljYXRpb25QYXlsb2FkID0ge1xuXHQgICAgICAgIGFjY2Vzc190b2tlbjogXy5jbG9uZShjcmVkZW50aWFscy5hY2Nlc3NfdG9rZW4pLFxuXHQgICAgICAgIGF1dGh1c2VyOiBfLmNsb25lKGNyZWRlbnRpYWxzLmF1dGh1c2VyKSxcblx0ICAgICAgICBjbGllbnRfaWQ6IF8uY2xvbmUoY3JlZGVudGlhbHMuY2xpZW50X2lkKSxcblx0ICAgICAgICBjb2RlOiBfLmNsb25lKGNyZWRlbnRpYWxzLmNvZGUpLFxuXHQgICAgICAgIGlkX3Rva2VuOiBfLmNsb25lKGNyZWRlbnRpYWxzLmlkX3Rva2VuKSxcblx0ICAgICAgICBzY29wZTogXy5jbG9uZShjcmVkZW50aWFscy5zY29wZSksXG5cdCAgICAgICAgc2Vzc2lvbl9zdGF0ZTogXy5jbG9uZShjcmVkZW50aWFscy5zZXNzaW9uX3N0YXRlKSxcblx0ICAgICAgICBzdGF0ZTogXy5jbG9uZShjcmVkZW50aWFscy5zdGF0ZSksXG5cdCAgICAgICAgc3RhdHVzOiBfLmNsb25lKGNyZWRlbnRpYWxzLnN0YXR1cylcblx0ICAgICAgfTtcblx0XG5cdCAgICAgIGlmIChjcmVkZW50aWFscy5lbWFpbCAmJiBjcmVkZW50aWFscy5wYXNzd29yZCkge1xuXHQgICAgICAgIGF1dGhlbnRpY2F0aW9uUGF5bG9hZCA9IGNyZWRlbnRpYWxzO1xuXHQgICAgICB9XG5cdFxuXHQgICAgICB2YXIgcHJvbWlzZSA9IHRoaXMuJGh0dHAucG9zdCgnL2xvZ2luJywgYXV0aGVudGljYXRpb25QYXlsb2FkKTtcblx0ICAgICAgcmV0dXJuIHByb21pc2Uuc3VjY2VzcyhmdW5jdGlvbiAoZGF0YSkge1xuXHQgICAgICAgIF90aGlzLnNldFVzZXJLZXkoZGF0YS51c2VyLmtleSk7XG5cdCAgICAgICAgcmV0dXJuIF90aGlzLnNldElkZW50aXR5KCkudGhlbihmdW5jdGlvbiAoKSB7XG5cdCAgICAgICAgICByZXR1cm4gZGF0YTtcblx0ICAgICAgICB9KTtcblx0ICAgICAgfSk7XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiAnc2V0SWRlbnRpdHknLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIHNldElkZW50aXR5KCkge1xuXHQgICAgICB2YXIgX3RoaXMyID0gdGhpcztcblx0XG5cdCAgICAgIHZhciBkZWZlcnJlZCA9IHRoaXMuJHEuZGVmZXIoKTtcblx0ICAgICAgdmFyIGlkZW50aXR5UHJvbWlzZSA9IHRoaXMuSWRlbnRpdHlTZXJ2aWNlLmdldElkZW50aXR5KCk7XG5cdCAgICAgIGlkZW50aXR5UHJvbWlzZS50aGVuKGZ1bmN0aW9uIChkYXRhKSB7XG5cdCAgICAgICAgX3RoaXMyLnNldERpc3RyaWJ1dG9ycyhkYXRhWydkaXN0cmlidXRvcnMnXSk7XG5cdCAgICAgICAgX3RoaXMyLnNldERpc3RyaWJ1dG9yc0FzQWRtaW4oZGF0YVsnZGlzdHJpYnV0b3JzX2FzX2FkbWluJ10pO1xuXHQgICAgICAgIF90aGlzMi5zZXRJc0FkbWluKGRhdGFbJ2lzX2FkbWluJ10pO1xuXHQgICAgICAgIF90aGlzMi5zZXRVc2VyRW1haWwoZGF0YVsnZW1haWwnXSk7XG5cdCAgICAgICAgX3RoaXMyLnNldElzQWRtaW4oZGF0YVtcImlzX2FkbWluXCJdKTtcblx0XG5cdCAgICAgICAgcmV0dXJuIGRlZmVycmVkLnJlc29sdmUoKTtcblx0ICAgICAgfSk7XG5cdCAgICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogJ3JlbW92ZVVzZXJJbmZvJyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiByZW1vdmVVc2VySW5mbygpIHtcblx0ICAgICAgdGhpcy5TdG9yYWdlU2VydmljZS5yZW1vdmVBbGwoKTtcblx0ICAgIH1cblx0ICB9XSk7XG5cdCAgcmV0dXJuIFNlc3Npb25zU2VydmljZTtcblx0fSgpO1xuXHRcblx0ZXhwb3J0cy5kZWZhdWx0ID0gU2Vzc2lvbnNTZXJ2aWNlO1xuXG4vKioqLyB9LFxuXG4vKioqLyA3MTM6XG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQndXNlIHN0cmljdCc7XG5cdFxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0ICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblx0XG5cdHZhciBfY2xhc3NDYWxsQ2hlY2syID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2OTUpO1xuXHRcblx0dmFyIF9jbGFzc0NhbGxDaGVjazMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jbGFzc0NhbGxDaGVjazIpO1xuXHRcblx0dmFyIF9jcmVhdGVDbGFzczIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDY5Nik7XG5cdFxuXHR2YXIgX2NyZWF0ZUNsYXNzMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NyZWF0ZUNsYXNzMik7XG5cdFxuXHR2YXIgX2xvY2tyID0gX193ZWJwYWNrX3JlcXVpcmVfXyg3MTQpO1xuXHRcblx0dmFyIF9sb2NrcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9sb2Nrcik7XG5cdFxuXHRmdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXHRcblx0dmFyIFN0b3JhZ2VTZXJ2aWNlID0gZnVuY3Rpb24gKCkge1xuXHQgIGZ1bmN0aW9uIFN0b3JhZ2VTZXJ2aWNlKCkge1xuXHQgICAgKDAsIF9jbGFzc0NhbGxDaGVjazMuZGVmYXVsdCkodGhpcywgU3RvcmFnZVNlcnZpY2UpO1xuXHQgIH1cblx0XG5cdCAgKDAsIF9jcmVhdGVDbGFzczMuZGVmYXVsdCkoU3RvcmFnZVNlcnZpY2UsIFt7XG5cdCAgICBrZXk6ICdzZXQnLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIHNldChrZXksIHZhbHVlKSB7XG5cdCAgICAgIHJldHVybiBfbG9ja3IyLmRlZmF1bHQuc2V0KGtleSwgdmFsdWUpO1xuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogJ2dldCcsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0KGtleSkge1xuXHQgICAgICByZXR1cm4gX2xvY2tyMi5kZWZhdWx0LmdldChrZXkpO1xuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogJ3JtJyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBybShrZXkpIHtcblx0ICAgICAgcmV0dXJuIF9sb2NrcjIuZGVmYXVsdC5ybShrZXkpO1xuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogJ3JlbW92ZUFsbCcsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gcmVtb3ZlQWxsKCkge1xuXHQgICAgICBfbG9ja3IyLmRlZmF1bHQuZmx1c2goKTtcblx0ICAgIH1cblx0ICB9XSk7XG5cdCAgcmV0dXJuIFN0b3JhZ2VTZXJ2aWNlO1xuXHR9KCk7XG5cdFxuXHRleHBvcnRzLmRlZmF1bHQgPSBTdG9yYWdlU2VydmljZTtcblxuLyoqKi8gfSxcblxuLyoqKi8gNzE1OlxuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG5cdCAgdmFsdWU6IHRydWVcblx0fSk7XG5cdFxuXHR2YXIgX2NsYXNzQ2FsbENoZWNrMiA9IF9fd2VicGFja19yZXF1aXJlX18oNjk1KTtcblx0XG5cdHZhciBfY2xhc3NDYWxsQ2hlY2szID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2xhc3NDYWxsQ2hlY2syKTtcblx0XG5cdHZhciBfY3JlYXRlQ2xhc3MyID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2OTYpO1xuXHRcblx0dmFyIF9jcmVhdGVDbGFzczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVDbGFzczIpO1xuXHRcblx0ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblx0XG5cdHZhciBUZW5hbnRzU2VydmljZSA9IGZ1bmN0aW9uICgpIHtcblx0ICBUZW5hbnRzU2VydmljZS4kaW5qZWN0ID0gW1wiUmVzdGFuZ3VsYXJcIiwgXCJTZXNzaW9uc1NlcnZpY2VcIl07XG5cdCAgZnVuY3Rpb24gVGVuYW50c1NlcnZpY2UoUmVzdGFuZ3VsYXIsIFNlc3Npb25zU2VydmljZSkge1xuXHQgICAgJ25nSW5qZWN0Jztcblx0XG5cdCAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMy5kZWZhdWx0KSh0aGlzLCBUZW5hbnRzU2VydmljZSk7XG5cdCAgICB0aGlzLlJlc3Rhbmd1bGFyID0gUmVzdGFuZ3VsYXI7XG5cdCAgICB0aGlzLlNlc3Npb25zU2VydmljZSA9IFNlc3Npb25zU2VydmljZTtcblx0ICB9XG5cdFxuXHQgICgwLCBfY3JlYXRlQ2xhc3MzLmRlZmF1bHQpKFRlbmFudHNTZXJ2aWNlLCBbe1xuXHQgICAga2V5OiAnc2F2ZScsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gc2F2ZSh0ZW5hbnQpIHtcblx0ICAgICAgaWYgKHRlbmFudC5rZXkgIT09IHVuZGVmaW5lZCkge1xuXHQgICAgICAgIHZhciBwcm9taXNlID0gdGVuYW50LnB1dCgpO1xuXHQgICAgICB9IGVsc2Uge1xuXHQgICAgICAgIHZhciBwcm9taXNlID0gdGhpcy5SZXN0YW5ndWxhci5zZXJ2aWNlKCd0ZW5hbnRzJykucG9zdCh0ZW5hbnQpO1xuXHQgICAgICB9XG5cdCAgICAgIHJldHVybiBwcm9taXNlO1xuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogJ3NhdmVPdmVybGF5U2V0dGluZ3MnLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIHNhdmVPdmVybGF5U2V0dGluZ3ModGVuYW50X3VybHNhZmVfa2V5LCBib3R0b21fbGVmdCwgYm90dG9tX3JpZ2h0LCB0b3BfcmlnaHQsIHRvcF9sZWZ0KSB7XG5cdCAgICAgIHZhciBwYXlsb2FkID0ge1xuXHQgICAgICAgIGJvdHRvbV9sZWZ0OiBib3R0b21fbGVmdCxcblx0ICAgICAgICBib3R0b21fcmlnaHQ6IGJvdHRvbV9yaWdodCxcblx0ICAgICAgICB0b3BfcmlnaHQ6IHRvcF9yaWdodCxcblx0ICAgICAgICB0b3BfbGVmdDogdG9wX2xlZnRcblx0ICAgICAgfTtcblx0ICAgICAgcmV0dXJuIHRoaXMuUmVzdGFuZ3VsYXIub25lVXJsKCdvdmVybGF5JywgJy9hcGkvdjEvb3ZlcmxheS90ZW5hbnQvJyArIHRlbmFudF91cmxzYWZlX2tleSkuY3VzdG9tUE9TVChwYXlsb2FkKTtcblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6ICdvdmVybGF5QXBwbHlUZW5hbnQnLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIG92ZXJsYXlBcHBseVRlbmFudCh0ZW5hbnRfdXJsc2FmZV9rZXkpIHtcblx0ICAgICAgcmV0dXJuIHRoaXMuUmVzdGFuZ3VsYXIub25lVXJsKCdvdmVybGF5JywgJy9hcGkvdjEvb3ZlcmxheS90ZW5hbnQvJyArIHRlbmFudF91cmxzYWZlX2tleSArICcvYXBwbHknKS5wb3N0KCk7XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiAnc2VhcmNoQWxsVGVuYW50c0J5TmFtZScsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gc2VhcmNoQWxsVGVuYW50c0J5TmFtZSh0ZW5hbnRfbmFtZSkge1xuXHQgICAgICB2YXIgcHJvbWlzZSA9IHRoaXMuUmVzdGFuZ3VsYXIuYWxsKCd0ZW5hbnRzJykuY3VzdG9tR0VUTElTVChcIlwiLCB7IHRlbmFudF9uYW1lOiB0ZW5hbnRfbmFtZSB9KTtcblx0ICAgICAgcmV0dXJuIHByb21pc2U7XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiAnZmV0Y2hBbGxUZW5hbnRzJyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBmZXRjaEFsbFRlbmFudHMoKSB7XG5cdCAgICAgIHZhciBwcm9taXNlID0gdGhpcy5SZXN0YW5ndWxhci5hbGwoJ3RlbmFudHMnKS5nZXRMaXN0KCk7XG5cdCAgICAgIHJldHVybiBwcm9taXNlO1xuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogJ2ZldGNoQWxsVGVuYW50c1BhZ2luYXRlZCcsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gZmV0Y2hBbGxUZW5hbnRzUGFnaW5hdGVkKHBhZ2Vfc2l6ZSwgb2Zmc2V0KSB7XG5cdCAgICAgIHZhciB1cmwgPSAnYXBpL3YxL3RlbmFudHMvcGFnaW5hdGVkLycgKyBwYWdlX3NpemUgKyAnLycgKyBvZmZzZXQ7XG5cdCAgICAgIHZhciBwcm9taXNlID0gdGhpcy5SZXN0YW5ndWxhci5vbmVVcmwoJ3RlbmFudHMnLCB1cmwpLmdldCgpO1xuXHQgICAgICByZXR1cm4gcHJvbWlzZTtcblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6ICdnZXRUZW5hbnRCeUtleScsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0VGVuYW50QnlLZXkodGVuYW50S2V5KSB7XG5cdCAgICAgIHZhciB1cmwgPSAnYXBpL3YxL3RlbmFudHMvJyArIHRlbmFudEtleTtcblx0ICAgICAgdmFyIHByb21pc2UgPSB0aGlzLlJlc3Rhbmd1bGFyLm9uZVVybCgndGVuYW50cycsIHVybCkuZ2V0KCk7XG5cdCAgICAgIHJldHVybiBwcm9taXNlO1xuXHQgICAgfVxuXHQgIH0sIHtcblx0ICAgIGtleTogJ2RlbGV0ZScsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gX2RlbGV0ZSh0ZW5hbnQpIHtcblx0ICAgICAgaWYgKHRlbmFudC5rZXkgIT09IHVuZGVmaW5lZCkge1xuXHQgICAgICAgIHZhciBwcm9taXNlID0gdGhpcy5SZXN0YW5ndWxhci5vbmUoXCJ0ZW5hbnRzXCIsIHRlbmFudC5rZXkpLnJlbW92ZSgpO1xuXHQgICAgICAgIHJldHVybiBwcm9taXNlO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgfV0pO1xuXHQgIHJldHVybiBUZW5hbnRzU2VydmljZTtcblx0fSgpO1xuXHRcblx0ZXhwb3J0cy5kZWZhdWx0ID0gVGVuYW50c1NlcnZpY2U7XG5cbi8qKiovIH0sXG5cbi8qKiovIDcxNjpcbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuXHQgIHZhbHVlOiB0cnVlXG5cdH0pO1xuXHRcblx0dmFyIF9jbGFzc0NhbGxDaGVjazIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDY5NSk7XG5cdFxuXHR2YXIgX2NsYXNzQ2FsbENoZWNrMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NsYXNzQ2FsbENoZWNrMik7XG5cdFxuXHR2YXIgX2NyZWF0ZUNsYXNzMiA9IF9fd2VicGFja19yZXF1aXJlX18oNjk2KTtcblx0XG5cdHZhciBfY3JlYXRlQ2xhc3MzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlQ2xhc3MyKTtcblx0XG5cdGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cdFxuXHR2YXIgVGltZXpvbmVzU2VydmljZSA9IGZ1bmN0aW9uICgpIHtcblx0ICBUaW1lem9uZXNTZXJ2aWNlLiRpbmplY3QgPSBbXCJSZXN0YW5ndWxhclwiXTtcblx0ICBmdW5jdGlvbiBUaW1lem9uZXNTZXJ2aWNlKFJlc3Rhbmd1bGFyKSB7XG5cdCAgICAnbmdJbmplY3QnO1xuXHRcblx0ICAgICgwLCBfY2xhc3NDYWxsQ2hlY2szLmRlZmF1bHQpKHRoaXMsIFRpbWV6b25lc1NlcnZpY2UpO1xuXHQgICAgdGhpcy5SZXN0YW5ndWxhciA9IFJlc3Rhbmd1bGFyO1xuXHQgIH1cblx0XG5cdCAgKDAsIF9jcmVhdGVDbGFzczMuZGVmYXVsdCkoVGltZXpvbmVzU2VydmljZSwgW3tcblx0ICAgIGtleTogJ2dldFVzVGltZXpvbmVzJyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRVc1RpbWV6b25lcygpIHtcblx0ICAgICAgdmFyIHByb21pc2UgPSB0aGlzLlJlc3Rhbmd1bGFyLm9uZVVybCgndGltZXpvbmVzJywgJ2FwaS92MS90aW1lem9uZXMvdXMnKS5nZXQoKTtcblx0ICAgICAgcmV0dXJuIHByb21pc2U7XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiAnZ2V0QWxsVGltZXpvbmVzJyxcblx0ICAgIHZhbHVlOiBmdW5jdGlvbiBnZXRBbGxUaW1lem9uZXMoKSB7XG5cdCAgICAgIHZhciBwcm9taXNlID0gdGhpcy5SZXN0YW5ndWxhci5vbmVVcmwoJ3RpbWV6b25lcycsICdhcGkvdjEvdGltZXpvbmVzL2FsbCcpLmdldCgpO1xuXHQgICAgICByZXR1cm4gcHJvbWlzZTtcblx0ICAgIH1cblx0ICB9LCB7XG5cdCAgICBrZXk6ICdnZXRDdXN0b21UaW1lem9uZXMnLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIGdldEN1c3RvbVRpbWV6b25lcygpIHtcblx0ICAgICAgdmFyIHByb21pc2UgPSB0aGlzLlJlc3Rhbmd1bGFyLm9uZVVybCgndGltZXpvbmVzJywgJ2FwaS92MS90aW1lem9uZXMvY3VzdG9tJykuZ2V0KCk7XG5cdCAgICAgIHJldHVybiBwcm9taXNlO1xuXHQgICAgfVxuXHQgIH1dKTtcblx0ICByZXR1cm4gVGltZXpvbmVzU2VydmljZTtcblx0fSgpO1xuXHRcblx0ZXhwb3J0cy5kZWZhdWx0ID0gVGltZXpvbmVzU2VydmljZTtcblxuLyoqKi8gfSxcblxuLyoqKi8gNzE3OlxuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG5cdCAgdmFsdWU6IHRydWVcblx0fSk7XG5cdFxuXHR2YXIgX2NsYXNzQ2FsbENoZWNrMiA9IF9fd2VicGFja19yZXF1aXJlX18oNjk1KTtcblx0XG5cdHZhciBfY2xhc3NDYWxsQ2hlY2szID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY2xhc3NDYWxsQ2hlY2syKTtcblx0XG5cdHZhciBfY3JlYXRlQ2xhc3MyID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2OTYpO1xuXHRcblx0dmFyIF9jcmVhdGVDbGFzczMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9jcmVhdGVDbGFzczIpO1xuXHRcblx0ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblx0XG5cdHZhciBUb2FzdHNTZXJ2aWNlID0gZnVuY3Rpb24gKCkge1xuXHQgIFRvYXN0c1NlcnZpY2UuJGluamVjdCA9IFtcInRvYXN0clwiXTtcblx0ICBmdW5jdGlvbiBUb2FzdHNTZXJ2aWNlKHRvYXN0cikge1xuXHQgICAgJ25nSW5qZWN0Jztcblx0XG5cdCAgICAoMCwgX2NsYXNzQ2FsbENoZWNrMy5kZWZhdWx0KSh0aGlzLCBUb2FzdHNTZXJ2aWNlKTtcblx0ICAgIHRoaXMudG9hc3RyID0gdG9hc3RyO1xuXHQgIH1cblx0XG5cdCAgKDAsIF9jcmVhdGVDbGFzczMuZGVmYXVsdCkoVG9hc3RzU2VydmljZSwgW3tcblx0ICAgIGtleTogJ3Nob3dTdWNjZXNzVG9hc3QnLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIHNob3dTdWNjZXNzVG9hc3QobWVzc2FnZSkge1xuXHQgICAgICB2YXIgdGl0bGUgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6ICdTdWNjZXNzISc7XG5cdFxuXHQgICAgICByZXR1cm4gdGhpcy50b2FzdHIuc3VjY2VzcyhtZXNzYWdlLCB0aXRsZSk7XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiAnc2hvd0Vycm9yVG9hc3QnLFxuXHQgICAgdmFsdWU6IGZ1bmN0aW9uIHNob3dFcnJvclRvYXN0KG1lc3NhZ2UpIHtcblx0ICAgICAgdmFyIHRpdGxlID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiAnRXJyb3IhJztcblx0XG5cdCAgICAgIHJldHVybiB0aGlzLnRvYXN0ci5lcnJvcihtZXNzYWdlLCB0aXRsZSk7XG5cdCAgICB9XG5cdCAgfSwge1xuXHQgICAga2V5OiAnc2hvd0luZm9Ub2FzdCcsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gc2hvd0luZm9Ub2FzdChtZXNzYWdlKSB7XG5cdCAgICAgIHZhciB0aXRsZSA9IGFyZ3VtZW50cy5sZW5ndGggPiAxICYmIGFyZ3VtZW50c1sxXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzFdIDogJ0luZm9ybWF0aW9uJztcblx0XG5cdCAgICAgIHJldHVybiB0aGlzLnRvYXN0ci5pbmZvKG1lc3NhZ2UsIHRpdGxlKTtcblx0ICAgIH1cblx0ICB9XSk7XG5cdCAgcmV0dXJuIFRvYXN0c1NlcnZpY2U7XG5cdH0oKTtcblx0XG5cdGV4cG9ydHMuZGVmYXVsdCA9IFRvYXN0c1NlcnZpY2U7XG5cbi8qKiovIH0sXG5cbi8qKiovIDcxODpcbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuXHQgIHZhbHVlOiB0cnVlXG5cdH0pO1xuXHRcblx0dmFyIF9jbGFzc0NhbGxDaGVjazIgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDY5NSk7XG5cdFxuXHR2YXIgX2NsYXNzQ2FsbENoZWNrMyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQoX2NsYXNzQ2FsbENoZWNrMik7XG5cdFxuXHR2YXIgX2NyZWF0ZUNsYXNzMiA9IF9fd2VicGFja19yZXF1aXJlX18oNjk2KTtcblx0XG5cdHZhciBfY3JlYXRlQ2xhc3MzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfY3JlYXRlQ2xhc3MyKTtcblx0XG5cdGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cdFxuXHR2YXIgVmVyc2lvbnNTZXJ2aWNlID0gZnVuY3Rpb24gKCkge1xuXHQgIFZlcnNpb25zU2VydmljZS4kaW5qZWN0ID0gW1wiUmVzdGFuZ3VsYXJcIl07XG5cdCAgZnVuY3Rpb24gVmVyc2lvbnNTZXJ2aWNlKFJlc3Rhbmd1bGFyKSB7XG5cdCAgICAnbmdJbmplY3QnO1xuXHRcblx0ICAgICgwLCBfY2xhc3NDYWxsQ2hlY2szLmRlZmF1bHQpKHRoaXMsIFZlcnNpb25zU2VydmljZSk7XG5cdCAgICB0aGlzLlJlc3Rhbmd1bGFyID0gUmVzdGFuZ3VsYXI7XG5cdCAgfVxuXHRcblx0ICAoMCwgX2NyZWF0ZUNsYXNzMy5kZWZhdWx0KShWZXJzaW9uc1NlcnZpY2UsIFt7XG5cdCAgICBrZXk6ICdnZXRWZXJzaW9ucycsXG5cdCAgICB2YWx1ZTogZnVuY3Rpb24gZ2V0VmVyc2lvbnMoKSB7XG5cdCAgICAgIHZhciBwcm9taXNlID0gdGhpcy5SZXN0YW5ndWxhci5vbmVVcmwoJ3ZlcnNpb25zJykuZ2V0KCk7XG5cdCAgICAgIHJldHVybiBwcm9taXNlO1xuXHQgICAgfVxuXHQgIH1dKTtcblx0ICByZXR1cm4gVmVyc2lvbnNTZXJ2aWNlO1xuXHR9KCk7XG5cdFxuXHRleHBvcnRzLmRlZmF1bHQgPSBWZXJzaW9uc1NlcnZpY2U7XG5cbi8qKiovIH0sXG5cbi8qKiovIDcxOTpcbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdFRlbmFudExvZ3NDdHJsLiRpbmplY3QgPSBbXCIkc3RhdGVQYXJhbXNcIiwgXCJUZW5hbnRzU2VydmljZVwiLCBcIiRzdGF0ZVwiLCBcIlByb2dyZXNzQmFyU2VydmljZVwiLCBcIkludGVncmF0aW9uRXZlbnRzXCIsIFwiJHNjb3BlXCIsIFwiRGF0ZU1hbmlwdWxhdGlvblNlcnZpY2VcIl07XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuXHQgIHZhbHVlOiB0cnVlXG5cdH0pO1xuXHRleHBvcnRzLlRlbmFudExvZ3NDdHJsID0gdW5kZWZpbmVkO1xuXHRcblx0dmFyIF9qYXZhc2NyaXB0TmF0dXJhbFNvcnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDY1OSk7XG5cdFxuXHR2YXIgX2phdmFzY3JpcHROYXR1cmFsU29ydDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9qYXZhc2NyaXB0TmF0dXJhbFNvcnQpO1xuXHRcblx0ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblx0XG5cdGZ1bmN0aW9uIFRlbmFudExvZ3NDdHJsKCRzdGF0ZVBhcmFtcywgVGVuYW50c1NlcnZpY2UsICRzdGF0ZSwgUHJvZ3Jlc3NCYXJTZXJ2aWNlLCBJbnRlZ3JhdGlvbkV2ZW50cywgJHNjb3BlLCBEYXRlTWFuaXB1bGF0aW9uU2VydmljZSkge1xuXHQgIFwibmdJbmplY3RcIjtcblx0XG5cdCAgdmFyIHZtID0gdGhpcztcblx0ICAkc2NvcGUudGFiSW5kZXggPSA1O1xuXHQgIHZtLnRlbmFudEtleSA9ICRzdGF0ZVBhcmFtcy50ZW5hbnRLZXk7XG5cdCAgdmFyIHRlbmFudFByb21pc2UgPSBUZW5hbnRzU2VydmljZS5nZXRUZW5hbnRCeUtleSh2bS50ZW5hbnRLZXkpO1xuXHQgIHRlbmFudFByb21pc2UudGhlbihmdW5jdGlvbiAoZGF0YSkge1xuXHQgICAgdm0uY3VycmVudFRlbmFudCA9IGRhdGE7XG5cdCAgfSk7XG5cdFxuXHQgIHZtLmxvY2FsRnJvbVV0YyA9IGZ1bmN0aW9uIChldmVudHMpIHtcblx0ICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZXZlbnRzLmxlbmd0aDsgaSsrKSB7XG5cdCAgICAgIHZhciBlYWNoID0gZXZlbnRzW2ldO1xuXHQgICAgICBpZiAoZWFjaC51dGNUaW1lc3RhbXApIHtcblx0ICAgICAgICBlYWNoLnV0Y1RpbWVzdGFtcCA9IERhdGVNYW5pcHVsYXRpb25TZXJ2aWNlLmdlbmVyYXRlTG9jYWxGcm9tVVRDKGVhY2gudXRjVGltZXN0YW1wKTtcblx0ICAgICAgfVxuXHQgICAgfVxuXHQgICAgcmV0dXJuO1xuXHQgIH07XG5cdFxuXHQgIHZtLmdldFRlbmFudENyZWF0ZUV2ZW50cyA9IGZ1bmN0aW9uICgpIHtcblx0ICAgIFByb2dyZXNzQmFyU2VydmljZS5zdGFydCgpO1xuXHQgICAgdmFyIGVucm9sbG1lbnRFdmVudHNQcm9taXNlID0gSW50ZWdyYXRpb25FdmVudHMuZ2V0VGVuYW50Q3JlYXRlRXZlbnRzKHZtLnRlbmFudEtleSk7XG5cdCAgICByZXR1cm4gZW5yb2xsbWVudEV2ZW50c1Byb21pc2UudGhlbihmdW5jdGlvbiAoZGF0YSkge1xuXHQgICAgICB2bS50ZW5hbnRDcmVhdGVFdmVudHMgPSBkYXRhO1xuXHQgICAgICB2bS5sb2NhbEZyb21VdGMoZGF0YSk7XG5cdCAgICAgIHJldHVybiBQcm9ncmVzc0JhclNlcnZpY2UuY29tcGxldGUoKTtcblx0ICAgIH0pO1xuXHQgIH07XG5cdFxuXHQgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdCAgLy8gU2V0dXBcblx0ICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHRcblx0ICB2bS5pbml0aWFsaXplID0gZnVuY3Rpb24gKCkge1xuXHQgICAgdm0uZ2V0VGVuYW50Q3JlYXRlRXZlbnRzKCk7XG5cdCAgfTtcblx0XG5cdCAgJHNjb3BlLiR3YXRjaCgndGFiSW5kZXgnLCBmdW5jdGlvbiAodG9UYWIsIGZyb21UYWIpIHtcblx0ICAgIGlmICh0b1RhYiAhPT0gdW5kZWZpbmVkKSB7XG5cdCAgICAgIHN3aXRjaCAodG9UYWIpIHtcblx0ICAgICAgICBjYXNlIDA6XG5cdCAgICAgICAgICByZXR1cm4gJHN0YXRlLmdvKCd0ZW5hbnREZXRhaWxzJywgeyB0ZW5hbnRLZXk6ICRzdGF0ZVBhcmFtcy50ZW5hbnRLZXkgfSk7XG5cdCAgICAgICAgY2FzZSAxOlxuXHQgICAgICAgICAgcmV0dXJuICRzdGF0ZS5nbygndGVuYW50TWFuYWdlZERldmljZXMnLCB7IHRlbmFudEtleTogJHN0YXRlUGFyYW1zLnRlbmFudEtleSB9KTtcblx0ICAgICAgICBjYXNlIDI6XG5cdCAgICAgICAgICByZXR1cm4gJHN0YXRlLmdvKCd0ZW5hbnRVbm1hbmFnZWREZXZpY2VzJywgeyB0ZW5hbnRLZXk6ICRzdGF0ZVBhcmFtcy50ZW5hbnRLZXkgfSk7XG5cdCAgICAgICAgY2FzZSAzOlxuXHQgICAgICAgICAgcmV0dXJuICRzdGF0ZS5nbygndGVuYW50TG9jYXRpb25zJywgeyB0ZW5hbnRLZXk6ICRzdGF0ZVBhcmFtcy50ZW5hbnRLZXkgfSk7XG5cdCAgICAgICAgY2FzZSA0OlxuXHQgICAgICAgICAgcmV0dXJuICRzdGF0ZS5nbygndGVuYW50T3ZlcmxheXMnLCB7IHRlbmFudEtleTogJHN0YXRlUGFyYW1zLnRlbmFudEtleSB9KTtcblx0ICAgICAgICBjYXNlIDU6XG5cdCAgICAgICAgICByZXR1cm4gJHN0YXRlLmdvKCd0ZW5hbnRMb2dzJywgeyB0ZW5hbnRLZXk6ICRzdGF0ZVBhcmFtcy50ZW5hbnRLZXkgfSk7XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICB9KTtcblx0XG5cdCAgcmV0dXJuIHZtO1xuXHR9XG5cdFxuXHRleHBvcnRzLlRlbmFudExvZ3NDdHJsID0gVGVuYW50TG9nc0N0cmw7XG5cbi8qKiovIH0sXG5cbi8qKiovIDcyMDpcbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXykge1xuXG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdFRlbmFudE92ZXJsYXlzQ3RybC4kaW5qZWN0ID0gW1wiJHN0YXRlUGFyYW1zXCIsIFwiVGVuYW50c1NlcnZpY2VcIiwgXCIkc3RhdGVcIiwgXCJQcm9ncmVzc0JhclNlcnZpY2VcIiwgXCJUb2FzdHNTZXJ2aWNlXCIsIFwiJHNjb3BlXCIsIFwiSW1hZ2VTZXJ2aWNlXCIsIFwiJHRpbWVvdXRcIiwgXCIkbWREaWFsb2dcIl07XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuXHQgIHZhbHVlOiB0cnVlXG5cdH0pO1xuXHRleHBvcnRzLlRlbmFudE92ZXJsYXlzQ3RybCA9IHVuZGVmaW5lZDtcblx0XG5cdHZhciBfZ2V0SXRlcmF0b3IyID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2NTApO1xuXHRcblx0dmFyIF9nZXRJdGVyYXRvcjMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9nZXRJdGVyYXRvcjIpO1xuXHRcblx0dmFyIF9qYXZhc2NyaXB0TmF0dXJhbFNvcnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDY1OSk7XG5cdFxuXHR2YXIgX2phdmFzY3JpcHROYXR1cmFsU29ydDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9qYXZhc2NyaXB0TmF0dXJhbFNvcnQpO1xuXHRcblx0ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblx0XG5cdGZ1bmN0aW9uIFRlbmFudE92ZXJsYXlzQ3RybCgkc3RhdGVQYXJhbXMsIFRlbmFudHNTZXJ2aWNlLCAkc3RhdGUsIFByb2dyZXNzQmFyU2VydmljZSwgVG9hc3RzU2VydmljZSwgJHNjb3BlLCBJbWFnZVNlcnZpY2UsICR0aW1lb3V0LCAkbWREaWFsb2cpIHtcblx0ICBcIm5nSW5qZWN0XCI7XG5cdFxuXHQgIHZhciB2bSA9IHRoaXM7XG5cdCAgJHNjb3BlLnRhYkluZGV4ID0gNDtcblx0ICB2bS50ZW5hbnRLZXkgPSAkc3RhdGVQYXJhbXMudGVuYW50S2V5O1xuXHQgIHZtLmVkaXRNb2RlID0gISEkc3RhdGVQYXJhbXMudGVuYW50S2V5O1xuXHQgIHZhciB0ZW5hbnRQcm9taXNlID0gVGVuYW50c1NlcnZpY2UuZ2V0VGVuYW50QnlLZXkodm0udGVuYW50S2V5KTtcblx0ICB0ZW5hbnRQcm9taXNlLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcblx0ICAgIHZtLmN1cnJlbnRUZW5hbnQgPSBkYXRhO1xuXHQgIH0pO1xuXHRcblx0ICB2bS5vdmVybGF5Q2hhbmdlZCA9IGZhbHNlO1xuXHRcblx0ICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdCAgLy8gT3ZlcmxheXNcblx0ICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdCAgdm0uYWRqdXN0T3ZlcmxheVN0YXR1cyA9IGZ1bmN0aW9uIChzdGF0dXMpIHtcblx0ICAgIHZtLmN1cnJlbnRUZW5hbnQub3ZlcmxheVN0YXR1cyA9IHN0YXR1cztcblx0ICAgIFByb2dyZXNzQmFyU2VydmljZS5zdGFydCgpO1xuXHQgICAgdm0ubG9hZGluZ092ZXJsYXlzID0gdHJ1ZTtcblx0ICAgIHZhciBwcm9taXNlID0gVGVuYW50c1NlcnZpY2Uuc2F2ZSh2bS5jdXJyZW50VGVuYW50KTtcblx0ICAgIHByb21pc2UudGhlbihmdW5jdGlvbiAoKSB7XG5cdCAgICAgIFByb2dyZXNzQmFyU2VydmljZS5jb21wbGV0ZSgpO1xuXHQgICAgICB2YXIgdGVuYW50UHJvbWlzZSA9IFRlbmFudHNTZXJ2aWNlLmdldFRlbmFudEJ5S2V5KCRzdGF0ZVBhcmFtcy50ZW5hbnRLZXkpO1xuXHQgICAgICB0ZW5hbnRQcm9taXNlLnRoZW4oZnVuY3Rpb24gKHRlbmFudCkge1xuXHQgICAgICAgIHZtLmxvYWRpbmdPdmVybGF5cyA9IGZhbHNlO1xuXHQgICAgICAgIHZtLm9uU3VjY2Vzc1Jlc29sdmluZ1RlbmFudCh0ZW5hbnQpO1xuXHQgICAgICB9KTtcblx0ICAgIH0pO1xuXHQgICAgcHJvbWlzZS5jYXRjaChmdW5jdGlvbiAoZXJyKSB7XG5cdCAgICAgIFByb2dyZXNzQmFyU2VydmljZS5jb21wbGV0ZSgpO1xuXHQgICAgICBUb2FzdHNTZXJ2aWNlLnNob3dFcnJvclRvYXN0KCdTb21ldGhpbmcgd2VudCB3cm9uZycpO1xuXHQgICAgICBjb25zb2xlLmxvZyhlcnIpO1xuXHQgICAgfSk7XG5cdCAgICByZXR1cm4gcHJvbWlzZTtcblx0ICB9O1xuXHRcblx0ICB2bS51cGRhdGVPdmVybGF5cyA9IGZ1bmN0aW9uICgpIHtcblx0ICAgIHZtLmxvYWRpbmdPdmVybGF5cyA9IHRydWU7XG5cdCAgICB2YXIgdGVuYW50UHJvbWlzZSA9IHZtLmdldFRlbmFudCgpO1xuXHQgICAgdGVuYW50UHJvbWlzZS50aGVuKGZ1bmN0aW9uICh0ZW5hbnQpIHtcblx0ICAgICAgdm0ub3ZlcmxheUNoYW5nZWQgPSBmYWxzZTtcblx0ICAgICAgdm0uY3VycmVudFRlbmFudC5vdmVybGF5cyA9IHRlbmFudC5vdmVybGF5cztcblx0ICAgICAgdm0uY3VycmVudFRlbmFudENvcHkub3ZlcmxheXMgPSBhbmd1bGFyLmNvcHkodm0uY3VycmVudFRlbmFudC5vdmVybGF5cyk7XG5cdCAgICAgIHZtLmxvYWRpbmdPdmVybGF5cyA9IGZhbHNlO1xuXHQgICAgfSk7XG5cdCAgICByZXR1cm4gdGVuYW50UHJvbWlzZTtcblx0ICB9O1xuXHRcblx0ICB2bS5zdWJtaXRPdmVybGF5U2V0dGluZ3MgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICB2bS5sb2FkaW5nT3ZlcmxheXMgPSB0cnVlO1xuXHRcblx0ICAgIHZhciBvdmVybGF5U2V0dGluZ3MgPSBhbmd1bGFyLmNvcHkodm0uY3VycmVudFRlbmFudENvcHkub3ZlcmxheXMpO1xuXHQgICAgUHJvZ3Jlc3NCYXJTZXJ2aWNlLnN0YXJ0KCk7XG5cdCAgICB2YXIgcHJvbWlzZSA9IFRlbmFudHNTZXJ2aWNlLnNhdmVPdmVybGF5U2V0dGluZ3Modm0udGVuYW50S2V5LCBvdmVybGF5U2V0dGluZ3MuYm90dG9tX2xlZnQsIG92ZXJsYXlTZXR0aW5ncy5ib3R0b21fcmlnaHQsIG92ZXJsYXlTZXR0aW5ncy50b3BfcmlnaHQsIG92ZXJsYXlTZXR0aW5ncy50b3BfbGVmdCk7XG5cdFxuXHQgICAgdmFyIHVwZGF0ZU92ZXJsYXlQcm9taXNlRGVmZXJyZWQgPSBmdW5jdGlvbiB1cGRhdGVPdmVybGF5UHJvbWlzZURlZmVycmVkKCkge1xuXHQgICAgICB2YXIgdXBkYXRlT3ZlcmxheVByb21pc2UgPSB2bS51cGRhdGVPdmVybGF5cygpO1xuXHQgICAgICB1cGRhdGVPdmVybGF5UHJvbWlzZS50aGVuKGZ1bmN0aW9uIChyZXMpIHtcblx0ICAgICAgICBUb2FzdHNTZXJ2aWNlLnNob3dTdWNjZXNzVG9hc3QoJ1dlIHNhdmVkIHlvdXIgdXBkYXRlLicpO1xuXHQgICAgICAgIFByb2dyZXNzQmFyU2VydmljZS5jb21wbGV0ZSgpO1xuXHQgICAgICB9KTtcblx0ICAgICAgcmV0dXJuIHVwZGF0ZU92ZXJsYXlQcm9taXNlO1xuXHQgICAgfTtcblx0XG5cdCAgICBwcm9taXNlLnRoZW4oZnVuY3Rpb24gKCkge1xuXHQgICAgICAkdGltZW91dCh1cGRhdGVPdmVybGF5UHJvbWlzZURlZmVycmVkLCAxMDAwKTtcblx0ICAgIH0pO1xuXHRcblx0ICAgIHByb21pc2UuY2F0Y2goZnVuY3Rpb24gKHJlcykge1xuXHQgICAgICBQcm9ncmVzc0JhclNlcnZpY2UuY29tcGxldGUoKTtcblx0ICAgICAgVG9hc3RzU2VydmljZS5zaG93RXJyb3JUb2FzdCgnU29tZXRoaW5nIHdlbnQgd3JvbmcnKTtcblx0ICAgIH0pO1xuXHQgICAgcmV0dXJuIHByb21pc2U7XG5cdCAgfTtcblx0XG5cdCAgdm0uYXBwbHlUZW5hbnRPdmVybGF5ID0gZnVuY3Rpb24gKGV2KSB7XG5cdCAgICB2YXIgY29uZmlybSA9ICRtZERpYWxvZy5jb25maXJtKHtcblx0ICAgICAgdGl0bGU6ICdBcmUgeW91IHN1cmU/Jyxcblx0ICAgICAgdGV4dENvbnRlbnQ6ICdFYWNoIGRldmljZSBpbiB5b3VyIFRlbmFudCB3aWxsIGhhdmUgdGhlIGN1cnJlbnQgT3ZlcmxheSBUZW1wbGF0ZSBhcHBsaWVkIGFzIGl0cyBzZXR0aW5ncy4nLFxuXHQgICAgICB0YXJnZXRFdmVudDogZXYsXG5cdCAgICAgIGFyaWFMYWJlbDogJ0x1Y2t5IGRheScsXG5cdCAgICAgIG9rOiAnQ29uZmlybScsXG5cdCAgICAgIGNhbmNlbDogJ05ldmVybWluZCdcblx0ICAgIH0pO1xuXHRcblx0ICAgICRtZERpYWxvZy5zaG93KGNvbmZpcm0pLnRoZW4oZnVuY3Rpb24gKCkge1xuXHQgICAgICBQcm9ncmVzc0JhclNlcnZpY2Uuc3RhcnQoKTtcblx0ICAgICAgdmFyIHByb21pc2UgPSBUZW5hbnRzU2VydmljZS5vdmVybGF5QXBwbHlUZW5hbnQodm0udGVuYW50S2V5KTtcblx0ICAgICAgcHJvbWlzZS50aGVuKGZ1bmN0aW9uIChyZXMpIHtcblx0ICAgICAgICB2YXIgbWVzc2FnZSA9ICdZb3VyIFRlbmFudCBPdmVybGF5IFNldHRpbmdzIGFyZSBiZWluZyBhcHBsaWVkIHRvIGVhY2ggZGV2aWNlIGluIHlvdXIgVGVuYW50LiBQbGVhc2Ugd2FpdCBwYXRpZW50bHkgZm9yIHRoaXMgcHJvY2VzcyB0byBjb21wbGV0ZS4nO1xuXHQgICAgICAgIFRvYXN0c1NlcnZpY2Uuc2hvd1N1Y2Nlc3NUb2FzdChtZXNzYWdlKTtcblx0ICAgICAgICB2bS5sb2FkaW5nID0gdHJ1ZTtcblx0ICAgICAgICB2bS5nZXRUZW5hbnQoKTtcblx0ICAgICAgICBQcm9ncmVzc0JhclNlcnZpY2UuY29tcGxldGUoKTtcblx0ICAgICAgfSk7XG5cdCAgICAgIHByb21pc2UuY2F0Y2goZnVuY3Rpb24gKHJlcykge1xuXHQgICAgICAgIFByb2dyZXNzQmFyU2VydmljZS5jb21wbGV0ZSgpO1xuXHQgICAgICAgIFRvYXN0c1NlcnZpY2Uuc2hvd0Vycm9yVG9hc3QoJ1NvbWV0aGluZyB3ZW50IHdyb25nJyk7XG5cdCAgICAgIH0pO1xuXHQgICAgICByZXR1cm4gcHJvbWlzZTtcblx0ICAgIH0pO1xuXHQgIH07XG5cdFxuXHQgIHZtLmNoZWNrRm9yT3ZlcmxheUNoYW5nZXMgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICB2YXIgY2hhbmdlZCA9IGZhbHNlO1xuXHQgICAgdmFyIGN1cnJlbnRUZW5hbnRPdmVybGF5cyA9IHZtLmN1cnJlbnRUZW5hbnQub3ZlcmxheXM7XG5cdCAgICB2YXIgY3VycmVudFRlbmFudENvcHlPdmVybGF5cyA9IHZtLmN1cnJlbnRUZW5hbnRDb3B5Lm92ZXJsYXlzO1xuXHQgICAgdmFyIHBvc2l0aW9ucyA9IFsndG9wX2xlZnQnLCAndG9wX3JpZ2h0JywgJ2JvdHRvbV9yaWdodCcsICdib3R0b21fbGVmdCddO1xuXHRcblx0ICAgIHZhciBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gdHJ1ZTtcblx0ICAgIHZhciBfZGlkSXRlcmF0b3JFcnJvciA9IGZhbHNlO1xuXHQgICAgdmFyIF9pdGVyYXRvckVycm9yID0gdW5kZWZpbmVkO1xuXHRcblx0ICAgIHRyeSB7XG5cdCAgICAgIGZvciAodmFyIF9pdGVyYXRvciA9ICgwLCBfZ2V0SXRlcmF0b3IzLmRlZmF1bHQpKHBvc2l0aW9ucyksIF9zdGVwOyAhKF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSAoX3N0ZXAgPSBfaXRlcmF0b3IubmV4dCgpKS5kb25lKTsgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IHRydWUpIHtcblx0ICAgICAgICB2YXIgcG9zID0gX3N0ZXAudmFsdWU7XG5cdFxuXHQgICAgICAgIGlmIChjdXJyZW50VGVuYW50T3ZlcmxheXNbcG9zXS5zaXplICE9PSBjdXJyZW50VGVuYW50Q29weU92ZXJsYXlzW3Bvc10uc2l6ZSkge1xuXHQgICAgICAgICAgY2hhbmdlZCA9IHRydWU7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGlmIChjdXJyZW50VGVuYW50T3ZlcmxheXNbcG9zXS50eXBlICE9PSBjdXJyZW50VGVuYW50Q29weU92ZXJsYXlzW3Bvc10udHlwZSkge1xuXHQgICAgICAgICAgY2hhbmdlZCA9IHRydWU7XG5cdCAgICAgICAgfVxuXHQgICAgICAgIGlmIChjdXJyZW50VGVuYW50T3ZlcmxheXNbcG9zXS50eXBlID09PSAnbG9nbycpIHtcblx0ICAgICAgICAgIGlmIChjdXJyZW50VGVuYW50T3ZlcmxheXNbcG9zXS50eXBlICsgXCI6IFwiICsgY3VycmVudFRlbmFudE92ZXJsYXlzW3Bvc10ubmFtZSAhPT0gY3VycmVudFRlbmFudENvcHlPdmVybGF5c1twb3NdLm5hbWUpIHtcblx0ICAgICAgICAgICAgY2hhbmdlZCA9IHRydWU7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICB9XG5cdCAgICB9IGNhdGNoIChlcnIpIHtcblx0ICAgICAgX2RpZEl0ZXJhdG9yRXJyb3IgPSB0cnVlO1xuXHQgICAgICBfaXRlcmF0b3JFcnJvciA9IGVycjtcblx0ICAgIH0gZmluYWxseSB7XG5cdCAgICAgIHRyeSB7XG5cdCAgICAgICAgaWYgKCFfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uICYmIF9pdGVyYXRvci5yZXR1cm4pIHtcblx0ICAgICAgICAgIF9pdGVyYXRvci5yZXR1cm4oKTtcblx0ICAgICAgICB9XG5cdCAgICAgIH0gZmluYWxseSB7XG5cdCAgICAgICAgaWYgKF9kaWRJdGVyYXRvckVycm9yKSB7XG5cdCAgICAgICAgICB0aHJvdyBfaXRlcmF0b3JFcnJvcjtcblx0ICAgICAgICB9XG5cdCAgICAgIH1cblx0ICAgIH1cblx0XG5cdCAgICB2bS5vdmVybGF5Q2hhbmdlZCA9IGNoYW5nZWQ7XG5cdCAgfTtcblx0XG5cdCAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuXHQgIC8vIEltYWdlc1xuXHQgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0ICB2bS5zdWJtaXRJbWFnZSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgIGlmICh2bS5zZWxlY3RlZExvZ28gJiYgdm0uc2VsZWN0ZWRMb2dvWzBdKSB7XG5cdCAgICAgIHZhciBmb3JtRGF0YSA9IG5ldyBGb3JtRGF0YSgpO1xuXHQgICAgICB2YXIgdmFsaWRGaWxlID0gdHJ1ZTtcblx0ICAgICAgYW5ndWxhci5mb3JFYWNoKHZtLnNlbGVjdGVkTG9nbywgZnVuY3Rpb24gKG9iaikge1xuXHQgICAgICAgIGlmIChvYmoubGZGaWxlLnNpemUgPCAxNTAwMDAwMCkge1xuXHQgICAgICAgICAgZm9ybURhdGEuYXBwZW5kKCdmaWxlcycsIG9iai5sZkZpbGUpO1xuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICB2bS5maWxlQXBpLnJlbW92ZUFsbCgpO1xuXHQgICAgICAgICAgdmFsaWRGaWxlID0gZmFsc2U7XG5cdCAgICAgICAgICBUb2FzdHNTZXJ2aWNlLnNob3dFcnJvclRvYXN0KCdZb3VyIGltYWdlIGlzIGxhcmdlciB0aGFuIDE1IE1CLiBQbGVhc2UgY2hvb3NlIGEgc21hbGxlciBpbWFnZScpO1xuXHQgICAgICAgIH1cblx0ICAgICAgfSk7XG5cdFxuXHQgICAgICBpZiAodmFsaWRGaWxlKSB7XG5cdCAgICAgICAgdmFyIHByb21pc2UgPSBJbWFnZVNlcnZpY2Uuc2F2ZUltYWdlKHZtLnRlbmFudEtleSwgZm9ybURhdGEpO1xuXHQgICAgICAgIHByb21pc2UudGhlbihmdW5jdGlvbiAocmVzKSB7XG5cdCAgICAgICAgICBQcm9ncmVzc0JhclNlcnZpY2UuY29tcGxldGUoKTtcblx0ICAgICAgICAgICR0aW1lb3V0KHZtLmdldFRlbmFudEltYWdlcywgMTAwMCk7XG5cdCAgICAgICAgICB2bS5maWxlQXBpLnJlbW92ZUFsbCgpO1xuXHQgICAgICAgICAgVG9hc3RzU2VydmljZS5zaG93U3VjY2Vzc1RvYXN0KCdXZSB1cGxvYWRlZCB5b3VyIGltYWdlLicpO1xuXHQgICAgICAgIH0pO1xuXHQgICAgICAgIHByb21pc2UuY2F0Y2goZnVuY3Rpb24gKHJlcykge1xuXHQgICAgICAgICAgUHJvZ3Jlc3NCYXJTZXJ2aWNlLmNvbXBsZXRlKCk7XG5cdCAgICAgICAgICBUb2FzdHNTZXJ2aWNlLnNob3dFcnJvclRvYXN0KCdTb21ldGhpbmcgd2VudCB3cm9uZy4gWW91IG1heSBoYXZlIGFscmVhZHkgdXBsb2FkZWQgdGhpcyBpbWFnZS4nKTtcblx0ICAgICAgICB9KTtcblx0ICAgICAgICByZXR1cm4gcHJvbWlzZTtcblx0ICAgICAgfVxuXHQgICAgfVxuXHQgIH07XG5cdFxuXHQgIHZtLmdldFRlbmFudEltYWdlc0FuZFJlbG9hZFRlbmFudEFmdGVyRGVsZXRlID0gZnVuY3Rpb24gKCkge1xuXHQgICAgdmFyIHRlbmFudEltYWdlUHJvbWlzZSA9IHZtLmdldFRlbmFudEltYWdlcygpO1xuXHQgICAgdGVuYW50SW1hZ2VQcm9taXNlLnRoZW4oZnVuY3Rpb24gKCkge1xuXHQgICAgICB2YXIgdXBkYXRlT3ZlcmxheVByb21pc2UgPSB2bS51cGRhdGVPdmVybGF5cygpO1xuXHQgICAgICB1cGRhdGVPdmVybGF5UHJvbWlzZS50aGVuKGZ1bmN0aW9uICgpIHtcblx0ICAgICAgICBUb2FzdHNTZXJ2aWNlLnNob3dTdWNjZXNzVG9hc3QoJ1dlIGRlbGV0ZWQgeW91ciBpbWFnZS4nKTtcblx0ICAgICAgICBQcm9ncmVzc0JhclNlcnZpY2UuY29tcGxldGUoKTtcblx0ICAgICAgfSk7XG5cdCAgICB9KTtcblx0ICB9O1xuXHRcblx0ICB2bS5kZWxldGVJbWFnZSA9IGZ1bmN0aW9uIChldiwgbmFtZSwga2V5KSB7XG5cdCAgICB2YXIgY29uZmlybSA9ICRtZERpYWxvZy5jb25maXJtKHtcblx0ICAgICAgdGl0bGU6ICdBcmUgeW91IHN1cmU/Jyxcblx0ICAgICAgdGV4dENvbnRlbnQ6ICdJZiB5b3UgcHJvY2VlZCwgJyArIG5hbWUgKyAnIHdpbGwgYmUgZGVsZXRlZCBhbmQgcmVtb3ZlZCBmcm9tIGFsbCBkZXZpY2VzIHRoYXQgdXNlIGl0LicsXG5cdCAgICAgIHRhcmdldEV2ZW50OiBldixcblx0ICAgICAgYXJpYUxhYmVsOiAnTHVja3kgZGF5Jyxcblx0ICAgICAgb2s6ICdDb25maXJtJyxcblx0ICAgICAgY2FuY2VsOiAnTmV2ZXJtaW5kJ1xuXHQgICAgfSk7XG5cdFxuXHQgICAgJG1kRGlhbG9nLnNob3coY29uZmlybSkudGhlbihmdW5jdGlvbiAoKSB7XG5cdCAgICAgIFByb2dyZXNzQmFyU2VydmljZS5zdGFydCgpO1xuXHQgICAgICB2YXIgcHJvbWlzZSA9IEltYWdlU2VydmljZS5kZWxldGVJbWFnZShrZXkpO1xuXHQgICAgICBwcm9taXNlLnRoZW4oZnVuY3Rpb24gKHJlcykge1xuXHQgICAgICAgICR0aW1lb3V0KHZtLmdldFRlbmFudEltYWdlc0FuZFJlbG9hZFRlbmFudEFmdGVyRGVsZXRlLCAxMDAwKTtcblx0ICAgICAgfSk7XG5cdCAgICAgIHByb21pc2UuY2F0Y2goZnVuY3Rpb24gKHJlcykge1xuXHQgICAgICAgIFRvYXN0c1NlcnZpY2Uuc2hvd0Vycm9yVG9hc3QoJ1NvbWV0aGluZyB3ZW50IHdyb25nIHdoaWxlIGRlbGV0aW5nIHlvdXIgaW1hZ2UuJyk7XG5cdCAgICAgICAgUHJvZ3Jlc3NCYXJTZXJ2aWNlLmNvbXBsZXRlKCk7XG5cdCAgICAgIH0pO1xuXHQgICAgICByZXR1cm4gcHJvbWlzZTtcblx0ICAgIH0pO1xuXHQgIH07XG5cdFxuXHQgIHZtLmdldFRlbmFudEltYWdlcyA9IGZ1bmN0aW9uICgpIHtcblx0ICAgIHZtLk9WRVJMQVlfVFlQRVMgPSBbeyBzaXplOiBudWxsLCB0eXBlOiBudWxsLCBuYW1lOiBcIm5vbmVcIiwgcmVhbE5hbWU6IFwibm9uZVwiLCBuZXc6IGZhbHNlLCBpbWFnZV9rZXk6IG51bGwgfSwgeyBzaXplOiBudWxsLCB0eXBlOiBcImRhdGV0aW1lXCIsIG5hbWU6IFwiZGF0ZXRpbWVcIiwgcmVhbE5hbWU6IFwiZGF0ZXRpbWVcIiwgbmV3OiB0cnVlLCBpbWFnZV9rZXk6IG51bGwgfV07XG5cdFxuXHQgICAgUHJvZ3Jlc3NCYXJTZXJ2aWNlLnN0YXJ0KCk7XG5cdCAgICB2YXIgcHJvbWlzZSA9IEltYWdlU2VydmljZS5nZXRJbWFnZXModm0udGVuYW50S2V5KTtcblx0ICAgIHByb21pc2UudGhlbihmdW5jdGlvbiAocmVzKSB7XG5cdCAgICAgIHZtLnRlbmFudEltYWdlcyA9IHJlcztcblx0ICAgICAgUHJvZ3Jlc3NCYXJTZXJ2aWNlLmNvbXBsZXRlKCk7XG5cdCAgICAgIHZhciBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMiA9IHRydWU7XG5cdCAgICAgIHZhciBfZGlkSXRlcmF0b3JFcnJvcjIgPSBmYWxzZTtcblx0ICAgICAgdmFyIF9pdGVyYXRvckVycm9yMiA9IHVuZGVmaW5lZDtcblx0XG5cdCAgICAgIHRyeSB7XG5cdCAgICAgICAgZm9yICh2YXIgX2l0ZXJhdG9yMiA9ICgwLCBfZ2V0SXRlcmF0b3IzLmRlZmF1bHQpKHZtLnRlbmFudEltYWdlcyksIF9zdGVwMjsgIShfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMiA9IChfc3RlcDIgPSBfaXRlcmF0b3IyLm5leHQoKSkuZG9uZSk7IF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24yID0gdHJ1ZSkge1xuXHQgICAgICAgICAgdmFyIHZhbHVlID0gX3N0ZXAyLnZhbHVlO1xuXHQgICAgICAgICAgdmFyIF9hcnIgPSBbXCJzbWFsbFwiLCBcImxhcmdlXCJdO1xuXHRcblx0ICAgICAgICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBfYXJyLmxlbmd0aDsgX2krKykge1xuXHQgICAgICAgICAgICB2YXIgc2l6ZU9wdGlvbiA9IF9hcnJbX2ldO1xuXHQgICAgICAgICAgICB2YXIgbmV3VmFsdWUgPSB7XG5cdCAgICAgICAgICAgICAgcmVhbE5hbWU6IGFuZ3VsYXIuY29weSh2YWx1ZS5uYW1lKSxcblx0ICAgICAgICAgICAgICBuYW1lOiBcImxvZ286IFwiICsgdmFsdWUubmFtZSxcblx0ICAgICAgICAgICAgICB0eXBlOiBcImxvZ29cIixcblx0ICAgICAgICAgICAgICBzaXplOiBzaXplT3B0aW9uLFxuXHQgICAgICAgICAgICAgIGltYWdlX2tleTogdmFsdWUua2V5XG5cdCAgICAgICAgICAgIH07XG5cdCAgICAgICAgICAgIHZtLk9WRVJMQVlfVFlQRVMucHVzaChuZXdWYWx1ZSk7XG5cdCAgICAgICAgICB9XG5cdCAgICAgICAgfVxuXHQgICAgICB9IGNhdGNoIChlcnIpIHtcblx0ICAgICAgICBfZGlkSXRlcmF0b3JFcnJvcjIgPSB0cnVlO1xuXHQgICAgICAgIF9pdGVyYXRvckVycm9yMiA9IGVycjtcblx0ICAgICAgfSBmaW5hbGx5IHtcblx0ICAgICAgICB0cnkge1xuXHQgICAgICAgICAgaWYgKCFfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uMiAmJiBfaXRlcmF0b3IyLnJldHVybikge1xuXHQgICAgICAgICAgICBfaXRlcmF0b3IyLnJldHVybigpO1xuXHQgICAgICAgICAgfVxuXHQgICAgICAgIH0gZmluYWxseSB7XG5cdCAgICAgICAgICBpZiAoX2RpZEl0ZXJhdG9yRXJyb3IyKSB7XG5cdCAgICAgICAgICAgIHRocm93IF9pdGVyYXRvckVycm9yMjtcblx0ICAgICAgICAgIH1cblx0ICAgICAgICB9XG5cdCAgICAgIH1cblx0XG5cdCAgICAgIHZtLk9WRVJMQVlfVFlQRVMuc29ydChfamF2YXNjcmlwdE5hdHVyYWxTb3J0Mi5kZWZhdWx0KTtcblx0ICAgIH0pO1xuXHRcblx0ICAgIHByb21pc2UuY2F0Y2goZnVuY3Rpb24gKCkge1xuXHQgICAgICBQcm9ncmVzc0JhclNlcnZpY2UuY29tcGxldGUoKTtcblx0ICAgICAgVG9hc3RzU2VydmljZS5zaG93RXJyb3JTdGF0dXMoXCJTT01FVEhJTkcgV0VOVCBXUk9ORyBSRVRSSUVWSU5HIFlPVVIgSU1BR0VTXCIpO1xuXHQgICAgfSk7XG5cdFxuXHQgICAgcmV0dXJuIHByb21pc2U7XG5cdCAgfTtcblx0XG5cdCAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblx0ICAvLyBTZXR1cFxuXHQgIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cdCAgdm0ub25TdWNjZXNzUmVzb2x2aW5nVGVuYW50ID0gZnVuY3Rpb24gKHRlbmFudCkge1xuXHQgICAgdm0uY3VycmVudFRlbmFudCA9IHRlbmFudDtcblx0ICAgIHZtLmN1cnJlbnRUZW5hbnRDb3B5ID0gYW5ndWxhci5jb3B5KHZtLmN1cnJlbnRUZW5hbnQpO1xuXHQgICAgdm0uc2VsZWN0ZWRUaW1lem9uZSA9IHRlbmFudC5kZWZhdWx0X3RpbWV6b25lO1xuXHQgIH07XG5cdFxuXHQgIHZtLmdldFRlbmFudCA9IGZ1bmN0aW9uICgpIHtcblx0ICAgIHZhciB0ZW5hbnRQcm9taXNlID0gVGVuYW50c1NlcnZpY2UuZ2V0VGVuYW50QnlLZXkoJHN0YXRlUGFyYW1zLnRlbmFudEtleSk7XG5cdCAgICB0ZW5hbnRQcm9taXNlLnRoZW4oZnVuY3Rpb24gKHRlbmFudCkge1xuXHQgICAgICB2bS5jdXJyZW50VGVuYW50ID0gdGVuYW50O1xuXHQgICAgICBpZiAodm0uY3VycmVudFRlbmFudC5vdmVybGF5c1VwZGF0ZUluUHJvZ3Jlc3MpIHtcblx0ICAgICAgICB2bS5sb2FkaW5nID0gdHJ1ZTtcblx0ICAgICAgICAkdGltZW91dCh2bS5nZXRUZW5hbnQsIDMwMDApO1xuXHQgICAgICB9IGVsc2Uge1xuXHQgICAgICAgIHZtLmxvYWRpbmcgPSBmYWxzZTtcblx0ICAgICAgfVxuXHQgICAgICB2bS5jdXJyZW50VGVuYW50Q29weSA9IGFuZ3VsYXIuY29weSh2bS5jdXJyZW50VGVuYW50KTtcblx0ICAgIH0pO1xuXHQgICAgcmV0dXJuIHRlbmFudFByb21pc2U7XG5cdCAgfTtcblx0XG5cdCAgdm0uaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgIHZtLmdldFRlbmFudEltYWdlcygpO1xuXHQgICAgdm0uZ2V0VGVuYW50KCk7XG5cdCAgfTtcblx0XG5cdCAgJHNjb3BlLiR3YXRjaCgndGFiSW5kZXgnLCBmdW5jdGlvbiAodG9UYWIsIGZyb21UYWIpIHtcblx0ICAgIGlmICh0b1RhYiAhPT0gdW5kZWZpbmVkKSB7XG5cdCAgICAgIHN3aXRjaCAodG9UYWIpIHtcblx0ICAgICAgICBjYXNlIDA6XG5cdCAgICAgICAgICByZXR1cm4gJHN0YXRlLmdvKCd0ZW5hbnREZXRhaWxzJywgeyB0ZW5hbnRLZXk6ICRzdGF0ZVBhcmFtcy50ZW5hbnRLZXkgfSk7XG5cdCAgICAgICAgY2FzZSAxOlxuXHQgICAgICAgICAgcmV0dXJuICRzdGF0ZS5nbygndGVuYW50TWFuYWdlZERldmljZXMnLCB7IHRlbmFudEtleTogJHN0YXRlUGFyYW1zLnRlbmFudEtleSB9KTtcblx0ICAgICAgICBjYXNlIDI6XG5cdCAgICAgICAgICByZXR1cm4gJHN0YXRlLmdvKCd0ZW5hbnRVbm1hbmFnZWREZXZpY2VzJywgeyB0ZW5hbnRLZXk6ICRzdGF0ZVBhcmFtcy50ZW5hbnRLZXkgfSk7XG5cdCAgICAgICAgY2FzZSAzOlxuXHQgICAgICAgICAgcmV0dXJuICRzdGF0ZS5nbygndGVuYW50TG9jYXRpb25zJywgeyB0ZW5hbnRLZXk6ICRzdGF0ZVBhcmFtcy50ZW5hbnRLZXkgfSk7XG5cdCAgICAgICAgY2FzZSA0OlxuXHQgICAgICAgICAgcmV0dXJuICRzdGF0ZS5nbygndGVuYW50T3ZlcmxheXMnLCB7IHRlbmFudEtleTogJHN0YXRlUGFyYW1zLnRlbmFudEtleSB9KTtcblx0ICAgICAgICBjYXNlIDU6XG5cdCAgICAgICAgICByZXR1cm4gJHN0YXRlLmdvKCd0ZW5hbnRMb2dzJywgeyB0ZW5hbnRLZXk6ICRzdGF0ZVBhcmFtcy50ZW5hbnRLZXkgfSk7XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICB9KTtcblx0XG5cdCAgcmV0dXJuIHZtO1xuXHR9XG5cdFxuXHRleHBvcnRzLlRlbmFudE92ZXJsYXlzQ3RybCA9IFRlbmFudE92ZXJsYXlzQ3RybDtcblxuLyoqKi8gfSxcblxuLyoqKi8gNzIxOlxuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0VGVuYW50QWRkQ3RybC4kaW5qZWN0ID0gW1wiJGxvZ1wiLCBcIiRsb2NhdGlvblwiLCBcIlRlbmFudHNTZXJ2aWNlXCIsIFwiRGlzdHJpYnV0b3JzU2VydmljZVwiLCBcIlRpbWV6b25lc1NlcnZpY2VcIiwgXCIkc3RhdGVcIiwgXCJzd2VldFwiLCBcIlByb2dyZXNzQmFyU2VydmljZVwiLCBcIlNlc3Npb25zU2VydmljZVwiXTtcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG5cdCAgdmFsdWU6IHRydWVcblx0fSk7XG5cdGZ1bmN0aW9uIFRlbmFudEFkZEN0cmwoJGxvZywgJGxvY2F0aW9uLCBUZW5hbnRzU2VydmljZSwgRGlzdHJpYnV0b3JzU2VydmljZSwgVGltZXpvbmVzU2VydmljZSwgJHN0YXRlLCBzd2VldCwgUHJvZ3Jlc3NCYXJTZXJ2aWNlLCBTZXNzaW9uc1NlcnZpY2UpIHtcblx0ICBcIm5nSW5qZWN0XCI7XG5cdFxuXHQgIHZhciB2bSA9IHRoaXM7XG5cdCAgdm0uZ2FtZVN0b3BTZXJ2ZXIgPSAkbG9jYXRpb24uaG9zdCgpLmluZGV4T2YoJ3Byb3Zpc2lvbmluZy1nYW1lc3RvcCcpID4gLTE7XG5cdCAgdm0uY3VycmVudFRlbmFudCA9IHtcblx0ICAgIGtleTogdW5kZWZpbmVkLFxuXHQgICAgbmFtZTogdW5kZWZpbmVkLFxuXHQgICAgdGVuYW50X2NvZGU6IHVuZGVmaW5lZCxcblx0ICAgIGFkbWluX2VtYWlsOiB1bmRlZmluZWQsXG5cdCAgICBjb250ZW50X3NlcnZlcl91cmw6IHVuZGVmaW5lZCxcblx0ICAgIGNvbnRlbnRfbWFuYWdlcl9iYXNlX3VybDogdW5kZWZpbmVkLFxuXHQgICAgZG9tYWluX2tleTogdW5kZWZpbmVkLFxuXHQgICAgbm90aWZpY2F0aW9uX2VtYWlsczogdW5kZWZpbmVkLFxuXHQgICAgcHJvb2Zfb2ZfcGxheV9sb2dnaW5nOiBmYWxzZSxcblx0ICAgIHByb29mX29mX3BsYXlfdXJsOiB1bmRlZmluZWQsXG5cdCAgICBhY3RpdmU6IHRydWVcblx0ICB9O1xuXHQgIHZtLnNlbGVjdGVkRG9tYWluID0gdW5kZWZpbmVkO1xuXHQgIHZtLmRpc3RyaWJ1dG9yRG9tYWlucyA9IFtdO1xuXHQgIHZtLnRpbWV6b25lcyA9IFtdO1xuXHQgIHZtLnNlbGVjdGVkVGltZXpvbmUgPSAnQW1lcmljYS9DaGljYWdvJztcblx0XG5cdCAgdm0uaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgIHZhciB0aW1lem9uZVByb21pc2UgPSBUaW1lem9uZXNTZXJ2aWNlLmdldEN1c3RvbVRpbWV6b25lcygpO1xuXHQgICAgdGltZXpvbmVQcm9taXNlLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcblx0ICAgICAgcmV0dXJuIHZtLnRpbWV6b25lcyA9IGRhdGE7XG5cdCAgICB9KTtcblx0ICAgIHZtLmN1cnJlbnREaXN0cmlidXRvcktleSA9IFNlc3Npb25zU2VydmljZS5nZXRDdXJyZW50RGlzdHJpYnV0b3JLZXkoKTtcblx0ICAgIHZhciBkaXN0cmlidXRvclByb21pc2UgPSBEaXN0cmlidXRvcnNTZXJ2aWNlLmdldEJ5S2V5KHZtLmN1cnJlbnREaXN0cmlidXRvcktleSk7XG5cdCAgICBkaXN0cmlidXRvclByb21pc2UudGhlbihmdW5jdGlvbiAoZGF0YSkge1xuXHQgICAgICB2bS5jdXJyZW50VGVuYW50LmNvbnRlbnRfbWFuYWdlcl9iYXNlX3VybCA9IGRhdGEuY29udGVudF9tYW5hZ2VyX3VybDtcblx0ICAgICAgcmV0dXJuIHZtLmN1cnJlbnRUZW5hbnQuY29udGVudF9zZXJ2ZXJfdXJsID0gZGF0YS5wbGF5ZXJfY29udGVudF91cmw7XG5cdCAgICB9KTtcblx0ICAgIHZhciBkaXN0cmlidXRvckRvbWFpblByb21pc2UgPSBEaXN0cmlidXRvcnNTZXJ2aWNlLmdldERvbWFpbnNCeUtleSh2bS5jdXJyZW50RGlzdHJpYnV0b3JLZXkpO1xuXHQgICAgcmV0dXJuIGRpc3RyaWJ1dG9yRG9tYWluUHJvbWlzZS50aGVuKGZ1bmN0aW9uIChkb21haW5zKSB7XG5cdCAgICAgIHJldHVybiB2bS5kaXN0cmlidXRvckRvbWFpbnMgPSBkb21haW5zO1xuXHQgICAgfSk7XG5cdCAgfTtcblx0XG5cdCAgdm0ub25DbGlja1NhdmVCdXR0b24gPSBmdW5jdGlvbiAoKSB7XG5cdCAgICBQcm9ncmVzc0JhclNlcnZpY2Uuc3RhcnQoKTtcblx0ICAgIHZtLmN1cnJlbnRUZW5hbnQuZGVmYXVsdF90aW1lem9uZSA9IHZtLnNlbGVjdGVkVGltZXpvbmU7XG5cdCAgICB2bS5jdXJyZW50VGVuYW50LmRvbWFpbl9rZXkgPSB2bS5zZWxlY3RlZERvbWFpbi5rZXk7XG5cdCAgICB2YXIgcHJvbWlzZSA9IFRlbmFudHNTZXJ2aWNlLnNhdmUodm0uY3VycmVudFRlbmFudCk7XG5cdCAgICByZXR1cm4gcHJvbWlzZS50aGVuKHZtLm9uU3VjY2Vzc1RlbmFudFNhdmUsIHZtLm9uRmFpbHVyZVRlbmFudFNhdmUpO1xuXHQgIH07XG5cdFxuXHQgIHZtLm9uU3VjY2Vzc1RlbmFudFNhdmUgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICBQcm9ncmVzc0JhclNlcnZpY2UuY29tcGxldGUoKTtcblx0ICAgIHJldHVybiAkc3RhdGUuZ28oJ3RlbmFudHMnKTtcblx0ICB9O1xuXHRcblx0ICB2bS5vbkZhaWx1cmVUZW5hbnRTYXZlID0gZnVuY3Rpb24gKGVycm9yT2JqZWN0KSB7XG5cdCAgICBQcm9ncmVzc0JhclNlcnZpY2UuY29tcGxldGUoKTtcblx0ICAgIGlmIChlcnJvck9iamVjdC5zdGF0dXMgPT09IDQwOSkge1xuXHQgICAgICByZXR1cm4gc3dlZXQuc2hvdygnT29wcy4uLicsICdUZW5hbnQgY29kZSB1bmF2YWlsYWJsZSBpbiBQcm92aXNpb25pbmcuIFBsZWFzZSBtb2RpZnkgdGVuYW50IG5hbWUgdG8gZ2VuZXJhdGUgYSB1bmlxdWUgdGVuYW50IGNvZGUuJywgJ2Vycm9yJyk7XG5cdCAgICB9IGVsc2UgaWYgKGVycm9yT2JqZWN0LnN0YXR1cyA9PT0gNDEyKSB7XG5cdCAgICAgIHJldHVybiBzd2VldC5zaG93KCdPb3BzLi4uJywgJ1RlbmFudCBjb2RlIHVuYXZhaWxhYmxlIGluIENocm9tZSBEZXZpY2UgTWFuYWdlbWVudC4gTW9kaWZ5IHRlbmFudCBuYW1lIHRvIGdlbmVyYXRlIGEgdW5pcXVlIHRlbmFudCBjb2RlLicsICdlcnJvcicpO1xuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgJGxvZy5lcnJvcihlcnJvck9iamVjdCk7XG5cdCAgICAgIHJldHVybiBzd2VldC5zaG93KCdPb3BzLi4uJywgJ1VuYWJsZSB0byBzYXZlIHRoZSB0ZW5hbnQuJywgJ2Vycm9yJyk7XG5cdCAgICB9XG5cdCAgfTtcblx0XG5cdCAgdm0uYXV0b0dlbmVyYXRlVGVuYW50Q29kZSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgIGlmICghdm0uY3VycmVudFRlbmFudC5rZXkpIHtcblx0ICAgICAgdmFyIG5ld1RlbmFudENvZGUgPSAnJztcblx0ICAgICAgaWYgKHZtLmN1cnJlbnRUZW5hbnQubmFtZSkge1xuXHQgICAgICAgIG5ld1RlbmFudENvZGUgPSB2bS5jdXJyZW50VGVuYW50Lm5hbWUudG9Mb3dlckNhc2UoKTtcblx0ICAgICAgICBuZXdUZW5hbnRDb2RlID0gbmV3VGVuYW50Q29kZS5yZXBsYWNlKC9cXHMrL2csICdfJyk7XG5cdCAgICAgICAgbmV3VGVuYW50Q29kZSA9IG5ld1RlbmFudENvZGUucmVwbGFjZSgvXFxXKy9nLCAnJyk7XG5cdCAgICAgIH1cblx0ICAgICAgcmV0dXJuIHZtLmN1cnJlbnRUZW5hbnQudGVuYW50X2NvZGUgPSBuZXdUZW5hbnRDb2RlO1xuXHQgICAgfVxuXHQgIH07XG5cdFxuXHQgIHJldHVybiB2bTtcblx0fVxuXHRleHBvcnRzLlRlbmFudEFkZEN0cmwgPSBUZW5hbnRBZGRDdHJsO1xuXG4vKioqLyB9LFxuXG4vKioqLyA3MjI6XG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHQndXNlIHN0cmljdCc7XG5cdFxuXHRUZW5hbnREZXRhaWxzQ3RybC4kaW5qZWN0ID0gW1wiJHN0YXRlUGFyYW1zXCIsIFwiVGVuYW50c1NlcnZpY2VcIiwgXCJEb21haW5zU2VydmljZVwiLCBcIlRpbWV6b25lc1NlcnZpY2VcIiwgXCJEaXN0cmlidXRvcnNTZXJ2aWNlXCIsIFwiJHN0YXRlXCIsIFwic3dlZXRcIiwgXCJQcm9ncmVzc0JhclNlcnZpY2VcIiwgXCJUb2FzdHNTZXJ2aWNlXCIsIFwiU2Vzc2lvbnNTZXJ2aWNlXCIsIFwiJHNjb3BlXCIsIFwiJGxvY2F0aW9uXCJdO1xuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0ICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblx0ZnVuY3Rpb24gVGVuYW50RGV0YWlsc0N0cmwoJHN0YXRlUGFyYW1zLCBUZW5hbnRzU2VydmljZSwgRG9tYWluc1NlcnZpY2UsIFRpbWV6b25lc1NlcnZpY2UsIERpc3RyaWJ1dG9yc1NlcnZpY2UsICRzdGF0ZSwgc3dlZXQsIFByb2dyZXNzQmFyU2VydmljZSwgVG9hc3RzU2VydmljZSwgU2Vzc2lvbnNTZXJ2aWNlLCAkc2NvcGUsICRsb2NhdGlvbikge1xuXHQgIFwibmdJbmplY3RcIjtcblx0XG5cdCAgdmFyIHZtID0gdGhpcztcblx0ICB2bS5nYW1lU3RvcFNlcnZlciA9ICRsb2NhdGlvbi5ob3N0KCkuaW5kZXhPZigncHJvdmlzaW9uaW5nLWdhbWVzdG9wJykgPiAtMTtcblx0ICB2bS5jdXJyZW50VGVuYW50ID0ge1xuXHQgICAga2V5OiB1bmRlZmluZWQsXG5cdCAgICBuYW1lOiB1bmRlZmluZWQsXG5cdCAgICB0ZW5hbnRfY29kZTogdW5kZWZpbmVkLFxuXHQgICAgYWRtaW5fZW1haWw6IHVuZGVmaW5lZCxcblx0ICAgIGNvbnRlbnRfc2VydmVyX3VybDogdW5kZWZpbmVkLFxuXHQgICAgY29udGVudF9tYW5hZ2VyX2Jhc2VfdXJsOiB1bmRlZmluZWQsXG5cdCAgICBkb21haW5fa2V5OiB1bmRlZmluZWQsXG5cdCAgICBub3RpZmljYXRpb25fZW1haWxzOiB1bmRlZmluZWQsXG5cdCAgICBwcm9vZl9vZl9wbGF5X2xvZ2dpbmc6IGZhbHNlLFxuXHQgICAgcHJvb2Zfb2ZfcGxheV91cmw6IHVuZGVmaW5lZCxcblx0ICAgIGFjdGl2ZTogdHJ1ZVxuXHQgIH07XG5cdCAgdm0uc2VsZWN0ZWREb21haW4gPSB1bmRlZmluZWQ7XG5cdCAgdm0uZGlzdHJpYnV0b3JEb21haW5zID0gW107XG5cdCAgdm0udGltZXpvbmVzID0gW107XG5cdCAgdm0uc2VsZWN0ZWRUaW1lem9uZSA9ICdBbWVyaWNhL0NoaWNhZ28nO1xuXHQgIHZtLmVkaXRNb2RlID0gISEkc3RhdGVQYXJhbXMudGVuYW50S2V5O1xuXHRcblx0ICBpZiAodm0uZWRpdE1vZGUpIHtcblx0ICAgIHZhciB0ZW5hbnRQcm9taXNlID0gVGVuYW50c1NlcnZpY2UuZ2V0VGVuYW50QnlLZXkoJHN0YXRlUGFyYW1zLnRlbmFudEtleSk7XG5cdCAgICB0ZW5hbnRQcm9taXNlLnRoZW4oZnVuY3Rpb24gKHRlbmFudCkge1xuXHQgICAgICB2bS5jdXJyZW50VGVuYW50ID0gdGVuYW50O1xuXHQgICAgICByZXR1cm4gdm0ub25TdWNjZXNzUmVzb2x2aW5nVGVuYW50KHRlbmFudCk7XG5cdCAgICB9KTtcblx0ICB9XG5cdFxuXHQgIHZtLmluaXRpYWxpemUgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICB2YXIgdGltZXpvbmVQcm9taXNlID0gVGltZXpvbmVzU2VydmljZS5nZXRDdXN0b21UaW1lem9uZXMoKTtcblx0ICAgIHRpbWV6b25lUHJvbWlzZS50aGVuKGZ1bmN0aW9uIChkYXRhKSB7XG5cdCAgICAgIHJldHVybiB2bS50aW1lem9uZXMgPSBkYXRhO1xuXHQgICAgfSk7XG5cdCAgICB2bS5jdXJyZW50RGlzdHJpYnV0b3JLZXkgPSBTZXNzaW9uc1NlcnZpY2UuZ2V0Q3VycmVudERpc3RyaWJ1dG9yS2V5KCk7XG5cdCAgICB2YXIgZGlzdHJpYnV0b3JEb21haW5Qcm9taXNlID0gRGlzdHJpYnV0b3JzU2VydmljZS5nZXREb21haW5zQnlLZXkodm0uY3VycmVudERpc3RyaWJ1dG9yS2V5KTtcblx0ICAgIHJldHVybiBkaXN0cmlidXRvckRvbWFpblByb21pc2UudGhlbihmdW5jdGlvbiAoZG9tYWlucykge1xuXHQgICAgICByZXR1cm4gdm0uZGlzdHJpYnV0b3JEb21haW5zID0gZG9tYWlucztcblx0ICAgIH0pO1xuXHQgIH07XG5cdFxuXHQgIHZtLm9uU3VjY2Vzc1Jlc29sdmluZ1RlbmFudCA9IGZ1bmN0aW9uICh0ZW5hbnQpIHtcblx0ICAgIHZtLnNlbGVjdGVkVGltZXpvbmUgPSB0ZW5hbnQuZGVmYXVsdF90aW1lem9uZTtcblx0ICAgIHZhciBkb21haW5Qcm9taXNlID0gRG9tYWluc1NlcnZpY2UuZ2V0RG9tYWluQnlLZXkodGVuYW50LmRvbWFpbl9rZXkpO1xuXHQgICAgcmV0dXJuIGRvbWFpblByb21pc2UudGhlbihmdW5jdGlvbiAoZGF0YSkge1xuXHQgICAgICByZXR1cm4gdm0uc2VsZWN0ZWREb21haW4gPSBkYXRhO1xuXHQgICAgfSk7XG5cdCAgfTtcblx0XG5cdCAgdm0ub25DbGlja1NhdmVCdXR0b24gPSBmdW5jdGlvbiAoKSB7XG5cdCAgICBQcm9ncmVzc0JhclNlcnZpY2Uuc3RhcnQoKTtcblx0ICAgIHZtLmN1cnJlbnRUZW5hbnQuZGVmYXVsdF90aW1lem9uZSA9IHZtLnNlbGVjdGVkVGltZXpvbmU7XG5cdCAgICB2bS5jdXJyZW50VGVuYW50LmRvbWFpbl9rZXkgPSB2bS5zZWxlY3RlZERvbWFpbi5rZXk7XG5cdCAgICB2YXIgcHJvbWlzZSA9IFRlbmFudHNTZXJ2aWNlLnNhdmUodm0uY3VycmVudFRlbmFudCk7XG5cdCAgICByZXR1cm4gcHJvbWlzZS50aGVuKHZtLm9uU3VjY2Vzc1RlbmFudFNhdmUsIHZtLm9uRmFpbHVyZVRlbmFudFNhdmUpO1xuXHQgIH07XG5cdFxuXHQgIHZtLm9uU3VjY2Vzc1RlbmFudFNhdmUgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICBQcm9ncmVzc0JhclNlcnZpY2UuY29tcGxldGUoKTtcblx0ICAgIHJldHVybiBUb2FzdHNTZXJ2aWNlLnNob3dTdWNjZXNzVG9hc3QoJ1dlIHNhdmVkIHlvdXIgdGVuYW50IGluZm9ybWF0aW9uLicpO1xuXHQgIH07XG5cdFxuXHQgIHZtLm9uRmFpbHVyZVRlbmFudFNhdmUgPSBmdW5jdGlvbiAoZXJyb3JPYmplY3QpIHtcblx0ICAgIFByb2dyZXNzQmFyU2VydmljZS5jb21wbGV0ZSgpO1xuXHQgICAgaWYgKGVycm9yT2JqZWN0LnN0YXR1cyA9PT0gNDA5KSB7XG5cdCAgICAgIHJldHVybiBzd2VldC5zaG93KCdPb3BzLi4uJywgJ1RlbmFudCBjb2RlIHVuYXZhaWxhYmxlLiBQbGVhc2UgbW9kaWZ5IHRlbmFudCBuYW1lIHRvIGdlbmVyYXRlIGEgdW5pcXVlIHRlbmFudCBjb2RlLicsICdlcnJvcicpO1xuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgcmV0dXJuIHN3ZWV0LnNob3coJ09vcHMuLi4nLCAnVW5hYmxlIHRvIHNhdmUgdGhlIHRlbmFudC4nLCAnZXJyb3InKTtcblx0ICAgIH1cblx0ICB9O1xuXHRcblx0ICB2bS5lZGl0SXRlbSA9IGZ1bmN0aW9uIChpdGVtKSB7XG5cdCAgICByZXR1cm4gJHN0YXRlLmdvKCdlZGl0RGV2aWNlJywgeyBkZXZpY2VLZXk6IGl0ZW0ua2V5LCB0ZW5hbnRLZXk6ICRzdGF0ZVBhcmFtcy50ZW5hbnRLZXkgfSk7XG5cdCAgfTtcblx0XG5cdCAgdm0uYXV0b0dlbmVyYXRlVGVuYW50Q29kZSA9IGZ1bmN0aW9uICgpIHtcblx0ICAgIGlmICghdm0uY3VycmVudFRlbmFudC5rZXkpIHtcblx0ICAgICAgdmFyIG5ld1RlbmFudENvZGUgPSAnJztcblx0ICAgICAgaWYgKHZtLmN1cnJlbnRUZW5hbnQubmFtZSkge1xuXHQgICAgICAgIG5ld1RlbmFudENvZGUgPSB2bS5jdXJyZW50VGVuYW50Lm5hbWUudG9Mb3dlckNhc2UoKTtcblx0ICAgICAgICBuZXdUZW5hbnRDb2RlID0gbmV3VGVuYW50Q29kZS5yZXBsYWNlKC9cXHMrL2csICdfJyk7XG5cdCAgICAgICAgbmV3VGVuYW50Q29kZSA9IG5ld1RlbmFudENvZGUucmVwbGFjZSgvXFxXKy9nLCAnJyk7XG5cdCAgICAgIH1cblx0ICAgICAgcmV0dXJuIHZtLmN1cnJlbnRUZW5hbnQudGVuYW50X2NvZGUgPSBuZXdUZW5hbnRDb2RlO1xuXHQgICAgfVxuXHQgIH07XG5cdFxuXHQgICRzY29wZS50YWJJbmRleCA9IDA7XG5cdFxuXHQgICRzY29wZS4kd2F0Y2goJ3RhYkluZGV4JywgZnVuY3Rpb24gKHRvVGFiLCBmcm9tVGFiKSB7XG5cdCAgICBpZiAodG9UYWIgIT09IHVuZGVmaW5lZCkge1xuXHQgICAgICBzd2l0Y2ggKHRvVGFiKSB7XG5cdCAgICAgICAgY2FzZSAwOlxuXHQgICAgICAgICAgcmV0dXJuICRzdGF0ZS5nbygndGVuYW50RGV0YWlscycsIHsgdGVuYW50S2V5OiAkc3RhdGVQYXJhbXMudGVuYW50S2V5IH0pO1xuXHQgICAgICAgIGNhc2UgMTpcblx0ICAgICAgICAgIHJldHVybiAkc3RhdGUuZ28oJ3RlbmFudE1hbmFnZWREZXZpY2VzJywgeyB0ZW5hbnRLZXk6ICRzdGF0ZVBhcmFtcy50ZW5hbnRLZXkgfSk7XG5cdCAgICAgICAgY2FzZSAyOlxuXHQgICAgICAgICAgcmV0dXJuICRzdGF0ZS5nbygndGVuYW50VW5tYW5hZ2VkRGV2aWNlcycsIHsgdGVuYW50S2V5OiAkc3RhdGVQYXJhbXMudGVuYW50S2V5IH0pO1xuXHQgICAgICAgIGNhc2UgMzpcblx0ICAgICAgICAgIHJldHVybiAkc3RhdGUuZ28oJ3RlbmFudExvY2F0aW9ucycsIHsgdGVuYW50S2V5OiAkc3RhdGVQYXJhbXMudGVuYW50S2V5IH0pO1xuXHQgICAgICAgIGNhc2UgNDpcblx0ICAgICAgICAgIHJldHVybiAkc3RhdGUuZ28oJ3RlbmFudE92ZXJsYXlzJywgeyB0ZW5hbnRLZXk6ICRzdGF0ZVBhcmFtcy50ZW5hbnRLZXkgfSk7XG5cdCAgICAgICAgY2FzZSA1OlxuXHQgICAgICAgICAgcmV0dXJuICRzdGF0ZS5nbygndGVuYW50TG9ncycsIHsgdGVuYW50S2V5OiAkc3RhdGVQYXJhbXMudGVuYW50S2V5IH0pO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgfSk7XG5cdFxuXHQgIHJldHVybiB2bTtcblx0fVxuXHRleHBvcnRzLlRlbmFudERldGFpbHNDdHJsID0gVGVuYW50RGV0YWlsc0N0cmw7XG5cbi8qKiovIH0sXG5cbi8qKiovIDcyMzpcbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdFRlbmFudExvY2F0aW9uQ3RybC4kaW5qZWN0ID0gW1wiJHN0YXRlUGFyYW1zXCIsIFwiVGVuYW50c1NlcnZpY2VcIiwgXCJMb2NhdGlvbnNTZXJ2aWNlXCIsIFwiJHN0YXRlXCIsIFwic3dlZXRcIiwgXCJQcm9ncmVzc0JhclNlcnZpY2VcIiwgXCJUb2FzdHNTZXJ2aWNlXCJdO1xuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0ICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblx0ZnVuY3Rpb24gVGVuYW50TG9jYXRpb25DdHJsKCRzdGF0ZVBhcmFtcywgVGVuYW50c1NlcnZpY2UsIExvY2F0aW9uc1NlcnZpY2UsICRzdGF0ZSwgc3dlZXQsIFByb2dyZXNzQmFyU2VydmljZSwgVG9hc3RzU2VydmljZSkge1xuXHQgIFwibmdJbmplY3RcIjtcblx0XG5cdCAgdmFyIHZtID0gdGhpcztcblx0ICB2bS5sb2NhdGlvbiA9IHtcblx0ICAgIGtleTogdW5kZWZpbmVkXG5cdCAgfTtcblx0ICB2bS50ZW5hbnRLZXkgPSAkc3RhdGVQYXJhbXMudGVuYW50S2V5O1xuXHQgIHZtLmVkaXRNb2RlID0gISEkc3RhdGVQYXJhbXMubG9jYXRpb25LZXk7XG5cdCAgaWYgKHZtLmVkaXRNb2RlKSB7XG5cdCAgICB2YXIgbG9jYXRpb25Qcm9taXNlID0gTG9jYXRpb25zU2VydmljZS5nZXRMb2NhdGlvbkJ5S2V5KCRzdGF0ZVBhcmFtcy5sb2NhdGlvbktleSk7XG5cdCAgICBsb2NhdGlvblByb21pc2UudGhlbihmdW5jdGlvbiAoZGF0YSkge1xuXHQgICAgICB2bS5sb2NhdGlvbiA9IGRhdGE7XG5cdCAgICAgIHZtLnRlbmFudEtleSA9IGRhdGEudGVuYW50S2V5O1xuXHQgICAgICB2bS5sb2NhdGlvbk5hbWUgPSBkYXRhLmN1c3RvbWVyTG9jYXRpb25OYW1lO1xuXHQgICAgICByZXR1cm4gdm0uZmV0Y2hUZW5hbnROYW1lKHZtLnRlbmFudEtleSk7XG5cdCAgICB9KTtcblx0ICB9XG5cdFxuXHQgIHZtLmluaXRpYWxpemUgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICBpZiAoIXZtLmVkaXRNb2RlKSB7XG5cdCAgICAgIHZtLmZldGNoVGVuYW50TmFtZSh2bS50ZW5hbnRLZXkpO1xuXHQgICAgICByZXR1cm4gdm0ubG9jYXRpb24gPSB7XG5cdCAgICAgICAgdGVuYW50S2V5OiB2bS50ZW5hbnRLZXksXG5cdCAgICAgICAgYWN0aXZlOiB0cnVlXG5cdCAgICAgIH07XG5cdCAgICB9XG5cdCAgfTtcblx0XG5cdCAgdm0ub25DbGlja1NhdmVCdXR0b24gPSBmdW5jdGlvbiAoKSB7XG5cdCAgICBQcm9ncmVzc0JhclNlcnZpY2Uuc3RhcnQoKTtcblx0ICAgIHZhciBwcm9taXNlID0gTG9jYXRpb25zU2VydmljZS5zYXZlKHZtLmxvY2F0aW9uKTtcblx0ICAgIGlmICh2bS5lZGl0TW9kZSkge1xuXHQgICAgICByZXR1cm4gcHJvbWlzZS50aGVuKHZtLm9uU3VjY2Vzc1VwZGF0aW5nTG9jYXRpb24odm0udGVuYW50S2V5KSwgdm0ub25GYWlsdXJlU2F2aW5nTG9jYXRpb24pO1xuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgcmV0dXJuIHByb21pc2UudGhlbih2bS5vblN1Y2Nlc3NTYXZpbmdMb2NhdGlvbiwgdm0ub25GYWlsdXJlU2F2aW5nTG9jYXRpb24pO1xuXHQgICAgfVxuXHQgIH07XG5cdFxuXHQgIHZtLm9uU3VjY2Vzc1NhdmluZ0xvY2F0aW9uID0gZnVuY3Rpb24gKCkge1xuXHQgICAgUHJvZ3Jlc3NCYXJTZXJ2aWNlLmNvbXBsZXRlKCk7XG5cdCAgICBUb2FzdHNTZXJ2aWNlLnNob3dTdWNjZXNzVG9hc3QoJ1dlIHNhdmVkIHlvdXIgbG9jYXRpb24uJyk7XG5cdCAgICByZXR1cm4gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG5cdCAgICAgICRzdGF0ZS5nbygndGVuYW50TG9jYXRpb25zJywgeyB0ZW5hbnRLZXk6ICRzdGF0ZVBhcmFtcy50ZW5hbnRLZXkgfSk7XG5cdCAgICAgIHJldHVybjtcblx0ICAgIH0sIDEwMDApO1xuXHQgIH07XG5cdFxuXHQgIHZtLm9uU3VjY2Vzc1VwZGF0aW5nTG9jYXRpb24gPSBmdW5jdGlvbiAodGVuYW50X2tleSkge1xuXHQgICAgUHJvZ3Jlc3NCYXJTZXJ2aWNlLmNvbXBsZXRlKCk7XG5cdCAgICBUb2FzdHNTZXJ2aWNlLnNob3dTdWNjZXNzVG9hc3QoJ1dlIHVwZGF0ZWQgeW91ciBsb2NhdGlvbi4nKTtcblx0ICAgIHJldHVybiBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcblx0ICAgICAgJHN0YXRlLmdvKCd0ZW5hbnRMb2NhdGlvbnMnLCB7IHRlbmFudEtleTogdGVuYW50X2tleSB9KTtcblx0ICAgICAgcmV0dXJuO1xuXHQgICAgfSwgMTAwMCk7XG5cdCAgfTtcblx0XG5cdCAgdm0ub25GYWlsdXJlU2F2aW5nTG9jYXRpb24gPSBmdW5jdGlvbiAocmVzcG9uc2UpIHtcblx0ICAgIFByb2dyZXNzQmFyU2VydmljZS5jb21wbGV0ZSgpO1xuXHQgICAgaWYgKHJlc3BvbnNlLnN0YXR1cyA9PT0gNDA5KSB7XG5cdCAgICAgIFRvYXN0c1NlcnZpY2Uuc2hvd0Vycm9yVG9hc3QoJ0xvY2F0aW9uIGNvZGUgY29uZmxpY3QuIFVuYWJsZSB0byBzYXZlIHlvdXIgbG9jYXRpb24uJyk7XG5cdCAgICAgIHJldHVybiBzd2VldC5zaG93KCdPb3BzLi4uJywgJ1BsZWFzZSBjaGFuZ2UgeW91ciBjdXN0b21lciBsb2NhdGlvbiBuYW1lLiBMb2NhdGlvbiBuYW1lIG11c3QgZ2VuZXJhdGUgYSB1bmlxdWUgbG9jYXRpb24gY29kZS4nLCAnZXJyb3InKTtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIHJldHVybiBUb2FzdHNTZXJ2aWNlLnNob3dFcnJvclRvYXN0KCdVbmFibGUgdG8gc2F2ZSB5b3VyIGxvY2F0aW9uLicpO1xuXHQgICAgfVxuXHQgIH07XG5cdFxuXHQgIHZtLmZldGNoVGVuYW50TmFtZSA9IGZ1bmN0aW9uICh0ZW5hbnRLZXkpIHtcblx0ICAgIHZhciB0ZW5hbnRQcm9taXNlID0gVGVuYW50c1NlcnZpY2UuZ2V0VGVuYW50QnlLZXkodGVuYW50S2V5KTtcblx0ICAgIHJldHVybiB0ZW5hbnRQcm9taXNlLnRoZW4oZnVuY3Rpb24gKHRlbmFudCkge1xuXHQgICAgICByZXR1cm4gdm0udGVuYW50TmFtZSA9IHRlbmFudC5uYW1lO1xuXHQgICAgfSk7XG5cdCAgfTtcblx0XG5cdCAgdm0uYXV0b0dlbmVyYXRlQ3VzdG9tZXJMb2NhdGlvbkNvZGUgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICBpZiAoIXZtLmxvY2F0aW9uLmtleSkge1xuXHQgICAgICB2YXIgbmV3Q3VzdG9tZXJMb2NhdGlvbkNvZGUgPSAnJztcblx0ICAgICAgaWYgKHZtLmxvY2F0aW9uLmN1c3RvbWVyTG9jYXRpb25OYW1lKSB7XG5cdCAgICAgICAgbmV3Q3VzdG9tZXJMb2NhdGlvbkNvZGUgPSB2bS5sb2NhdGlvbi5jdXN0b21lckxvY2F0aW9uTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHQgICAgICAgIG5ld0N1c3RvbWVyTG9jYXRpb25Db2RlID0gbmV3Q3VzdG9tZXJMb2NhdGlvbkNvZGUucmVwbGFjZSgvXFxzKy9nLCAnXycpO1xuXHQgICAgICAgIG5ld0N1c3RvbWVyTG9jYXRpb25Db2RlID0gbmV3Q3VzdG9tZXJMb2NhdGlvbkNvZGUucmVwbGFjZSgvXFxXKy9nLCAnJyk7XG5cdCAgICAgIH1cblx0ICAgICAgcmV0dXJuIHZtLmxvY2F0aW9uLmN1c3RvbWVyTG9jYXRpb25Db2RlID0gbmV3Q3VzdG9tZXJMb2NhdGlvbkNvZGU7XG5cdCAgICB9XG5cdCAgfTtcblx0XG5cdCAgcmV0dXJuIHZtO1xuXHR9XG5cdGV4cG9ydHMuVGVuYW50TG9jYXRpb25DdHJsID0gVGVuYW50TG9jYXRpb25DdHJsO1xuXG4vKioqLyB9LFxuXG4vKioqLyA3MjQ6XG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pIHtcblxuXHQndXNlIHN0cmljdCc7XG5cdFxuXHRUZW5hbnRMb2NhdGlvbnNDdHJsLiRpbmplY3QgPSBbXCIkc2NvcGVcIiwgXCIkc3RhdGVQYXJhbXNcIiwgXCJUZW5hbnRzU2VydmljZVwiLCBcIkxvY2F0aW9uc1NlcnZpY2VcIiwgXCIkc3RhdGVcIiwgXCJQcm9ncmVzc0JhclNlcnZpY2VcIl07XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuXHQgIHZhbHVlOiB0cnVlXG5cdH0pO1xuXHRleHBvcnRzLlRlbmFudExvY2F0aW9uc0N0cmwgPSB1bmRlZmluZWQ7XG5cdFxuXHR2YXIgX2dldEl0ZXJhdG9yMiA9IF9fd2VicGFja19yZXF1aXJlX18oNjUwKTtcblx0XG5cdHZhciBfZ2V0SXRlcmF0b3IzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZ2V0SXRlcmF0b3IyKTtcblx0XG5cdHZhciBfamF2YXNjcmlwdE5hdHVyYWxTb3J0ID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2NTkpO1xuXHRcblx0dmFyIF9qYXZhc2NyaXB0TmF0dXJhbFNvcnQyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfamF2YXNjcmlwdE5hdHVyYWxTb3J0KTtcblx0XG5cdGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cdFxuXHRmdW5jdGlvbiBUZW5hbnRMb2NhdGlvbnNDdHJsKCRzY29wZSwgJHN0YXRlUGFyYW1zLCBUZW5hbnRzU2VydmljZSwgTG9jYXRpb25zU2VydmljZSwgJHN0YXRlLCBQcm9ncmVzc0JhclNlcnZpY2UpIHtcblx0ICBcIm5nSW5qZWN0XCI7XG5cdFxuXHQgIHZhciB2bSA9IHRoaXM7XG5cdCAgdmFyIHRlbmFudEtleSA9ICRzdGF0ZVBhcmFtcy50ZW5hbnRLZXk7XG5cdFxuXHQgICRzY29wZS50YWJJbmRleCA9IDM7XG5cdCAgdm0ubG9jYXRpb25zID0gW107XG5cdCAgdm0uc2VhcmNoRGlzYWJsZWQgPSB0cnVlO1xuXHQgIHZtLnRlbmFudEtleSA9ICRzdGF0ZVBhcmFtcy50ZW5hbnRLZXk7XG5cdFxuXHQgIHZhciB0ZW5hbnRQcm9taXNlID0gVGVuYW50c1NlcnZpY2UuZ2V0VGVuYW50QnlLZXkodGVuYW50S2V5KTtcblx0ICB0ZW5hbnRQcm9taXNlLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcblx0ICAgIHZtLmN1cnJlbnRUZW5hbnQgPSBkYXRhO1xuXHQgIH0pO1xuXHRcblx0ICAkc2NvcGUuJHdhdGNoKCd0YWJJbmRleCcsIGZ1bmN0aW9uICh0b1RhYiwgZnJvbVRhYikge1xuXHQgICAgaWYgKHRvVGFiICE9PSB1bmRlZmluZWQpIHtcblx0ICAgICAgc3dpdGNoICh0b1RhYikge1xuXHQgICAgICAgIGNhc2UgMDpcblx0ICAgICAgICAgIHJldHVybiAkc3RhdGUuZ28oJ3RlbmFudERldGFpbHMnLCB7IHRlbmFudEtleTogJHN0YXRlUGFyYW1zLnRlbmFudEtleSB9KTtcblx0ICAgICAgICBjYXNlIDE6XG5cdCAgICAgICAgICByZXR1cm4gJHN0YXRlLmdvKCd0ZW5hbnRNYW5hZ2VkRGV2aWNlcycsIHsgdGVuYW50S2V5OiAkc3RhdGVQYXJhbXMudGVuYW50S2V5IH0pO1xuXHQgICAgICAgIGNhc2UgMjpcblx0ICAgICAgICAgIHJldHVybiAkc3RhdGUuZ28oJ3RlbmFudFVubWFuYWdlZERldmljZXMnLCB7IHRlbmFudEtleTogJHN0YXRlUGFyYW1zLnRlbmFudEtleSB9KTtcblx0ICAgICAgICBjYXNlIDM6XG5cdCAgICAgICAgICByZXR1cm4gJHN0YXRlLmdvKCd0ZW5hbnRMb2NhdGlvbnMnLCB7IHRlbmFudEtleTogJHN0YXRlUGFyYW1zLnRlbmFudEtleSB9KTtcblx0ICAgICAgICBjYXNlIDQ6XG5cdCAgICAgICAgICByZXR1cm4gJHN0YXRlLmdvKCd0ZW5hbnRPdmVybGF5cycsIHsgdGVuYW50S2V5OiAkc3RhdGVQYXJhbXMudGVuYW50S2V5IH0pO1xuXHQgICAgICAgIGNhc2UgNTpcblx0ICAgICAgICAgIHJldHVybiAkc3RhdGUuZ28oJ3RlbmFudExvZ3MnLCB7IHRlbmFudEtleTogJHN0YXRlUGFyYW1zLnRlbmFudEtleSB9KTtcblx0ICAgICAgfVxuXHQgICAgfVxuXHQgIH0pO1xuXHRcblx0ICB2bS5nZXRMb2NhdGlvbnMgPSBmdW5jdGlvbiAodGVuYW50S2V5LCBwcmV2LCBuZXh0KSB7XG5cdCAgICBQcm9ncmVzc0JhclNlcnZpY2Uuc3RhcnQoKTtcblx0ICAgIHZhciBsb2NhdGlvbnNQcm9taXNlID0gTG9jYXRpb25zU2VydmljZS5nZXRMb2NhdGlvbnNCeVRlbmFudEtleVBhZ2luYXRlZCh0ZW5hbnRLZXksIHByZXYsIG5leHQpO1xuXHQgICAgcmV0dXJuIGxvY2F0aW9uc1Byb21pc2UudGhlbihmdW5jdGlvbiAoZGF0YSkge1xuXHQgICAgICB2bS5sb2NhdGlvbnMgPSBkYXRhLmxvY2F0aW9ucztcblx0ICAgICAgdm0ubmV4dF9jdXJzb3IgPSBkYXRhLm5leHRfY3Vyc29yO1xuXHQgICAgICB2bS5wcmV2X2N1cnNvciA9IGRhdGEucHJldl9jdXJzb3I7XG5cdCAgICAgIHJldHVybiBQcm9ncmVzc0JhclNlcnZpY2UuY29tcGxldGUoKTtcblx0ICAgIH0pO1xuXHQgIH07XG5cdFxuXHQgIHZtLnNlYXJjaEFsbFRlbmFudExvY2F0aW9uc0J5TmFtZSA9IGZ1bmN0aW9uIChuYW1lKSB7XG5cdCAgICBpZiAoIW5hbWUgfHwgbmFtZS5sZW5ndGggPCAzKSB7XG5cdCAgICAgIHJldHVybiBbXTtcblx0ICAgIH1cblx0ICAgIHZhciBwcm9taXNlID0gTG9jYXRpb25zU2VydmljZS5zZWFyY2hBbGxUZW5hbnRMb2NhdGlvbnNCeU5hbWUodm0udGVuYW50S2V5LCBuYW1lKTtcblx0ICAgIHJldHVybiBwcm9taXNlLnRoZW4oZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG5cdCAgICAgIHZtLnNlYXJjaGVkVGVuYW50TG9jYXRpb25zID0gcmVzcG9uc2U7XG5cdCAgICAgIGlmICh2bS5zZWFyY2hlZFRlbmFudExvY2F0aW9ucykge1xuXHQgICAgICAgIHJldHVybiB2bS5zZWFyY2hlZFRlbmFudExvY2F0aW9ucy5tYXAoZnVuY3Rpb24gKGkpIHtcblx0ICAgICAgICAgIHJldHVybiBpLmN1c3RvbWVyTG9jYXRpb25OYW1lO1xuXHQgICAgICAgIH0pLnNvcnQoX2phdmFzY3JpcHROYXR1cmFsU29ydDIuZGVmYXVsdCk7XG5cdCAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgcmV0dXJuIFtdO1xuXHQgICAgICB9XG5cdCAgICB9KTtcblx0ICAgIHJldHVybiBwcm9taXNlLmNhdGNoKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuXHQgICAgICB2YXIgZXJyb3JNZXNzYWdlID0gJ1VuYWJsZSB0byBmZXRjaCBsb2NhdGlvbnMuIEVycm9yOiAnICsgcmVzcG9uc2Uuc3RhdHVzO1xuXHQgICAgICByZXR1cm4gc3dlZXQuc2hvdygnT29wcy4uLicsIGVycm9yTWVzc2FnZSwgJ2Vycm9yJyk7XG5cdCAgICB9KTtcblx0ICB9O1xuXHRcblx0ICB2bS5pc1RlbmFudExvY2F0aW9uVmFsaWQgPSBmdW5jdGlvbiAobmFtZSkge1xuXHQgICAgaWYgKCFuYW1lIHx8IG5hbWUubGVuZ3RoIDwgMykge1xuXHQgICAgICByZXR1cm4gW107XG5cdCAgICB9XG5cdCAgICB2YXIgcHJvbWlzZSA9IExvY2F0aW9uc1NlcnZpY2Uuc2VhcmNoQWxsVGVuYW50TG9jYXRpb25zQnlOYW1lKHZtLnRlbmFudEtleSwgbmFtZSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcblx0ICAgICAgdmFyIG1hdGNoID0gcmVzcG9uc2U7XG5cdCAgICAgIGlmIChtYXRjaCkge1xuXHQgICAgICAgIHZhciBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gdHJ1ZTtcblx0ICAgICAgICB2YXIgX2RpZEl0ZXJhdG9yRXJyb3IgPSBmYWxzZTtcblx0ICAgICAgICB2YXIgX2l0ZXJhdG9yRXJyb3IgPSB1bmRlZmluZWQ7XG5cdFxuXHQgICAgICAgIHRyeSB7XG5cdCAgICAgICAgICBmb3IgKHZhciBfaXRlcmF0b3IgPSAoMCwgX2dldEl0ZXJhdG9yMy5kZWZhdWx0KShtYXRjaCksIF9zdGVwOyAhKF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSAoX3N0ZXAgPSBfaXRlcmF0b3IubmV4dCgpKS5kb25lKTsgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IHRydWUpIHtcblx0ICAgICAgICAgICAgdmFyIGVhY2hMb2NhdGlvbk5hbWUgPSBfc3RlcC52YWx1ZTtcblx0XG5cdCAgICAgICAgICAgIGlmIChuYW1lID09PSBlYWNoTG9jYXRpb25OYW1lLmN1c3RvbWVyTG9jYXRpb25OYW1lKSB7XG5cdCAgICAgICAgICAgICAgdm0uc2VhcmNoRGlzYWJsZWQgPSBmYWxzZTtcblx0ICAgICAgICAgICAgICB2bS5zZWFyY2hNYXRjaCA9IGVhY2hMb2NhdGlvbk5hbWU7XG5cdCAgICAgICAgICAgICAgcmV0dXJuO1xuXHQgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgIHZtLnNlYXJjaERpc2FibGVkID0gdHJ1ZTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgfVxuXHQgICAgICAgIH0gY2F0Y2ggKGVycikge1xuXHQgICAgICAgICAgX2RpZEl0ZXJhdG9yRXJyb3IgPSB0cnVlO1xuXHQgICAgICAgICAgX2l0ZXJhdG9yRXJyb3IgPSBlcnI7XG5cdCAgICAgICAgfSBmaW5hbGx5IHtcblx0ICAgICAgICAgIHRyeSB7XG5cdCAgICAgICAgICAgIGlmICghX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiAmJiBfaXRlcmF0b3IucmV0dXJuKSB7XG5cdCAgICAgICAgICAgICAgX2l0ZXJhdG9yLnJldHVybigpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICB9IGZpbmFsbHkge1xuXHQgICAgICAgICAgICBpZiAoX2RpZEl0ZXJhdG9yRXJyb3IpIHtcblx0ICAgICAgICAgICAgICB0aHJvdyBfaXRlcmF0b3JFcnJvcjtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgfSBlbHNlIHtcblx0ICAgICAgICB2bS5zZWFyY2hEaXNhYmxlZCA9IHRydWU7XG5cdCAgICAgIH1cblx0ICAgIH0pO1xuXHQgIH07XG5cdFxuXHQgIHZtLnBhZ2luYXRlQ2FsbCA9IGZ1bmN0aW9uIChmb3J3YXJkKSB7XG5cdCAgICBpZiAoZm9yd2FyZCkge1xuXHQgICAgICByZXR1cm4gdm0uZ2V0TG9jYXRpb25zKHRlbmFudEtleSwgbnVsbCwgdm0ubmV4dF9jdXJzb3IpO1xuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgcmV0dXJuIHZtLmdldExvY2F0aW9ucyh0ZW5hbnRLZXksIHZtLnByZXZfY3Vyc29yLCBudWxsKTtcblx0ICAgIH1cblx0ICB9O1xuXHRcblx0ICB2bS5pbml0aWFsaXplID0gZnVuY3Rpb24gKCkge1xuXHQgICAgcmV0dXJuIHZtLmdldExvY2F0aW9ucyh0ZW5hbnRLZXkpO1xuXHQgIH07XG5cdFxuXHQgIHZtLmVkaXRJdGVtID0gZnVuY3Rpb24gKGl0ZW0pIHtcblx0ICAgIHJldHVybiAkc3RhdGUuZ28oJ2VkaXRMb2NhdGlvbicsIHsgbG9jYXRpb25LZXk6IGl0ZW0ua2V5IH0pO1xuXHQgIH07XG5cdFxuXHQgIHJldHVybiB2bTtcblx0fVxuXHRcblx0ZXhwb3J0cy5UZW5hbnRMb2NhdGlvbnNDdHJsID0gVGVuYW50TG9jYXRpb25zQ3RybDtcblxuLyoqKi8gfSxcblxuLyoqKi8gNzI1OlxuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdFxuXHRUZW5hbnRNYW5hZ2VkRGV2aWNlc0N0cmwuJGluamVjdCA9IFtcIiRzY29wZVwiLCBcIiRzdGF0ZVBhcmFtc1wiLCBcIlRlbmFudHNTZXJ2aWNlXCIsIFwiRGV2aWNlc1NlcnZpY2VcIiwgXCJQcm9ncmVzc0JhclNlcnZpY2VcIiwgXCIkc3RhdGVcIl07XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuXHQgIHZhbHVlOiB0cnVlXG5cdH0pO1xuXHRleHBvcnRzLlRlbmFudE1hbmFnZWREZXZpY2VzQ3RybCA9IHVuZGVmaW5lZDtcblx0XG5cdHZhciBfZ2V0SXRlcmF0b3IyID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2NTApO1xuXHRcblx0dmFyIF9nZXRJdGVyYXRvcjMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9nZXRJdGVyYXRvcjIpO1xuXHRcblx0ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblx0XG5cdGZ1bmN0aW9uIFRlbmFudE1hbmFnZWREZXZpY2VzQ3RybCgkc2NvcGUsICRzdGF0ZVBhcmFtcywgVGVuYW50c1NlcnZpY2UsIERldmljZXNTZXJ2aWNlLCBQcm9ncmVzc0JhclNlcnZpY2UsICRzdGF0ZSkge1xuXHQgIFwibmdJbmplY3RcIjtcblx0XG5cdCAgdmFyIHZtID0gdGhpcztcblx0ICB2bS5jdXJyZW50VGVuYW50ID0ge1xuXHQgICAga2V5OiB1bmRlZmluZWQsXG5cdCAgICBuYW1lOiB1bmRlZmluZWQsXG5cdCAgICB0ZW5hbnRfY29kZTogdW5kZWZpbmVkLFxuXHQgICAgYWRtaW5fZW1haWw6IHVuZGVmaW5lZCxcblx0ICAgIGNvbnRlbnRfc2VydmVyX3VybDogdW5kZWZpbmVkLFxuXHQgICAgY29udGVudF9tYW5hZ2VyX2Jhc2VfdXJsOiB1bmRlZmluZWQsXG5cdCAgICBkb21haW5fa2V5OiB1bmRlZmluZWQsXG5cdCAgICBub3RpZmljYXRpb25fZW1haWxzOiB1bmRlZmluZWQsXG5cdCAgICBwcm9vZl9vZl9wbGF5X2xvZ2dpbmc6IGZhbHNlLFxuXHQgICAgYWN0aXZlOiB0cnVlXG5cdCAgfTtcblx0ICB2bS50ZW5hbnREZXZpY2VzID0gW107XG5cdCAgdm0uZGV2aWNlc1ByZXYgPSBudWxsO1xuXHQgIHZtLmRldmljZXNOZXh0ID0gbnVsbDtcblx0ICB2bS5zZWxlY3RlZEJ1dHRvbiA9IFwiU2VyaWFsIE51bWJlclwiO1xuXHQgIHZtLnNlcmlhbERldmljZXMgPSB7fTtcblx0ICB2bS5kaXNhYmxlZCA9IHRydWU7XG5cdCAgdm0uZGV2aWNlc1RvTWF0Y2hPbiA9IFtdO1xuXHQgIHZtLm1hY0RldmljZXMgPSB7fTtcblx0ICB2bS5lZGl0TW9kZSA9ICEhJHN0YXRlUGFyYW1zLnRlbmFudEtleTtcblx0ICB2bS50ZW5hbnRLZXkgPSAkc3RhdGVQYXJhbXMudGVuYW50S2V5O1xuXHRcblx0ICB2bS5nZXRNYW5hZ2VkRGV2aWNlcyA9IGZ1bmN0aW9uICh0ZW5hbnRLZXksIHByZXZfY3Vyc29yLCBuZXh0X2N1cnNvcikge1xuXHQgICAgUHJvZ3Jlc3NCYXJTZXJ2aWNlLnN0YXJ0KCk7XG5cdCAgICB2YXIgZGV2aWNlc1Byb21pc2UgPSBEZXZpY2VzU2VydmljZS5nZXREZXZpY2VzQnlUZW5hbnQodGVuYW50S2V5LCBwcmV2X2N1cnNvciwgbmV4dF9jdXJzb3IpO1xuXHQgICAgcmV0dXJuIGRldmljZXNQcm9taXNlLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcblx0ICAgICAgdm0uZGV2aWNlc1ByZXYgPSBkYXRhW1wicHJldl9jdXJzb3JcIl07XG5cdCAgICAgIHZtLmRldmljZXNOZXh0ID0gZGF0YVtcIm5leHRfY3Vyc29yXCJdO1xuXHQgICAgICB2bS50ZW5hbnREZXZpY2VzID0gZGF0YVtcImRldmljZXNcIl07XG5cdCAgICAgIHJldHVybiBQcm9ncmVzc0JhclNlcnZpY2UuY29tcGxldGUoKTtcblx0ICAgIH0pO1xuXHQgIH07XG5cdFxuXHQgIHZtLmVkaXRJdGVtID0gZnVuY3Rpb24gKGl0ZW0pIHtcblx0ICAgIHJldHVybiBEZXZpY2VzU2VydmljZS5lZGl0SXRlbShpdGVtKTtcblx0ICB9O1xuXHRcblx0ICB2bS5yZWZyZXNoRGV2aWNlcyA9IGZ1bmN0aW9uICgpIHtcblx0ICAgIHZtLmRldmljZXNQcmV2ID0gbnVsbDtcblx0ICAgIHZtLmRldmljZXNOZXh0ID0gbnVsbDtcblx0ICAgIHZtLnRlbmFudERldmljZXMgPSBudWxsO1xuXHQgICAgcmV0dXJuIHZtLmdldE1hbmFnZWREZXZpY2VzKHZtLnRlbmFudEtleSwgdm0uZGV2aWNlc1ByZXYsIHZtLmRldmljZXNOZXh0KTtcblx0ICB9O1xuXHRcblx0ICBpZiAodm0uZWRpdE1vZGUpIHtcblx0ICAgIHZhciB0ZW5hbnRQcm9taXNlID0gVGVuYW50c1NlcnZpY2UuZ2V0VGVuYW50QnlLZXkodm0udGVuYW50S2V5KTtcblx0ICAgIHRlbmFudFByb21pc2UudGhlbihmdW5jdGlvbiAodGVuYW50KSB7XG5cdCAgICAgIHJldHVybiB2bS5jdXJyZW50VGVuYW50ID0gdGVuYW50O1xuXHQgICAgfSk7XG5cdCAgICB2bS5nZXRNYW5hZ2VkRGV2aWNlcyh2bS50ZW5hbnRLZXksIG51bGwsIG51bGwpO1xuXHQgIH1cblx0XG5cdCAgJHNjb3BlLnRhYkluZGV4ID0gMTtcblx0XG5cdCAgJHNjb3BlLiR3YXRjaCgndGFiSW5kZXgnLCBmdW5jdGlvbiAodG9UYWIsIGZyb21UYWIpIHtcblx0ICAgIGlmICh0b1RhYiAhPT0gdW5kZWZpbmVkKSB7XG5cdCAgICAgIHN3aXRjaCAodG9UYWIpIHtcblx0ICAgICAgICBjYXNlIDA6XG5cdCAgICAgICAgICByZXR1cm4gJHN0YXRlLmdvKCd0ZW5hbnREZXRhaWxzJywgeyB0ZW5hbnRLZXk6ICRzdGF0ZVBhcmFtcy50ZW5hbnRLZXkgfSk7XG5cdCAgICAgICAgY2FzZSAxOlxuXHQgICAgICAgICAgcmV0dXJuICRzdGF0ZS5nbygndGVuYW50TWFuYWdlZERldmljZXMnLCB7IHRlbmFudEtleTogJHN0YXRlUGFyYW1zLnRlbmFudEtleSB9KTtcblx0ICAgICAgICBjYXNlIDI6XG5cdCAgICAgICAgICByZXR1cm4gJHN0YXRlLmdvKCd0ZW5hbnRVbm1hbmFnZWREZXZpY2VzJywgeyB0ZW5hbnRLZXk6ICRzdGF0ZVBhcmFtcy50ZW5hbnRLZXkgfSk7XG5cdCAgICAgICAgY2FzZSAzOlxuXHQgICAgICAgICAgcmV0dXJuICRzdGF0ZS5nbygndGVuYW50TG9jYXRpb25zJywgeyB0ZW5hbnRLZXk6ICRzdGF0ZVBhcmFtcy50ZW5hbnRLZXkgfSk7XG5cdCAgICAgICAgY2FzZSA0OlxuXHQgICAgICAgICAgcmV0dXJuICRzdGF0ZS5nbygndGVuYW50T3ZlcmxheXMnLCB7IHRlbmFudEtleTogJHN0YXRlUGFyYW1zLnRlbmFudEtleSB9KTtcblx0ICAgICAgICBjYXNlIDU6XG5cdCAgICAgICAgICByZXR1cm4gJHN0YXRlLmdvKCd0ZW5hbnRMb2dzJywgeyB0ZW5hbnRLZXk6ICRzdGF0ZVBhcmFtcy50ZW5hbnRLZXkgfSk7XG5cdCAgICAgIH1cblx0ICAgIH1cblx0ICB9KTtcblx0XG5cdCAgdm0uY2hhbmdlUmFkaW8gPSBmdW5jdGlvbiAoKSB7XG5cdCAgICB2bS5zZWFyY2hUZXh0ID0gJyc7XG5cdCAgICB2bS5kaXNhYmxlZCA9IHRydWU7XG5cdCAgICB2bS5zZXJpYWxEZXZpY2VzID0ge307XG5cdCAgICB2bS5tYWNEZXZpY2VzID0ge307XG5cdCAgICB2bS5kZXZpY2VzVG9NYXRjaE9uID0gW107XG5cdCAgfTtcblx0XG5cdCAgdm0uc2VhcmNoRGV2aWNlcyA9IGZ1bmN0aW9uIChwYXJ0aWFsKSB7XG5cdCAgICB2YXIgdW5tYW5hZ2VkID0gZmFsc2U7XG5cdCAgICB2YXIgYnV0dG9uID0gdm0uc2VsZWN0ZWRCdXR0b247XG5cdCAgICB2YXIgYnlUZW5hbnQgPSB0cnVlO1xuXHQgICAgdmFyIHRlbmFudEtleSA9IHZtLnRlbmFudEtleTtcblx0ICAgIHJldHVybiBEZXZpY2VzU2VydmljZS5zZWFyY2hEZXZpY2VzKHBhcnRpYWwsIGJ1dHRvbiwgYnlUZW5hbnQsIHRlbmFudEtleSwgdm0uZGlzdHJpYnV0b3JLZXksIHVubWFuYWdlZCkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcblx0ICAgICAgdmFyIGRldmljZXNUb1JldHVybiA9IHZvaWQgMDtcblx0ICAgICAgaWYgKHJlc3BvbnNlLnN1Y2Nlc3MpIHtcblx0ICAgICAgICB2YXIgZGV2aWNlcyA9IHJlc3BvbnNlLmRldmljZXM7XG5cdCAgICAgICAgaWYgKGJ1dHRvbiA9PT0gXCJTZXJpYWwgTnVtYmVyXCIpIHtcblx0ICAgICAgICAgIHZtLnNlcmlhbERldmljZXMgPSBkZXZpY2VzWzFdO1xuXHQgICAgICAgICAgZGV2aWNlc1RvUmV0dXJuID0gZGV2aWNlc1swXTtcblx0ICAgICAgICB9IGVsc2UgaWYgKGJ1dHRvbiA9PT0gXCJNQUNcIikge1xuXHQgICAgICAgICAgdm0ubWFjRGV2aWNlcyA9IGRldmljZXNbMV07XG5cdCAgICAgICAgICBkZXZpY2VzVG9SZXR1cm4gPSBkZXZpY2VzWzBdO1xuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICB2bS5nY21pZERldmljZXMgPSBkZXZpY2VzWzFdO1xuXHQgICAgICAgICAgZGV2aWNlc1RvUmV0dXJuID0gZGV2aWNlc1swXTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgdm0uZGV2aWNlc1RvTWF0Y2hPbiA9IGRldmljZXNUb1JldHVybjtcblx0ICAgICAgICByZXR1cm4gZGV2aWNlc1RvUmV0dXJuO1xuXHQgICAgICB9IGVsc2Uge1xuXHQgICAgICAgIHJldHVybiBbXTtcblx0ICAgICAgfVxuXHQgICAgfSk7XG5cdCAgfTtcblx0XG5cdCAgdm0ucGFnaW5hdGVDYWxsID0gZnVuY3Rpb24gKGZvcndhcmQpIHtcblx0ICAgIGlmIChmb3J3YXJkKSB7XG5cdCAgICAgIHJldHVybiB2bS5nZXRNYW5hZ2VkRGV2aWNlcyh2bS50ZW5hbnRLZXksIG51bGwsIHZtLmRldmljZXNOZXh0KTtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIHJldHVybiB2bS5nZXRNYW5hZ2VkRGV2aWNlcyh2bS50ZW5hbnRLZXksIHZtLmRldmljZXNQcmV2LCBudWxsKTtcblx0ICAgIH1cblx0ICB9O1xuXHRcblx0ICB2bS5wcmVwYXJlRm9yRWRpdFZpZXcgPSBmdW5jdGlvbiAoc2VhcmNoVGV4dCkge1xuXHQgICAgcmV0dXJuIERldmljZXNTZXJ2aWNlLnByZXByYXRlRm9yRWRpdFZpZXcodm0uc2VsZWN0ZWRCdXR0b24sIHZtLnRlbmFudEtleSwgc2VhcmNoVGV4dCwgdm0ubWFjRGV2aWNlcywgdm0uc2VyaWFsRGV2aWNlcywgdm0uZ2NtaWREZXZpY2VzKTtcblx0ICB9O1xuXHRcblx0ICB2bS5jb250cm9sT3BlbkJ1dHRvbiA9IGZ1bmN0aW9uIChpc01hdGNoKSB7XG5cdCAgICB2bS5kaXNhYmxlZCA9ICFpc01hdGNoO1xuXHQgICAgcmV0dXJuIHZtLmxvYWRpbmdEaXNhYmxlZCA9IGZhbHNlO1xuXHQgIH07XG5cdFxuXHQgIHZtLmlzUmVzb3VyY2VWYWxpZCA9IGZ1bmN0aW9uIChyZXNvdXJjZSkge1xuXHQgICAgdmFyIGZvdW5kTWF0Y2ggPSBmYWxzZTtcblx0ICAgIHZhciBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gdHJ1ZTtcblx0ICAgIHZhciBfZGlkSXRlcmF0b3JFcnJvciA9IGZhbHNlO1xuXHQgICAgdmFyIF9pdGVyYXRvckVycm9yID0gdW5kZWZpbmVkO1xuXHRcblx0ICAgIHRyeSB7XG5cdCAgICAgIGZvciAodmFyIF9pdGVyYXRvciA9ICgwLCBfZ2V0SXRlcmF0b3IzLmRlZmF1bHQpKHZtLmRldmljZXNUb01hdGNoT24pLCBfc3RlcDsgIShfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gKF9zdGVwID0gX2l0ZXJhdG9yLm5leHQoKSkuZG9uZSk7IF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSB0cnVlKSB7XG5cdCAgICAgICAgdmFyIGl0ZW0gPSBfc3RlcC52YWx1ZTtcblx0XG5cdCAgICAgICAgaWYgKHJlc291cmNlID09PSBpdGVtKSB7XG5cdCAgICAgICAgICBmb3VuZE1hdGNoID0gdHJ1ZTtcblx0ICAgICAgICB9XG5cdCAgICAgIH1cblx0ICAgIH0gY2F0Y2ggKGVycikge1xuXHQgICAgICBfZGlkSXRlcmF0b3JFcnJvciA9IHRydWU7XG5cdCAgICAgIF9pdGVyYXRvckVycm9yID0gZXJyO1xuXHQgICAgfSBmaW5hbGx5IHtcblx0ICAgICAgdHJ5IHtcblx0ICAgICAgICBpZiAoIV9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gJiYgX2l0ZXJhdG9yLnJldHVybikge1xuXHQgICAgICAgICAgX2l0ZXJhdG9yLnJldHVybigpO1xuXHQgICAgICAgIH1cblx0ICAgICAgfSBmaW5hbGx5IHtcblx0ICAgICAgICBpZiAoX2RpZEl0ZXJhdG9yRXJyb3IpIHtcblx0ICAgICAgICAgIHRocm93IF9pdGVyYXRvckVycm9yO1xuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXHQgICAgfVxuXHRcblx0ICAgIHZtLmNvbnRyb2xPcGVuQnV0dG9uKGZvdW5kTWF0Y2gpO1xuXHQgICAgcmV0dXJuIGZvdW5kTWF0Y2g7XG5cdCAgfTtcblx0XG5cdCAgcmV0dXJuIHZtO1xuXHR9XG5cdFxuXHRleHBvcnRzLlRlbmFudE1hbmFnZWREZXZpY2VzQ3RybCA9IFRlbmFudE1hbmFnZWREZXZpY2VzQ3RybDtcblxuLyoqKi8gfSxcblxuLyoqKi8gNzI2OlxuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0XCJ1c2Ugc3RyaWN0XCI7XG5cdFxuXHRUZW5hbnRVbm1hbmFnZWREZXZpY2VzQ3RybC4kaW5qZWN0ID0gW1wiJHNjb3BlXCIsIFwiJHN0YXRlUGFyYW1zXCIsIFwiVGVuYW50c1NlcnZpY2VcIiwgXCJEZXZpY2VzU2VydmljZVwiLCBcIlByb2dyZXNzQmFyU2VydmljZVwiLCBcIiRzdGF0ZVwiXTtcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG5cdCAgdmFsdWU6IHRydWVcblx0fSk7XG5cdGV4cG9ydHMuVGVuYW50VW5tYW5hZ2VkRGV2aWNlc0N0cmwgPSB1bmRlZmluZWQ7XG5cdFxuXHR2YXIgX2dldEl0ZXJhdG9yMiA9IF9fd2VicGFja19yZXF1aXJlX18oNjUwKTtcblx0XG5cdHZhciBfZ2V0SXRlcmF0b3IzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChfZ2V0SXRlcmF0b3IyKTtcblx0XG5cdGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cdFxuXHRmdW5jdGlvbiBUZW5hbnRVbm1hbmFnZWREZXZpY2VzQ3RybCgkc2NvcGUsICRzdGF0ZVBhcmFtcywgVGVuYW50c1NlcnZpY2UsIERldmljZXNTZXJ2aWNlLCBQcm9ncmVzc0JhclNlcnZpY2UsICRzdGF0ZSkge1xuXHQgIFwibmdJbmplY3RcIjtcblx0XG5cdCAgdmFyIHZtID0gdGhpcztcblx0ICB2bS5jdXJyZW50VGVuYW50ID0ge1xuXHQgICAga2V5OiB1bmRlZmluZWQsXG5cdCAgICBuYW1lOiB1bmRlZmluZWQsXG5cdCAgICB0ZW5hbnRfY29kZTogdW5kZWZpbmVkLFxuXHQgICAgYWRtaW5fZW1haWw6IHVuZGVmaW5lZCxcblx0ICAgIGNvbnRlbnRfc2VydmVyX3VybDogdW5kZWZpbmVkLFxuXHQgICAgY29udGVudF9tYW5hZ2VyX2Jhc2VfdXJsOiB1bmRlZmluZWQsXG5cdCAgICBkb21haW5fa2V5OiB1bmRlZmluZWQsXG5cdCAgICBub3RpZmljYXRpb25fZW1haWxzOiB1bmRlZmluZWQsXG5cdCAgICBwcm9vZl9vZl9wbGF5X2xvZ2dpbmc6IGZhbHNlLFxuXHQgICAgYWN0aXZlOiB0cnVlXG5cdCAgfTtcblx0ICB2bS5nY21pZERldmljZXMgPSBbXTtcblx0ICB2bS50ZW5hbnREZXZpY2VzID0gW107XG5cdCAgdm0uZGV2aWNlc1ByZXYgPSBudWxsO1xuXHQgIHZtLmRldmljZXNOZXh0ID0gbnVsbDtcblx0ICB2bS5zZWxlY3RlZEJ1dHRvbiA9IFwiTUFDXCI7XG5cdCAgdm0uc2VyaWFsRGV2aWNlcyA9IHt9O1xuXHQgIHZtLmRpc2FibGVkID0gdHJ1ZTtcblx0ICB2bS5tYWNEZXZpY2VzID0ge307XG5cdCAgdm0uZGV2aWNlc1RvTWF0Y2hPbiA9IFtdO1xuXHQgIHZtLmVkaXRNb2RlID0gISEkc3RhdGVQYXJhbXMudGVuYW50S2V5O1xuXHQgIHZtLnRlbmFudEtleSA9ICRzdGF0ZVBhcmFtcy50ZW5hbnRLZXk7XG5cdFxuXHQgICRzY29wZS50YWJJbmRleCA9IDI7XG5cdFxuXHQgICRzY29wZS4kd2F0Y2goJ3RhYkluZGV4JywgZnVuY3Rpb24gKHRvVGFiLCBmcm9tVGFiKSB7XG5cdCAgICBpZiAodG9UYWIgIT09IHVuZGVmaW5lZCkge1xuXHQgICAgICBzd2l0Y2ggKHRvVGFiKSB7XG5cdCAgICAgICAgY2FzZSAwOlxuXHQgICAgICAgICAgcmV0dXJuICRzdGF0ZS5nbygndGVuYW50RGV0YWlscycsIHsgdGVuYW50S2V5OiAkc3RhdGVQYXJhbXMudGVuYW50S2V5IH0pO1xuXHQgICAgICAgIGNhc2UgMTpcblx0ICAgICAgICAgIHJldHVybiAkc3RhdGUuZ28oJ3RlbmFudE1hbmFnZWREZXZpY2VzJywgeyB0ZW5hbnRLZXk6ICRzdGF0ZVBhcmFtcy50ZW5hbnRLZXkgfSk7XG5cdCAgICAgICAgY2FzZSAyOlxuXHQgICAgICAgICAgcmV0dXJuICRzdGF0ZS5nbygndGVuYW50VW5tYW5hZ2VkRGV2aWNlcycsIHsgdGVuYW50S2V5OiAkc3RhdGVQYXJhbXMudGVuYW50S2V5IH0pO1xuXHQgICAgICAgIGNhc2UgMzpcblx0ICAgICAgICAgIHJldHVybiAkc3RhdGUuZ28oJ3RlbmFudExvY2F0aW9ucycsIHsgdGVuYW50S2V5OiAkc3RhdGVQYXJhbXMudGVuYW50S2V5IH0pO1xuXHQgICAgICAgIGNhc2UgNDpcblx0ICAgICAgICAgIHJldHVybiAkc3RhdGUuZ28oJ3RlbmFudE92ZXJsYXlzJywgeyB0ZW5hbnRLZXk6ICRzdGF0ZVBhcmFtcy50ZW5hbnRLZXkgfSk7XG5cdCAgICAgICAgY2FzZSA1OlxuXHQgICAgICAgICAgcmV0dXJuICRzdGF0ZS5nbygndGVuYW50TG9ncycsIHsgdGVuYW50S2V5OiAkc3RhdGVQYXJhbXMudGVuYW50S2V5IH0pO1xuXHQgICAgICB9XG5cdCAgICB9XG5cdCAgfSk7XG5cdFxuXHQgIHZtLmVkaXRJdGVtID0gZnVuY3Rpb24gKGl0ZW0pIHtcblx0ICAgIHJldHVybiBEZXZpY2VzU2VydmljZS5lZGl0SXRlbShpdGVtKTtcblx0ICB9O1xuXHRcblx0ICB2bS5nZXRVbm1hbmFnZWREZXZpY2VzID0gZnVuY3Rpb24gKHRlbmFudEtleSwgcHJldl9jdXJzb3IsIG5leHRfY3Vyc29yKSB7XG5cdCAgICBQcm9ncmVzc0JhclNlcnZpY2Uuc3RhcnQoKTtcblx0ICAgIHZhciBkZXZpY2VzUHJvbWlzZSA9IERldmljZXNTZXJ2aWNlLmdldFVubWFuYWdlZERldmljZXNCeVRlbmFudCh0ZW5hbnRLZXksIHByZXZfY3Vyc29yLCBuZXh0X2N1cnNvcik7XG5cdCAgICByZXR1cm4gZGV2aWNlc1Byb21pc2UudGhlbihmdW5jdGlvbiAoZGF0YSkge1xuXHQgICAgICB2bS5kZXZpY2VzUHJldiA9IGRhdGFbXCJwcmV2X2N1cnNvclwiXTtcblx0ICAgICAgdm0uZGV2aWNlc05leHQgPSBkYXRhW1wibmV4dF9jdXJzb3JcIl07XG5cdCAgICAgIHZtLnRlbmFudERldmljZXMgPSBkYXRhW1wiZGV2aWNlc1wiXTtcblx0ICAgICAgcmV0dXJuIFByb2dyZXNzQmFyU2VydmljZS5jb21wbGV0ZSgpO1xuXHQgICAgfSk7XG5cdCAgfTtcblx0XG5cdCAgaWYgKHZtLmVkaXRNb2RlKSB7XG5cdCAgICB2YXIgdGVuYW50UHJvbWlzZSA9IFRlbmFudHNTZXJ2aWNlLmdldFRlbmFudEJ5S2V5KHZtLnRlbmFudEtleSk7XG5cdCAgICB0ZW5hbnRQcm9taXNlLnRoZW4oZnVuY3Rpb24gKHRlbmFudCkge1xuXHQgICAgICByZXR1cm4gdm0uY3VycmVudFRlbmFudCA9IHRlbmFudDtcblx0ICAgIH0pO1xuXHQgICAgdm0uZ2V0VW5tYW5hZ2VkRGV2aWNlcyh2bS50ZW5hbnRLZXksIG51bGwsIG51bGwpO1xuXHQgIH1cblx0XG5cdCAgdm0ucmVmcmVzaERldmljZXMgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICB2bS5kZXZpY2VzUHJldiA9IG51bGw7XG5cdCAgICB2bS5kZXZpY2VzTmV4dCA9IG51bGw7XG5cdCAgICB2bS50ZW5hbnREZXZpY2VzID0gbnVsbDtcblx0ICAgIHJldHVybiB2bS5nZXRVbm1hbmFnZWREZXZpY2VzKHZtLnRlbmFudEtleSwgdm0uZGV2aWNlc1ByZXYsIHZtLmRldmljZXNOZXh0KTtcblx0ICB9O1xuXHRcblx0ICB2bS5jaGFuZ2VSYWRpbyA9IGZ1bmN0aW9uICgpIHtcblx0ICAgIHZtLnNlYXJjaFRleHQgPSAnJztcblx0ICAgIHZtLmRpc2FibGVkID0gdHJ1ZTtcblx0ICAgIHZtLnNlcmlhbERldmljZXMgPSB7fTtcblx0ICAgIHZtLm1hY0RldmljZXMgPSB7fTtcblx0ICAgIHZtLmRldmljZXNUb01hdGNoT24gPSBbXTtcblx0ICB9O1xuXHRcblx0ICB2bS5zZWFyY2hEZXZpY2VzID0gZnVuY3Rpb24gKHBhcnRpYWwpIHtcblx0ICAgIHZhciB1bm1hbmFnZWQgPSB0cnVlO1xuXHQgICAgdmFyIGJ5VGVuYW50ID0gdHJ1ZTtcblx0ICAgIHJldHVybiBEZXZpY2VzU2VydmljZS5zZWFyY2hEZXZpY2VzKHBhcnRpYWwsIHZtLnNlbGVjdGVkQnV0dG9uLCBieVRlbmFudCwgdm0udGVuYW50S2V5LCB2bS5kaXN0cmlidXRvcktleSwgdW5tYW5hZ2VkKS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuXHQgICAgICB2YXIgZGV2aWNlc1RvUmV0dXJuID0gdm9pZCAwO1xuXHQgICAgICBpZiAocmVzcG9uc2Uuc3VjY2Vzcykge1xuXHQgICAgICAgIHZhciBkZXZpY2VzID0gcmVzcG9uc2UuZGV2aWNlcztcblx0ICAgICAgICBpZiAodm0uc2VsZWN0ZWRCdXR0b24gPT09IFwiU2VyaWFsIE51bWJlclwiKSB7XG5cdCAgICAgICAgICB2bS5zZXJpYWxEZXZpY2VzID0gZGV2aWNlc1sxXTtcblx0ICAgICAgICAgIGRldmljZXNUb1JldHVybiA9IGRldmljZXNbMF07XG5cdCAgICAgICAgfSBlbHNlIGlmICh2bS5zZWxlY3RlZEJ1dHRvbiA9PT0gXCJNQUNcIikge1xuXHQgICAgICAgICAgdm0ubWFjRGV2aWNlcyA9IGRldmljZXNbMV07XG5cdCAgICAgICAgICBkZXZpY2VzVG9SZXR1cm4gPSBkZXZpY2VzWzBdO1xuXHQgICAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgICB2bS5nY21pZERldmljZXMgPSBkZXZpY2VzWzFdO1xuXHQgICAgICAgICAgZGV2aWNlc1RvUmV0dXJuID0gZGV2aWNlc1swXTtcblx0ICAgICAgICB9XG5cdCAgICAgICAgdm0uZGV2aWNlc1RvTWF0Y2hPbiA9IGRldmljZXNUb1JldHVybjtcblx0ICAgICAgICByZXR1cm4gZGV2aWNlc1RvUmV0dXJuO1xuXHQgICAgICB9IGVsc2Uge1xuXHQgICAgICAgIHJldHVybiBbXTtcblx0ICAgICAgfVxuXHQgICAgfSk7XG5cdCAgfTtcblx0XG5cdCAgdm0ucGFnaW5hdGVDYWxsID0gZnVuY3Rpb24gKGZvcndhcmQpIHtcblx0ICAgIGlmIChmb3J3YXJkKSB7XG5cdCAgICAgIHJldHVybiB2bS5nZXRVbm1hbmFnZWREZXZpY2VzKHZtLnRlbmFudEtleSwgbnVsbCwgdm0uZGV2aWNlc05leHQpO1xuXHQgICAgfSBlbHNlIHtcblx0ICAgICAgcmV0dXJuIHZtLmdldFVubWFuYWdlZERldmljZXModm0udGVuYW50S2V5LCB2bS5kZXZpY2VzUHJldiwgbnVsbCk7XG5cdCAgICB9XG5cdCAgfTtcblx0XG5cdCAgdm0ucHJlcGFyZUZvckVkaXRWaWV3ID0gZnVuY3Rpb24gKHNlYXJjaFRleHQpIHtcblx0ICAgIHJldHVybiBEZXZpY2VzU2VydmljZS5wcmVwcmF0ZUZvckVkaXRWaWV3KHZtLnNlbGVjdGVkQnV0dG9uLCB2bS50ZW5hbnRLZXksIHNlYXJjaFRleHQsIHZtLm1hY0RldmljZXMsIHZtLnNlcmlhbERldmljZXMsIHZtLmdjbWlkRGV2aWNlcyk7XG5cdCAgfTtcblx0XG5cdCAgdm0uY29udHJvbE9wZW5CdXR0b24gPSBmdW5jdGlvbiAoaXNNYXRjaCkge1xuXHQgICAgdm0uZGlzYWJsZWQgPSAhaXNNYXRjaDtcblx0ICAgIHZtLmxvYWRpbmdEaXNhYmxlZCA9IGZhbHNlO1xuXHQgIH07XG5cdFxuXHQgIHZtLmlzUmVzb3VyY2VWYWxpZCA9IGZ1bmN0aW9uIChyZXNvdXJjZSkge1xuXHQgICAgdmFyIGZvdW5kTWF0Y2ggPSBmYWxzZTtcblx0ICAgIHZhciBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gdHJ1ZTtcblx0ICAgIHZhciBfZGlkSXRlcmF0b3JFcnJvciA9IGZhbHNlO1xuXHQgICAgdmFyIF9pdGVyYXRvckVycm9yID0gdW5kZWZpbmVkO1xuXHRcblx0ICAgIHRyeSB7XG5cdCAgICAgIGZvciAodmFyIF9pdGVyYXRvciA9ICgwLCBfZ2V0SXRlcmF0b3IzLmRlZmF1bHQpKHZtLmRldmljZXNUb01hdGNoT24pLCBfc3RlcDsgIShfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gKF9zdGVwID0gX2l0ZXJhdG9yLm5leHQoKSkuZG9uZSk7IF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSB0cnVlKSB7XG5cdCAgICAgICAgdmFyIGl0ZW0gPSBfc3RlcC52YWx1ZTtcblx0XG5cdCAgICAgICAgaWYgKHJlc291cmNlID09PSBpdGVtKSB7XG5cdCAgICAgICAgICBmb3VuZE1hdGNoID0gdHJ1ZTtcblx0ICAgICAgICB9XG5cdCAgICAgIH1cblx0ICAgIH0gY2F0Y2ggKGVycikge1xuXHQgICAgICBfZGlkSXRlcmF0b3JFcnJvciA9IHRydWU7XG5cdCAgICAgIF9pdGVyYXRvckVycm9yID0gZXJyO1xuXHQgICAgfSBmaW5hbGx5IHtcblx0ICAgICAgdHJ5IHtcblx0ICAgICAgICBpZiAoIV9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gJiYgX2l0ZXJhdG9yLnJldHVybikge1xuXHQgICAgICAgICAgX2l0ZXJhdG9yLnJldHVybigpO1xuXHQgICAgICAgIH1cblx0ICAgICAgfSBmaW5hbGx5IHtcblx0ICAgICAgICBpZiAoX2RpZEl0ZXJhdG9yRXJyb3IpIHtcblx0ICAgICAgICAgIHRocm93IF9pdGVyYXRvckVycm9yO1xuXHQgICAgICAgIH1cblx0ICAgICAgfVxuXHQgICAgfVxuXHRcblx0ICAgIHZtLmNvbnRyb2xPcGVuQnV0dG9uKGZvdW5kTWF0Y2gpO1xuXHQgICAgcmV0dXJuIGZvdW5kTWF0Y2g7XG5cdCAgfTtcblx0XG5cdCAgcmV0dXJuIHZtO1xuXHR9XG5cdGV4cG9ydHMuVGVuYW50VW5tYW5hZ2VkRGV2aWNlc0N0cmwgPSBUZW5hbnRVbm1hbmFnZWREZXZpY2VzQ3RybDtcblxuLyoqKi8gfSxcblxuLyoqKi8gNzI3OlxuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0VGVuYW50c0N0cmwuJGluamVjdCA9IFtcIiRzdGF0ZVwiLCBcIiRsb2dcIiwgXCJUZW5hbnRzU2VydmljZVwiLCBcIlByb2dyZXNzQmFyU2VydmljZVwiLCBcInN3ZWV0XCJdO1xuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcblx0ICB2YWx1ZTogdHJ1ZVxuXHR9KTtcblx0ZXhwb3J0cy5UZW5hbnRzQ3RybCA9IHVuZGVmaW5lZDtcblx0XG5cdHZhciBfZ2V0SXRlcmF0b3IyID0gX193ZWJwYWNrX3JlcXVpcmVfXyg2NTApO1xuXHRcblx0dmFyIF9nZXRJdGVyYXRvcjMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9nZXRJdGVyYXRvcjIpO1xuXHRcblx0dmFyIF9qYXZhc2NyaXB0TmF0dXJhbFNvcnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKDY1OSk7XG5cdFxuXHR2YXIgX2phdmFzY3JpcHROYXR1cmFsU29ydDIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9qYXZhc2NyaXB0TmF0dXJhbFNvcnQpO1xuXHRcblx0ZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblx0XG5cdGZ1bmN0aW9uIFRlbmFudHNDdHJsKCRzdGF0ZSwgJGxvZywgVGVuYW50c1NlcnZpY2UsIFByb2dyZXNzQmFyU2VydmljZSwgc3dlZXQpIHtcblx0ICBcIm5nSW5qZWN0XCI7XG5cdFxuXHQgIHZhciB2bSA9IHRoaXM7XG5cdFxuXHQgIC8vIFBhZ2luYXRlZCBUZW5hbnRzXG5cdCAgdm0udGVuYW50cyA9IFtdO1xuXHQgIC8vIEN1cnJlbnQgU2VhcmNoIG9mIFRlbmFudHMgUmVzdWx0c1xuXHQgIHZtLnNlYXJjaGVkVGVuYW50cyA9IFtdO1xuXHQgIHZtLnNlYXJjaE1hdGNoID0gbnVsbDtcblx0ICB2bS5zZWFyY2hEaXNhYmxlZCA9IHRydWU7XG5cdFxuXHQgIHZtLmdldFRlbmFudHNQYWdpbmF0ZWQgPSBmdW5jdGlvbiAocGFnZV9zaXplLCBvZmZzZXQpIHtcblx0ICAgIHZtLm9mZnNldCA9IG9mZnNldDtcblx0ICAgIHZtLmxvYWRpbmcgPSB0cnVlO1xuXHQgICAgUHJvZ3Jlc3NCYXJTZXJ2aWNlLnN0YXJ0KCk7XG5cdCAgICB2YXIgcHJvbWlzZSA9IFRlbmFudHNTZXJ2aWNlLmZldGNoQWxsVGVuYW50c1BhZ2luYXRlZChwYWdlX3NpemUsIG9mZnNldCk7XG5cdCAgICByZXR1cm4gcHJvbWlzZS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuXHQgICAgICByZXR1cm4gdm0uZ2V0RmV0Y2hTdWNjZXNzKHJlc3BvbnNlKTtcblx0ICAgIH0sIGZ1bmN0aW9uIChyZXNwb25zZSkge1xuXHQgICAgICByZXR1cm4gdm0uZ2V0RmV0Y2hGYWlsdXJlKHJlc3BvbnNlKTtcblx0ICAgIH0pO1xuXHQgIH07XG5cdFxuXHQgIHZtLmdldEZldGNoU3VjY2VzcyA9IGZ1bmN0aW9uIChyZXNwb25zZSkge1xuXHQgICAgdm0udGVuYW50cyA9IHJlc3BvbnNlLnRlbmFudHM7XG5cdCAgICB2bS50b3RhbCA9IHJlc3BvbnNlLnRvdGFsO1xuXHQgICAgdm0uaXNfZmlyc3RfcGFnZSA9IHJlc3BvbnNlLmlzX2ZpcnN0X3BhZ2U7XG5cdCAgICB2bS5pc19sYXN0X3BhZ2UgPSByZXNwb25zZS5pc19sYXN0X3BhZ2U7XG5cdCAgICBQcm9ncmVzc0JhclNlcnZpY2UuY29tcGxldGUoKTtcblx0ICAgIHJldHVybiB2bS5sb2FkaW5nID0gZmFsc2U7XG5cdCAgfTtcblx0XG5cdCAgdm0uZ2V0RmV0Y2hGYWlsdXJlID0gZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG5cdCAgICBQcm9ncmVzc0JhclNlcnZpY2UuY29tcGxldGUoKTtcblx0ICAgIHZhciBlcnJvck1lc3NhZ2UgPSAnVW5hYmxlIHRvIGZldGNoIHRlbmFudHMuIEVycm9yOiAnICsgcmVzcG9uc2Uuc3RhdHVzICsgJyAnICsgcmVzcG9uc2Uuc3RhdHVzVGV4dCArICcuJztcblx0ICAgIHJldHVybiBzd2VldC5zaG93KCdPb3BzLi4uJywgZXJyb3JNZXNzYWdlLCAnZXJyb3InKTtcblx0ICB9O1xuXHRcblx0ICB2bS5pbml0aWFsaXplID0gZnVuY3Rpb24gKCkge1xuXHQgICAgdm0ub2Zmc2V0ID0gMDtcblx0ICAgIHZtLnNlYXJjaEFsbFRlbmFudHNCeU5hbWUoJ215Jyk7XG5cdCAgICByZXR1cm4gdm0uZ2V0VGVuYW50c1BhZ2luYXRlZCgxMDAsIHZtLm9mZnNldCk7XG5cdCAgfTtcblx0XG5cdCAgdm0uc2VhcmNoQWxsVGVuYW50c0J5TmFtZSA9IGZ1bmN0aW9uICh0ZW5hbnRfbmFtZSkge1xuXHQgICAgaWYgKCF0ZW5hbnRfbmFtZSB8fCB0ZW5hbnRfbmFtZS5sZW5ndGggPCAzKSB7XG5cdCAgICAgIHJldHVybiBbXTtcblx0ICAgIH1cblx0ICAgIHZhciBwcm9taXNlID0gVGVuYW50c1NlcnZpY2Uuc2VhcmNoQWxsVGVuYW50c0J5TmFtZSh0ZW5hbnRfbmFtZSk7XG5cdCAgICByZXR1cm4gcHJvbWlzZS50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuXHQgICAgICB2bS5zZWFyY2hlZFRlbmFudHMgPSByZXNwb25zZTtcblx0ICAgICAgaWYgKHZtLnNlYXJjaGVkVGVuYW50cykge1xuXHQgICAgICAgIHJldHVybiB2bS5zZWFyY2hlZFRlbmFudHMubWFwKGZ1bmN0aW9uIChpKSB7XG5cdCAgICAgICAgICByZXR1cm4gaS5uYW1lO1xuXHQgICAgICAgIH0pLnNvcnQoX2phdmFzY3JpcHROYXR1cmFsU29ydDIuZGVmYXVsdCk7XG5cdCAgICAgIH0gZWxzZSB7XG5cdCAgICAgICAgcmV0dXJuIFtdO1xuXHQgICAgICB9XG5cdCAgICB9KTtcblx0ICAgIHJldHVybiBwcm9taXNlLmNhdGNoKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuXHQgICAgICB2YXIgZXJyb3JNZXNzYWdlID0gJ1VuYWJsZSB0byBmZXRjaCB0ZW5hbnRzLiBFcnJvcjogJyArIHJlc3BvbnNlLnN0YXR1cztcblx0ICAgICAgcmV0dXJuIHN3ZWV0LnNob3coJ09vcHMuLi4nLCBlcnJvck1lc3NhZ2UsICdlcnJvcicpO1xuXHQgICAgfSk7XG5cdCAgfTtcblx0XG5cdCAgdm0uaXNUZW5hbnRWYWxpZCA9IGZ1bmN0aW9uICh0ZW5hbnRfbmFtZSkge1xuXHQgICAgaWYgKCF0ZW5hbnRfbmFtZSB8fCB0ZW5hbnRfbmFtZS5sZW5ndGggPCAzKSB7XG5cdCAgICAgIHJldHVybiBbXTtcblx0ICAgIH1cblx0ICAgIHZhciBwcm9taXNlID0gVGVuYW50c1NlcnZpY2Uuc2VhcmNoQWxsVGVuYW50c0J5TmFtZSh0ZW5hbnRfbmFtZSkudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcblx0ICAgICAgdmFyIG1hdGNoID0gcmVzcG9uc2U7XG5cdCAgICAgIGlmIChtYXRjaCkge1xuXHQgICAgICAgIHZhciBfaXRlcmF0b3JOb3JtYWxDb21wbGV0aW9uID0gdHJ1ZTtcblx0ICAgICAgICB2YXIgX2RpZEl0ZXJhdG9yRXJyb3IgPSBmYWxzZTtcblx0ICAgICAgICB2YXIgX2l0ZXJhdG9yRXJyb3IgPSB1bmRlZmluZWQ7XG5cdFxuXHQgICAgICAgIHRyeSB7XG5cdCAgICAgICAgICBmb3IgKHZhciBfaXRlcmF0b3IgPSAoMCwgX2dldEl0ZXJhdG9yMy5kZWZhdWx0KShtYXRjaCksIF9zdGVwOyAhKF9pdGVyYXRvck5vcm1hbENvbXBsZXRpb24gPSAoX3N0ZXAgPSBfaXRlcmF0b3IubmV4dCgpKS5kb25lKTsgX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiA9IHRydWUpIHtcblx0ICAgICAgICAgICAgdmFyIGVhY2hOYW1lID0gX3N0ZXAudmFsdWU7XG5cdFxuXHQgICAgICAgICAgICBpZiAodGVuYW50X25hbWUgPT09IGVhY2hOYW1lLm5hbWUpIHtcblx0ICAgICAgICAgICAgICB2bS5zZWFyY2hEaXNhYmxlZCA9IGZhbHNlO1xuXHQgICAgICAgICAgICAgIHZtLnNlYXJjaE1hdGNoID0gZWFjaE5hbWU7XG5cdCAgICAgICAgICAgICAgcmV0dXJuO1xuXHQgICAgICAgICAgICB9IGVsc2Uge1xuXHQgICAgICAgICAgICAgIHZtLnNlYXJjaERpc2FibGVkID0gdHJ1ZTtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgfVxuXHQgICAgICAgIH0gY2F0Y2ggKGVycikge1xuXHQgICAgICAgICAgX2RpZEl0ZXJhdG9yRXJyb3IgPSB0cnVlO1xuXHQgICAgICAgICAgX2l0ZXJhdG9yRXJyb3IgPSBlcnI7XG5cdCAgICAgICAgfSBmaW5hbGx5IHtcblx0ICAgICAgICAgIHRyeSB7XG5cdCAgICAgICAgICAgIGlmICghX2l0ZXJhdG9yTm9ybWFsQ29tcGxldGlvbiAmJiBfaXRlcmF0b3IucmV0dXJuKSB7XG5cdCAgICAgICAgICAgICAgX2l0ZXJhdG9yLnJldHVybigpO1xuXHQgICAgICAgICAgICB9XG5cdCAgICAgICAgICB9IGZpbmFsbHkge1xuXHQgICAgICAgICAgICBpZiAoX2RpZEl0ZXJhdG9yRXJyb3IpIHtcblx0ICAgICAgICAgICAgICB0aHJvdyBfaXRlcmF0b3JFcnJvcjtcblx0ICAgICAgICAgICAgfVxuXHQgICAgICAgICAgfVxuXHQgICAgICAgIH1cblx0ICAgICAgfSBlbHNlIHtcblx0ICAgICAgICB2bS5zZWFyY2hEaXNhYmxlZCA9IHRydWU7XG5cdCAgICAgIH1cblx0ICAgIH0pO1xuXHQgIH07XG5cdFxuXHQgIHZtLmVkaXRJdGVtID0gZnVuY3Rpb24gKGl0ZW0pIHtcblx0ICAgIHJldHVybiAkc3RhdGUuZ28oJ3RlbmFudERldGFpbHMnLCB7IHRlbmFudEtleTogaXRlbS5rZXkgfSk7XG5cdCAgfTtcblx0XG5cdCAgdm0uZGVsZXRlSXRlbSA9IGZ1bmN0aW9uIChpdGVtKSB7XG5cdCAgICB2YXIgY2FsbGJhY2sgPSBmdW5jdGlvbiBjYWxsYmFjaygpIHtcblx0ICAgICAgdmFyIHByb21pc2UgPSBUZW5hbnRzU2VydmljZS5kZWxldGUoaXRlbSk7XG5cdCAgICAgIHJldHVybiBwcm9taXNlLnRoZW4oZnVuY3Rpb24gKCkge1xuXHQgICAgICAgIHJldHVybiB2bS5pbml0aWFsaXplKCk7XG5cdCAgICAgIH0pO1xuXHQgICAgfTtcblx0XG5cdCAgICByZXR1cm4gc3dlZXQuc2hvdyh7XG5cdCAgICAgIHRpdGxlOiBcIkFyZSB5b3Ugc3VyZT9cIixcblx0ICAgICAgdGV4dDogXCJUaGlzIHdpbGwgcGVybWFuZW50bHkgcmVtb3ZlIHRoZSB0ZW5hbnQgZnJvbSB0aGUgc3lzdGVtLlwiLFxuXHQgICAgICB0eXBlOiBcIndhcm5pbmdcIixcblx0ICAgICAgc2hvd0NhbmNlbEJ1dHRvbjogdHJ1ZSxcblx0ICAgICAgY29uZmlybUJ1dHRvbkNvbG9yOiBcIiNERDZCNTVcIixcblx0ICAgICAgY29uZmlybUJ1dHRvblRleHQ6IFwiWWVzLCByZW1vdmUgdGhlIHRlbmFudCFcIixcblx0ICAgICAgY2xvc2VPbkNvbmZpcm06IHRydWVcblx0ICAgIH0sIGNhbGxiYWNrKTtcblx0ICB9O1xuXHRcblx0ICByZXR1cm4gdm07XG5cdH1cblx0ZXhwb3J0cy5UZW5hbnRzQ3RybCA9IFRlbmFudHNDdHJsO1xuXG4vKioqLyB9LFxuXG4vKioqLyA3Mjg6XG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHQndXNlIHN0cmljdCc7XG5cdFxuXHRXZWxjb21lQ3RybC4kaW5qZWN0ID0gW1wiVmVyc2lvbnNTZXJ2aWNlXCIsIFwiJHN0YXRlXCIsIFwiRGlzdHJpYnV0b3JzU2VydmljZVwiLCBcIlNlc3Npb25zU2VydmljZVwiXTtcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG5cdCAgdmFsdWU6IHRydWVcblx0fSk7XG5cdGZ1bmN0aW9uIFdlbGNvbWVDdHJsKFZlcnNpb25zU2VydmljZSwgJHN0YXRlLCBEaXN0cmlidXRvcnNTZXJ2aWNlLCBTZXNzaW9uc1NlcnZpY2UpIHtcblx0ICBcIm5nSW5qZWN0XCI7XG5cdFxuXHQgIHZhciB2bSA9IHRoaXM7XG5cdCAgdm0udmVyc2lvbl9kYXRhID0gW107XG5cdCAgdm0ubG9hZGluZyA9IHRydWU7XG5cdFxuXHQgIHZtLnByb2NlZWRUb1NpZ25JbiA9IGZ1bmN0aW9uICgpIHtcblx0ICAgIHJldHVybiAkc3RhdGUuZ28oJ3NpZ25faW4nKTtcblx0ICB9O1xuXHRcblx0ICB2bS5jYXBpdGFsaXplRmlyc3RMZXR0ZXIgPSBmdW5jdGlvbiAoc3RyaW5nKSB7XG5cdCAgICByZXR1cm4gc3RyaW5nLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgc3RyaW5nLnNsaWNlKDEpO1xuXHQgIH07XG5cdFxuXHQgIHZtLmdpdmVPcHRpb25Ub0NoYW5nZURpc3RyaWJ1dG9yID0gZnVuY3Rpb24gKCkge1xuXHQgICAgdmFyIGRpc3RyaWJ1dG9yc1Byb21pc2UgPSBEaXN0cmlidXRvcnNTZXJ2aWNlLmZldGNoQWxsQnlVc2VyKFNlc3Npb25zU2VydmljZS5nZXRVc2VyS2V5KCkpO1xuXHQgICAgcmV0dXJuIGRpc3RyaWJ1dG9yc1Byb21pc2UudGhlbihmdW5jdGlvbiAoZGF0YSkge1xuXHQgICAgICB2bS5oYXNfbXVsdGlwbGVfZGlzdHJpYnV0b3JzID0gZGF0YS5sZW5ndGggPiAxO1xuXHQgICAgICByZXR1cm4gdm0ubG9hZGluZyA9IGZhbHNlO1xuXHQgICAgfSk7XG5cdCAgfTtcblx0XG5cdCAgdm0uY2hhbmdlRGlzdHJpYnV0b3IgPSBmdW5jdGlvbiAoKSB7XG5cdCAgICByZXR1cm4gJHN0YXRlLmdvKCdkaXN0cmlidXRvcl9zZWxlY3Rpb24nKTtcblx0ICB9O1xuXHRcblx0ICB2bS5nZXRWZXJzaW9uID0gZnVuY3Rpb24gKCkge1xuXHQgICAgdmFyIHByb21pc2UgPSBWZXJzaW9uc1NlcnZpY2UuZ2V0VmVyc2lvbnMoKTtcblx0ICAgIHJldHVybiBwcm9taXNlLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcblx0ICAgICAgcmV0dXJuIHZtLnZlcnNpb25fZGF0YSA9IGRhdGE7XG5cdCAgICB9KTtcblx0ICB9O1xuXHRcblx0ICB2bS5pbml0aWFsaXplID0gZnVuY3Rpb24gKCkge1xuXHQgICAgdm0uaWRlbnRpdHkgPSB7XG5cdCAgICAgIGtleTogU2Vzc2lvbnNTZXJ2aWNlLmdldFVzZXJLZXkoKSxcblx0ICAgICAgZW1haWw6IFNlc3Npb25zU2VydmljZS5nZXRVc2VyRW1haWwoKSxcblx0ICAgICAgZGlzdHJpYnV0b3JLZXk6IFNlc3Npb25zU2VydmljZS5nZXRDdXJyZW50RGlzdHJpYnV0b3JLZXkoKSxcblx0ICAgICAgZGlzdHJpYnV0b3JOYW1lOiBTZXNzaW9uc1NlcnZpY2UuZ2V0Q3VycmVudERpc3RyaWJ1dG9yTmFtZSgpXG5cdCAgICB9O1xuXHRcblx0ICAgIHZtLmdpdmVPcHRpb25Ub0NoYW5nZURpc3RyaWJ1dG9yKCk7XG5cdFxuXHQgICAgaWYgKCF2bS5pZGVudGl0eS5lbWFpbCkge1xuXHQgICAgICByZXR1cm4gJHN0YXRlLmdvKFwic2lnbl9pblwiKTtcblx0ICAgIH0gZWxzZSB7XG5cdCAgICAgIHJldHVybiB2bS5nZXRWZXJzaW9uKCk7XG5cdCAgICB9XG5cdCAgfTtcblx0ICByZXR1cm4gdm07XG5cdH1cblx0ZXhwb3J0cy5XZWxjb21lQ3RybCA9IFdlbGNvbWVDdHJsO1xuXG4vKioqLyB9LFxuXG4vKioqLyA3Mjk6XG4vKioqLyBmdW5jdGlvbihtb2R1bGUsIGV4cG9ydHMpIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblx0XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuXHQgIHZhbHVlOiB0cnVlXG5cdH0pO1xuXHRleHBvcnRzLnJvdXRlcyA9IHJvdXRlcztcblx0ZnVuY3Rpb24gcm91dGVzKCRzdGF0ZVByb3ZpZGVyLCAkdXJsUm91dGVyUHJvdmlkZXIsIFJlc3Rhbmd1bGFyUHJvdmlkZXIpIHtcblx0ICBcIm5nSW5qZWN0XCI7XG5cdFxuXHQgICRzdGF0ZVByb3ZpZGVyLnN0YXRlKFwic2lnbl9pblwiLCB7XG5cdCAgICByZXNvbHZlOiB7XG5cdCAgICAgIGlkZW50aXR5OiBbXCJJZGVudGl0eVNlcnZpY2VcIiwgZnVuY3Rpb24gaWRlbnRpdHkoSWRlbnRpdHlTZXJ2aWNlKSB7XG5cdCAgICAgICAgcmV0dXJuIElkZW50aXR5U2VydmljZS5nZXRJZGVudGl0eSgpO1xuXHQgICAgICB9XSxcblx0ICAgICAgbm90QXV0aGVudGljYXRlZDogW1wiQXV0aG9yaXphdGlvblNlcnZpY2VcIiwgZnVuY3Rpb24gbm90QXV0aGVudGljYXRlZChBdXRob3JpemF0aW9uU2VydmljZSkge1xuXHQgICAgICAgIHJldHVybiBBdXRob3JpemF0aW9uU2VydmljZS5ub3RBdXRoZW50aWNhdGVkKCk7XG5cdCAgICAgIH1dXG5cdCAgICB9LFxuXHQgICAgdXJsOiBcIi9zaWduX2luXCIsXG5cdCAgICB0ZW1wbGF0ZVVybDogXCJhcHAvYXV0aGVudGljYXRpb24vc2lnbl9pbi5odG1sXCIsXG5cdCAgICBjb250cm9sbGVyOiBcIkF1dGhlbnRpY2F0aW9uQ3RybFwiLFxuXHQgICAgY29udHJvbGxlckFzOiAnYXV0aGVudGljYXRpb25DdHJsJ1xuXHQgIH0pO1xuXHQgICRzdGF0ZVByb3ZpZGVyLnN0YXRlKFwic2lnbmVkX291dFwiLCB7XG5cdCAgICB1cmw6IFwiL3NpZ25lZF9vdXRcIixcblx0ICAgIHJlc29sdmU6IHtcblx0ICAgICAgaWRlbnRpdHk6IFtcIklkZW50aXR5U2VydmljZVwiLCBmdW5jdGlvbiBpZGVudGl0eShJZGVudGl0eVNlcnZpY2UpIHtcblx0ICAgICAgICByZXR1cm4gSWRlbnRpdHlTZXJ2aWNlLmdldElkZW50aXR5KCk7XG5cdCAgICAgIH1dLFxuXHQgICAgICBub3RBdXRoZW50aWNhdGVkOiBbXCJBdXRob3JpemF0aW9uU2VydmljZVwiLCBmdW5jdGlvbiBub3RBdXRoZW50aWNhdGVkKEF1dGhvcml6YXRpb25TZXJ2aWNlKSB7XG5cdCAgICAgICAgcmV0dXJuIEF1dGhvcml6YXRpb25TZXJ2aWNlLm5vdEF1dGhlbnRpY2F0ZWQoKTtcblx0ICAgICAgfV1cblx0ICAgIH0sXG5cdCAgICB0ZW1wbGF0ZVVybDogXCJhcHAvYXV0aGVudGljYXRpb24vc2lnbmVkX291dC5odG1sXCIsXG5cdCAgICBjb250cm9sbGVyOiBcIkF1dGhlbnRpY2F0aW9uQ3RybFwiLFxuXHQgICAgY29udHJvbGxlckFzOiAnYXV0aGVudGljYXRpb25DdHJsJ1xuXHQgIH0pO1xuXHQgICRzdGF0ZVByb3ZpZGVyLnN0YXRlKFwic2lnbl9vdXRcIiwge1xuXHQgICAgcmVzb2x2ZToge1xuXHQgICAgICBpZGVudGl0eTogW1wiSWRlbnRpdHlTZXJ2aWNlXCIsIGZ1bmN0aW9uIGlkZW50aXR5KElkZW50aXR5U2VydmljZSkge1xuXHQgICAgICAgIHJldHVybiBJZGVudGl0eVNlcnZpY2UuZ2V0SWRlbnRpdHkoKTtcblx0ICAgICAgfV0sXG5cdCAgICAgIGF1dGhlbnRpY2F0ZWQ6IFtcIkF1dGhvcml6YXRpb25TZXJ2aWNlXCIsIGZ1bmN0aW9uIGF1dGhlbnRpY2F0ZWQoQXV0aG9yaXphdGlvblNlcnZpY2UpIHtcblx0ICAgICAgICByZXR1cm4gQXV0aG9yaXphdGlvblNlcnZpY2UuYXV0aGVudGljYXRlZCgpO1xuXHQgICAgICB9XVxuXHQgICAgfSxcblx0ICAgIHVybDogXCIvc2lnbl9vdXRcIixcblx0ICAgIHRlbXBsYXRlVXJsOiBcImFwcC9hdXRoZW50aWNhdGlvbi9zaWduX291dC5odG1sXCIsXG5cdCAgICBjb250cm9sbGVyOiBcIkF1dGhlbnRpY2F0aW9uQ3RybFwiLFxuXHQgICAgY29udHJvbGxlckFzOiAnYXV0aGVudGljYXRpb25DdHJsJ1xuXHQgIH0pO1xuXHQgICRzdGF0ZVByb3ZpZGVyLnN0YXRlKFwiZGlzdHJpYnV0b3Jfc2VsZWN0aW9uXCIsIHtcblx0ICAgIHJlc29sdmU6IHtcblx0ICAgICAgYXV0aGVudGljYXRlZDogW1wiQXV0aG9yaXphdGlvblNlcnZpY2VcIiwgZnVuY3Rpb24gYXV0aGVudGljYXRlZChBdXRob3JpemF0aW9uU2VydmljZSkge1xuXHQgICAgICAgIHJldHVybiBBdXRob3JpemF0aW9uU2VydmljZS5hdXRoZW50aWNhdGVkKCk7XG5cdCAgICAgIH1dXG5cdCAgICB9LFxuXHQgICAgdXJsOiBcIi9kaXN0cmlidXRvcl9zZWxlY3Rpb25cIixcblx0ICAgIHRlbXBsYXRlVXJsOiBcImFwcC9kaXN0cmlidXRvci9kaXN0cmlidXRvcl9zZWxlY3Rvci5odG1sXCIsXG5cdCAgICBjb250cm9sbGVyOiBcIkRpc3RyaWJ1dG9yU2VsZWN0b3JDdHJsXCIsXG5cdCAgICBjb250cm9sbGVyQXM6ICd2bSdcblx0ICB9KTtcblx0ICAkc3RhdGVQcm92aWRlci5zdGF0ZShcImhvbWVcIiwge1xuXHQgICAgdXJsOiBcIi9cIixcblx0ICAgIHRlbXBsYXRlVXJsOiBcImFwcC93ZWxjb21lL3dlbGNvbWUuaHRtbFwiLFxuXHQgICAgcmVzb2x2ZToge1xuXHQgICAgICBpZGVudGl0eTogW1wiSWRlbnRpdHlTZXJ2aWNlXCIsIGZ1bmN0aW9uIGlkZW50aXR5KElkZW50aXR5U2VydmljZSkge1xuXHQgICAgICAgIHJldHVybiBJZGVudGl0eVNlcnZpY2UuZ2V0SWRlbnRpdHkoKTtcblx0ICAgICAgfV0sXG5cdCAgICAgIGF1dGhlbnRpY2F0ZWQ6IFtcIkF1dGhvcml6YXRpb25TZXJ2aWNlXCIsIGZ1bmN0aW9uIGF1dGhlbnRpY2F0ZWQoQXV0aG9yaXphdGlvblNlcnZpY2UpIHtcblx0ICAgICAgICByZXR1cm4gQXV0aG9yaXphdGlvblNlcnZpY2UuYXV0aGVudGljYXRlZCgpO1xuXHQgICAgICB9XVxuXHQgICAgfSxcblx0ICAgIGNvbnRyb2xsZXI6IFwiV2VsY29tZUN0cmxcIixcblx0ICAgIGNvbnRyb2xsZXJBczogJ3dlbGNvbWVDdHJsJyxcblx0ICAgIG5jeUJyZWFkY3J1bWI6IHtcblx0ICAgICAgbGFiZWw6ICdTa3lraXQgUHJvdmlzaW9uaW5nJ1xuXHQgICAgfVxuXHQgIH0pO1xuXHQgICRzdGF0ZVByb3ZpZGVyLnN0YXRlKFwid2VsY29tZVwiLCB7XG5cdCAgICB1cmw6IFwiL3dlbGNvbWVcIixcblx0ICAgIHRlbXBsYXRlVXJsOiBcImFwcC93ZWxjb21lL3dlbGNvbWUuaHRtbFwiLFxuXHQgICAgcmVzb2x2ZToge1xuXHQgICAgICBpZGVudGl0eTogW1wiSWRlbnRpdHlTZXJ2aWNlXCIsIGZ1bmN0aW9uIGlkZW50aXR5KElkZW50aXR5U2VydmljZSkge1xuXHQgICAgICAgIHJldHVybiBJZGVudGl0eVNlcnZpY2UuZ2V0SWRlbnRpdHkoKTtcblx0ICAgICAgfV0sXG5cdCAgICAgIGF1dGhlbnRpY2F0ZWQ6IFtcIkF1dGhvcml6YXRpb25TZXJ2aWNlXCIsIGZ1bmN0aW9uIGF1dGhlbnRpY2F0ZWQoQXV0aG9yaXphdGlvblNlcnZpY2UpIHtcblx0ICAgICAgICByZXR1cm4gQXV0aG9yaXphdGlvblNlcnZpY2UuYXV0aGVudGljYXRlZCgpO1xuXHQgICAgICB9XVxuXHQgICAgfSxcblx0ICAgIGNvbnRyb2xsZXI6IFwiV2VsY29tZUN0cmxcIixcblx0ICAgIGNvbnRyb2xsZXJBczogJ3dlbGNvbWVDdHJsJyxcblx0ICAgIG5jeUJyZWFkY3J1bWI6IHtcblx0ICAgICAgbGFiZWw6ICdTa3lraXQgUHJvdmlzaW9uaW5nJ1xuXHQgICAgfVxuXHQgIH0pO1xuXHQgICRzdGF0ZVByb3ZpZGVyLnN0YXRlKFwiZG9tYWluc1wiLCB7XG5cdCAgICByZXNvbHZlOiB7XG5cdCAgICAgIGF1dGhlbnRpY2F0ZWQ6IFtcIkF1dGhvcml6YXRpb25TZXJ2aWNlXCIsIGZ1bmN0aW9uIGF1dGhlbnRpY2F0ZWQoQXV0aG9yaXphdGlvblNlcnZpY2UpIHtcblx0ICAgICAgICByZXR1cm4gQXV0aG9yaXphdGlvblNlcnZpY2UuYXV0aGVudGljYXRlZCgpO1xuXHQgICAgICB9XVxuXHQgICAgfSxcblx0ICAgIHVybDogXCIvZG9tYWluc1wiLFxuXHQgICAgdGVtcGxhdGVVcmw6IFwiYXBwL2RvbWFpbi9kb21haW5zLWxpc3RpbmcuaHRtbFwiLFxuXHQgICAgY29udHJvbGxlcjogXCJEb21haW5zQ3RybFwiLFxuXHQgICAgY29udHJvbGxlckFzOiAnZG9tYWluc0N0cmwnLFxuXHQgICAgbmN5QnJlYWRjcnVtYjoge1xuXHQgICAgICBsYWJlbDogJ0RvbWFpbnMnXG5cdCAgICB9XG5cdCAgfSk7XG5cdCAgJHN0YXRlUHJvdmlkZXIuc3RhdGUoXCJhZGREb21haW5cIiwge1xuXHQgICAgcmVzb2x2ZToge1xuXHQgICAgICBhdXRoZW50aWNhdGVkOiBbXCJBdXRob3JpemF0aW9uU2VydmljZVwiLCBmdW5jdGlvbiBhdXRoZW50aWNhdGVkKEF1dGhvcml6YXRpb25TZXJ2aWNlKSB7XG5cdCAgICAgICAgcmV0dXJuIEF1dGhvcml6YXRpb25TZXJ2aWNlLmF1dGhlbnRpY2F0ZWQoKTtcblx0ICAgICAgfV1cblx0ICAgIH0sXG5cdCAgICB1cmw6IFwiL2RvbWFpbnMvYWRkXCIsXG5cdCAgICB0ZW1wbGF0ZVVybDogXCJhcHAvZG9tYWluL2RvbWFpbi1kZXRhaWwuaHRtbFwiLFxuXHQgICAgY29udHJvbGxlcjogXCJEb21haW5EZXRhaWxzQ3RybFwiLFxuXHQgICAgY29udHJvbGxlckFzOiAnZG9tYWluRGV0YWlsc0N0cmwnLFxuXHQgICAgbmN5QnJlYWRjcnVtYjoge1xuXHQgICAgICBsYWJlbDogJ0FkZCBkb21haW4nLFxuXHQgICAgICBwYXJlbnQ6ICdkb21haW5zJ1xuXHQgICAgfVxuXHQgIH0pO1xuXHQgICRzdGF0ZVByb3ZpZGVyLnN0YXRlKFwiZWRpdERvbWFpblwiLCB7XG5cdCAgICByZXNvbHZlOiB7XG5cdCAgICAgIGF1dGhlbnRpY2F0ZWQ6IFtcIkF1dGhvcml6YXRpb25TZXJ2aWNlXCIsIGZ1bmN0aW9uIGF1dGhlbnRpY2F0ZWQoQXV0aG9yaXphdGlvblNlcnZpY2UpIHtcblx0ICAgICAgICByZXR1cm4gQXV0aG9yaXphdGlvblNlcnZpY2UuYXV0aGVudGljYXRlZCgpO1xuXHQgICAgICB9XVxuXHQgICAgfSxcblx0ICAgIHVybDogXCIvZG9tYWlucy86ZG9tYWluS2V5XCIsXG5cdCAgICB0ZW1wbGF0ZVVybDogXCJhcHAvZG9tYWluL2RvbWFpbi1kZXRhaWwuaHRtbFwiLFxuXHQgICAgY29udHJvbGxlcjogXCJEb21haW5EZXRhaWxzQ3RybFwiLFxuXHQgICAgY29udHJvbGxlckFzOiAnZG9tYWluRGV0YWlsc0N0cmwnLFxuXHQgICAgbmN5QnJlYWRjcnVtYjoge1xuXHQgICAgICBsYWJlbDogJ3t7IGRvbWFpbkRldGFpbHNDdHJsLmN1cnJlbnREb21haW4ubmFtZSB9fScsXG5cdCAgICAgIHBhcmVudDogJ2RvbWFpbnMnXG5cdCAgICB9XG5cdCAgfSk7XG5cdCAgJHN0YXRlUHJvdmlkZXIuc3RhdGUoXCJ0ZW5hbnRzXCIsIHtcblx0ICAgIHJlc29sdmU6IHtcblx0ICAgICAgYXV0aGVudGljYXRlZDogW1wiQXV0aG9yaXphdGlvblNlcnZpY2VcIiwgZnVuY3Rpb24gYXV0aGVudGljYXRlZChBdXRob3JpemF0aW9uU2VydmljZSkge1xuXHQgICAgICAgIHJldHVybiBBdXRob3JpemF0aW9uU2VydmljZS5hdXRoZW50aWNhdGVkKCk7XG5cdCAgICAgIH1dXG5cdCAgICB9LFxuXHQgICAgdXJsOiBcIi90ZW5hbnRzXCIsXG5cdCAgICB0ZW1wbGF0ZVVybDogXCJhcHAvdGVuYW50L3RlbmFudHMtbGlzdGluZy5odG1sXCIsXG5cdCAgICBjb250cm9sbGVyOiBcIlRlbmFudHNDdHJsXCIsXG5cdCAgICBjb250cm9sbGVyQXM6ICd0ZW5hbnRzQ3RybCcsXG5cdCAgICBuY3lCcmVhZGNydW1iOiB7XG5cdCAgICAgIGxhYmVsOiAnVGVuYW50cydcblx0ICAgIH1cblx0ICB9KTtcblx0ICAkc3RhdGVQcm92aWRlci5zdGF0ZShcImFkZFRlbmFudFwiLCB7XG5cdCAgICByZXNvbHZlOiB7XG5cdCAgICAgIGF1dGhlbnRpY2F0ZWQ6IFtcIkF1dGhvcml6YXRpb25TZXJ2aWNlXCIsIGZ1bmN0aW9uIGF1dGhlbnRpY2F0ZWQoQXV0aG9yaXphdGlvblNlcnZpY2UpIHtcblx0ICAgICAgICByZXR1cm4gQXV0aG9yaXphdGlvblNlcnZpY2UuYXV0aGVudGljYXRlZCgpO1xuXHQgICAgICB9XVxuXHQgICAgfSxcblx0ICAgIHVybDogXCIvdGVuYW50cy9hZGRcIixcblx0ICAgIHRlbXBsYXRlVXJsOiBcImFwcC90ZW5hbnQvdGVuYW50LWFkZC5odG1sXCIsXG5cdCAgICBjb250cm9sbGVyOiBcIlRlbmFudEFkZEN0cmxcIixcblx0ICAgIGNvbnRyb2xsZXJBczogJ3RlbmFudEFkZEN0cmwnLFxuXHQgICAgbmN5QnJlYWRjcnVtYjoge1xuXHQgICAgICBsYWJlbDogJ0FkZCB0ZW5hbnQnLFxuXHQgICAgICBwYXJlbnQ6ICd0ZW5hbnRzJ1xuXHQgICAgfVxuXHQgIH0pO1xuXHQgICRzdGF0ZVByb3ZpZGVyLnN0YXRlKFwidGVuYW50RGV0YWlsc1wiLCB7XG5cdCAgICByZXNvbHZlOiB7XG5cdCAgICAgIGF1dGhlbnRpY2F0ZWQ6IFtcIkF1dGhvcml6YXRpb25TZXJ2aWNlXCIsIGZ1bmN0aW9uIGF1dGhlbnRpY2F0ZWQoQXV0aG9yaXphdGlvblNlcnZpY2UpIHtcblx0ICAgICAgICByZXR1cm4gQXV0aG9yaXphdGlvblNlcnZpY2UuYXV0aGVudGljYXRlZCgpO1xuXHQgICAgICB9XVxuXHQgICAgfSxcblx0ICAgIHVybDogXCIvdGVuYW50cy86dGVuYW50S2V5L2RldGFpbHNcIixcblx0ICAgIHRlbXBsYXRlVXJsOiBcImFwcC90ZW5hbnQvdGVuYW50LWRldGFpbHMuaHRtbFwiLFxuXHQgICAgY29udHJvbGxlcjogXCJUZW5hbnREZXRhaWxzQ3RybFwiLFxuXHQgICAgY29udHJvbGxlckFzOiAndGVuYW50RGV0YWlsc0N0cmwnLFxuXHQgICAgbmN5QnJlYWRjcnVtYjoge1xuXHQgICAgICBsYWJlbDogJ3t7IHRlbmFudERldGFpbHNDdHJsLmN1cnJlbnRUZW5hbnQubmFtZSB9fScsXG5cdCAgICAgIHBhcmVudDogJ3RlbmFudHMnXG5cdCAgICB9XG5cdCAgfSk7XG5cdCAgJHN0YXRlUHJvdmlkZXIuc3RhdGUoXCJ0ZW5hbnRNYW5hZ2VkRGV2aWNlc1wiLCB7XG5cdCAgICByZXNvbHZlOiB7XG5cdCAgICAgIGF1dGhlbnRpY2F0ZWQ6IFtcIkF1dGhvcml6YXRpb25TZXJ2aWNlXCIsIGZ1bmN0aW9uIGF1dGhlbnRpY2F0ZWQoQXV0aG9yaXphdGlvblNlcnZpY2UpIHtcblx0ICAgICAgICByZXR1cm4gQXV0aG9yaXphdGlvblNlcnZpY2UuYXV0aGVudGljYXRlZCgpO1xuXHQgICAgICB9XVxuXHQgICAgfSxcblx0ICAgIHVybDogXCIvdGVuYW50cy86dGVuYW50S2V5L21hbmFnZWRcIixcblx0ICAgIHRlbXBsYXRlVXJsOiBcImFwcC90ZW5hbnQvdGVuYW50LW1hbmFnZWQtZGV2aWNlcy5odG1sXCIsXG5cdCAgICBjb250cm9sbGVyOiBcIlRlbmFudE1hbmFnZWREZXZpY2VzQ3RybFwiLFxuXHQgICAgY29udHJvbGxlckFzOiAndGVuYW50TWFuYWdlZERldmljZXNDdHJsJyxcblx0ICAgIG5jeUJyZWFkY3J1bWI6IHtcblx0ICAgICAgbGFiZWw6ICd7eyB0ZW5hbnRNYW5hZ2VkRGV2aWNlc0N0cmwuY3VycmVudFRlbmFudC5uYW1lIH19Jyxcblx0ICAgICAgcGFyZW50OiAndGVuYW50cydcblx0ICAgIH1cblx0ICB9KTtcblx0ICAkc3RhdGVQcm92aWRlci5zdGF0ZShcInRlbmFudFVubWFuYWdlZERldmljZXNcIiwge1xuXHQgICAgcmVzb2x2ZToge1xuXHQgICAgICBhdXRoZW50aWNhdGVkOiBbXCJBdXRob3JpemF0aW9uU2VydmljZVwiLCBmdW5jdGlvbiBhdXRoZW50aWNhdGVkKEF1dGhvcml6YXRpb25TZXJ2aWNlKSB7XG5cdCAgICAgICAgcmV0dXJuIEF1dGhvcml6YXRpb25TZXJ2aWNlLmF1dGhlbnRpY2F0ZWQoKTtcblx0ICAgICAgfV1cblx0ICAgIH0sXG5cdCAgICB1cmw6IFwiL3RlbmFudHMvOnRlbmFudEtleS91bm1hbmFnZWRcIixcblx0ICAgIHRlbXBsYXRlVXJsOiBcImFwcC90ZW5hbnQvdGVuYW50LXVubWFuYWdlZC1kZXZpY2VzLmh0bWxcIixcblx0ICAgIGNvbnRyb2xsZXI6IFwiVGVuYW50VW5tYW5hZ2VkRGV2aWNlc0N0cmxcIixcblx0ICAgIGNvbnRyb2xsZXJBczogJ3RlbmFudFVubWFuYWdlZERldmljZXNDdHJsJyxcblx0ICAgIG5jeUJyZWFkY3J1bWI6IHtcblx0ICAgICAgbGFiZWw6ICd7eyB0ZW5hbnRVbm1hbmFnZWREZXZpY2VzQ3RybC5jdXJyZW50VGVuYW50Lm5hbWUgfX0nLFxuXHQgICAgICBwYXJlbnQ6ICd0ZW5hbnRzJ1xuXHQgICAgfVxuXHQgIH0pO1xuXHQgICRzdGF0ZVByb3ZpZGVyLnN0YXRlKFwidGVuYW50TG9nc1wiLCB7XG5cdCAgICByZXNvbHZlOiB7XG5cdCAgICAgIGF1dGhlbnRpY2F0ZWQ6IFtcIkF1dGhvcml6YXRpb25TZXJ2aWNlXCIsIGZ1bmN0aW9uIGF1dGhlbnRpY2F0ZWQoQXV0aG9yaXphdGlvblNlcnZpY2UpIHtcblx0ICAgICAgICByZXR1cm4gQXV0aG9yaXphdGlvblNlcnZpY2UuYXV0aGVudGljYXRlZCgpO1xuXHQgICAgICB9XVxuXHQgICAgfSxcblx0ICAgIHVybDogXCIvdGVuYW50cy86dGVuYW50S2V5L2xvZ3NcIixcblx0ICAgIHRlbXBsYXRlVXJsOiBcImFwcC90ZW5hbnQvdGVuYW50LWxvZ3MuaHRtbFwiLFxuXHQgICAgY29udHJvbGxlcjogXCJUZW5hbnRMb2dzQ3RybFwiLFxuXHQgICAgY29udHJvbGxlckFzOiAndGVuYW50TG9nc0N0cmwnLFxuXHQgICAgbmN5QnJlYWRjcnVtYjoge1xuXHQgICAgICBsYWJlbDogJ3t7IHRlbmFudExvZ3NDdHJsLmN1cnJlbnRUZW5hbnQubmFtZSB9fScsXG5cdCAgICAgIHBhcmVudDogJ3RlbmFudHMnXG5cdCAgICB9XG5cdCAgfSk7XG5cdCAgJHN0YXRlUHJvdmlkZXIuc3RhdGUoXCJ0ZW5hbnRPdmVybGF5c1wiLCB7XG5cdCAgICByZXNvbHZlOiB7XG5cdCAgICAgIGF1dGhlbnRpY2F0ZWQ6IFtcIkF1dGhvcml6YXRpb25TZXJ2aWNlXCIsIGZ1bmN0aW9uIGF1dGhlbnRpY2F0ZWQoQXV0aG9yaXphdGlvblNlcnZpY2UpIHtcblx0ICAgICAgICByZXR1cm4gQXV0aG9yaXphdGlvblNlcnZpY2UuYXV0aGVudGljYXRlZCgpO1xuXHQgICAgICB9XVxuXHQgICAgfSxcblx0ICAgIHVybDogXCIvdGVuYW50cy86dGVuYW50S2V5L292ZXJsYXlzXCIsXG5cdCAgICB0ZW1wbGF0ZVVybDogXCJhcHAvdGVuYW50L3RlbmFudC1vdmVybGF5cy5odG1sXCIsXG5cdCAgICBjb250cm9sbGVyOiBcIlRlbmFudE92ZXJsYXlzQ3RybFwiLFxuXHQgICAgY29udHJvbGxlckFzOiAndGVuYW50T3ZlcmxheXNDdHJsJyxcblx0ICAgIG5jeUJyZWFkY3J1bWI6IHtcblx0ICAgICAgbGFiZWw6ICd7eyB0ZW5hbnRPdmVybGF5c0N0cmwuY3VycmVudFRlbmFudC5uYW1lIH19Jyxcblx0ICAgICAgcGFyZW50OiAndGVuYW50cydcblx0ICAgIH1cblx0ICB9KTtcblx0ICAkc3RhdGVQcm92aWRlci5zdGF0ZShcInRlbmFudExvY2F0aW9uc1wiLCB7XG5cdCAgICByZXNvbHZlOiB7XG5cdCAgICAgIGF1dGhlbnRpY2F0ZWQ6IFtcIkF1dGhvcml6YXRpb25TZXJ2aWNlXCIsIGZ1bmN0aW9uIGF1dGhlbnRpY2F0ZWQoQXV0aG9yaXphdGlvblNlcnZpY2UpIHtcblx0ICAgICAgICByZXR1cm4gQXV0aG9yaXphdGlvblNlcnZpY2UuYXV0aGVudGljYXRlZCgpO1xuXHQgICAgICB9XVxuXHQgICAgfSxcblx0ICAgIHVybDogXCIvdGVuYW50cy86dGVuYW50S2V5L2xvY2F0aW9uc1wiLFxuXHQgICAgdGVtcGxhdGVVcmw6IFwiYXBwL3RlbmFudC90ZW5hbnQtbG9jYXRpb25zLmh0bWxcIixcblx0ICAgIGNvbnRyb2xsZXI6IFwiVGVuYW50TG9jYXRpb25zQ3RybFwiLFxuXHQgICAgY29udHJvbGxlckFzOiAndGVuYW50TG9jYXRpb25zQ3RybCcsXG5cdCAgICBuY3lCcmVhZGNydW1iOiB7XG5cdCAgICAgIGxhYmVsOiAne3sgdGVuYW50TG9jYXRpb25zQ3RybC5jdXJyZW50VGVuYW50Lm5hbWUgfX0nLFxuXHQgICAgICBwYXJlbnQ6ICd0ZW5hbnRzJ1xuXHQgICAgfVxuXHQgIH0pO1xuXHQgICRzdGF0ZVByb3ZpZGVyLnN0YXRlKFwiZWRpdExvY2F0aW9uXCIsIHtcblx0ICAgIHJlc29sdmU6IHtcblx0ICAgICAgYXV0aGVudGljYXRlZDogW1wiQXV0aG9yaXphdGlvblNlcnZpY2VcIiwgZnVuY3Rpb24gYXV0aGVudGljYXRlZChBdXRob3JpemF0aW9uU2VydmljZSkge1xuXHQgICAgICAgIHJldHVybiBBdXRob3JpemF0aW9uU2VydmljZS5hdXRoZW50aWNhdGVkKCk7XG5cdCAgICAgIH1dXG5cdCAgICB9LFxuXHQgICAgdXJsOiBcIi9sb2NhdGlvbnMvOmxvY2F0aW9uS2V5XCIsXG5cdCAgICB0ZW1wbGF0ZVVybDogXCJhcHAvdGVuYW50L3RlbmFudC1sb2NhdGlvbi5odG1sXCIsXG5cdCAgICBjb250cm9sbGVyOiBcIlRlbmFudExvY2F0aW9uQ3RybFwiLFxuXHQgICAgY29udHJvbGxlckFzOiAndGVuYW50TG9jYXRpb25DdHJsJyxcblx0ICAgIG5jeUJyZWFkY3J1bWI6IHtcblx0ICAgICAgbGFiZWw6ICd7eyB0ZW5hbnRMb2NhdGlvbkN0cmwudGVuYW50TmFtZSB9fSAgLyB7eyB0ZW5hbnRMb2NhdGlvbkN0cmwubG9jYXRpb25OYW1lIH19Jyxcblx0ICAgICAgcGFyZW50OiAndGVuYW50cydcblx0ICAgIH1cblx0ICB9KTtcblx0ICAkc3RhdGVQcm92aWRlci5zdGF0ZShcImFkZExvY2F0aW9uXCIsIHtcblx0ICAgIHJlc29sdmU6IHtcblx0ICAgICAgYXV0aGVudGljYXRlZDogW1wiQXV0aG9yaXphdGlvblNlcnZpY2VcIiwgZnVuY3Rpb24gYXV0aGVudGljYXRlZChBdXRob3JpemF0aW9uU2VydmljZSkge1xuXHQgICAgICAgIHJldHVybiBBdXRob3JpemF0aW9uU2VydmljZS5hdXRoZW50aWNhdGVkKCk7XG5cdCAgICAgIH1dXG5cdCAgICB9LFxuXHQgICAgdXJsOiBcIi90ZW5hbnRzLzp0ZW5hbnRLZXkvbG9jYXRpb25cIixcblx0ICAgIHRlbXBsYXRlVXJsOiBcImFwcC90ZW5hbnQvdGVuYW50LWxvY2F0aW9uLmh0bWxcIixcblx0ICAgIGNvbnRyb2xsZXI6IFwiVGVuYW50TG9jYXRpb25DdHJsXCIsXG5cdCAgICBjb250cm9sbGVyQXM6ICd0ZW5hbnRMb2NhdGlvbkN0cmwnLFxuXHQgICAgbmN5QnJlYWRjcnVtYjoge1xuXHQgICAgICBsYWJlbDogJ3t7IHRlbmFudExvY2F0aW9uQ3RybC50ZW5hbnROYW1lIH19ICAvIExvY2F0aW9uJyxcblx0ICAgICAgcGFyZW50OiAndGVuYW50cydcblx0ICAgIH1cblx0ICB9KTtcblx0ICAkc3RhdGVQcm92aWRlci5zdGF0ZShcImRldmljZXNcIiwge1xuXHQgICAgcmVzb2x2ZToge1xuXHQgICAgICBhdXRoZW50aWNhdGVkOiBbXCJBdXRob3JpemF0aW9uU2VydmljZVwiLCBmdW5jdGlvbiBhdXRoZW50aWNhdGVkKEF1dGhvcml6YXRpb25TZXJ2aWNlKSB7XG5cdCAgICAgICAgcmV0dXJuIEF1dGhvcml6YXRpb25TZXJ2aWNlLmF1dGhlbnRpY2F0ZWQoKTtcblx0ICAgICAgfV1cblx0ICAgIH0sXG5cdCAgICB1cmw6IFwiL2RldmljZXNcIixcblx0ICAgIHRlbXBsYXRlVXJsOiBcImFwcC9kZXZpY2UvZGV2aWNlcy1saXN0aW5nLmh0bWxcIixcblx0ICAgIGNvbnRyb2xsZXI6IFwiRGV2aWNlc0xpc3RpbmdDdHJsXCIsXG5cdCAgICBjb250cm9sbGVyQXM6ICdkZXZpY2VzTGlzdGluZ0N0cmwnLFxuXHQgICAgbmN5QnJlYWRjcnVtYjoge1xuXHQgICAgICBsYWJlbDogJ0RldmljZXMnXG5cdCAgICB9XG5cdCAgfSk7XG5cdCAgJHN0YXRlUHJvdmlkZXIuc3RhdGUoXCJlZGl0RGV2aWNlXCIsIHtcblx0ICAgIHJlc29sdmU6IHtcblx0ICAgICAgaWRlbnRpdHk6IFtcIklkZW50aXR5U2VydmljZVwiLCBmdW5jdGlvbiBpZGVudGl0eShJZGVudGl0eVNlcnZpY2UpIHtcblx0ICAgICAgICByZXR1cm4gSWRlbnRpdHlTZXJ2aWNlLmdldElkZW50aXR5KCk7XG5cdCAgICAgIH1dLFxuXHQgICAgICBhdXRoZW50aWNhdGVkOiBbXCJBdXRob3JpemF0aW9uU2VydmljZVwiLCBmdW5jdGlvbiBhdXRoZW50aWNhdGVkKEF1dGhvcml6YXRpb25TZXJ2aWNlKSB7XG5cdCAgICAgICAgcmV0dXJuIEF1dGhvcml6YXRpb25TZXJ2aWNlLmF1dGhlbnRpY2F0ZWQoKTtcblx0ICAgICAgfV1cblx0ICAgIH0sXG5cdCAgICB1cmw6IFwiL2RldmljZXMvOmRldmljZUtleT90ZW5hbnRLZXk/ZnJvbURldmljZXNcIixcblx0ICAgIHRlbXBsYXRlVXJsOiBcImFwcC9kZXZpY2UvZGV2aWNlLWRldGFpbC5odG1sXCIsXG5cdCAgICBuY3lCcmVhZGNydW1iOiB7XG5cdCAgICAgIGxhYmVsOiAne3sgZGV2aWNlRGV0YWlsc0N0cmwuY3VycmVudERldmljZS5rZXkgfX0nLFxuXHQgICAgICBwYXJlbnQ6ICdkZXZpY2VzJ1xuXHQgICAgfSxcblx0ICAgIGNvbnRyb2xsZXI6ICdEZXZpY2VEZXRhaWxzQ3RybCcsXG5cdCAgICBmdW5jdGlvbjogZnVuY3Rpb24gX2Z1bmN0aW9uKCRzY29wZSwgJHN0YXRlUGFyYW1zKSB7XG5cdCAgICAgICRzY29wZS50ZW5hbnRLZXkgPSAkc3RhdGVQYXJhbXMudGVuYW50S2V5O1xuXHQgICAgICByZXR1cm47XG5cdCAgICB9LFxuXHRcblx0ICAgIGNvbnRyb2xsZXJBczogJ2RldmljZURldGFpbHNDdHJsJ1xuXHQgIH0pO1xuXHQgICRzdGF0ZVByb3ZpZGVyLnN0YXRlKFwicHJvb2ZcIiwge1xuXHQgICAgcmVzb2x2ZToge1xuXHQgICAgICBhdXRoZW50aWNhdGVkOiBbXCJBdXRob3JpemF0aW9uU2VydmljZVwiLCBmdW5jdGlvbiBhdXRoZW50aWNhdGVkKEF1dGhvcml6YXRpb25TZXJ2aWNlKSB7XG5cdCAgICAgICAgcmV0dXJuIEF1dGhvcml6YXRpb25TZXJ2aWNlLmF1dGhlbnRpY2F0ZWQoKTtcblx0ICAgICAgfV1cblx0ICAgIH0sXG5cdCAgICB1cmw6IFwiL3Byb29mXCIsXG5cdCAgICB0ZW1wbGF0ZVVybDogXCJhcHAvcHJvb2YvbWFpbi5odG1sXCIsXG5cdCAgICBjb250cm9sbGVyOiBcIlByb29mT2ZQbGF5Q3RybFwiLFxuXHQgICAgY29udHJvbGxlckFzOiAndm0nLFxuXHQgICAgbmN5QnJlYWRjcnVtYjoge1xuXHQgICAgICBsYWJlbDogJ1Byb29mIG9mIFBsYXknXG5cdCAgICB9XG5cdCAgfSk7XG5cdCAgJHN0YXRlUHJvdmlkZXIuc3RhdGUoXCJwcm9vZkRldGFpbFwiLCB7XG5cdCAgICByZXNvbHZlOiB7XG5cdCAgICAgIGF1dGhlbnRpY2F0ZWQ6IFtcIkF1dGhvcml6YXRpb25TZXJ2aWNlXCIsIGZ1bmN0aW9uIGF1dGhlbnRpY2F0ZWQoQXV0aG9yaXphdGlvblNlcnZpY2UpIHtcblx0ICAgICAgICByZXR1cm4gQXV0aG9yaXphdGlvblNlcnZpY2UuYXV0aGVudGljYXRlZCgpO1xuXHQgICAgICB9XVxuXHQgICAgfSxcblx0ICAgIHVybDogXCIvcHJvb2YvOnRlbmFudFwiLFxuXHQgICAgdGVtcGxhdGVVcmw6IFwiYXBwL3Byb29mL2RldGFpbC5odG1sXCIsXG5cdCAgICBjb250cm9sbGVyOiBcIlByb29mT2ZQbGF5Q3RybFwiLFxuXHQgICAgY29udHJvbGxlckFzOiAndm0nLFxuXHQgICAgbmN5QnJlYWRjcnVtYjoge1xuXHQgICAgICBsYWJlbDogJ1Byb29mIG9mIFBsYXknXG5cdCAgICB9XG5cdCAgfSk7XG5cdCAgJHN0YXRlUHJvdmlkZXIuc3RhdGUoXCJhZG1pblwiLCB7XG5cdCAgICByZXNvbHZlOiB7XG5cdCAgICAgIGlzQWRtaW46IFtcIkF1dGhvcml6YXRpb25TZXJ2aWNlXCIsIGZ1bmN0aW9uIGlzQWRtaW4oQXV0aG9yaXphdGlvblNlcnZpY2UpIHtcblx0ICAgICAgICByZXR1cm4gQXV0aG9yaXphdGlvblNlcnZpY2UuaXNBZG1pbk9yRGlzdHJpYnV0b3JBZG1pbigpO1xuXHQgICAgICB9XVxuXHQgICAgfSxcblx0ICAgIHVybDogXCIvYWRtaW5cIixcblx0ICAgIHRlbXBsYXRlVXJsOiBcImFwcC9hZG1pbi9hZG1pbi5odG1sXCIsXG5cdCAgICBjb250cm9sbGVyOiBcIkFkbWluQ3RybFwiLFxuXHQgICAgY29udHJvbGxlckFzOiAndm0nLFxuXHQgICAgbmN5QnJlYWRjcnVtYjoge1xuXHQgICAgICBsYWJlbDogJ0FkbWluJ1xuXHQgICAgfVxuXHQgIH0pO1xuXHRcblx0ICAkdXJsUm91dGVyUHJvdmlkZXIub3RoZXJ3aXNlKCcvc2lnbl9pbicpO1xuXHRcblx0ICBSZXN0YW5ndWxhclByb3ZpZGVyLnNldEJhc2VVcmwoJy9hcGkvdjEnKTtcblx0XG5cdCAgUmVzdGFuZ3VsYXJQcm92aWRlci5hZGRSZXNwb25zZUludGVyY2VwdG9yKGZ1bmN0aW9uIChkYXRhLCBvcGVyYXRpb24sIHJlc291cmNlVHlwZSwgdXJsLCByZXNwb25zZSwgZGVmZXJyZWQpIHtcblx0ICAgIHZhciByZXN1bHQgPSBkYXRhO1xuXHQgICAgLy8gVW5jb21tZW50IHRoaXMgZm9yIHBhZ2luYXRpb24gc3VwcG9ydCB3aGVuIHVzaW5nIFBhZ2luZ0xpc3RIYW5kbGVyTWl4aW4gb24gdGhlIFB5dGhvbiBzaWRlLlxuXHQgICAgLy8gICAgaWYgcmVzb3VyY2VUeXBlID09ICdkZXZpY2VzJyBhbmQgb3BlcmF0aW9uID0gJ2dldExpc3QnIGFuZCB1cmwgPT0gJy9hcGkvdjEvZGV2aWNlcydcblx0ICAgIC8vICAgICAgcmVzdWx0ID0gZGF0YS5vYmplY3RzXG5cdCAgICByZXR1cm4gcmVzdWx0O1xuXHQgIH0pO1xuXHRcblx0ICByZXR1cm4gUmVzdGFuZ3VsYXJQcm92aWRlci5zZXRSZXN0YW5ndWxhckZpZWxkcyh7XG5cdCAgICBpZDogJ2tleSdcblx0ICB9KTtcblx0fVxuXHRcblx0cm91dGVzLiRpbmplY3QgPSBbXCIkc3RhdGVQcm92aWRlclwiLCBcIiR1cmxSb3V0ZXJQcm92aWRlclwiLCBcIlJlc3Rhbmd1bGFyUHJvdmlkZXJcIl07XG5cbi8qKiovIH0sXG5cbi8qKiovIDczMDpcbi8qKiovIGZ1bmN0aW9uKG1vZHVsZSwgZXhwb3J0cykge1xuXG5cdCd1c2Ugc3RyaWN0Jztcblx0XG5cdGFwcFJ1bi4kaW5qZWN0ID0gW1wiUmVzdGFuZ3VsYXJcIiwgXCIkbG9jYXRpb25cIiwgXCIkaW5qZWN0b3JcIiwgXCIkcm9vdFNjb3BlXCIsIFwiJHRpbWVvdXRcIl07XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuXHQgIHZhbHVlOiB0cnVlXG5cdH0pO1xuXHRleHBvcnRzLmFwcFJ1biA9IGFwcFJ1bjtcblx0ZnVuY3Rpb24gYXBwUnVuKFJlc3Rhbmd1bGFyLCAkbG9jYXRpb24sICRpbmplY3RvciwgJHJvb3RTY29wZSwgJHRpbWVvdXQpIHtcblx0ICBcIm5nSW5qZWN0XCI7XG5cdFxuXHQgIHZhciBzdGF0ZUNoYW5nZVdhdGNoID0gZnVuY3Rpb24gc3RhdGVDaGFuZ2VXYXRjaCgpIHtcblx0ICAgIHZhciBzdGF0ZSA9ICRpbmplY3Rvci5nZXQoJyRzdGF0ZScpO1xuXHQgICAgcmV0dXJuICRyb290U2NvcGUuJG9uKCckc3RhdGVDaGFuZ2VFcnJvcicsIGZ1bmN0aW9uIChldmVudCwgdG9TdGF0ZSwgdG9QYXJhbXMsIGZyb21TdGF0ZSwgZnJvbVBhcmFtcywgZXJyb3IpIHtcblx0ICAgICAgaWYgKGVycm9yWzBdID09PSBcImF1dGhFcnJvclwiKSB7XG5cdCAgICAgICAgcmV0dXJuIHN0YXRlLmdvKGVycm9yWzFdKTtcblx0ICAgICAgfVxuXHQgICAgfSk7XG5cdCAgfTtcblx0XG5cdCAgJHRpbWVvdXQoc3RhdGVDaGFuZ2VXYXRjaCwgNTAwKTtcblx0XG5cdCAgdmFyIHJlcXVlc3RJbnRlcmNlcHRvciA9IGZ1bmN0aW9uIHJlcXVlc3RJbnRlcmNlcHRvcigpIHtcblx0ICAgIFJlc3Rhbmd1bGFyLmFkZFJlcXVlc3RJbnRlcmNlcHRvcihmdW5jdGlvbiAoZWxlbSwgb3BlcmF0aW9uLCB3aGF0LCB1cmwpIHtcblx0ICAgICAgdmFyIFN0b3JhZ2VTZXJ2aWNlID0gJGluamVjdG9yLmdldCgnU3RvcmFnZVNlcnZpY2UnKTtcblx0XG5cdCAgICAgIHZhciBhdXRoVG9rZW4gPSAnNkMzNDY1ODhCRDRDNkQ3MjJBMTE2NUI0M0M1MUMnO1xuXHQgICAgICBpZiAoJGxvY2F0aW9uLmhvc3QoKS5pbmRleE9mKCdwcm92aXNpb25pbmctZ2FtZXN0b3AnKSA+IC0xKSB7XG5cdCAgICAgICAgYXV0aFRva2VuID0gJzVYWkhCRjNtT3dxSmxZQWxHMU5lZVdYMENiNzJnJztcblx0ICAgICAgfVxuXHQgICAgICBSZXN0YW5ndWxhci5zZXREZWZhdWx0SGVhZGVycyh7XG5cdCAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcblx0ICAgICAgICAnQWNjZXB0JzogJ2FwcGxpY2F0aW9uL2pzb24nLFxuXHQgICAgICAgICdBdXRob3JpemF0aW9uJzogYXV0aFRva2VuLFxuXHQgICAgICAgICdYLVByb3Zpc2lvbmluZy1Vc2VyJzogU3RvcmFnZVNlcnZpY2UuZ2V0KCd1c2VyS2V5JyksXG5cdCAgICAgICAgJ1gtUHJvdmlzaW9uaW5nLURpc3RyaWJ1dG9yJzogU3RvcmFnZVNlcnZpY2UuZ2V0KCdjdXJyZW50RGlzdHJpYnV0b3JLZXknKVxuXHQgICAgICB9KTtcblx0XG5cdCAgICAgIGlmIChvcGVyYXRpb24gPT09ICdyZW1vdmUnKSB7XG5cdCAgICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcblx0ICAgICAgfVxuXHRcblx0ICAgICAgcmV0dXJuIGVsZW07XG5cdCAgICB9KTtcblx0ICB9O1xuXHRcblx0ICAkdGltZW91dChyZXF1ZXN0SW50ZXJjZXB0b3IsIDUwMCk7XG5cdH1cblxuLyoqKi8gfSxcblxuLyoqKi8gNzMxOlxuLyoqKi8gZnVuY3Rpb24obW9kdWxlLCBleHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKSB7XG5cblx0J3VzZSBzdHJpY3QnO1xuXHRcblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG5cdCAgdmFsdWU6IHRydWVcblx0fSk7XG5cdGV4cG9ydHMudG9hc3RyQ29uZmlnID0gdG9hc3RyQ29uZmlnO1xuXHRleHBvcnRzLmJyZWFkY3J1bWJQcm92aWRlciA9IGJyZWFkY3J1bWJQcm92aWRlcjtcblx0XG5cdHZhciBfYW5ndWxhciA9IF9fd2VicGFja19yZXF1aXJlX18oMzY5KTtcblx0XG5cdHZhciBfYW5ndWxhcjIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KF9hbmd1bGFyKTtcblx0XG5cdGZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cdFxuXHRmdW5jdGlvbiB0b2FzdHJDb25maWcodG9hc3RyQ29uZmlnKSB7XG5cdCAgX2FuZ3VsYXIyLmRlZmF1bHQuZXh0ZW5kKHRvYXN0ckNvbmZpZywge1xuXHQgICAgcHJvZ3Jlc3NCYXI6IHRydWUsXG5cdCAgICBjbG9zZUJ1dHRvbjogdHJ1ZSxcblx0ICAgIHRhcFRvRGlzbWlzczogdHJ1ZSxcblx0ICAgIG5ld2VzdE9uVG9wOiB0cnVlLFxuXHQgICAgcG9zaXRpb25DbGFzczogJ3RvYXN0LWJvdHRvbS1sZWZ0Jyxcblx0ICAgIHRpbWVPdXQ6IDUwMDBcblx0ICB9KTtcblx0fVxuXHR0b2FzdHJDb25maWcuJGluamVjdCA9IFsndG9hc3RyQ29uZmlnJ107XG5cdFxuXHRmdW5jdGlvbiBicmVhZGNydW1iUHJvdmlkZXIoJGJyZWFkY3J1bWJQcm92aWRlcikge1xuXHQgICRicmVhZGNydW1iUHJvdmlkZXIuc2V0T3B0aW9ucyh7XG5cdCAgICBwcmVmaXhTdGF0ZU5hbWU6ICdob21lJyxcblx0ICAgIHRlbXBsYXRlOiAnYm9vdHN0cmFwMydcblx0ICB9KTtcblx0fVxuXHRcblx0YnJlYWRjcnVtYlByb3ZpZGVyLiRpbmplY3QgPSBbXCIkYnJlYWRjcnVtYlByb3ZpZGVyXCJdO1xuXG4vKioqLyB9XG5cbn0pO1xuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIGFwcC5idW5kbGUuanNcbiAqKi8iLCJpbXBvcnQge2FwcH0gZnJvbSAnLi9hcHAnXG4vLyBEZXZpY2VcbmltcG9ydCB7RGV2aWNlRGV0YWlsc0NvbW1hbmRzQ3RybH0gZnJvbSAnLi9kZXZpY2UvZGV2aWNlLWRldGFpbC1jb21tYW5kJ1xuaW1wb3J0IHtEZXZpY2VEZXRhaWxzQ3RybH0gZnJvbSAnLi9kZXZpY2UvZGV2aWNlLWRldGFpbHMuY29udHJvbGxlcidcbmltcG9ydCB7RGV2aWNlc0xpc3RpbmdDdHJsfSBmcm9tICcuL2RldmljZS9kZXZpY2VzLWxpc3RpbmcuY29udHJvbGxlcidcbi8vIEFkbWluXG5pbXBvcnQge0FkbWluQ3RybH0gZnJvbSAnLi9hZG1pbi9hZG1pbi1jb250cm9sbGVyJ1xuLy8gQXV0aGVudGljYXRpb25cbmltcG9ydCB7QXV0aGVudGljYXRpb25DdHJsfSBmcm9tICcuL2F1dGhlbnRpY2F0aW9uL2F1dGhlbnRpY2F0aW9uLWNvbnRyb2xsZXInXG4vLyBBcHBcbmltcG9ydCB7QXBwQ29udHJvbGxlcn0gZnJvbSAnLi9hcHAvYXBwLWNvbnRyb2xsZXInXG4vLyBEaXN0cmlidXRvcnNcbmltcG9ydCB7RGlzdHJpYnV0b3JTZWxlY3RvckN0cmx9IGZyb20gJy4vZGlzdHJpYnV0b3IvZGlzdHJpYnV0b3Itc2VsZWN0b3ItY29udHJvbGxlcidcbmltcG9ydCB7RGlzdHJpYnV0b3JzQ3RybH0gZnJvbSAnLi9kaXN0cmlidXRvci9kaXN0cmlidXRvcnMtY29udHJvbGxlcidcbi8vIERvbWFpbnNcbmltcG9ydCB7RG9tYWluc0N0cmx9IGZyb20gJy4vZG9tYWluL2RvbWFpbnMuY29udHJvbGxlcidcbmltcG9ydCB7RG9tYWluRGV0YWlsc0N0cmx9IGZyb20gJy4vZG9tYWluL2RvbWFpbi1kZXRhaWxzLmNvbnRyb2xsZXInXG4vLyBQcm9vZlBsYXlcbmltcG9ydCB7UHJvb2ZPZlBsYXlNdWx0aUxvY2F0aW9uQ3RybH0gZnJvbSAnLi9wcm9vZi9tdWx0aS1sb2NhdGlvbi5jb250cm9sbGVyJ1xuaW1wb3J0IHtQcm9vZk9mUGxheU11bHRpRGlzcGxheUN0cmx9IGZyb20gJy4vcHJvb2YvbXVsdGktZGlzcGxheS5jb250cm9sbGVyJ1xuaW1wb3J0IHtQcm9vZk9mUGxheU11bHRpUmVzb3VyY2VDdHJsfSBmcm9tICcuL3Byb29mL211bHRpLXJlc291cmNlLmNvbnRyb2xsZXInXG5pbXBvcnQge1Byb29mT2ZQbGF5Q3RybH0gZnJvbSAnLi9wcm9vZi9wcm9vZi1vZi1wbGF5LmNvbnRyb2xsZXInXG4vLyBTZXJ2aWNlc1xuaW1wb3J0IEltYWdlU2VydmljZSBmcm9tICcuL3NlcnZpY2VzL2ltYWdlLnNlcnZpY2UnXG5pbXBvcnQgQWRtaW5TZXJ2aWNlIGZyb20gJy4vc2VydmljZXMvYWRtaW4uc2VydmljZSdcbmltcG9ydCBBdXRob3JpemF0aW9uU2VydmljZSBmcm9tICcuL3NlcnZpY2VzL2F1dGhvcml6YXRpb24uc2VydmljZSdcbmltcG9ydCBDb21tYW5kc1NlcnZpY2UgZnJvbSAnLi9zZXJ2aWNlcy9jb21tYW5kcy5zZXJ2aWNlJ1xuaW1wb3J0IERhdGVNYW5pcHVsYXRpb25TZXJ2aWNlIGZyb20gJy4vc2VydmljZXMvZGF0ZW1hbmlwdWxhdGlvbi5zZXJ2aWNlJ1xuaW1wb3J0IERldmljZXNTZXJ2aWNlIGZyb20gJy4vc2VydmljZXMvZGV2aWNlcy5zZXJ2aWNlJ1xuaW1wb3J0IERpc3RyaWJ1dG9yc1NlcnZpY2UgZnJvbSAnLi9zZXJ2aWNlcy9kaXN0cmlidXRvcnMuc2VydmljZSdcbmltcG9ydCBEb21haW5zU2VydmljZSBmcm9tICcuL3NlcnZpY2VzL2RvbWFpbnMuc2VydmljZSdcbmltcG9ydCBJZGVudGl0eVNlcnZpY2UgZnJvbSAnLi9zZXJ2aWNlcy9pZGVudGl0eS5zZXJ2aWNlJ1xuaW1wb3J0IEludGVncmF0aW9uRXZlbnRzIGZyb20gJy4vc2VydmljZXMvaW50ZWdyYXRpb24tZXZlbnRzLnNlcnZpY2UnXG5pbXBvcnQgTG9jYXRpb25zU2VydmljZSBmcm9tICcuL3NlcnZpY2VzL2xvY2F0aW9ucy5zZXJ2aWNlJ1xuaW1wb3J0IFByb2dyZXNzQmFyU2VydmljZSBmcm9tICcuL3NlcnZpY2VzL3Byb2dyZXNzYmFyLnNlcnZpY2UnXG5pbXBvcnQgUHJvb2ZQbGF5U2VydmljZSBmcm9tICcuL3NlcnZpY2VzL3Byb29mcGxheS5zZXJ2aWNlJ1xuaW1wb3J0IFNlc3Npb25zU2VydmljZSBmcm9tICcuL3NlcnZpY2VzL3Nlc3Npb25zLnNlcnZpY2UnXG5pbXBvcnQgU3RvcmFnZVNlcnZpY2UgZnJvbSAnLi9zZXJ2aWNlcy9zdG9yYWdlLnNlcnZpY2UnXG5pbXBvcnQgVGVuYW50c1NlcnZpY2UgZnJvbSAnLi9zZXJ2aWNlcy90ZW5hbnRzLnNlcnZpY2UnXG5pbXBvcnQgVGltZXpvbmVzU2VydmljZSBmcm9tICcuL3NlcnZpY2VzL3RpbWV6b25lcy5zZXJ2aWNlJ1xuaW1wb3J0IFRvYXN0c1NlcnZpY2UgZnJvbSAnLi9zZXJ2aWNlcy90b2FzdHMuc2VydmljZSdcbmltcG9ydCBWZXJzaW9uc1NlcnZpY2UgZnJvbSAnLi9zZXJ2aWNlcy92ZXJzaW9ucy5zZXJ2aWNlJ1xuLy8gVGVuYW50XG5pbXBvcnQge1RlbmFudExvZ3NDdHJsfSBmcm9tICcuL3RlbmFudC90ZW5hbnQtbG9ncy5jb250cm9sbGVyJ1xuaW1wb3J0IHtUZW5hbnRPdmVybGF5c0N0cmx9IGZyb20gJy4vdGVuYW50L3RlbmFudC1vdmVybGF5cy5jb250cm9sbGVyJ1xuaW1wb3J0IHtUZW5hbnRBZGRDdHJsfSBmcm9tICcuL3RlbmFudC90ZW5hbnQtYWRkLmNvbnRyb2xsZXInXG5pbXBvcnQge1RlbmFudERldGFpbHNDdHJsfSBmcm9tICcuL3RlbmFudC90ZW5hbnQtZGV0YWlscy5jb250cm9sbGVyJ1xuaW1wb3J0IHtUZW5hbnRMb2NhdGlvbkN0cmx9IGZyb20gJy4vdGVuYW50L3RlbmFudC1sb2NhdGlvbi5jb250cm9sbGVyJ1xuaW1wb3J0IHtUZW5hbnRMb2NhdGlvbnNDdHJsfSBmcm9tICcuL3RlbmFudC90ZW5hbnQtbG9jYXRpb25zLmNvbnRyb2xsZXInXG5pbXBvcnQge1RlbmFudE1hbmFnZWREZXZpY2VzQ3RybH0gZnJvbSAnLi90ZW5hbnQvdGVuYW50LW1hbmFnZWQtZGV2aWNlcy5jb250cm9sbGVyJ1xuaW1wb3J0IHtUZW5hbnRVbm1hbmFnZWREZXZpY2VzQ3RybH0gZnJvbSAnLi90ZW5hbnQvdGVuYW50LXVubWFuYWdlZC1kZXZpY2VzLmNvbnRyb2xsZXInXG5pbXBvcnQge1RlbmFudHNDdHJsfSBmcm9tICcuL3RlbmFudC90ZW5hbnRzLmNvbnRyb2xsZXInXG4vLyBXZWxjb21lXG5pbXBvcnQge1dlbGNvbWVDdHJsfSBmcm9tICcuL3dlbGNvbWUvd2VsY29tZS1jb250cm9sbGVyJ1xuLy8gQ29uZmlnXG5pbXBvcnQge3JvdXRlc30gZnJvbSAnLi9hcHAtcm91dGVzJ1xuaW1wb3J0IHthcHBSdW59IGZyb20gJy4vYXBwLXJ1bic7XG5pbXBvcnQge3RvYXN0ckNvbmZpZywgYnJlYWRjcnVtYlByb3ZpZGVyfSBmcm9tICcuL2FwcC1jb25maWcnXG5cblxuYXBwXG4vLyBTZXJ2aWNlc1xuICAuc2VydmljZShcIlN0b3JhZ2VTZXJ2aWNlXCIsIFN0b3JhZ2VTZXJ2aWNlKVxuICAuc2VydmljZShcIkFkbWluU2VydmljZVwiLCBBZG1pblNlcnZpY2UpXG4gIC5zZXJ2aWNlKFwiQXV0aG9yaXphdGlvblNlcnZpY2VcIiwgQXV0aG9yaXphdGlvblNlcnZpY2UpXG4gIC5zZXJ2aWNlKFwiQ29tbWFuZHNTZXJ2aWNlXCIsIENvbW1hbmRzU2VydmljZSlcbiAgLnNlcnZpY2UoXCJEYXRlTWFuaXB1bGF0aW9uU2VydmljZVwiLCBEYXRlTWFuaXB1bGF0aW9uU2VydmljZSlcbiAgLnNlcnZpY2UoXCJEZXZpY2VzU2VydmljZVwiLCBEZXZpY2VzU2VydmljZSlcbiAgLnNlcnZpY2UoXCJEaXN0cmlidXRvcnNTZXJ2aWNlXCIsIERpc3RyaWJ1dG9yc1NlcnZpY2UpXG4gIC5zZXJ2aWNlKFwiRG9tYWluc1NlcnZpY2VcIiwgRG9tYWluc1NlcnZpY2UpXG4gIC5zZXJ2aWNlKFwiSWRlbnRpdHlTZXJ2aWNlXCIsIElkZW50aXR5U2VydmljZSlcbiAgLnNlcnZpY2UoXCJJbnRlZ3JhdGlvbkV2ZW50c1wiLCBJbnRlZ3JhdGlvbkV2ZW50cylcbiAgLnNlcnZpY2UoXCJMb2NhdGlvbnNTZXJ2aWNlXCIsIExvY2F0aW9uc1NlcnZpY2UpXG4gIC5zZXJ2aWNlKFwiUHJvZ3Jlc3NCYXJTZXJ2aWNlXCIsIFByb2dyZXNzQmFyU2VydmljZSlcbiAgLnNlcnZpY2UoXCJQcm9vZlBsYXlTZXJ2aWNlXCIsIFByb29mUGxheVNlcnZpY2UpXG4gIC5zZXJ2aWNlKFwiU2Vzc2lvbnNTZXJ2aWNlXCIsIFNlc3Npb25zU2VydmljZSlcbiAgLnNlcnZpY2UoXCJUZW5hbnRzU2VydmljZVwiLCBUZW5hbnRzU2VydmljZSlcbiAgLnNlcnZpY2UoXCJUaW1lem9uZXNTZXJ2aWNlXCIsIFRpbWV6b25lc1NlcnZpY2UpXG4gIC5zZXJ2aWNlKFwiVG9hc3RzU2VydmljZVwiLCBUb2FzdHNTZXJ2aWNlKVxuICAuc2VydmljZShcIlZlcnNpb25zU2VydmljZVwiLCBWZXJzaW9uc1NlcnZpY2UpXG4gIC5zZXJ2aWNlKFwiSW1hZ2VTZXJ2aWNlXCIsIEltYWdlU2VydmljZSlcbiAgLy8gRGV2aWNlXG4gIC5jb250cm9sbGVyKFwiRGV2aWNlRGV0YWlsc0NvbW1hbmRzQ3RybFwiLCBEZXZpY2VEZXRhaWxzQ29tbWFuZHNDdHJsKVxuICAuY29udHJvbGxlcihcIkRldmljZURldGFpbHNDdHJsXCIsIERldmljZURldGFpbHNDdHJsKVxuICAuY29udHJvbGxlcihcIkRldmljZXNMaXN0aW5nQ3RybFwiLCBEZXZpY2VzTGlzdGluZ0N0cmwpXG4gIC8vIEFkbWluXG4gIC5jb250cm9sbGVyKFwiQWRtaW5DdHJsXCIsIEFkbWluQ3RybClcbiAgLy8gQXV0aGVudGljYXRpb25cbiAgLmNvbnRyb2xsZXIoXCJBdXRoZW50aWNhdGlvbkN0cmxcIiwgQXV0aGVudGljYXRpb25DdHJsKVxuICAvLyBBcHBcbiAgLmNvbnRyb2xsZXIoXCJBcHBDb250cm9sbGVyXCIsIEFwcENvbnRyb2xsZXIpXG4gIC8vIERpc3RyaWJ1dG9yc1xuICAuY29udHJvbGxlcihcIkRpc3RyaWJ1dG9yU2VsZWN0b3JDdHJsXCIsIERpc3RyaWJ1dG9yU2VsZWN0b3JDdHJsKVxuICAuY29udHJvbGxlcihcIkRpc3RyaWJ1dG9yc0N0cmxcIiwgRGlzdHJpYnV0b3JzQ3RybClcbiAgLy8gRG9tYWluc1xuICAuY29udHJvbGxlcihcIkRvbWFpbnNDdHJsXCIsIERvbWFpbnNDdHJsKVxuICAuY29udHJvbGxlcihcIkRvbWFpbkRldGFpbHNDdHJsXCIsIERvbWFpbkRldGFpbHNDdHJsKVxuICAvLyBQcm9vZlBsYXlcbiAgLmNvbnRyb2xsZXIoXCJQcm9vZk9mUGxheU11bHRpTG9jYXRpb25DdHJsXCIsIFByb29mT2ZQbGF5TXVsdGlMb2NhdGlvbkN0cmwpXG4gIC5jb250cm9sbGVyKFwiUHJvb2ZPZlBsYXlNdWx0aURpc3BsYXlDdHJsXCIsIFByb29mT2ZQbGF5TXVsdGlEaXNwbGF5Q3RybClcbiAgLmNvbnRyb2xsZXIoXCJQcm9vZk9mUGxheU11bHRpUmVzb3VyY2VDdHJsXCIsIFByb29mT2ZQbGF5TXVsdGlSZXNvdXJjZUN0cmwpXG4gIC5jb250cm9sbGVyKFwiUHJvb2ZPZlBsYXlDdHJsXCIsIFByb29mT2ZQbGF5Q3RybClcbiAgLy8gVGVuYW50c1xuICAuY29udHJvbGxlcihcIlRlbmFudExvZ3NDdHJsXCIsIFRlbmFudExvZ3NDdHJsKVxuICAuY29udHJvbGxlcihcIlRlbmFudE92ZXJsYXlzQ3RybFwiLCBUZW5hbnRPdmVybGF5c0N0cmwpXG4gIC5jb250cm9sbGVyKFwiVGVuYW50QWRkQ3RybFwiLCBUZW5hbnRBZGRDdHJsKVxuICAuY29udHJvbGxlcihcIlRlbmFudERldGFpbHNDdHJsXCIsIFRlbmFudERldGFpbHNDdHJsKVxuICAuY29udHJvbGxlcihcIlRlbmFudExvY2F0aW9uQ3RybFwiLCBUZW5hbnRMb2NhdGlvbkN0cmwpXG4gIC5jb250cm9sbGVyKFwiVGVuYW50TG9jYXRpb25zQ3RybFwiLCBUZW5hbnRMb2NhdGlvbnNDdHJsKVxuICAuY29udHJvbGxlcihcIlRlbmFudE1hbmFnZWREZXZpY2VzQ3RybFwiLCBUZW5hbnRNYW5hZ2VkRGV2aWNlc0N0cmwpXG4gIC5jb250cm9sbGVyKFwiVGVuYW50VW5tYW5hZ2VkRGV2aWNlc0N0cmxcIiwgVGVuYW50VW5tYW5hZ2VkRGV2aWNlc0N0cmwpXG4gIC5jb250cm9sbGVyKFwiVGVuYW50c0N0cmxcIiwgVGVuYW50c0N0cmwpXG4gIC8vIFdlbGNvbWVcbiAgLmNvbnRyb2xsZXIoXCJXZWxjb21lQ3RybFwiLCBXZWxjb21lQ3RybClcbiAgLy8gYXBwUnVuIEJsb2NrXG4gIC5ydW4oYXBwUnVuKVxuICAvLyBDb25maWdcbiAgLmNvbmZpZyhyb3V0ZXMpXG4gIC5jb25maWcodG9hc3RyQ29uZmlnKVxuICAuY29uZmlnKGJyZWFkY3J1bWJQcm92aWRlcilcblxuLy8gUmVxdWVzdCBJbnRlcmNlcHRvclxuYXBwLnNlcnZpY2UoJ1JlcXVlc3RJbnRlcmNlcHRvcicsIGZ1bmN0aW9uIChTdG9yYWdlU2VydmljZSwgJGxvY2F0aW9uKSB7XG4gIFwibmdJbmplY3RcIjtcbiAgbGV0IGludGVyY2VwdG9yID0ge1xuICAgIHJlcXVlc3QoY29uZmlnKSB7XG4gICAgICBsZXQgZ3MgPSAnNVhaSEJGM21Pd3FKbFlBbEcxTmVlV1gwQ2I3MmcnO1xuICAgICAgbGV0IHByb2QgPSAnNkMzNDY1ODhCRDRDNkQ3MjJBMTE2NUI0M0M1MUMnO1xuICAgICAgY29uZmlnLmhlYWRlcnMgPSB7XG4gICAgICAgICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICdBY2NlcHQnOiAnYXBwbGljYXRpb24vanNvbicsXG4gICAgICAgICdBdXRob3JpemF0aW9uJzogJGxvY2F0aW9uLmhvc3QoKS5pbmRleE9mKCdwcm92aXNpb25pbmctZ2FtZXN0b3AnKSA+IC0xID8gZ3MgOiBwcm9kLFxuICAgICAgICAnWC1Qcm92aXNpb25pbmctVXNlcic6IFN0b3JhZ2VTZXJ2aWNlLmdldCgndXNlcktleScpLFxuICAgICAgICAnWC1Qcm92aXNpb25pbmctVXNlci1JZGVudGlmaWVyJzogU3RvcmFnZVNlcnZpY2UuZ2V0KCd1c2VyRW1haWwnKSxcbiAgICAgICAgJ1gtUHJvdmlzaW9uaW5nLURpc3RyaWJ1dG9yJzogU3RvcmFnZVNlcnZpY2UuZ2V0KCdjdXJyZW50RGlzdHJpYnV0b3JLZXknKVxuICAgICAgfTtcbiAgICAgIHJldHVybiBjb25maWc7XG4gICAgfVxuICB9O1xuICByZXR1cm4gaW50ZXJjZXB0b3I7XG59KTtcblxuXG5hcHAuY29uZmlnKCRodHRwUHJvdmlkZXIgPT4gJGh0dHBQcm92aWRlci5pbnRlcmNlcHRvcnMucHVzaCgnUmVxdWVzdEludGVyY2VwdG9yJykpO1xuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zcmMvYXBwL2luZGV4LmpzXG4gKiovIiwiaW1wb3J0IGFuZ3VsYXIgZnJvbSAnYW5ndWxhcic7XG5pbXBvcnQgdWlSb3V0ZXIgZnJvbSAnYW5ndWxhci11aS1yb3V0ZXInO1xuaW1wb3J0IG1vbWVudCBmcm9tICdtb21lbnQnO1xuaW1wb3J0ICdhbmd1bGFyLXRvb2x0aXBzJztcbmltcG9ydCAnbGYtbmctbWQtZmlsZS1pbnB1dCdcbmltcG9ydCAnbGYtbmctbWQtZmlsZS1pbnB1dC9kaXN0L2xmLW5nLW1kLWZpbGUtaW5wdXQuY3NzJ1xuaW1wb3J0ICdhbmd1bGFyLXRvb2x0aXBzL2Rpc3QvYW5ndWxhci10b29sdGlwcy5jc3MnXG5pbXBvcnQgJ2FuZ3VsYXItdG9hc3RyL2Rpc3QvYW5ndWxhci10b2FzdHIuY3NzJ1xuaW1wb3J0ICdhbmd1bGFyLXRvYXN0cic7XG5pbXBvcnQgXCJmb250LWF3ZXNvbWUvY3NzL2ZvbnQtYXdlc29tZS5jc3NcIjtcbmltcG9ydCAnbm9ybWFsaXplLmNzcyc7XG5pbXBvcnQgXCJib290c3RyYXAtd2VicGFja1wiO1xuaW1wb3J0ICcuL2NvbXBvbmVudHMvbmdQcm9ncmVzcy9uZ1Byb2dyZXNzJztcbmltcG9ydCAnLi9jb21wb25lbnRzL25nUHJvZ3Jlc3MvbmdQcm9ncmVzcy5jc3MnO1xuaW1wb3J0ICcuL2NvbXBvbmVudHMvYW5ndWxhckJyZWFkY3J1bWIvYW5ndWxhckJyZWFkY3J1bWInO1xuaW1wb3J0ICcuL2NvbXBvbmVudHMvYW5ndWxhci1tYXRlcmlhbC1kYXRldGltZXBpY2tlci9qcy9hbmd1bGFyLW1hdGVyaWFsLWRhdGV0aW1lcGlja2VyJ1xuaW1wb3J0ICcuL2NvbXBvbmVudHMvYW5ndWxhci1tYXRlcmlhbC1kYXRldGltZXBpY2tlci9jc3MvbWF0ZXJpYWwtZGF0ZXRpbWVwaWNrZXIuY3NzJ1xuaW1wb3J0ICcuL2NvbXBvbmVudHMvYW5ndWxhci1kaXJlY3RpdmUuZy1zaWduaW4vZ29vZ2xlLXBsdXMtc2lnbmluJ1xuaW1wb3J0ICdyZXN0YW5ndWxhcic7XG5pbXBvcnQgJ2FuZ3VsYXItbWF0ZXJpYWwnXG5pbXBvcnQgJ3N3ZWV0YWxlcnQnO1xuaW1wb3J0ICdhbmd1bGFyLWgtc3dlZXRhbGVydCc7XG5pbXBvcnQgJ3N3ZWV0YWxlcnQvZGlzdC9zd2VldGFsZXJ0LmNzcyc7XG5pbXBvcnQgJ2FuZ3VsYXItdG9hc3RyJztcbmltcG9ydCAnYW5ndWxhci1jb29raWVzJztcbmltcG9ydCAnYW5ndWxhci1zYW5pdGl6ZSc7XG5pbXBvcnQgJ2FuZ3VsYXItdWktYm9vdHN0cmFwJztcbmltcG9ydCAnbmdjbGlwYm9hcmQnO1xuaW1wb3J0ICdqcXVlcnknO1xuaW1wb3J0ICdhbmd1bGFyLWJyZWFkY3J1bWInXG5pbXBvcnQgJ2FuZ3VsYXItbWF0ZXJpYWwnO1xuLy8gSW1wb3J0IGFuZ3VsYXJcbmltcG9ydCAnYW5ndWxhci9hbmd1bGFyLmpzJztcbi8vIE1hdGVyaWFsIGRlc2lnbiBjc3NcbmltcG9ydCAnYW5ndWxhci1tYXRlcmlhbC9hbmd1bGFyLW1hdGVyaWFsLmNzcyc7XG5pbXBvcnQgJy4vc2Nzcy92ZW5kb3Iuc2NzcydcbmltcG9ydCAnLi9zY3NzL2luZGV4LnNjc3MnXG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xud2luZG93Ll8gPSBfO1xud2luZG93LmFuZ3VsYXIgPSBhbmd1bGFyO1xuXG5cbmV4cG9ydCBsZXQgYXBwID0gYW5ndWxhci5tb2R1bGUoJ3NreWtpdFByb3Zpc2lvbmluZycsIFtcbiAgdWlSb3V0ZXIsXG4gICduZ0FuaW1hdGUnLFxuICAnNzIwa2IudG9vbHRpcHMnLFxuICAnbmdDb29raWVzJyxcbiAgJ25nU2FuaXRpemUnLFxuICAncmVzdGFuZ3VsYXInLFxuICAndWkuYm9vdHN0cmFwJyxcbiAgJ25nTWF0ZXJpYWxEYXRlUGlja2VyJyxcbiAgJ2hTd2VldEFsZXJ0JyxcbiAgJ25jeS1hbmd1bGFyLWJyZWFkY3J1bWInLFxuICAnZGlyZWN0aXZlLmcrc2lnbmluJyxcbiAgJ25nUHJvZ3Jlc3MnLFxuICAnbmdNYXRlcmlhbCcsXG4gICduZ2NsaXBib2FyZCcsXG4gICd0b2FzdHInLFxuICAnbGZOZ01kRmlsZUlucHV0J1xuXSlcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vc3JjL2FwcC9hcHAuanNcbiAqKi8iLCJ2YXIgbWFwID0ge1xuXHRcIi4vYWZcIjogMzc1LFxuXHRcIi4vYWYuanNcIjogMzc1LFxuXHRcIi4vYXJcIjogMzc2LFxuXHRcIi4vYXItbHlcIjogMzc3LFxuXHRcIi4vYXItbHkuanNcIjogMzc3LFxuXHRcIi4vYXItbWFcIjogMzc4LFxuXHRcIi4vYXItbWEuanNcIjogMzc4LFxuXHRcIi4vYXItc2FcIjogMzc5LFxuXHRcIi4vYXItc2EuanNcIjogMzc5LFxuXHRcIi4vYXItdG5cIjogMzgwLFxuXHRcIi4vYXItdG4uanNcIjogMzgwLFxuXHRcIi4vYXIuanNcIjogMzc2LFxuXHRcIi4vYXpcIjogMzgxLFxuXHRcIi4vYXouanNcIjogMzgxLFxuXHRcIi4vYmVcIjogMzgyLFxuXHRcIi4vYmUuanNcIjogMzgyLFxuXHRcIi4vYmdcIjogMzgzLFxuXHRcIi4vYmcuanNcIjogMzgzLFxuXHRcIi4vYm5cIjogMzg0LFxuXHRcIi4vYm4uanNcIjogMzg0LFxuXHRcIi4vYm9cIjogMzg1LFxuXHRcIi4vYm8uanNcIjogMzg1LFxuXHRcIi4vYnJcIjogMzg2LFxuXHRcIi4vYnIuanNcIjogMzg2LFxuXHRcIi4vYnNcIjogMzg3LFxuXHRcIi4vYnMuanNcIjogMzg3LFxuXHRcIi4vY2FcIjogMzg4LFxuXHRcIi4vY2EuanNcIjogMzg4LFxuXHRcIi4vY3NcIjogMzg5LFxuXHRcIi4vY3MuanNcIjogMzg5LFxuXHRcIi4vY3ZcIjogMzkwLFxuXHRcIi4vY3YuanNcIjogMzkwLFxuXHRcIi4vY3lcIjogMzkxLFxuXHRcIi4vY3kuanNcIjogMzkxLFxuXHRcIi4vZGFcIjogMzkyLFxuXHRcIi4vZGEuanNcIjogMzkyLFxuXHRcIi4vZGVcIjogMzkzLFxuXHRcIi4vZGUtYXRcIjogMzk0LFxuXHRcIi4vZGUtYXQuanNcIjogMzk0LFxuXHRcIi4vZGUuanNcIjogMzkzLFxuXHRcIi4vZHZcIjogMzk1LFxuXHRcIi4vZHYuanNcIjogMzk1LFxuXHRcIi4vZWxcIjogMzk2LFxuXHRcIi4vZWwuanNcIjogMzk2LFxuXHRcIi4vZW4tYXVcIjogMzk3LFxuXHRcIi4vZW4tYXUuanNcIjogMzk3LFxuXHRcIi4vZW4tY2FcIjogMzk4LFxuXHRcIi4vZW4tY2EuanNcIjogMzk4LFxuXHRcIi4vZW4tZ2JcIjogMzk5LFxuXHRcIi4vZW4tZ2IuanNcIjogMzk5LFxuXHRcIi4vZW4taWVcIjogNDAwLFxuXHRcIi4vZW4taWUuanNcIjogNDAwLFxuXHRcIi4vZW4tbnpcIjogNDAxLFxuXHRcIi4vZW4tbnouanNcIjogNDAxLFxuXHRcIi4vZW9cIjogNDAyLFxuXHRcIi4vZW8uanNcIjogNDAyLFxuXHRcIi4vZXNcIjogNDAzLFxuXHRcIi4vZXMtZG9cIjogNDA0LFxuXHRcIi4vZXMtZG8uanNcIjogNDA0LFxuXHRcIi4vZXMuanNcIjogNDAzLFxuXHRcIi4vZXRcIjogNDA1LFxuXHRcIi4vZXQuanNcIjogNDA1LFxuXHRcIi4vZXVcIjogNDA2LFxuXHRcIi4vZXUuanNcIjogNDA2LFxuXHRcIi4vZmFcIjogNDA3LFxuXHRcIi4vZmEuanNcIjogNDA3LFxuXHRcIi4vZmlcIjogNDA4LFxuXHRcIi4vZmkuanNcIjogNDA4LFxuXHRcIi4vZm9cIjogNDA5LFxuXHRcIi4vZm8uanNcIjogNDA5LFxuXHRcIi4vZnJcIjogNDEwLFxuXHRcIi4vZnItY2FcIjogNDExLFxuXHRcIi4vZnItY2EuanNcIjogNDExLFxuXHRcIi4vZnItY2hcIjogNDEyLFxuXHRcIi4vZnItY2guanNcIjogNDEyLFxuXHRcIi4vZnIuanNcIjogNDEwLFxuXHRcIi4vZnlcIjogNDEzLFxuXHRcIi4vZnkuanNcIjogNDEzLFxuXHRcIi4vZ2RcIjogNDE0LFxuXHRcIi4vZ2QuanNcIjogNDE0LFxuXHRcIi4vZ2xcIjogNDE1LFxuXHRcIi4vZ2wuanNcIjogNDE1LFxuXHRcIi4vaGVcIjogNDE2LFxuXHRcIi4vaGUuanNcIjogNDE2LFxuXHRcIi4vaGlcIjogNDE3LFxuXHRcIi4vaGkuanNcIjogNDE3LFxuXHRcIi4vaHJcIjogNDE4LFxuXHRcIi4vaHIuanNcIjogNDE4LFxuXHRcIi4vaHVcIjogNDE5LFxuXHRcIi4vaHUuanNcIjogNDE5LFxuXHRcIi4vaHktYW1cIjogNDIwLFxuXHRcIi4vaHktYW0uanNcIjogNDIwLFxuXHRcIi4vaWRcIjogNDIxLFxuXHRcIi4vaWQuanNcIjogNDIxLFxuXHRcIi4vaXNcIjogNDIyLFxuXHRcIi4vaXMuanNcIjogNDIyLFxuXHRcIi4vaXRcIjogNDIzLFxuXHRcIi4vaXQuanNcIjogNDIzLFxuXHRcIi4vamFcIjogNDI0LFxuXHRcIi4vamEuanNcIjogNDI0LFxuXHRcIi4vanZcIjogNDI1LFxuXHRcIi4vanYuanNcIjogNDI1LFxuXHRcIi4va2FcIjogNDI2LFxuXHRcIi4va2EuanNcIjogNDI2LFxuXHRcIi4va2tcIjogNDI3LFxuXHRcIi4va2suanNcIjogNDI3LFxuXHRcIi4va21cIjogNDI4LFxuXHRcIi4va20uanNcIjogNDI4LFxuXHRcIi4va29cIjogNDI5LFxuXHRcIi4va28uanNcIjogNDI5LFxuXHRcIi4va3lcIjogNDMwLFxuXHRcIi4va3kuanNcIjogNDMwLFxuXHRcIi4vbGJcIjogNDMxLFxuXHRcIi4vbGIuanNcIjogNDMxLFxuXHRcIi4vbG9cIjogNDMyLFxuXHRcIi4vbG8uanNcIjogNDMyLFxuXHRcIi4vbHRcIjogNDMzLFxuXHRcIi4vbHQuanNcIjogNDMzLFxuXHRcIi4vbHZcIjogNDM0LFxuXHRcIi4vbHYuanNcIjogNDM0LFxuXHRcIi4vbWVcIjogNDM1LFxuXHRcIi4vbWUuanNcIjogNDM1LFxuXHRcIi4vbWlcIjogNDM2LFxuXHRcIi4vbWkuanNcIjogNDM2LFxuXHRcIi4vbWtcIjogNDM3LFxuXHRcIi4vbWsuanNcIjogNDM3LFxuXHRcIi4vbWxcIjogNDM4LFxuXHRcIi4vbWwuanNcIjogNDM4LFxuXHRcIi4vbXJcIjogNDM5LFxuXHRcIi4vbXIuanNcIjogNDM5LFxuXHRcIi4vbXNcIjogNDQwLFxuXHRcIi4vbXMtbXlcIjogNDQxLFxuXHRcIi4vbXMtbXkuanNcIjogNDQxLFxuXHRcIi4vbXMuanNcIjogNDQwLFxuXHRcIi4vbXlcIjogNDQyLFxuXHRcIi4vbXkuanNcIjogNDQyLFxuXHRcIi4vbmJcIjogNDQzLFxuXHRcIi4vbmIuanNcIjogNDQzLFxuXHRcIi4vbmVcIjogNDQ0LFxuXHRcIi4vbmUuanNcIjogNDQ0LFxuXHRcIi4vbmxcIjogNDQ1LFxuXHRcIi4vbmwuanNcIjogNDQ1LFxuXHRcIi4vbm5cIjogNDQ2LFxuXHRcIi4vbm4uanNcIjogNDQ2LFxuXHRcIi4vcGEtaW5cIjogNDQ3LFxuXHRcIi4vcGEtaW4uanNcIjogNDQ3LFxuXHRcIi4vcGxcIjogNDQ4LFxuXHRcIi4vcGwuanNcIjogNDQ4LFxuXHRcIi4vcHRcIjogNDQ5LFxuXHRcIi4vcHQtYnJcIjogNDUwLFxuXHRcIi4vcHQtYnIuanNcIjogNDUwLFxuXHRcIi4vcHQuanNcIjogNDQ5LFxuXHRcIi4vcm9cIjogNDUxLFxuXHRcIi4vcm8uanNcIjogNDUxLFxuXHRcIi4vcnVcIjogNDUyLFxuXHRcIi4vcnUuanNcIjogNDUyLFxuXHRcIi4vc2VcIjogNDUzLFxuXHRcIi4vc2UuanNcIjogNDUzLFxuXHRcIi4vc2lcIjogNDU0LFxuXHRcIi4vc2kuanNcIjogNDU0LFxuXHRcIi4vc2tcIjogNDU1LFxuXHRcIi4vc2suanNcIjogNDU1LFxuXHRcIi4vc2xcIjogNDU2LFxuXHRcIi4vc2wuanNcIjogNDU2LFxuXHRcIi4vc3FcIjogNDU3LFxuXHRcIi4vc3EuanNcIjogNDU3LFxuXHRcIi4vc3JcIjogNDU4LFxuXHRcIi4vc3ItY3lybFwiOiA0NTksXG5cdFwiLi9zci1jeXJsLmpzXCI6IDQ1OSxcblx0XCIuL3NyLmpzXCI6IDQ1OCxcblx0XCIuL3NzXCI6IDQ2MCxcblx0XCIuL3NzLmpzXCI6IDQ2MCxcblx0XCIuL3N2XCI6IDQ2MSxcblx0XCIuL3N2LmpzXCI6IDQ2MSxcblx0XCIuL3N3XCI6IDQ2Mixcblx0XCIuL3N3LmpzXCI6IDQ2Mixcblx0XCIuL3RhXCI6IDQ2Myxcblx0XCIuL3RhLmpzXCI6IDQ2Myxcblx0XCIuL3RlXCI6IDQ2NCxcblx0XCIuL3RlLmpzXCI6IDQ2NCxcblx0XCIuL3RoXCI6IDQ2NSxcblx0XCIuL3RoLmpzXCI6IDQ2NSxcblx0XCIuL3RsLXBoXCI6IDQ2Nixcblx0XCIuL3RsLXBoLmpzXCI6IDQ2Nixcblx0XCIuL3RsaFwiOiA0NjcsXG5cdFwiLi90bGguanNcIjogNDY3LFxuXHRcIi4vdHJcIjogNDY4LFxuXHRcIi4vdHIuanNcIjogNDY4LFxuXHRcIi4vdHpsXCI6IDQ2OSxcblx0XCIuL3R6bC5qc1wiOiA0NjksXG5cdFwiLi90em1cIjogNDcwLFxuXHRcIi4vdHptLWxhdG5cIjogNDcxLFxuXHRcIi4vdHptLWxhdG4uanNcIjogNDcxLFxuXHRcIi4vdHptLmpzXCI6IDQ3MCxcblx0XCIuL3VrXCI6IDQ3Mixcblx0XCIuL3VrLmpzXCI6IDQ3Mixcblx0XCIuL3V6XCI6IDQ3Myxcblx0XCIuL3V6LmpzXCI6IDQ3Myxcblx0XCIuL3ZpXCI6IDQ3NCxcblx0XCIuL3ZpLmpzXCI6IDQ3NCxcblx0XCIuL3gtcHNldWRvXCI6IDQ3NSxcblx0XCIuL3gtcHNldWRvLmpzXCI6IDQ3NSxcblx0XCIuL3poLWNuXCI6IDQ3Nixcblx0XCIuL3poLWNuLmpzXCI6IDQ3Nixcblx0XCIuL3poLWhrXCI6IDQ3Nyxcblx0XCIuL3poLWhrLmpzXCI6IDQ3Nyxcblx0XCIuL3poLXR3XCI6IDQ3OCxcblx0XCIuL3poLXR3LmpzXCI6IDQ3OFxufTtcbmZ1bmN0aW9uIHdlYnBhY2tDb250ZXh0KHJlcSkge1xuXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyh3ZWJwYWNrQ29udGV4dFJlc29sdmUocmVxKSk7XG59O1xuZnVuY3Rpb24gd2VicGFja0NvbnRleHRSZXNvbHZlKHJlcSkge1xuXHRyZXR1cm4gbWFwW3JlcV0gfHwgKGZ1bmN0aW9uKCkgeyB0aHJvdyBuZXcgRXJyb3IoXCJDYW5ub3QgZmluZCBtb2R1bGUgJ1wiICsgcmVxICsgXCInLlwiKSB9KCkpO1xufTtcbndlYnBhY2tDb250ZXh0LmtleXMgPSBmdW5jdGlvbiB3ZWJwYWNrQ29udGV4dEtleXMoKSB7XG5cdHJldHVybiBPYmplY3Qua2V5cyhtYXApO1xufTtcbndlYnBhY2tDb250ZXh0LnJlc29sdmUgPSB3ZWJwYWNrQ29udGV4dFJlc29sdmU7XG5tb2R1bGUuZXhwb3J0cyA9IHdlYnBhY2tDb250ZXh0O1xud2VicGFja0NvbnRleHQuaWQgPSAzNzQ7XG5cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vfi9tb21lbnQvbG9jYWxlIF5cXC5cXC8uKiRcbiAqKiBtb2R1bGUgaWQgPSAzNzRcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIi8qXG4gbmdwcm9ncmVzcyAxLjEuMiAtIHNsaW0sIHNpdGUtd2lkZSBwcm9ncmVzc2JhciBmb3IgQW5ndWxhckpTIFxuIChDKSAyMDEzIC0gVmljdG9yIEJqZWxraG9sbSBcbiBMaWNlbnNlOiBNSVQgXG4gU291cmNlOiBodHRwczovL2dpdGh1Yi5jb20vVmljdG9yQmplbGtob2xtL25nUHJvZ3Jlc3MgXG4gRGF0ZSBDb21waWxlZDogMjAxNS0wNy0yNyBcbiAqL1xuYW5ndWxhci5tb2R1bGUoXCJuZ1Byb2dyZXNzLnByb3ZpZGVyXCIsIFtcIm5nUHJvZ3Jlc3MuZGlyZWN0aXZlXCJdKS5zZXJ2aWNlKFwibmdQcm9ncmVzc1wiLCBmdW5jdGlvbiAoKSB7XG4gIFwidXNlIHN0cmljdFwiO1xuICByZXR1cm4gW1wiJGRvY3VtZW50XCIsIFwiJHdpbmRvd1wiLCBcIiRjb21waWxlXCIsIFwiJHJvb3RTY29wZVwiLCBcIiR0aW1lb3V0XCIsIGZ1bmN0aW9uIChhLCBiLCBjLCBkLCBlKSB7XG4gICAgdGhpcy5hdXRvU3R5bGUgPSAhMCwgdGhpcy5jb3VudCA9IDAsIHRoaXMuaGVpZ2h0ID0gXCIycHhcIiwgdGhpcy4kc2NvcGUgPSBkLiRuZXcoKSwgdGhpcy5jb2xvciA9IFwiZmlyZWJyaWNrXCIsIHRoaXMucGFyZW50ID0gYS5maW5kKFwiYm9keVwiKVswXSwgdGhpcy5jb3VudCA9IDAsIHRoaXMucHJvZ3Jlc3NiYXJFbCA9IGMoXCI8bmctcHJvZ3Jlc3M+PC9uZy1wcm9ncmVzcz5cIikodGhpcy4kc2NvcGUpLCB0aGlzLnBhcmVudC5hcHBlbmRDaGlsZCh0aGlzLnByb2dyZXNzYmFyRWxbMF0pLCB0aGlzLiRzY29wZS5jb3VudCA9IHRoaXMuY291bnQsIHZvaWQgMCAhPT0gdGhpcy5oZWlnaHQgJiYgdGhpcy5wcm9ncmVzc2JhckVsLmVxKDApLmNoaWxkcmVuKCkuY3NzKFwiaGVpZ2h0XCIsIHRoaXMuaGVpZ2h0KSwgdm9pZCAwICE9PSB0aGlzLmNvbG9yICYmICh0aGlzLnByb2dyZXNzYmFyRWwuZXEoMCkuY2hpbGRyZW4oKS5jc3MoXCJiYWNrZ3JvdW5kLWNvbG9yXCIsIHRoaXMuY29sb3IpLCB0aGlzLnByb2dyZXNzYmFyRWwuZXEoMCkuY2hpbGRyZW4oKS5jc3MoXCJjb2xvclwiLCB0aGlzLmNvbG9yKSksIHRoaXMuaW50ZXJ2YWxDb3VudGVySWQgPSAwLCB0aGlzLnN0YXJ0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgdGhpcy5zaG93KCk7XG4gICAgICB2YXIgYSA9IHRoaXM7XG4gICAgICBjbGVhckludGVydmFsKHRoaXMuaW50ZXJ2YWxDb3VudGVySWQpLCB0aGlzLmludGVydmFsQ291bnRlcklkID0gc2V0SW50ZXJ2YWwoZnVuY3Rpb24gKCkge1xuICAgICAgICBpc05hTihhLmNvdW50KSA/IChjbGVhckludGVydmFsKGEuaW50ZXJ2YWxDb3VudGVySWQpLCBhLmNvdW50ID0gMCwgYS5oaWRlKCkpIDogKGEucmVtYWluaW5nID0gMTAwIC0gYS5jb3VudCwgYS5jb3VudCA9IGEuY291bnQgKyAuMTUgKiBNYXRoLnBvdygxIC0gTWF0aC5zcXJ0KGEucmVtYWluaW5nKSwgMiksIGEudXBkYXRlQ291bnQoYS5jb3VudCkpXG4gICAgICB9LCAyMDApXG4gICAgfSwgdGhpcy51cGRhdGVDb3VudCA9IGZ1bmN0aW9uIChhKSB7XG4gICAgICB0aGlzLiRzY29wZS5jb3VudCA9IGEsIHRoaXMuJHNjb3BlLiQkcGhhc2UgfHwgdGhpcy4kc2NvcGUuJGFwcGx5KClcbiAgICB9LCB0aGlzLnNldEhlaWdodCA9IGZ1bmN0aW9uIChhKSB7XG4gICAgICByZXR1cm4gdm9pZCAwICE9PSBhICYmICh0aGlzLmhlaWdodCA9IGEsIHRoaXMuJHNjb3BlLmhlaWdodCA9IHRoaXMuaGVpZ2h0LCB0aGlzLiRzY29wZS4kJHBoYXNlIHx8IHRoaXMuJHNjb3BlLiRhcHBseSgpKSwgdGhpcy5oZWlnaHRcbiAgICB9LCB0aGlzLnNldENvbG9yID0gZnVuY3Rpb24gKGEpIHtcbiAgICAgIHJldHVybiB2b2lkIDAgIT09IGEgJiYgKHRoaXMuY29sb3IgPSBhLCB0aGlzLiRzY29wZS5jb2xvciA9IHRoaXMuY29sb3IsIHRoaXMuJHNjb3BlLiQkcGhhc2UgfHwgdGhpcy4kc2NvcGUuJGFwcGx5KCkpLCB0aGlzLmNvbG9yXG4gICAgfSwgdGhpcy5oaWRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgdGhpcy5wcm9ncmVzc2JhckVsLmNoaWxkcmVuKCkuY3NzKFwib3BhY2l0eVwiLCBcIjBcIik7XG4gICAgICB2YXIgYSA9IHRoaXM7XG4gICAgICBhLmFuaW1hdGUoZnVuY3Rpb24gKCkge1xuICAgICAgICBhLnByb2dyZXNzYmFyRWwuY2hpbGRyZW4oKS5jc3MoXCJ3aWR0aFwiLCBcIjAlXCIpLCBhLmFuaW1hdGUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGEuc2hvdygpXG4gICAgICAgIH0sIDUwMClcbiAgICAgIH0sIDUwMClcbiAgICB9LCB0aGlzLnNob3cgPSBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgYSA9IHRoaXM7XG4gICAgICBhLmFuaW1hdGUoZnVuY3Rpb24gKCkge1xuICAgICAgICBhLnByb2dyZXNzYmFyRWwuY2hpbGRyZW4oKS5jc3MoXCJvcGFjaXR5XCIsIFwiMVwiKVxuICAgICAgfSwgMTAwKVxuICAgIH0sIHRoaXMuYW5pbWF0ZSA9IGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgICB2b2lkIDAgIT09IHRoaXMuYW5pbWF0aW9uICYmIGUuY2FuY2VsKHRoaXMuYW5pbWF0aW9uKSwgdGhpcy5hbmltYXRpb24gPSBlKGEsIGIpXG4gICAgfSwgdGhpcy5zdGF0dXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5jb3VudFxuICAgIH0sIHRoaXMuc3RvcCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGNsZWFySW50ZXJ2YWwodGhpcy5pbnRlcnZhbENvdW50ZXJJZClcbiAgICB9LCB0aGlzLnNldCA9IGZ1bmN0aW9uIChhKSB7XG4gICAgICByZXR1cm4gdGhpcy5zaG93KCksIHRoaXMudXBkYXRlQ291bnQoYSksIHRoaXMuY291bnQgPSBhLCBjbGVhckludGVydmFsKHRoaXMuaW50ZXJ2YWxDb3VudGVySWQpLCB0aGlzLmNvdW50XG4gICAgfSwgdGhpcy5jc3MgPSBmdW5jdGlvbiAoYSkge1xuICAgICAgcmV0dXJuIHRoaXMucHJvZ3Jlc3NiYXJFbC5jaGlsZHJlbigpLmNzcyhhKVxuICAgIH0sIHRoaXMucmVzZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gY2xlYXJJbnRlcnZhbCh0aGlzLmludGVydmFsQ291bnRlcklkKSwgdGhpcy5jb3VudCA9IDAsIHRoaXMudXBkYXRlQ291bnQodGhpcy5jb3VudCksIDBcbiAgICB9LCB0aGlzLmNvbXBsZXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgdGhpcy5jb3VudCA9IDEwMCwgdGhpcy51cGRhdGVDb3VudCh0aGlzLmNvdW50KTtcbiAgICAgIHZhciBhID0gdGhpcztcbiAgICAgIHJldHVybiBjbGVhckludGVydmFsKHRoaXMuaW50ZXJ2YWxDb3VudGVySWQpLCBlKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgYS5oaWRlKCksIGUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGEuY291bnQgPSAwLCBhLnVwZGF0ZUNvdW50KGEuY291bnQpXG4gICAgICAgIH0sIDUwMClcbiAgICAgIH0sIDFlMyksIHRoaXMuY291bnRcbiAgICB9LCB0aGlzLnNldFBhcmVudCA9IGZ1bmN0aW9uIChhKSB7XG4gICAgICBpZiAobnVsbCA9PT0gYSB8fCB2b2lkIDAgPT09IGEpdGhyb3cgbmV3IEVycm9yKFwiUHJvdmlkZSBhIHZhbGlkIHBhcmVudCBvZiB0eXBlIEhUTUxFbGVtZW50XCIpO1xuICAgICAgbnVsbCAhPT0gdGhpcy5wYXJlbnQgJiYgdm9pZCAwICE9PSB0aGlzLnBhcmVudCAmJiB0aGlzLnBhcmVudC5yZW1vdmVDaGlsZCh0aGlzLnByb2dyZXNzYmFyRWxbMF0pLCB0aGlzLnBhcmVudCA9IGEsIHRoaXMucGFyZW50LmFwcGVuZENoaWxkKHRoaXMucHJvZ3Jlc3NiYXJFbFswXSlcbiAgICB9LCB0aGlzLmdldERvbUVsZW1lbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5wcm9ncmVzc2JhckVsXG4gICAgfSwgdGhpcy5zZXRBYnNvbHV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoaXMucHJvZ3Jlc3NiYXJFbC5jc3MoXCJwb3NpdGlvblwiLCBcImFic29sdXRlXCIpXG4gICAgfVxuICB9XVxufSkuZmFjdG9yeShcIm5nUHJvZ3Jlc3NGYWN0b3J5XCIsIFtcIiRpbmplY3RvclwiLCBcIm5nUHJvZ3Jlc3NcIiwgZnVuY3Rpb24gKGEsIGIpIHtcbiAgdmFyIGMgPSB7XG4gICAgY3JlYXRlSW5zdGFuY2U6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBhLmluc3RhbnRpYXRlKGIpXG4gICAgfVxuICB9O1xuICByZXR1cm4gY1xufV0pLCBhbmd1bGFyLm1vZHVsZShcIm5nUHJvZ3Jlc3MuZGlyZWN0aXZlXCIsIFtdKS5kaXJlY3RpdmUoXCJuZ1Byb2dyZXNzXCIsIFtcIiR3aW5kb3dcIiwgXCIkcm9vdFNjb3BlXCIsIGZ1bmN0aW9uIChhLCBiKSB7XG4gIHZhciBjID0ge1xuICAgIHJlcGxhY2U6ICEwLCByZXN0cmljdDogXCJFXCIsIGxpbms6IGZ1bmN0aW9uIChhLCBiLCBjLCBkKSB7XG4gICAgICBhLiR3YXRjaChcImNvdW50XCIsIGZ1bmN0aW9uIChjKSB7XG4gICAgICAgICh2b2lkIDAgIT09IGMgfHwgbnVsbCAhPT0gYykgJiYgKGEuY291bnRlciA9IGMsIGIuZXEoMCkuY2hpbGRyZW4oKS5jc3MoXCJ3aWR0aFwiLCBjICsgXCIlXCIpKVxuICAgICAgfSksIGEuJHdhdGNoKFwiY29sb3JcIiwgZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgKHZvaWQgMCAhPT0gYyB8fCBudWxsICE9PSBjKSAmJiAoYS5jb2xvciA9IGMsIGIuZXEoMCkuY2hpbGRyZW4oKS5jc3MoXCJiYWNrZ3JvdW5kLWNvbG9yXCIsIGMpLCBiLmVxKDApLmNoaWxkcmVuKCkuY3NzKFwiY29sb3JcIiwgYykpXG4gICAgICB9KSwgYS4kd2F0Y2goXCJoZWlnaHRcIiwgZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgKHZvaWQgMCAhPT0gYyB8fCBudWxsICE9PSBjKSAmJiAoYS5oZWlnaHQgPSBjLCBiLmVxKDApLmNoaWxkcmVuKCkuY3NzKFwiaGVpZ2h0XCIsIGMpKVxuICAgICAgfSlcbiAgICB9LCB0ZW1wbGF0ZTogJzxkaXYgaWQ9XCJuZ1Byb2dyZXNzLWNvbnRhaW5lclwiPjxkaXYgaWQ9XCJuZ1Byb2dyZXNzXCI+PC9kaXY+PC9kaXY+J1xuICB9O1xuICByZXR1cm4gY1xufV0pLCBhbmd1bGFyLm1vZHVsZShcIm5nUHJvZ3Jlc3NcIiwgW1wibmdQcm9ncmVzcy5kaXJlY3RpdmVcIiwgXCJuZ1Byb2dyZXNzLnByb3ZpZGVyXCJdKTtcblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vc3JjL2FwcC9jb21wb25lbnRzL25nUHJvZ3Jlc3MvbmdQcm9ncmVzcy5qc1xuICoqLyIsIi8vIHN0eWxlLWxvYWRlcjogQWRkcyBzb21lIGNzcyB0byB0aGUgRE9NIGJ5IGFkZGluZyBhIDxzdHlsZT4gdGFnXG5cbi8vIGxvYWQgdGhlIHN0eWxlc1xudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4vbmdQcm9ncmVzcy5jc3NcIik7XG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbi8vIGFkZCB0aGUgc3R5bGVzIHRvIHRoZSBET01cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9hZGRTdHlsZXMuanNcIikoY29udGVudCwge30pO1xuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG4vLyBIb3QgTW9kdWxlIFJlcGxhY2VtZW50XG5pZihtb2R1bGUuaG90KSB7XG5cdC8vIFdoZW4gdGhlIHN0eWxlcyBjaGFuZ2UsIHVwZGF0ZSB0aGUgPHN0eWxlPiB0YWdzXG5cdGlmKCFjb250ZW50LmxvY2Fscykge1xuXHRcdG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4vbmdQcm9ncmVzcy5jc3NcIiwgZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgbmV3Q29udGVudCA9IHJlcXVpcmUoXCIhIS4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi9uZ1Byb2dyZXNzLmNzc1wiKTtcblx0XHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXHRcdFx0dXBkYXRlKG5ld0NvbnRlbnQpO1xuXHRcdH0pO1xuXHR9XG5cdC8vIFdoZW4gdGhlIG1vZHVsZSBpcyBkaXNwb3NlZCwgcmVtb3ZlIHRoZSA8c3R5bGU+IHRhZ3Ncblx0bW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL3NyYy9hcHAvY29tcG9uZW50cy9uZ1Byb2dyZXNzL25nUHJvZ3Jlc3MuY3NzXG4gKiogbW9kdWxlIGlkID0gNTI1XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanNcIikoKTtcbi8vIGltcG9ydHNcblxuXG4vLyBtb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIiNuZ1Byb2dyZXNze21hcmdpbjowO3BhZGRpbmc6MDt6LWluZGV4Ojk5OTk4O2JhY2tncm91bmQtY29sb3I6Z3JlZW47Y29sb3I6Z3JlZW47Ym94LXNoYWRvdzowIDAgMTBweCAwO2hlaWdodDoycHg7b3BhY2l0eTowOy13ZWJraXQtdHJhbnNpdGlvbjphbGwgLjVzIGVhc2UtaW4tb3V0O3RyYW5zaXRpb246YWxsIC41cyBlYXNlLWluLW91dH0jbmdQcm9ncmVzcy1jb250YWluZXJ7cG9zaXRpb246Zml4ZWQ7bWFyZ2luOjA7cGFkZGluZzowO3RvcDowO2xlZnQ6MDtyaWdodDowO3otaW5kZXg6OTk5OTl9XCIsIFwiXCJdKTtcblxuLy8gZXhwb3J0c1xuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vY3NzLWxvYWRlciEuL3NyYy9hcHAvY29tcG9uZW50cy9uZ1Byb2dyZXNzL25nUHJvZ3Jlc3MuY3NzXG4gKiogbW9kdWxlIGlkID0gNTI2XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCIvKiEgYW5ndWxhci1icmVhZGNydW1iIC0gdjAuNC4wLWRldi0yMDE1LTA4LTA3XG4qIGh0dHA6Ly9uY3VpbGxlcnkuZ2l0aHViLmlvL2FuZ3VsYXItYnJlYWRjcnVtYlxuKiBDb3B5cmlnaHQgKGMpIDIwMTUgTmljb2xhcyBDdWlsbGVyeTsgTGljZW5zZWQgTUlUICovXG4hZnVuY3Rpb24oYSxiLGMpe1widXNlIHN0cmljdFwiO2Z1bmN0aW9uIGQoYSxjKXtyZXR1cm4gYi5lcXVhbHMoYS5sZW5ndGgsYy5sZW5ndGgpP2E+YzphLmxlbmd0aD5jLmxlbmd0aH1mdW5jdGlvbiBlKGEpe3ZhciBiPWEucmVwbGFjZSgvXFxuL2csXCIgXCIpLm1hdGNoKC9eKFteKF0rPylcXHMqKFxcKCguKilcXCkpPyQvKTtpZighYnx8NCE9PWIubGVuZ3RoKXRocm93IG5ldyBFcnJvcihcIkludmFsaWQgc3RhdGUgcmVmICdcIithK1wiJ1wiKTtyZXR1cm57c3RhdGU6YlsxXSxwYXJhbUV4cHI6YlszXXx8bnVsbH19ZnVuY3Rpb24gZigpe3ZhciBhPXtwcmVmaXhTdGF0ZU5hbWU6bnVsbCx0ZW1wbGF0ZTpcImJvb3RzdHJhcDNcIix0ZW1wbGF0ZVVybDpudWxsLGluY2x1ZGVBYnN0cmFjdDohMX07dGhpcy5zZXRPcHRpb25zPWZ1bmN0aW9uKGMpe2IuZXh0ZW5kKGEsYyl9LHRoaXMuJGdldD1bXCIkc3RhdGVcIixcIiRzdGF0ZVBhcmFtc1wiLFwiJHJvb3RTY29wZVwiLGZ1bmN0aW9uKGIsZixnKXt2YXIgaD1nO2cuJG9uKFwiJHZpZXdDb250ZW50TG9hZGVkXCIsZnVuY3Rpb24oYSl7IWEudGFyZ2V0U2NvcGUubmN5QnJlYWRjcnVtYklnbm9yZSYmZChhLnRhcmdldFNjb3BlLiRpZCxoLiRpZCkmJihoPWEudGFyZ2V0U2NvcGUpfSk7dmFyIGk9ZnVuY3Rpb24oYSl7dmFyIGI9YS5wYXJlbnR8fCgvXiguKylcXC5bXi5dKyQvLmV4ZWMoYS5uYW1lKXx8W10pWzFdLGM9XCJvYmplY3RcIj09dHlwZW9mIGI7cmV0dXJuIGM/Yi5uYW1lOmJ9LGo9ZnVuY3Rpb24oYyxkKXtmb3IodmFyIGcsaSxqPWUoZCksaz0hMSxsPSExLG09MCxuPWMubGVuZ3RoO24+bTttKz0xKWlmKGNbbV0ubmFtZT09PWouc3RhdGUpcmV0dXJuO2c9Yi5nZXQoai5zdGF0ZSksZy5uY3lCcmVhZGNydW1iJiYoZy5uY3lCcmVhZGNydW1iLmZvcmNlJiYoaz0hMCksZy5uY3lCcmVhZGNydW1iLnNraXAmJihsPSEwKSksZ1tcImFic3RyYWN0XCJdJiYhYS5pbmNsdWRlQWJzdHJhY3QmJiFrfHxsfHwoai5wYXJhbUV4cHImJihpPWguJGV2YWwoai5wYXJhbUV4cHIpKSxnLm5jeUJyZWFkY3J1bWJMaW5rPWIuaHJlZihqLnN0YXRlLGl8fGZ8fHt9KSxjLnVuc2hpZnQoZykpfSxrPWZ1bmN0aW9uKGEpe3ZhciBjPWUoYSksZD1iLmdldChjLnN0YXRlKTtpZihkLm5jeUJyZWFkY3J1bWImJmQubmN5QnJlYWRjcnVtYi5wYXJlbnQpe3ZhciBmPVwiZnVuY3Rpb25cIj09dHlwZW9mIGQubmN5QnJlYWRjcnVtYi5wYXJlbnQsZz1mP2QubmN5QnJlYWRjcnVtYi5wYXJlbnQoaCk6ZC5uY3lCcmVhZGNydW1iLnBhcmVudDtpZihnKXJldHVybiBnfXJldHVybiBpKGQpfTtyZXR1cm57Z2V0VGVtcGxhdGU6ZnVuY3Rpb24oYil7cmV0dXJuIGEudGVtcGxhdGVVcmw/bnVsbDpiW2EudGVtcGxhdGVdP2JbYS50ZW1wbGF0ZV06YS50ZW1wbGF0ZX0sZ2V0VGVtcGxhdGVVcmw6ZnVuY3Rpb24oKXtyZXR1cm4gYS50ZW1wbGF0ZVVybH0sZ2V0U3RhdGVzQ2hhaW46ZnVuY3Rpb24oYyl7Zm9yKHZhciBkPVtdLGU9Yi4kY3VycmVudC5zZWxmLm5hbWU7ZTtlPWsoZSkpaWYoaihkLGUpLGMmJmQubGVuZ3RoKXJldHVybiBkO3JldHVybiBhLnByZWZpeFN0YXRlTmFtZSYmaihkLGEucHJlZml4U3RhdGVOYW1lKSxkfSxnZXRMYXN0U3RlcDpmdW5jdGlvbigpe3ZhciBhPXRoaXMuZ2V0U3RhdGVzQ2hhaW4oITApO3JldHVybiBhLmxlbmd0aD9hWzBdOmN9LCRnZXRMYXN0Vmlld1Njb3BlOmZ1bmN0aW9uKCl7cmV0dXJuIGh9fX1dfWZ1bmN0aW9uIGcoYSxjLGQpe3ZhciBlPXtib290c3RyYXAyOic8dWwgY2xhc3M9XCJicmVhZGNydW1iXCI+PGxpIG5nLXJlcGVhdD1cInN0ZXAgaW4gc3RlcHNcIiBuZy1zd2l0Y2g9XCIkbGFzdCB8fCAhIXN0ZXAuYWJzdHJhY3RcIiBuZy1jbGFzcz1cInthY3RpdmU6ICRsYXN0fVwiPjxhIG5nLXN3aXRjaC13aGVuPVwiZmFsc2VcIiBocmVmPVwie3tzdGVwLm5jeUJyZWFkY3J1bWJMaW5rfX1cIj57e3N0ZXAubmN5QnJlYWRjcnVtYkxhYmVsfX08L2E+PHNwYW4gbmctc3dpdGNoLXdoZW49XCJ0cnVlXCI+e3tzdGVwLm5jeUJyZWFkY3J1bWJMYWJlbH19PC9zcGFuPjxzcGFuIGNsYXNzPVwiZGl2aWRlclwiIG5nLWhpZGU9XCIkbGFzdFwiPi88L3NwYW4+PC9saT48L3VsPicsYm9vdHN0cmFwMzonPG9sIGNsYXNzPVwiYnJlYWRjcnVtYlwiPjxsaSBuZy1yZXBlYXQ9XCJzdGVwIGluIHN0ZXBzXCIgbmctY2xhc3M9XCJ7YWN0aXZlOiAkbGFzdH1cIiBuZy1zd2l0Y2g9XCIkbGFzdCB8fCAhIXN0ZXAuYWJzdHJhY3RcIj48YSBuZy1zd2l0Y2gtd2hlbj1cImZhbHNlXCIgaHJlZj1cInt7c3RlcC5uY3lCcmVhZGNydW1iTGlua319XCI+e3tzdGVwLm5jeUJyZWFkY3J1bWJMYWJlbH19PC9hPjxzcGFuIG5nLXN3aXRjaC13aGVuPVwidHJ1ZVwiPnt7c3RlcC5uY3lCcmVhZGNydW1iTGFiZWx9fTwvc3Bhbj48L2xpPjwvb2w+J307cmV0dXJue3Jlc3RyaWN0OlwiQUVcIixyZXBsYWNlOiEwLHNjb3BlOnt9LHRlbXBsYXRlOmMuZ2V0VGVtcGxhdGUoZSksdGVtcGxhdGVVcmw6Yy5nZXRUZW1wbGF0ZVVybCgpLGxpbms6e3Bvc3Q6ZnVuY3Rpb24oZSl7dmFyIGY9W10sZz1mdW5jdGlvbigpe2woZiksZj1bXTt2YXIgZD1jLiRnZXRMYXN0Vmlld1Njb3BlKCk7ZS5zdGVwcz1jLmdldFN0YXRlc0NoYWluKCksYi5mb3JFYWNoKGUuc3RlcHMsZnVuY3Rpb24oYil7aWYoYi5uY3lCcmVhZGNydW1iJiZiLm5jeUJyZWFkY3J1bWIubGFiZWwpe3ZhciBjPWEoYi5uY3lCcmVhZGNydW1iLmxhYmVsKTtiLm5jeUJyZWFkY3J1bWJMYWJlbD1jKGQpLGsoZixjLGQsYil9ZWxzZSBiLm5jeUJyZWFkY3J1bWJMYWJlbD1iLm5hbWV9KX07ZC4kb24oXCIkdmlld0NvbnRlbnRMb2FkZWRcIixmdW5jdGlvbihhKXthLnRhcmdldFNjb3BlLm5jeUJyZWFkY3J1bWJJZ25vcmV8fGcoKX0pLGcoKX19fX1mdW5jdGlvbiBoKGEsYixjKXtyZXR1cm57cmVzdHJpY3Q6XCJBXCIsc2NvcGU6e30sdGVtcGxhdGU6XCJ7e25jeUJyZWFkY3J1bWJMYWJlbH19XCIsY29tcGlsZTpmdW5jdGlvbihkLGUpe3ZhciBmPWQuYXR0cihlLiRhdHRyLm5jeUJyZWFkY3J1bWJMYXN0KTtyZXR1cm4gZiYmZC5odG1sKGYpLHtwb3N0OmZ1bmN0aW9uKGQpe3ZhciBlPVtdLGY9ZnVuY3Rpb24oKXtsKGUpLGU9W107dmFyIGM9Yi4kZ2V0TGFzdFZpZXdTY29wZSgpLGY9Yi5nZXRMYXN0U3RlcCgpO2lmKGYpaWYoZC5uY3lCcmVhZGNydW1iTGluaz1mLm5jeUJyZWFkY3J1bWJMaW5rLGYubmN5QnJlYWRjcnVtYiYmZi5uY3lCcmVhZGNydW1iLmxhYmVsKXt2YXIgZz1hKGYubmN5QnJlYWRjcnVtYi5sYWJlbCk7ZC5uY3lCcmVhZGNydW1iTGFiZWw9ZyhjKSxrKGUsZyxjLGQpfWVsc2UgZC5uY3lCcmVhZGNydW1iTGFiZWw9Zi5uYW1lfTtjLiRvbihcIiR2aWV3Q29udGVudExvYWRlZFwiLGZ1bmN0aW9uKGEpe2EudGFyZ2V0U2NvcGUubmN5QnJlYWRjcnVtYklnbm9yZXx8ZigpfSksZigpfX19fX1mdW5jdGlvbiBpKGEsYyxkKXtyZXR1cm57cmVzdHJpY3Q6XCJBXCIsc2NvcGU6e30sdGVtcGxhdGU6XCJ7e25jeUJyZWFkY3J1bWJDaGFpbn19XCIsY29tcGlsZTpmdW5jdGlvbihlLGYpe3ZhciBnPWUuYXR0cihmLiRhdHRyLm5jeUJyZWFkY3J1bWJUZXh0KTtnJiZlLmh0bWwoZyk7dmFyIGg9ZS5hdHRyKGYuJGF0dHIubmN5QnJlYWRjcnVtYlRleHRTZXBhcmF0b3IpfHxcIiAvIFwiO3JldHVybntwb3N0OmZ1bmN0aW9uKGUpe3ZhciBmPVtdLGc9ZnVuY3Rpb24oYSxjLGQpe2IuZm9yRWFjaChqKGMpLGZ1bmN0aW9uKGIpe3ZhciBjPWQuJHdhdGNoKGIsZnVuY3Rpb24oYSxiKXthIT09YiYmaSgpfSk7YS5wdXNoKGMpfSl9LGk9ZnVuY3Rpb24oKXtsKGYpLGY9W107dmFyIGQ9Yy4kZ2V0TGFzdFZpZXdTY29wZSgpLGk9Yy5nZXRTdGF0ZXNDaGFpbigpLGo9W107Yi5mb3JFYWNoKGksZnVuY3Rpb24oYil7aWYoYi5uY3lCcmVhZGNydW1iJiZiLm5jeUJyZWFkY3J1bWIubGFiZWwpe3ZhciBjPWEoYi5uY3lCcmVhZGNydW1iLmxhYmVsKTtqLnB1c2goYyhkKSksZyhmLGMsZCl9ZWxzZSBqLnB1c2goYi5uYW1lKX0pLGUubmN5QnJlYWRjcnVtYkNoYWluPWouam9pbihoKX07ZC4kb24oXCIkdmlld0NvbnRlbnRMb2FkZWRcIixmdW5jdGlvbihhKXthLnRhcmdldFNjb3BlLm5jeUJyZWFkY3J1bWJJZ25vcmV8fGkoKX0pLGkoKX19fX19dmFyIGo9ZnVuY3Rpb24oYSl7aWYoYS5leHByZXNzaW9ucylyZXR1cm4gYS5leHByZXNzaW9uczt2YXIgYz1bXTtyZXR1cm4gYi5mb3JFYWNoKGEucGFydHMsZnVuY3Rpb24oYSl7Yi5pc0Z1bmN0aW9uKGEpJiZjLnB1c2goYS5leHApfSksY30saz1mdW5jdGlvbihhLGMsZCxlKXtiLmZvckVhY2goaihjKSxmdW5jdGlvbihiKXt2YXIgZj1kLiR3YXRjaChiLGZ1bmN0aW9uKCl7ZS5uY3lCcmVhZGNydW1iTGFiZWw9YyhkKX0pO2EucHVzaChmKX0pfSxsPWZ1bmN0aW9uKGEpe2IuZm9yRWFjaChhLGZ1bmN0aW9uKGEpe2EoKX0pfTtnLiRpbmplY3Q9W1wiJGludGVycG9sYXRlXCIsXCIkYnJlYWRjcnVtYlwiLFwiJHJvb3RTY29wZVwiXSxoLiRpbmplY3Q9W1wiJGludGVycG9sYXRlXCIsXCIkYnJlYWRjcnVtYlwiLFwiJHJvb3RTY29wZVwiXSxpLiRpbmplY3Q9W1wiJGludGVycG9sYXRlXCIsXCIkYnJlYWRjcnVtYlwiLFwiJHJvb3RTY29wZVwiXSxiLm1vZHVsZShcIm5jeS1hbmd1bGFyLWJyZWFkY3J1bWJcIixbXCJ1aS5yb3V0ZXIuc3RhdGVcIl0pLnByb3ZpZGVyKFwiJGJyZWFkY3J1bWJcIixmKS5kaXJlY3RpdmUoXCJuY3lCcmVhZGNydW1iXCIsZykuZGlyZWN0aXZlKFwibmN5QnJlYWRjcnVtYkxhc3RcIixoKS5kaXJlY3RpdmUoXCJuY3lCcmVhZGNydW1iVGV4dFwiLGkpfSh3aW5kb3csd2luZG93LmFuZ3VsYXIpO1xuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zcmMvYXBwL2NvbXBvbmVudHMvYW5ndWxhckJyZWFkY3J1bWIvYW5ndWxhckJyZWFkY3J1bWIuanNcbiAqKi8iLCJpbXBvcnQgbW9tZW50IGZyb20gJ21vbWVudCc7XG5cbihmdW5jdGlvbiAobW9tZW50KSB7XG5cbiAgJ3VzZSBzdHJpY3QnO1xuICB2YXIgbW9kdWxlTmFtZSA9IFwibmdNYXRlcmlhbERhdGVQaWNrZXJcIjtcblxuICB2YXIgVklFV19TVEFURVMgPSB7XG4gICAgREFURTogMCxcbiAgICBIT1VSOiAxLFxuICAgIE1JTlVURTogMlxuICB9O1xuXG4gIHZhciBjc3MgPSBmdW5jdGlvbiAoZWwsIG5hbWUpIHtcbiAgICBpZiAoJ2pRdWVyeScgaW4gd2luZG93KSB7XG4gICAgICByZXR1cm4galF1ZXJ5KGVsKS5jc3MobmFtZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGVsID0gYW5ndWxhci5lbGVtZW50KGVsKTtcbiAgICAgIHJldHVybiAoJ2dldENvbXB1dGVkU3R5bGUnIGluIHdpbmRvdykgPyB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZShlbFswXSlbbmFtZV0gOiBlbC5jc3MobmFtZSk7XG4gICAgfVxuICB9O1xuXG4gIHZhciB0ZW1wbGF0ZSA9ICc8bWQtZGlhbG9nIGNsYXNzPVwiZHRwXCIgbGF5b3V0PVwiY29sdW1uXCIgc3R5bGU9XCJ3aWR0aDogMzAwcHg7XCI+J1xuICAgICsgJyAgICA8bWQtZGlhbG9nLWNvbnRlbnQgY2xhc3M9XCJkdHAtY29udGVudFwiPidcbiAgICArICcgICAgICAgIDxkaXYgY2xhc3M9XCJkdHAtZGF0ZS12aWV3XCI+J1xuICAgICsgJyAgICAgICAgICAgIDxoZWFkZXIgY2xhc3M9XCJkdHAtaGVhZGVyXCI+J1xuICAgICsgJyAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZHRwLWFjdHVhbC1kYXlcIiBuZy1zaG93PVwicGlja2VyLmRhdGVNb2RlXCI+e3twaWNrZXIuY3VycmVudERhdGUuZm9ybWF0KFwiZGRkZFwiKX19PC9kaXY+J1xuICAgICsgJyAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZHRwLWFjdHVhbC1kYXlcIiBuZy1zaG93PVwicGlja2VyLnRpbWVNb2RlXCI+e3twaWNrZXIucGFyYW1zLnNob3J0VGltZSA/IHBpY2tlci5jdXJyZW50RGF0ZS5mb3JtYXQoXCJBXCIpIDogXCIgXCJ9fTwvZGl2PidcbiAgICArICcgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImR0cC1jbG9zZSB0ZXh0LXJpZ2h0XCI+J1xuICAgICsgJyAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj1cIiNcIiBtZGMtZHRwLW5vY2xpY2sgbmctY2xpY2s9XCJwaWNrZXIuaGlkZSgpXCI+JnRpbWVzOzwvYT4nXG4gICAgKyAnICAgICAgICAgICAgICAgIDwvZGl2PidcbiAgICArICcgICAgICAgICAgICA8L2hlYWRlcj4nXG4gICAgKyAnICAgICAgICAgICAgPGRpdiBjbGFzcz1cImR0cC1kYXRlXCIgbmctc2hvdz1cInBpY2tlci5wYXJhbXMuZGF0ZVwiPidcbiAgICArICcgICAgICAgICAgICAgICAgPGRpdiBsYXlvdXQ9XCJjb2x1bW5cIj4nXG4gICAgKyAnICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZHRwLWFjdHVhbC1tb250aFwiPnt7cGlja2VyLmN1cnJlbnREYXRlLmZvcm1hdChcIk1NTVwiKSB8IHVwcGVyY2FzZX19PC9kaXY+J1xuICAgICsgJyAgICAgICAgICAgICAgICA8L2Rpdj4nXG4gICAgKyAnICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJkdHAtYWN0dWFsLW51bVwiPnt7cGlja2VyLmN1cnJlbnREYXRlLmZvcm1hdChcIkREXCIpfX08L2Rpdj4nXG4gICAgKyAnICAgICAgICAgICAgICAgIDxkaXYgbGF5b3V0PVwicm93XCI+J1xuICAgICsgJyA8ZGl2IG5nLWNsaWNrPVwicGlja2VyLmluY3JlbWVudFllYXIoLTEpXCIgY2xhc3M9XCJkdHAteWVhci1idG4gZHRwLXllYXItYnRuLXByZXZcIiBmbGV4PVwiMzBcIj48c3BhbiBuZy1pZj1cInBpY2tlci5pc1ByZXZpb3VzWWVhclZpc2libGUoKVwiID4mI3gyNUIyOzwvc3Bhbj48L2Rpdj4nXG4gICAgKyAnICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZHRwLWFjdHVhbC15ZWFyXCIgZmxleD57e3BpY2tlci5jdXJyZW50RGF0ZS5mb3JtYXQoXCJZWVlZXCIpfX08L2Rpdj4nXG4gICAgKyAnIDxkaXYgbmctY2xpY2s9XCJwaWNrZXIuaW5jcmVtZW50WWVhcigxKVwiIGNsYXNzPVwiZHRwLXllYXItYnRuIGR0cC15ZWFyLWJ0bi1uZXh0XCIgZmxleD1cIjMwXCI+PHNwYW4gbmctaWY9XCJwaWNrZXIuaXNOZXh0WWVhclZpc2libGUoKVwiID4mI3gyNUJDOzwvc3Bhbj48L2Rpdj4nXG4gICAgKyAnICAgICAgICAgICAgICAgIDwvZGl2PidcbiAgICArICcgICAgICAgICAgICA8L2Rpdj4nLy9zdGFydCB0aW1lXG4gICAgKyAnICAgICAgICAgICAgPGRpdiBjbGFzcz1cImR0cC10aW1lXCIgbmctc2hvdz1cInBpY2tlci5wYXJhbXMudGltZSAmJiAhcGlja2VyLnBhcmFtcy5kYXRlXCI+J1xuICAgICsgJyAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZHRwLWFjdHVhbC1tYXh0aW1lXCI+e3twaWNrZXIuY3VycmVudE5lYXJlc3Q1TWludXRlKCkuZm9ybWF0KHBpY2tlci5wYXJhbXMuc2hvcnRUaW1lID8gXCJoaDptbVwiIDogXCJISDptbVwiKX19PC9kaXY+J1xuICAgICsgJyAgICAgICAgICAgIDwvZGl2PidcbiAgICArICcgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiZHRwLXBpY2tlclwiPidcbiAgICArICcgICAgICAgICAgICAgICAgPG1kYy1kYXRldGltZS1waWNrZXItY2FsZW5kYXIgZGF0ZT1cInBpY2tlci5jdXJyZW50RGF0ZVwiIHBpY2tlcj1cInBpY2tlclwiIGNsYXNzPVwiZHRwLXBpY2tlci1jYWxlbmRhclwiIG5nLXNob3c9XCJwaWNrZXIuY3VycmVudFZpZXcgPT09IHBpY2tlci5WSUVXUy5EQVRFXCI+PC9tZGMtZGF0ZXRpbWUtcGlja2VyLWNhbGVuZGFyPidcbiAgICArICcgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImR0cC1waWNrZXItZGF0ZXRpbWVcIiBuZy1zaG93PVwicGlja2VyLmN1cnJlbnRWaWV3ICE9PSBwaWNrZXIuVklFV1MuREFURVwiPidcbiAgICArICcgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJkdHAtYWN0dWFsLW1lcmlkaWVuXCI+J1xuICAgICsgJyAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJsZWZ0IHAyMFwiPidcbiAgICArICcgICAgICAgICAgICAgICAgICAgICAgICAgICAgPGEgaHJlZj1cIiNcIiBtZGMtZHRwLW5vY2xpY2sgY2xhc3M9XCJkdHAtbWVyaWRpZW4tYW1cIiBuZy1jbGFzcz1cIntzZWxlY3RlZDogcGlja2VyLm1lcmlkaWVuID09IFxcJ0FNXFwnfVwiIG5nLWNsaWNrPVwicGlja2VyLnNlbGVjdEFNKClcIj57e3BpY2tlci5wYXJhbXMuYW1UZXh0fX08L2E+J1xuICAgICsgJyAgICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PidcbiAgICArICcgICAgICAgICAgICAgICAgICAgICAgICA8ZGl2IG5nLXNob3c9XCIhcGlja2VyLnRpbWVNb2RlXCIgY2xhc3M9XCJkdHAtYWN0dWFsLXRpbWUgcDYwXCI+e3twaWNrZXIuY3VycmVudE5lYXJlc3Q1TWludXRlKCkuZm9ybWF0KHBpY2tlci5wYXJhbXMuc2hvcnRUaW1lID8gXCJoaDptbVwiIDogXCJISDptbVwiKX19PC9kaXY+J1xuICAgICsgJyAgICAgICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJyaWdodCBwMjBcIj4nXG4gICAgKyAnICAgICAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9XCIjXCIgbWRjLWR0cC1ub2NsaWNrIGNsYXNzPVwiZHRwLW1lcmlkaWVuLXBtXCIgbmctY2xhc3M9XCJ7c2VsZWN0ZWQ6IHBpY2tlci5tZXJpZGllbiA9PSBcXCdQTVxcJ31cIiBuZy1jbGljaz1cInBpY2tlci5zZWxlY3RQTSgpXCI+e3twaWNrZXIucGFyYW1zLnBtVGV4dH19PC9hPidcbiAgICArICcgICAgICAgICAgICAgICAgICAgICAgICA8L2Rpdj4nXG4gICAgKyAnICAgICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cImNsZWFyZml4XCI+PC9kaXY+J1xuICAgICsgJyAgICAgICAgICAgICAgICAgICAgPC9kaXY+J1xuICAgICsgJyAgICAgICAgICAgICAgICAgICAgPG1kYy1kYXRldGltZS1waWNrZXItY2xvY2sgbW9kZT1cImhvdXJzXCIgbmctaWY9XCJwaWNrZXIuY3VycmVudFZpZXcgPT09IHBpY2tlci5WSUVXUy5IT1VSXCI+PC9tZGMtZGF0ZXRpbWUtcGlja2VyLWNsb2NrPidcbiAgICArICcgICAgICAgICAgICAgICAgICAgIDxtZGMtZGF0ZXRpbWUtcGlja2VyLWNsb2NrIG1vZGU9XCJtaW51dGVzXCIgbmctaWY9XCJwaWNrZXIuY3VycmVudFZpZXcgPT09IHBpY2tlci5WSUVXUy5NSU5VVEVcIj48L21kYy1kYXRldGltZS1waWNrZXItY2xvY2s+J1xuICAgICsgJyAgICAgICAgICAgICAgICA8L2Rpdj4nXG4gICAgKyAnICAgICAgICAgICAgPC9kaXY+J1xuICAgICsgJyAgICAgICAgPC9kaXY+J1xuICAgICsgJyAgICA8L21kLWRpYWxvZy1jb250ZW50PidcbiAgICArICcgICAgPG1kLWRpYWxvZy1hY3Rpb25zIGNsYXNzPVwiZHRwLWJ1dHRvbnNcIj4nXG4gICAgKyAnICAgICAgICAgICAgPG1kLWJ1dHRvbiBjbGFzcz1cImR0cC1idG4tY2FuY2VsIG1kLWJ1dHRvblwiIG5nLWNsaWNrPVwicGlja2VyLmNhbmNlbCgpXCI+IHt7cGlja2VyLnBhcmFtcy5jYW5jZWxUZXh0fX08L21kLWJ1dHRvbj4nXG4gICAgKyAnICAgICAgICAgICAgPG1kLWJ1dHRvbiBjbGFzcz1cImR0cC1idG4tb2sgbWQtYnV0dG9uXCIgbmctY2xpY2s9XCJwaWNrZXIub2soKVwiPiB7e3BpY2tlci5wYXJhbXMub2tUZXh0fX08L21kLWJ1dHRvbj4nXG4gICAgKyAnICAgICAgPC9tZC1kaWFsb2ctYWN0aW9ucz4nXG4gICAgKyAnPC9tZC1kaWFsb2c+JztcblxuXG4gIGFuZ3VsYXIubW9kdWxlKG1vZHVsZU5hbWUsIFsnbmdNYXRlcmlhbCddKVxuICAgIC5wcm92aWRlcignbWRjRGF0ZXRpbWVQaWNrZXJEZWZhdWx0TG9jYWxlJywgZnVuY3Rpb24gKCkge1xuICAgICAgdGhpcy5sb2NhbGUgPSAnZW4nO1xuXG4gICAgICB0aGlzLiRnZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmxvY2FsZTtcbiAgICAgIH07XG5cbiAgICAgIHRoaXMuc2V0RGVmYXVsdExvY2FsZSA9IGZ1bmN0aW9uIChsb2NhbGVTdHJpbmcpIHtcbiAgICAgICAgdGhpcy5sb2NhbGUgPSBsb2NhbGVTdHJpbmc7XG4gICAgICB9O1xuICAgIH0pXG4gICAgLmRpcmVjdGl2ZSgnbWRjRGF0ZXRpbWVQaWNrZXInLCBbJyRtZERpYWxvZycsXG4gICAgICBmdW5jdGlvbiAoJG1kRGlhbG9nKSB7XG5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICByZXN0cmljdDogJ0EnLFxuICAgICAgICAgIHJlcXVpcmU6ICduZ01vZGVsJyxcbiAgICAgICAgICBzY29wZToge1xuICAgICAgICAgICAgY3VycmVudERhdGU6ICc9bmdNb2RlbCcsXG4gICAgICAgICAgICB0aW1lOiAnPScsXG4gICAgICAgICAgICBkYXRlOiAnPScsXG4gICAgICAgICAgICBtaW5EYXRlOiAnPScsXG4gICAgICAgICAgICBtYXhEYXRlOiAnPScsXG4gICAgICAgICAgICBzaG9ydFRpbWU6ICc9JyxcbiAgICAgICAgICAgIGZvcm1hdDogJ0AnLFxuICAgICAgICAgICAgY2FuY2VsVGV4dDogJ0AnLFxuICAgICAgICAgICAgb2tUZXh0OiAnQCcsXG4gICAgICAgICAgICBsYW5nOiAnQCcsXG4gICAgICAgICAgICBhbVRleHQ6ICdAJyxcbiAgICAgICAgICAgIHBtVGV4dDogJ0AnXG4gICAgICAgICAgfSxcbiAgICAgICAgICBsaW5rOiBmdW5jdGlvbiAoc2NvcGUsIGVsZW1lbnQsIGF0dHJzLCBuZ01vZGVsKSB7XG4gICAgICAgICAgICB2YXIgaXNPbiA9IGZhbHNlO1xuICAgICAgICAgICAgaWYgKCFzY29wZS5mb3JtYXQpIHtcbiAgICAgICAgICAgICAgaWYgKHNjb3BlLmRhdGUgJiYgc2NvcGUudGltZSkge1xuICAgICAgICAgICAgICAgIHNjb3BlLmZvcm1hdCA9ICdZWVlZLU1NLUREIEhIOm1tOnNzJztcbiAgICAgICAgICAgICAgfSBlbHNlIGlmIChzY29wZS5kYXRlKSB7XG4gICAgICAgICAgICAgICAgc2NvcGUuZm9ybWF0ID0gJ1lZWVktTU0tREQnO1xuICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIHNjb3BlLmZvcm1hdCA9ICdISDptbSc7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKGFuZ3VsYXIuaXNTdHJpbmcoc2NvcGUuY3VycmVudERhdGUpICYmIHNjb3BlLmN1cnJlbnREYXRlICE9PSAnJykge1xuICAgICAgICAgICAgICBzY29wZS5jdXJyZW50RGF0ZSA9IG1vbWVudChzY29wZS5jdXJyZW50RGF0ZSwgc2NvcGUuZm9ybWF0KTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKG5nTW9kZWwpIHtcbiAgICAgICAgICAgICAgbmdNb2RlbC4kZm9ybWF0dGVycy5wdXNoKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgICAgIGlmICh0eXBlb2YgdmFsdWUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciBtID0gbW9tZW50KHZhbHVlKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gbS5pc1ZhbGlkKCkgPyBtLmZvcm1hdChzY29wZS5mb3JtYXQpIDogJyc7XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBlbGVtZW50LmF0dHIoJ3JlYWRvbmx5JywgJycpO1xuICAgICAgICAgICAgLy9AVE9ETyBjdXN0b20gZXZlbnQgdG8gdHJpZ2dlciBpbnB1dFxuICAgICAgICAgICAgZWxlbWVudC5vbignZm9jdXMnLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgIGVsZW1lbnQuYmx1cigpO1xuICAgICAgICAgICAgICBpZiAoaXNPbikge1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBpc09uID0gdHJ1ZTtcbiAgICAgICAgICAgICAgdmFyIG9wdGlvbnMgPSB7fTtcbiAgICAgICAgICAgICAgZm9yICh2YXIgaSBpbiBhdHRycykge1xuICAgICAgICAgICAgICAgIGlmIChzY29wZS5oYXNPd25Qcm9wZXJ0eShpKSAmJiAhYW5ndWxhci5pc1VuZGVmaW5lZChzY29wZVtpXSkpIHtcbiAgICAgICAgICAgICAgICAgIG9wdGlvbnNbaV0gPSBzY29wZVtpXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgb3B0aW9ucy5jdXJyZW50RGF0ZSA9IHNjb3BlLmN1cnJlbnREYXRlO1xuICAgICAgICAgICAgICB2YXIgbG9jYWxzID0ge29wdGlvbnM6IG9wdGlvbnN9O1xuICAgICAgICAgICAgICAkbWREaWFsb2cuc2hvdyh7XG4gICAgICAgICAgICAgICAgdGVtcGxhdGU6IHRlbXBsYXRlLFxuICAgICAgICAgICAgICAgIGNvbnRyb2xsZXI6IFBsdWdpbkNvbnRyb2xsZXIsXG4gICAgICAgICAgICAgICAgY29udHJvbGxlckFzOiAncGlja2VyJyxcbiAgICAgICAgICAgICAgICBsb2NhbHM6IGxvY2FscyxcbiAgICAgICAgICAgICAgICBvcGVuRnJvbTogZWxlbWVudCxcbiAgICAgICAgICAgICAgICBwYXJlbnQ6IGFuZ3VsYXIuZWxlbWVudChkb2N1bWVudC5ib2R5KSxcbiAgICAgICAgICAgICAgICBiaW5kVG9Db250cm9sbGVyOiB0cnVlLFxuICAgICAgICAgICAgICAgIGRpc2FibGVQYXJlbnRTY3JvbGw6IGZhbHNlXG4gICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHYpIHtcbiAgICAgICAgICAgICAgICAgIHNjb3BlLmN1cnJlbnREYXRlID0gdiA/IHYuX2QgOiB2O1xuICAgICAgICAgICAgICAgICAgaXNPbiA9IGZhbHNlO1xuICAgICAgICAgICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgIGlzT24gPSBmYWxzZTtcbiAgICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICA7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICB9XSlcbiAgO1xuXG4gIHZhciBQbHVnaW5Db250cm9sbGVyID0gZnVuY3Rpb24gKCRzY29wZSwgJG1kRGlhbG9nLCBtZGNEYXRldGltZVBpY2tlckRlZmF1bHRMb2NhbGUpIHtcbiAgICB0aGlzLmN1cnJlbnRWaWV3ID0gVklFV19TVEFURVMuREFURTtcbiAgICB0aGlzLl9kaWFsb2cgPSAkbWREaWFsb2c7XG5cbiAgICB0aGlzLm1pbkRhdGU7XG4gICAgdGhpcy5tYXhEYXRlO1xuXG4gICAgdGhpcy5fYXR0YWNoZWRFdmVudHMgPSBbXTtcbiAgICB0aGlzLlZJRVdTID0gVklFV19TVEFURVM7XG5cbiAgICB0aGlzLnBhcmFtcyA9IHtcbiAgICAgIGRhdGU6IHRydWUsXG4gICAgICB0aW1lOiB0cnVlLFxuICAgICAgZm9ybWF0OiAnWVlZWS1NTS1ERCcsXG4gICAgICBtaW5EYXRlOiBudWxsLFxuICAgICAgbWF4RGF0ZTogbnVsbCxcbiAgICAgIGN1cnJlbnREYXRlOiBudWxsLFxuICAgICAgbGFuZzogbWRjRGF0ZXRpbWVQaWNrZXJEZWZhdWx0TG9jYWxlLFxuICAgICAgd2Vla1N0YXJ0OiAwLFxuICAgICAgc2hvcnRUaW1lOiBmYWxzZSxcbiAgICAgIGNhbmNlbFRleHQ6ICdDYW5jZWwnLFxuICAgICAgb2tUZXh0OiAnT0snLFxuICAgICAgYW1UZXh0OiAnQU0nLFxuICAgICAgcG1UZXh0OiAnUE0nXG4gICAgfTtcblxuICAgIHRoaXMubWVyaWRpZW4gPSAnQU0nO1xuICAgIHRoaXMucGFyYW1zID0gYW5ndWxhci5leHRlbmQodGhpcy5wYXJhbXMsIHRoaXMub3B0aW9ucyk7XG4gICAgdGhpcy5pbml0KCk7XG4gIH07XG4gIFBsdWdpbkNvbnRyb2xsZXIuJGluamVjdCA9IFsnJHNjb3BlJywgJyRtZERpYWxvZycsICdtZGNEYXRldGltZVBpY2tlckRlZmF1bHRMb2NhbGUnXTtcbiAgUGx1Z2luQ29udHJvbGxlci5wcm90b3R5cGUgPSB7XG4gICAgaW5pdDogZnVuY3Rpb24gKCkge1xuICAgICAgdGhpcy50aW1lTW9kZSA9IHRoaXMucGFyYW1zLnRpbWUgJiYgIXRoaXMucGFyYW1zLmRhdGU7XG4gICAgICB0aGlzLmRhdGVNb2RlID0gdGhpcy5wYXJhbXMuZGF0ZTtcbiAgICAgIHRoaXMuaW5pdERhdGVzKCk7XG4gICAgICB0aGlzLnN0YXJ0KCk7XG4gICAgfSxcbiAgICBjdXJyZW50TmVhcmVzdDVNaW51dGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciBkYXRlID0gdGhpcy5jdXJyZW50RGF0ZSB8fCBtb21lbnQoKTtcbiAgICAgIHZhciBtaW51dGVzID0gKDUgKiBNYXRoLnJvdW5kKGRhdGUubWludXRlKCkgLyA1KSk7XG4gICAgICBpZiAobWludXRlcyA+PSA2MCkge1xuICAgICAgICBtaW51dGVzID0gNTU7IC8vYWx3YXlzIHB1c2ggZG93blxuICAgICAgfVxuICAgICAgcmV0dXJuIG1vbWVudChkYXRlKS5taW51dGVzKG1pbnV0ZXMpO1xuICAgIH0sXG4gICAgaW5pdERhdGVzOiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgdGhhdCA9IHRoaXM7XG4gICAgICB2YXIgX2RhdGVQYXJhbSA9IGZ1bmN0aW9uIChpbnB1dCwgZmFsbGJhY2spIHtcbiAgICAgICAgdmFyIHJldCA9IG51bGw7XG4gICAgICAgIGlmIChhbmd1bGFyLmlzRGVmaW5lZChpbnB1dCkgJiYgaW5wdXQgIT09IG51bGwgJiYgaW5wdXQgIT09ICcnKSB7XG4gICAgICAgICAgaWYgKGFuZ3VsYXIuaXNTdHJpbmcoaW5wdXQpKSB7XG4gICAgICAgICAgICBpZiAodHlwZW9mKHRoYXQucGFyYW1zLmZvcm1hdCkgIT09ICd1bmRlZmluZWQnICYmIHRoYXQucGFyYW1zLmZvcm1hdCAhPT0gbnVsbCkge1xuICAgICAgICAgICAgICByZXQgPSBtb21lbnQoaW5wdXQsIHRoYXQucGFyYW1zLmZvcm1hdCkubG9jYWxlKHRoYXQucGFyYW1zLmxhbmcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgIHJldCA9IG1vbWVudChpbnB1dCkubG9jYWxlKHRoYXQucGFyYW1zLmxhbmcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmIChhbmd1bGFyLmlzRGF0ZShpbnB1dCkpIHtcbiAgICAgICAgICAgICAgdmFyIHggPSBpbnB1dC5nZXRUaW1lKCk7XG4gICAgICAgICAgICAgIHJldCA9IG1vbWVudCh4LCBcInhcIikubG9jYWxlKHRoYXQucGFyYW1zLmxhbmcpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChpbnB1dC5faXNBTW9tZW50T2JqZWN0KSB7XG4gICAgICAgICAgICAgIHJldCA9IGlucHV0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICByZXQgPSBmYWxsYmFjaztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcmV0O1xuICAgICAgfTtcblxuICAgICAgdGhpcy5jdXJyZW50RGF0ZSA9IF9kYXRlUGFyYW0odGhpcy5wYXJhbXMuY3VycmVudERhdGUsIG1vbWVudCgpKTtcbiAgICAgIHRoaXMubWluRGF0ZSA9IF9kYXRlUGFyYW0odGhpcy5wYXJhbXMubWluRGF0ZSk7XG4gICAgICB0aGlzLm1heERhdGUgPSBfZGF0ZVBhcmFtKHRoaXMucGFyYW1zLm1heERhdGUpO1xuICAgICAgdGhpcy5zZWxlY3REYXRlKHRoaXMuY3VycmVudERhdGUpO1xuICAgIH0sXG4gICAgaW5pdERhdGU6IGZ1bmN0aW9uIChkKSB7XG4gICAgICB0aGlzLmN1cnJlbnRWaWV3ID0gVklFV19TVEFURVMuREFURTtcbiAgICB9LFxuICAgIGluaXRIb3VyczogZnVuY3Rpb24gKCkge1xuICAgICAgdGhpcy5jdXJyZW50VmlldyA9IFZJRVdfU1RBVEVTLkhPVVI7XG4gICAgfSxcbiAgICBpbml0TWludXRlczogZnVuY3Rpb24gKCkge1xuICAgICAgdGhpcy5jdXJyZW50VmlldyA9IFZJRVdfU1RBVEVTLk1JTlVURTtcbiAgICB9LFxuICAgIGlzQWZ0ZXJNaW5EYXRlOiBmdW5jdGlvbiAoZGF0ZSwgY2hlY2tIb3VyLCBjaGVja01pbnV0ZSkge1xuICAgICAgdmFyIF9yZXR1cm4gPSB0cnVlO1xuXG4gICAgICBpZiAodHlwZW9mKHRoaXMubWluRGF0ZSkgIT09ICd1bmRlZmluZWQnICYmIHRoaXMubWluRGF0ZSAhPT0gbnVsbCkge1xuICAgICAgICB2YXIgX21pbkRhdGUgPSBtb21lbnQodGhpcy5taW5EYXRlKTtcbiAgICAgICAgdmFyIF9kYXRlID0gbW9tZW50KGRhdGUpO1xuXG4gICAgICAgIGlmICghY2hlY2tIb3VyICYmICFjaGVja01pbnV0ZSkge1xuICAgICAgICAgIF9taW5EYXRlLmhvdXIoMCk7XG4gICAgICAgICAgX21pbkRhdGUubWludXRlKDApO1xuXG4gICAgICAgICAgX2RhdGUuaG91cigwKTtcbiAgICAgICAgICBfZGF0ZS5taW51dGUoMCk7XG4gICAgICAgIH1cblxuICAgICAgICBfbWluRGF0ZS5zZWNvbmQoMCk7XG4gICAgICAgIF9kYXRlLnNlY29uZCgwKTtcbiAgICAgICAgX21pbkRhdGUubWlsbGlzZWNvbmQoMCk7XG4gICAgICAgIF9kYXRlLm1pbGxpc2Vjb25kKDApO1xuXG4gICAgICAgIGlmICghY2hlY2tNaW51dGUpIHtcbiAgICAgICAgICBfZGF0ZS5taW51dGUoMCk7XG4gICAgICAgICAgX21pbkRhdGUubWludXRlKDApO1xuXG4gICAgICAgICAgX3JldHVybiA9IChwYXJzZUludChfZGF0ZS5mb3JtYXQoXCJYXCIpKSA+PSBwYXJzZUludChfbWluRGF0ZS5mb3JtYXQoXCJYXCIpKSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgX3JldHVybiA9IChwYXJzZUludChfZGF0ZS5mb3JtYXQoXCJYXCIpKSA+PSBwYXJzZUludChfbWluRGF0ZS5mb3JtYXQoXCJYXCIpKSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgcmV0dXJuIF9yZXR1cm47XG4gICAgfSxcbiAgICBpc0JlZm9yZU1heERhdGU6IGZ1bmN0aW9uIChkYXRlLCBjaGVja1RpbWUsIGNoZWNrTWludXRlKSB7XG4gICAgICB2YXIgX3JldHVybiA9IHRydWU7XG5cbiAgICAgIGlmICh0eXBlb2YodGhpcy5tYXhEYXRlKSAhPT0gJ3VuZGVmaW5lZCcgJiYgdGhpcy5tYXhEYXRlICE9PSBudWxsKSB7XG4gICAgICAgIHZhciBfbWF4RGF0ZSA9IG1vbWVudCh0aGlzLm1heERhdGUpO1xuICAgICAgICB2YXIgX2RhdGUgPSBtb21lbnQoZGF0ZSk7XG5cbiAgICAgICAgaWYgKCFjaGVja1RpbWUgJiYgIWNoZWNrTWludXRlKSB7XG4gICAgICAgICAgX21heERhdGUuaG91cigwKTtcbiAgICAgICAgICBfbWF4RGF0ZS5taW51dGUoMCk7XG5cbiAgICAgICAgICBfZGF0ZS5ob3VyKDApO1xuICAgICAgICAgIF9kYXRlLm1pbnV0ZSgwKTtcbiAgICAgICAgfVxuXG4gICAgICAgIF9tYXhEYXRlLnNlY29uZCgwKTtcbiAgICAgICAgX2RhdGUuc2Vjb25kKDApO1xuICAgICAgICBfbWF4RGF0ZS5taWxsaXNlY29uZCgwKTtcbiAgICAgICAgX2RhdGUubWlsbGlzZWNvbmQoMCk7XG5cbiAgICAgICAgaWYgKCFjaGVja01pbnV0ZSkge1xuICAgICAgICAgIF9kYXRlLm1pbnV0ZSgwKTtcbiAgICAgICAgICBfbWF4RGF0ZS5taW51dGUoMCk7XG5cbiAgICAgICAgICBfcmV0dXJuID0gKHBhcnNlSW50KF9kYXRlLmZvcm1hdChcIlhcIikpIDw9IHBhcnNlSW50KF9tYXhEYXRlLmZvcm1hdChcIlhcIikpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICBfcmV0dXJuID0gKHBhcnNlSW50KF9kYXRlLmZvcm1hdChcIlhcIikpIDw9IHBhcnNlSW50KF9tYXhEYXRlLmZvcm1hdChcIlhcIikpKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gX3JldHVybjtcbiAgICB9LFxuICAgIHNlbGVjdERhdGU6IGZ1bmN0aW9uIChkYXRlKSB7XG4gICAgICBpZiAoZGF0ZSkge1xuICAgICAgICB0aGlzLmN1cnJlbnREYXRlID0gbW9tZW50KGRhdGUpO1xuICAgICAgICBpZiAoIXRoaXMuaXNBZnRlck1pbkRhdGUodGhpcy5jdXJyZW50RGF0ZSkpIHtcbiAgICAgICAgICB0aGlzLmN1cnJlbnREYXRlID0gbW9tZW50KHRoaXMubWluRGF0ZSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXRoaXMuaXNCZWZvcmVNYXhEYXRlKHRoaXMuY3VycmVudERhdGUpKSB7XG4gICAgICAgICAgdGhpcy5jdXJyZW50RGF0ZSA9IG1vbWVudCh0aGlzLm1heERhdGUpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY3VycmVudERhdGUubG9jYWxlKHRoaXMucGFyYW1zLmxhbmcpO1xuICAgICAgICB0aGlzLmNhbGVuZGFyU3RhcnQgPSBtb21lbnQodGhpcy5jdXJyZW50RGF0ZSk7XG4gICAgICAgIHRoaXMubWVyaWRpZW4gPSB0aGlzLmN1cnJlbnREYXRlLmhvdXIoKSA+PSAxMiA/ICdQTScgOiAnQU0nO1xuICAgICAgfVxuICAgIH0sXG4gICAgc2V0TmFtZTogZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHRleHQgPSBcIlwiO1xuICAgICAgdmFyIHBvc3NpYmxlID0gXCJBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OVwiO1xuXG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IDU7IGkrKykge1xuICAgICAgICB0ZXh0ICs9IHBvc3NpYmxlLmNoYXJBdChNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBwb3NzaWJsZS5sZW5ndGgpKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRleHQ7XG4gICAgfSxcbiAgICBpc1BNOiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdGhpcy5tZXJpZGllbiA9PT0gJ1BNJztcbiAgICB9LFxuICAgIGluY3JlbWVudFllYXI6IGZ1bmN0aW9uIChhbW91bnQpIHtcbiAgICAgIGlmIChhbW91bnQgPT09IDEgJiYgdGhpcy5pc05leHRZZWFyVmlzaWJsZSgpKSB7XG4gICAgICAgIHRoaXMuc2VsZWN0RGF0ZSh0aGlzLmN1cnJlbnREYXRlLmFkZCgneWVhcicsIGFtb3VudCkpO1xuICAgICAgfVxuXG4gICAgICBpZiAoYW1vdW50ID09PSAtMSAmJiB0aGlzLmlzUHJldmlvdXNZZWFyVmlzaWJsZSgpKSB7XG4gICAgICAgIHRoaXMuc2VsZWN0RGF0ZSh0aGlzLmN1cnJlbnREYXRlLmFkZCgneWVhcicsIGFtb3VudCkpO1xuICAgICAgfVxuICAgIH0sXG4gICAgaXNQcmV2aW91c01vbnRoVmlzaWJsZTogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMuY2FsZW5kYXJTdGFydCAmJiB0aGlzLmlzQWZ0ZXJNaW5EYXRlKG1vbWVudCh0aGlzLmNhbGVuZGFyU3RhcnQpLnN0YXJ0T2YoJ21vbnRoJyksIGZhbHNlLCBmYWxzZSk7XG4gICAgfSxcbiAgICBpc05leHRNb250aFZpc2libGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzLmNhbGVuZGFyU3RhcnQgJiYgdGhpcy5pc0JlZm9yZU1heERhdGUobW9tZW50KHRoaXMuY2FsZW5kYXJTdGFydCkuZW5kT2YoJ21vbnRoJyksIGZhbHNlLCBmYWxzZSk7XG4gICAgfSxcbiAgICBpc1ByZXZpb3VzWWVhclZpc2libGU6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB0aGlzLmNhbGVuZGFyU3RhcnQgJiYgdGhpcy5pc0FmdGVyTWluRGF0ZShtb21lbnQodGhpcy5jYWxlbmRhclN0YXJ0KS5zdGFydE9mKCd5ZWFyJyksIGZhbHNlLCBmYWxzZSk7XG4gICAgfSxcbiAgICBpc05leHRZZWFyVmlzaWJsZTogZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXMuY2FsZW5kYXJTdGFydCAmJiB0aGlzLmlzQmVmb3JlTWF4RGF0ZShtb21lbnQodGhpcy5jYWxlbmRhclN0YXJ0KS5lbmRPZigneWVhcicpLCBmYWxzZSwgZmFsc2UpO1xuICAgIH0sXG4gICAgaXNIb3VyQXZhaWxhYmxlOiBmdW5jdGlvbiAoaG91cikge1xuICAgICAgdmFyIF9kYXRlID0gbW9tZW50KHRoaXMuY3VycmVudERhdGUpO1xuICAgICAgX2RhdGUuaG91cih0aGlzLmNvbnZlcnRIb3Vycyhob3VyKSkubWludXRlKDApLnNlY29uZCgwKTtcbiAgICAgIHJldHVybiB0aGlzLmlzQWZ0ZXJNaW5EYXRlKF9kYXRlLCB0cnVlLCBmYWxzZSkgJiYgdGhpcy5pc0JlZm9yZU1heERhdGUoX2RhdGUsIHRydWUsIGZhbHNlKTtcbiAgICB9LFxuICAgIGlzTWludXRlQXZhaWxhYmxlOiBmdW5jdGlvbiAobWludXRlKSB7XG4gICAgICB2YXIgX2RhdGUgPSBtb21lbnQodGhpcy5jdXJyZW50RGF0ZSk7XG4gICAgICBfZGF0ZS5taW51dGUobWludXRlKS5zZWNvbmQoMCk7XG4gICAgICByZXR1cm4gdGhpcy5pc0FmdGVyTWluRGF0ZShfZGF0ZSwgdHJ1ZSwgdHJ1ZSkgJiYgdGhpcy5pc0JlZm9yZU1heERhdGUoX2RhdGUsIHRydWUsIHRydWUpO1xuICAgIH0sXG4gICAgc3RhcnQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoaXMuY3VycmVudFZpZXcgPSBWSUVXX1NUQVRFUy5EQVRFO1xuICAgICAgLy90aGlzLmluaXREYXRlcygpO1xuICAgICAgaWYgKHRoaXMucGFyYW1zLmRhdGUpIHtcbiAgICAgICAgdGhpcy5pbml0RGF0ZSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKHRoaXMucGFyYW1zLnRpbWUpIHtcbiAgICAgICAgICB0aGlzLmluaXRIb3VycygpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBvazogZnVuY3Rpb24gKCkge1xuICAgICAgc3dpdGNoICh0aGlzLmN1cnJlbnRWaWV3KSB7XG4gICAgICAgIGNhc2UgVklFV19TVEFURVMuREFURTpcbiAgICAgICAgICBpZiAodGhpcy5wYXJhbXMudGltZSA9PT0gdHJ1ZSkge1xuICAgICAgICAgICAgdGhpcy5pbml0SG91cnMoKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmhpZGUodHJ1ZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFZJRVdfU1RBVEVTLkhPVVI6XG4gICAgICAgICAgdGhpcy5pbml0TWludXRlcygpO1xuICAgICAgICAgIGJyZWFrO1xuICAgICAgICBjYXNlIFZJRVdfU1RBVEVTLk1JTlVURTpcbiAgICAgICAgICB0aGlzLmhpZGUodHJ1ZSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfSxcbiAgICBjYW5jZWw6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICh0aGlzLnBhcmFtcy50aW1lKSB7XG4gICAgICAgIHN3aXRjaCAodGhpcy5jdXJyZW50Vmlldykge1xuICAgICAgICAgIGNhc2UgVklFV19TVEFURVMuREFURTpcbiAgICAgICAgICAgIHRoaXMuaGlkZSgpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBWSUVXX1NUQVRFUy5IT1VSOlxuICAgICAgICAgICAgaWYgKHRoaXMucGFyYW1zLmRhdGUpIHtcbiAgICAgICAgICAgICAgdGhpcy5pbml0RGF0ZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgIHRoaXMuaGlkZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgY2FzZSBWSUVXX1NUQVRFUy5NSU5VVEU6XG4gICAgICAgICAgICB0aGlzLmluaXRIb3VycygpO1xuICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGVsc2Uge1xuICAgICAgICB0aGlzLmhpZGUoKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHNlbGVjdE1vbnRoQmVmb3JlOiBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLmNhbGVuZGFyU3RhcnQuc3VidHJhY3QoMSwgJ21vbnRocycpO1xuICAgIH0sXG4gICAgc2VsZWN0TW9udGhBZnRlcjogZnVuY3Rpb24gKCkge1xuICAgICAgdGhpcy5jYWxlbmRhclN0YXJ0LmFkZCgxLCAnbW9udGhzJyk7XG4gICAgfSxcbiAgICBzZWxlY3RZZWFyQmVmb3JlOiBmdW5jdGlvbiAoKSB7XG4gICAgICB0aGlzLmNhbGVuZGFyU3RhcnQuc3VidHJhY3QoMSwgJ3llYXJzJyk7XG4gICAgfSxcbiAgICBzZWxlY3RZZWFyQWZ0ZXI6IGZ1bmN0aW9uICgpIHtcbiAgICAgIHRoaXMuY2FsZW5kYXJTdGFydC5hZGQoMSwgJ3llYXJzJyk7XG4gICAgfSxcbiAgICBzZWxlY3RBTTogZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKHRoaXMuaXNIb3VyQXZhaWxhYmxlKDApIHx8IHRoaXMuaXNIb3VyQXZhaWxhYmxlKDEyKSkge1xuICAgICAgICBpZiAodGhpcy5jdXJyZW50RGF0ZS5ob3VyKCkgPj0gMTIpIHtcbiAgICAgICAgICB0aGlzLnNlbGVjdERhdGUodGhpcy5jdXJyZW50RGF0ZS5zdWJ0cmFjdCgxMiwgJ2hvdXJzJykpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpcy5pc0hvdXJBdmFpbGFibGUodGhpcy5jdXJyZW50RGF0ZS5ob3VyKCkpKSB7XG4gICAgICAgICAgdGhpcy5zZWxlY3REYXRlKHRoaXMuY3VycmVudERhdGUuaG91cih0aGlzLm1pbkRhdGUuaG91cigpKSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCF0aGlzLmlzTWludXRlQXZhaWxhYmxlKHRoaXMuY3VycmVudERhdGUubWludXRlKCkpKSB7XG4gICAgICAgICAgdGhpcy5zZWxlY3REYXRlKHRoaXMuY3VycmVudERhdGUubWludXRlKHRoaXMubWluRGF0ZS5taW51dGUoKSkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSxcbiAgICBzZWxlY3RQTTogZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKHRoaXMuaXNIb3VyQXZhaWxhYmxlKDEzKSB8fCB0aGlzLmlzSG91ckF2YWlsYWJsZSgyNCkpIHtcbiAgICAgICAgaWYgKHRoaXMuY3VycmVudERhdGUuaG91cigpIDwgMTIpIHtcbiAgICAgICAgICB0aGlzLnNlbGVjdERhdGUodGhpcy5jdXJyZW50RGF0ZS5hZGQoMTIsICdob3VycycpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMuaXNIb3VyQXZhaWxhYmxlKHRoaXMuY3VycmVudERhdGUuaG91cigpKSkge1xuICAgICAgICAgIHRoaXMuc2VsZWN0RGF0ZSh0aGlzLmN1cnJlbnREYXRlLmhvdXIodGhpcy5tYXhEYXRlLmhvdXIoKSkpO1xuICAgICAgICB9XG4gICAgICAgIGlmICghdGhpcy5pc01pbnV0ZUF2YWlsYWJsZSh0aGlzLmN1cnJlbnREYXRlLm1pbnV0ZSgpKSkge1xuICAgICAgICAgIHRoaXMuc2VsZWN0RGF0ZSh0aGlzLmN1cnJlbnREYXRlLm1pbnV0ZSh0aGlzLm1heERhdGUubWludXRlKCkpKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG4gICAgY29udmVydEhvdXJzOiBmdW5jdGlvbiAoaCkge1xuICAgICAgdmFyIF9yZXR1cm4gPSBoO1xuICAgICAgaWYgKChoIDwgMTIpICYmIHRoaXMuaXNQTSgpKVxuICAgICAgICBfcmV0dXJuICs9IDEyO1xuXG4gICAgICByZXR1cm4gX3JldHVybjtcbiAgICB9LFxuICAgIGhpZGU6IGZ1bmN0aW9uIChva0J0bikge1xuICAgICAgaWYgKG9rQnRuKSB7XG4gICAgICAgIHRoaXMuX2RpYWxvZy5oaWRlKHRoaXMuY3VycmVudERhdGUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5fZGlhbG9nLmNhbmNlbCgpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuXG4gIGFuZ3VsYXIubW9kdWxlKG1vZHVsZU5hbWUpXG4gICAgLmRpcmVjdGl2ZSgnbWRjRGF0ZXRpbWVQaWNrZXJDYWxlbmRhcicsIFtcbiAgICAgIGZ1bmN0aW9uICgpIHtcblxuICAgICAgICB2YXIgc3RhcnREYXRlID0gbW9tZW50KCksXG4gICAgICAgICAgWUVBUl9NSU4gPSAxOTAwLFxuICAgICAgICAgIFlFQVJfTUFYID0gMjEwMCxcbiAgICAgICAgICBNT05USFNfSU5fQUxMID0gKFlFQVJfTUFYIC0gWUVBUl9NSU4gKyAxKSAqIDEyLFxuICAgICAgICAgIElURU1fSEVJR0hUID0gMjQwLFxuICAgICAgICAgIE1PTlRIUyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IE1PTlRIU19JTl9BTEw7IGkrKykge1xuICAgICAgICAgIE1PTlRIUy5wdXNoKGkpO1xuICAgICAgICB9XG5cbiAgICAgICAgdmFyIGN1cnJlbnRNb250aEluZGV4ID0gZnVuY3Rpb24gKGRhdGUpIHtcbiAgICAgICAgICB2YXIgeWVhciA9IGRhdGUueWVhcigpO1xuICAgICAgICAgIHZhciBtb250aCA9IGRhdGUubW9udGgoKTtcbiAgICAgICAgICByZXR1cm4gKCh5ZWFyIC0gWUVBUl9NSU4pICogMTIpICsgbW9udGggLSAxO1xuICAgICAgICB9O1xuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgcmVzdHJpY3Q6ICdFJyxcbiAgICAgICAgICBzY29wZToge1xuICAgICAgICAgICAgcGlja2VyOiAnPScsXG4gICAgICAgICAgICBkYXRlOiAnPSdcbiAgICAgICAgICB9LFxuICAgICAgICAgIGJpbmRUb0NvbnRyb2xsZXI6IHRydWUsXG4gICAgICAgICAgY29udHJvbGxlckFzOiAnY2FsJyxcbiAgICAgICAgICBjb250cm9sbGVyOiBbJyRzY29wZScsXG4gICAgICAgICAgICBmdW5jdGlvbiAoJHNjb3BlKSB7XG4gICAgICAgICAgICAgIHZhciBjYWxlbmRhciA9IHRoaXMsXG4gICAgICAgICAgICAgICAgcGlja2VyID0gdGhpcy5waWNrZXIsXG4gICAgICAgICAgICAgICAgZGF5cyA9IFtdO1xuXG4gICAgICAgICAgICAgIGZvciAodmFyIGkgPSBwaWNrZXIucGFyYW1zLndlZWtTdGFydDsgZGF5cy5sZW5ndGggPCA3OyBpKyspIHtcbiAgICAgICAgICAgICAgICBpZiAoaSA+IDYpIHtcbiAgICAgICAgICAgICAgICAgIGkgPSAwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBkYXlzLnB1c2goaS50b1N0cmluZygpKTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIGNhbGVuZGFyLndlZWsgPSBkYXlzO1xuICAgICAgICAgICAgICBpZiAoIXBpY2tlci5tYXhEYXRlICYmICFwaWNrZXIubWluRGF0ZSkge1xuICAgICAgICAgICAgICAgIGNhbGVuZGFyLm1vbnRocyA9IE1PTlRIUztcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB2YXIgbG93ID0gcGlja2VyLm1pbkRhdGUgPyBjdXJyZW50TW9udGhJbmRleChwaWNrZXIubWluRGF0ZSkgOiAwO1xuICAgICAgICAgICAgICAgIHZhciBoaWdoID0gcGlja2VyLm1heERhdGUgPyAoY3VycmVudE1vbnRoSW5kZXgocGlja2VyLm1heERhdGUpICsgMSkgOiBNT05USFNfSU5fQUxMO1xuICAgICAgICAgICAgICAgIGNhbGVuZGFyLm1vbnRocyA9IE1PTlRIUy5zbGljZShsb3csIGhpZ2gpO1xuICAgICAgICAgICAgICB9XG5cblxuICAgICAgICAgICAgICBjYWxlbmRhci5nZXRJdGVtQXRJbmRleCA9IGZ1bmN0aW9uIChpbmRleCkge1xuICAgICAgICAgICAgICAgIHZhciBtb250aCA9ICgoaW5kZXggKyAxKSAlIDEyKSB8fCAxMjtcbiAgICAgICAgICAgICAgICB2YXIgeWVhciA9IFlFQVJfTUlOICsgTWF0aC5mbG9vcihpbmRleCAvIDEyKTtcbiAgICAgICAgICAgICAgICB2YXIgbW9udGhPYmogPSBtb21lbnQocGlja2VyLmN1cnJlbnREYXRlKVxuICAgICAgICAgICAgICAgICAgLnllYXIoeWVhcilcbiAgICAgICAgICAgICAgICAgIC5tb250aChtb250aCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGdlbmVyYXRlTW9udGhDYWxlbmRhcihtb250aE9iaik7XG4gICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgY2FsZW5kYXIudG9wSW5kZXggPSBjdXJyZW50TW9udGhJbmRleChwaWNrZXIuY3VycmVudERhdGUpIC0gY2FsZW5kYXIubW9udGhzWzBdO1xuXG4gICAgICAgICAgICAgICRzY29wZS4kd2F0Y2goZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBwaWNrZXIuY3VycmVudERhdGUgPyBwaWNrZXIuY3VycmVudERhdGUuZm9ybWF0KCdZWVlZLU1NJykgOiAnJztcbiAgICAgICAgICAgICAgfSwgZnVuY3Rpb24gKHZhbDIsIHZhbDEpIHtcbiAgICAgICAgICAgICAgICBpZiAodmFsMiAhPSB2YWwxKSB7XG4gICAgICAgICAgICAgICAgICB2YXIgbkRhdGUgPSBtb21lbnQodmFsMiwgJ1lZWVktTU0nKTtcbiAgICAgICAgICAgICAgICAgIHZhciBpbmRleCA9IGN1cnJlbnRNb250aEluZGV4KG5EYXRlKTtcbiAgICAgICAgICAgICAgICAgIGlmIChjYWxlbmRhci50b3BJbmRleCAhPSBpbmRleCkge1xuICAgICAgICAgICAgICAgICAgICBjYWxlbmRhci50b3BJbmRleCA9IGluZGV4IC0gY2FsZW5kYXIubW9udGhzWzBdO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgdmFyIGdlbmVyYXRlTW9udGhDYWxlbmRhciA9IGZ1bmN0aW9uIChkYXRlKSB7XG4gICAgICAgICAgICAgICAgdmFyIG1vbnRoID0ge307XG4gICAgICAgICAgICAgICAgaWYgKGRhdGUgIT09IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgIG1vbnRoLm5hbWUgPSBkYXRlLmZvcm1hdCgnTU1NTSBZWVlZJyk7XG4gICAgICAgICAgICAgICAgICB2YXIgc3RhcnRPZk1vbnRoID0gbW9tZW50KGRhdGUpLmxvY2FsZShwaWNrZXIucGFyYW1zLmxhbmcpLnN0YXJ0T2YoJ21vbnRoJylcbiAgICAgICAgICAgICAgICAgICAgICAuaG91cihkYXRlLmhvdXIoKSlcbiAgICAgICAgICAgICAgICAgICAgICAubWludXRlKGRhdGUubWludXRlKCkpXG4gICAgICAgICAgICAgICAgICAgIDtcbiAgICAgICAgICAgICAgICAgIHZhciBpTnVtRGF5ID0gc3RhcnRPZk1vbnRoLmZvcm1hdCgnZCcpO1xuICAgICAgICAgICAgICAgICAgbW9udGguZGF5cyA9IFtdO1xuICAgICAgICAgICAgICAgICAgZm9yICh2YXIgaSA9IHN0YXJ0T2ZNb250aC5kYXRlKCk7IGkgPD0gc3RhcnRPZk1vbnRoLmRheXNJbk1vbnRoKCk7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaSA9PT0gc3RhcnRPZk1vbnRoLmRhdGUoKSkge1xuICAgICAgICAgICAgICAgICAgICAgIHZhciBpV2VlayA9IGNhbGVuZGFyLndlZWsuaW5kZXhPZihpTnVtRGF5LnRvU3RyaW5nKCkpO1xuICAgICAgICAgICAgICAgICAgICAgIGlmIChpV2VlayA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGZvciAodmFyIHggPSAwOyB4IDwgaVdlZWs7IHgrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICBtb250aC5kYXlzLnB1c2goMCk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIG1vbnRoLmRheXMucHVzaChtb21lbnQoc3RhcnRPZk1vbnRoKS5sb2NhbGUocGlja2VyLnBhcmFtcy5sYW5nKS5kYXRlKGkpKTtcbiAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgdmFyIGRheXNJbkFXZWVrID0gNywgZGF5c1RtcCA9IFtdLCBzbGljZXMgPSBNYXRoLmNlaWwobW9udGguZGF5cy5sZW5ndGggLyBkYXlzSW5BV2Vlayk7XG4gICAgICAgICAgICAgICAgICBmb3IgKHZhciBqID0gMDsgaiA8IHNsaWNlczsgaisrKSB7XG4gICAgICAgICAgICAgICAgICAgIGRheXNUbXAucHVzaChtb250aC5kYXlzLnNsaWNlKGogKiBkYXlzSW5BV2VlaywgKGogKyAxKSAqIGRheXNJbkFXZWVrKSk7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICBtb250aC5kYXlzID0gZGF5c1RtcDtcbiAgICAgICAgICAgICAgICAgIHJldHVybiBtb250aDtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICBjYWxlbmRhci50b0RheSA9IGZ1bmN0aW9uIChpKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1vbWVudChwYXJzZUludChpKSwgXCJkXCIpXG4gICAgICAgICAgICAgICAgICAubG9jYWxlKHBpY2tlci5wYXJhbXMubGFuZylcbiAgICAgICAgICAgICAgICAgIC5mb3JtYXQoXCJkZFwiKVxuICAgICAgICAgICAgICAgICAgLnN1YnN0cmluZygwLCAxKTtcbiAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICBjYWxlbmRhci5pc0luUmFuZ2UgPSBmdW5jdGlvbiAoZGF0ZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBwaWNrZXIuaXNBZnRlck1pbkRhdGUobW9tZW50KGRhdGUpLCBmYWxzZSwgZmFsc2UpXG4gICAgICAgICAgICAgICAgICAmJiBwaWNrZXIuaXNCZWZvcmVNYXhEYXRlKG1vbWVudChkYXRlKSwgZmFsc2UsIGZhbHNlKTtcbiAgICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgICBjYWxlbmRhci5zZWxlY3REYXRlID0gZnVuY3Rpb24gKGRhdGUpIHtcbiAgICAgICAgICAgICAgICBpZiAoZGF0ZSkge1xuICAgICAgICAgICAgICAgICAgaWYgKGNhbGVuZGFyLmlzU2VsZWN0ZWREYXkoZGF0ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHBpY2tlci5vaygpO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgcGlja2VyLnNlbGVjdERhdGUobW9tZW50KGRhdGUpLmhvdXIoY2FsZW5kYXIuZGF0ZS5ob3VyKCkpLm1pbnV0ZShjYWxlbmRhci5kYXRlLm1pbnV0ZSgpKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAgIGNhbGVuZGFyLmlzU2VsZWN0ZWREYXkgPSBmdW5jdGlvbiAobSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBtICYmIGNhbGVuZGFyLmRhdGUuZGF0ZSgpID09PSBtLmRhdGUoKSAmJiBjYWxlbmRhci5kYXRlLm1vbnRoKCkgPT09IG0ubW9udGgoKSAmJiBjYWxlbmRhci5kYXRlLnllYXIoKSA9PT0gbS55ZWFyKCk7XG4gICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIH1cbiAgICAgICAgICBdLFxuICAgICAgICAgIHRlbXBsYXRlOiAnPG1kLXZpcnR1YWwtcmVwZWF0LWNvbnRhaW5lciBtZC10b3AtaW5kZXg9XCJjYWwudG9wSW5kZXhcIiBjbGFzcz1cIm1vbnRoc1wiPicgK1xuICAgICAgICAgICc8ZGl2IG1kLXZpcnR1YWwtcmVwZWF0PVwiaWR4IGluIGNhbC5tb250aHNcIiBtZC1zdGFydC1pbmRleD1cImNhbC50b3BJbmRleFwiIG1kLWl0ZW0tc2l6ZT1cIicgKyBJVEVNX0hFSUdIVCArICdcIj4nICtcbiAgICAgICAgICAnICAgICA8ZGl2IG1kYy1kYXRldGltZS1waWNrZXItY2FsZW5kYXItbW9udGggaWR4PVwiaWR4XCI+PC9kaXY+JyArXG4gICAgICAgICAgJzwvZGl2PicgK1xuICAgICAgICAgICc8L21kLXZpcnR1YWwtcmVwZWF0LWNvbnRhaW5lcj4nXG4gICAgICAgIH07XG4gICAgICB9XSlcbiAgICAuZGlyZWN0aXZlKCdtZGNEYXRldGltZVBpY2tlckNhbGVuZGFyTW9udGgnLCBbJyRjb21waWxlJyxcbiAgICAgIGZ1bmN0aW9uICgkY29tcGlsZSkge1xuICAgICAgICB2YXIgYnVpbGRDYWxlbmRhckNvbnRlbnQgPSBmdW5jdGlvbiAoZWxlbWVudCwgc2NvcGUpIHtcbiAgICAgICAgICB2YXIgdGJvZHkgPSBhbmd1bGFyLmVsZW1lbnQoZWxlbWVudFswXS5xdWVyeVNlbGVjdG9yKCd0Ym9keScpKTtcbiAgICAgICAgICB2YXIgY2FsZW5kYXIgPSBzY29wZS5jYWwsIG1vbnRoID0gc2NvcGUubW9udGg7XG4gICAgICAgICAgdGJvZHkuaHRtbCgnJyk7XG4gICAgICAgICAgbW9udGguZGF5cy5mb3JFYWNoKGZ1bmN0aW9uICh3ZWVrRGF5cywgaSkge1xuICAgICAgICAgICAgdmFyIHRyID0gYW5ndWxhci5lbGVtZW50KCc8dHI+PC90cj4nKTtcbiAgICAgICAgICAgIHdlZWtEYXlzLmZvckVhY2goZnVuY3Rpb24gKHdlZWtEYXksIGopIHtcbiAgICAgICAgICAgICAgdmFyIHRkID0gYW5ndWxhci5lbGVtZW50KCc8dGQ+IDwvdGQ+Jyk7XG4gICAgICAgICAgICAgIGlmICh3ZWVrRGF5KSB7XG4gICAgICAgICAgICAgICAgdmFyIGFPclNwYW47XG4gICAgICAgICAgICAgICAgaWYgKGNhbGVuZGFyLmlzSW5SYW5nZSh3ZWVrRGF5KSkge1xuICAgICAgICAgICAgICAgICAgLy9idWlsZCBhXG4gICAgICAgICAgICAgICAgICB2YXIgc2NvcGVSZWYgPSAnbW9udGhbXCJkYXlzXCJdWycgKyBpICsgJ11bJyArIGogKyAnXSc7XG4gICAgICAgICAgICAgICAgICBhT3JTcGFuID0gYW5ndWxhci5lbGVtZW50KFwiPGEgaHJlZj0nIycgbWRjLWR0cC1ub2NsaWNrPjwvYT5cIilcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ25nLWNsYXNzJywgJ3tzZWxlY3RlZDogY2FsLmlzU2VsZWN0ZWREYXkoJyArIHNjb3BlUmVmICsgJyl9JylcbiAgICAgICAgICAgICAgICAgICAgLmF0dHIoJ25nLWNsaWNrJywgJ2NhbC5zZWxlY3REYXRlKCcgKyBzY29wZVJlZiArICcpJylcbiAgICAgICAgICAgICAgICAgIDtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgYU9yU3BhbiA9IGFuZ3VsYXIuZWxlbWVudCgnPHNwYW4+PC9zcGFuPicpXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGFPclNwYW5cbiAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcygnZHRwLXNlbGVjdC1kYXknKVxuICAgICAgICAgICAgICAgICAgLmh0bWwod2Vla0RheS5mb3JtYXQoJ0QnKSk7XG4gICAgICAgICAgICAgICAgdGQuYXBwZW5kKGFPclNwYW4pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHRyLmFwcGVuZCh0ZCk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRib2R5LmFwcGVuZCh0cik7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgJGNvbXBpbGUodGJvZHkpKHNjb3BlKTtcbiAgICAgICAgfTtcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHNjb3BlOiB7XG4gICAgICAgICAgICBpZHg6ICc9J1xuICAgICAgICAgIH0sXG4gICAgICAgICAgcmVxdWlyZTogJ15tZGNEYXRldGltZVBpY2tlckNhbGVuZGFyJyxcbiAgICAgICAgICByZXN0cmljdDogJ0FFJyxcbiAgICAgICAgICB0ZW1wbGF0ZTogJzxkaXYgY2xhc3M9XCJkdHAtcGlja2VyLW1vbnRoXCI+e3ttb250aC5uYW1lfX08L2Rpdj4nXG4gICAgICAgICAgKyAnPHRhYmxlIGNsYXNzPVwidGFibGUgZHRwLXBpY2tlci1kYXlzXCI+J1xuICAgICAgICAgICsgJyAgICA8dGhlYWQ+J1xuICAgICAgICAgICsgJyAgICA8dHI+J1xuICAgICAgICAgICsgJyAgICAgICAgPHRoIG5nLXJlcGVhdD1cImRheSBpbiBjYWwud2Vla1wiPnt7Y2FsLnRvRGF5KGRheSl9fTwvdGg+J1xuICAgICAgICAgICsgJyAgICA8L3RyPidcbiAgICAgICAgICArICcgICAgPC90aGVhZD4nXG4gICAgICAgICAgKyAnICAgIDx0Ym9keT4nXG4gICAgICAgICAgKyAnICAgIDwvdGJvZHk+J1xuICAgICAgICAgICsgJzwvdGFibGU+JyxcbiAgICAgICAgICBsaW5rOiBmdW5jdGlvbiAoc2NvcGUsIGVsZW1lbnQsIGF0dHJzLCBjYWxlbmRhcikge1xuICAgICAgICAgICAgc2NvcGUuY2FsID0gY2FsZW5kYXI7XG4gICAgICAgICAgICBzY29wZS5tb250aCA9IGNhbGVuZGFyLmdldEl0ZW1BdEluZGV4KHBhcnNlSW50KHNjb3BlLmlkeCkpO1xuICAgICAgICAgICAgYnVpbGRDYWxlbmRhckNvbnRlbnQoZWxlbWVudCwgc2NvcGUpO1xuICAgICAgICAgICAgc2NvcGUuJHdhdGNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHNjb3BlLmlkeDtcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChpZHgsIG9sZElkeCkge1xuICAgICAgICAgICAgICBpZiAoaWR4ICE9IG9sZElkeCkge1xuICAgICAgICAgICAgICAgIHNjb3BlLm1vbnRoID0gY2FsZW5kYXIuZ2V0SXRlbUF0SW5kZXgocGFyc2VJbnQoc2NvcGUuaWR4KSk7XG4gICAgICAgICAgICAgICAgYnVpbGRDYWxlbmRhckNvbnRlbnQoZWxlbWVudCwgc2NvcGUpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICB9XG4gICAgXSlcbiAgO1xuXG4gIGFuZ3VsYXIubW9kdWxlKG1vZHVsZU5hbWUpXG4gICAgLmRpcmVjdGl2ZSgnbWRjRHRwTm9jbGljaycsIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGxpbms6IGZ1bmN0aW9uIChzY29wZSwgZWwpIHtcbiAgICAgICAgICBlbC5vbignY2xpY2snLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH0pO1xuICBhbmd1bGFyLm1vZHVsZShtb2R1bGVOYW1lKVxuICAgIC5kaXJlY3RpdmUoJ21kY0RhdGV0aW1lUGlja2VyQ2xvY2snLCBbXG4gICAgICBmdW5jdGlvbiAoKSB7XG5cbiAgICAgICAgdmFyIHRlbXBsYXRlID0gJzxkaXYgY2xhc3M9XCJkdHAtcGlja2VyLWNsb2NrXCI+PHNwYW4gbmctaWY9XCIhcG9pbnRzIHx8IHBvaW50cy5sZW5ndGggPCAxXCI+Jm5ic3A7PC9zcGFuPidcbiAgICAgICAgICArICc8ZGl2IG5nLXJlcGVhdD1cInBvaW50IGluIHBvaW50c1wiIGNsYXNzPVwiZHRwLXBpY2tlci10aW1lXCIgc3R5bGU9XCJtYXJnaW4tbGVmdDoge3twb2ludC5sZWZ0fX1weDsgbWFyZ2luLXRvcDoge3twb2ludC50b3B9fXB4O1wiPidcbiAgICAgICAgICArICcgICA8YSBocmVmPVwiI1wiIG1kYy1kdHAtbm9jbGljayBuZy1jbGFzcz1cIntzZWxlY3RlZDogcG9pbnQudmFsdWU9PT1jdXJyZW50VmFsdWV9XCIgY2xhc3M9XCJkdHAtc2VsZWN0LWhvdXJcIiBuZy1jbGljaz1cInNldFRpbWUocG9pbnQudmFsdWUpXCIgbmctaWY9XCJwb2ludEF2YWlsYWJsZShwb2ludClcIj57e3BvaW50LmRpc3BsYXl9fTwvYT4nXG4gICAgICAgICAgKyAnICAgPGEgaHJlZj1cIiNcIiBtZGMtZHRwLW5vY2xpY2sgY2xhc3M9XCJkaXNhYmxlZCBkdHAtc2VsZWN0LWhvdXJcIiBuZy1pZj1cIiFwb2ludEF2YWlsYWJsZShwb2ludClcIj57e3BvaW50LmRpc3BsYXl9fTwvYT4nXG4gICAgICAgICAgKyAnPC9kaXY+J1xuICAgICAgICAgICsgJzxkaXYgY2xhc3M9XCJkdHAtaGFuZCBkdHAtaG91ci1oYW5kXCI+PC9kaXY+J1xuICAgICAgICAgICsgJzxkaXYgY2xhc3M9XCJkdHAtaGFuZCBkdHAtbWludXRlLWhhbmRcIj48L2Rpdj4nXG4gICAgICAgICAgKyAnPGRpdiBjbGFzcz1cImR0cC1jbG9jay1jZW50ZXJcIj48L2Rpdj4nXG4gICAgICAgICAgKyAnPC9kaXY+JztcblxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIHJlc3RyaWN0OiAnRScsXG4gICAgICAgICAgdGVtcGxhdGU6IHRlbXBsYXRlLFxuICAgICAgICAgIGxpbms6IGZ1bmN0aW9uIChzY29wZSwgZWxlbWVudCwgYXR0cnMpIHtcbiAgICAgICAgICAgIHZhciBtaW51dGVNb2RlID0gYXR0cnMubW9kZSA9PT0gJ21pbnV0ZXMnO1xuICAgICAgICAgICAgdmFyIHBpY2tlciA9IHNjb3BlLnBpY2tlcjtcbiAgICAgICAgICAgIC8vYmFua2luZyBvbiB0aGUgZmFjdCB0aGF0IHRoZXJlIHdpbGwgb25seSBiZSBvbmUgYXQgYSB0aW1lXG4gICAgICAgICAgICB2YXIgY29tcG9uZW50Um9vdCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ21kLWRpYWxvZy5kdHAnKTtcbiAgICAgICAgICAgIHZhciBleGVjID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICB2YXIgY2xvY2sgPSBhbmd1bGFyLmVsZW1lbnQoZWxlbWVudFswXS5xdWVyeVNlbGVjdG9yKCcuZHRwLXBpY2tlci1jbG9jaycpKSxcbiAgICAgICAgICAgICAgICBwaWNrZXJFbCA9IGFuZ3VsYXIuZWxlbWVudChjb21wb25lbnRSb290LnF1ZXJ5U2VsZWN0b3IoJy5kdHAtcGlja2VyJykpO1xuXG4gICAgICAgICAgICAgIHZhciB3ID0gY29tcG9uZW50Um9vdC5xdWVyeVNlbGVjdG9yKCcuZHRwLWNvbnRlbnQnKS5vZmZzZXRXaWR0aDtcbiAgICAgICAgICAgICAgdmFyIHBsID0gcGFyc2VJbnQoY3NzKHBpY2tlckVsLCAncGFkZGluZ0xlZnQnKS5yZXBsYWNlKCdweCcsICcnKSkgfHwgMDtcbiAgICAgICAgICAgICAgdmFyIHByID0gcGFyc2VJbnQoY3NzKHBpY2tlckVsLCAncGFkZGluZ1JpZ2h0JykucmVwbGFjZSgncHgnLCAnJykpIHx8IDA7XG4gICAgICAgICAgICAgIHZhciBtbCA9IHBhcnNlSW50KGNzcyhjbG9jaywgJ21hcmdpbkxlZnQnKS5yZXBsYWNlKCdweCcsICcnKSkgfHwgMDtcbiAgICAgICAgICAgICAgdmFyIG1yID0gcGFyc2VJbnQoY3NzKGNsb2NrLCAnbWFyZ2luUmlnaHQnKS5yZXBsYWNlKCdweCcsICcnKSkgfHwgMDtcbiAgICAgICAgICAgICAgLy9zZXQgd2lkdGhcbiAgICAgICAgICAgICAgdmFyIGNsb2NrV2lkdGggPSAodyAtIChtbCArIG1yICsgcGwgKyBwcikpO1xuICAgICAgICAgICAgICBjbG9jay5jc3MoJ3dpZHRoJywgKGNsb2NrV2lkdGgpICsgJ3B4Jyk7XG5cbiAgICAgICAgICAgICAgdmFyIHBMID0gcGFyc2VJbnQoY3NzKHBpY2tlckVsLCAncGFkZGluZ0xlZnQnKS5yZXBsYWNlKCdweCcsICcnKSkgfHwgMDtcbiAgICAgICAgICAgICAgdmFyIHBUID0gcGFyc2VJbnQoY3NzKHBpY2tlckVsLCAncGFkZGluZ1RvcCcpLnJlcGxhY2UoJ3B4JywgJycpKSB8fCAwO1xuICAgICAgICAgICAgICB2YXIgbUwgPSBwYXJzZUludChjc3MoY2xvY2ssICdtYXJnaW5MZWZ0JykucmVwbGFjZSgncHgnLCAnJykpIHx8IDA7XG4gICAgICAgICAgICAgIHZhciBtVCA9IHBhcnNlSW50KGNzcyhjbG9jaywgJ21hcmdpblRvcCcpLnJlcGxhY2UoJ3B4JywgJycpKSB8fCAwO1xuXG4gICAgICAgICAgICAgIHZhciByID0gKGNsb2NrV2lkdGggLyAyKTtcbiAgICAgICAgICAgICAgdmFyIGogPSByIC8gMS4yOyAvLz8/P1xuXG4gICAgICAgICAgICAgIHZhciBwb2ludHMgPSBbXTtcblxuICAgICAgICAgICAgICBmb3IgKHZhciBoID0gMDsgaCA8IDEyOyArK2gpIHtcbiAgICAgICAgICAgICAgICB2YXIgeCA9IGogKiBNYXRoLnNpbihNYXRoLlBJICogMiAqIChoIC8gMTIpKTtcbiAgICAgICAgICAgICAgICB2YXIgeSA9IGogKiBNYXRoLmNvcyhNYXRoLlBJICogMiAqIChoIC8gMTIpKTtcblxuICAgICAgICAgICAgICAgIHZhciBob3VyID0ge1xuICAgICAgICAgICAgICAgICAgbGVmdDogKHIgKyB4ICsgcEwgLyAyKSAtIChwTCArIG1MKSxcbiAgICAgICAgICAgICAgICAgIHRvcDogKHIgLSB5IC0gbVQgLyAyKSAtIChwVCArIG1UKSxcbiAgICAgICAgICAgICAgICAgIHZhbHVlOiAobWludXRlTW9kZSA/IChoICogNSkgOiBoKSAvLzUgZm9yIG1pbnV0ZSA2MC8xMlxuICAgICAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgICAgICBpZiAobWludXRlTW9kZSkge1xuICAgICAgICAgICAgICAgICAgaG91ci5kaXNwbGF5ID0gaG91ci52YWx1ZSA8IDEwID8gKCcwJyArIGhvdXIudmFsdWUpIDogaG91ci52YWx1ZTtcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xuXG4gICAgICAgICAgICAgICAgICBpZiAocGlja2VyLnBhcmFtcy5zaG9ydFRpbWUpIHtcbiAgICAgICAgICAgICAgICAgICAgaG91ci5kaXNwbGF5ID0gKGggPT09IDApID8gMTIgOiBoO1xuICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgaG91ci5kaXNwbGF5ID0gcGlja2VyLmlzUE0oKSA/IGggKyAxMiA6IGg7XG4gICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuXG5cbiAgICAgICAgICAgICAgICBwb2ludHMucHVzaChob3VyKTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIHNjb3BlLnBvaW50cyA9IHBvaW50cztcbiAgICAgICAgICAgICAgc2V0Q3VycmVudFZhbHVlKCk7XG4gICAgICAgICAgICAgIGNsb2NrLmNzcygnaGVpZ2h0JywgY2xvY2tXaWR0aCArICdweCcpO1xuICAgICAgICAgICAgICAvL3BpY2tlci5pbml0SGFuZHModHJ1ZSk7XG5cbiAgICAgICAgICAgICAgdmFyIGNsb2NrQ2VudGVyID0gZWxlbWVudFswXS5xdWVyeVNlbGVjdG9yKCcuZHRwLWNsb2NrLWNlbnRlcicpO1xuICAgICAgICAgICAgICB2YXIgY2VudGVyV2lkdGggPSAoY2xvY2tDZW50ZXIub2Zmc2V0V2lkdGggLyAyKSB8fCA3LjUsXG4gICAgICAgICAgICAgICAgY2VudGVySGVpZ2h0ID0gKGNsb2NrQ2VudGVyLm9mZnNldEhlaWdodCAvIDIpIHx8IDcuNTtcbiAgICAgICAgICAgICAgdmFyIF9oTCA9IHIgLyAxLjg7XG4gICAgICAgICAgICAgIHZhciBfbUwgPSByIC8gMS41O1xuXG4gICAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudChlbGVtZW50WzBdLnF1ZXJ5U2VsZWN0b3IoJy5kdHAtaG91ci1oYW5kJykpLmNzcyh7XG4gICAgICAgICAgICAgICAgbGVmdDogciArIChtTCAqIDEuNSkgKyAncHgnLFxuICAgICAgICAgICAgICAgIGhlaWdodDogX2hMICsgJ3B4JyxcbiAgICAgICAgICAgICAgICBtYXJnaW5Ub3A6IChyIC0gX2hMIC0gcEwpICsgJ3B4J1xuICAgICAgICAgICAgICB9KS5hZGRDbGFzcyghbWludXRlTW9kZSA/ICdvbicgOiAnJyk7XG5cbiAgICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KGVsZW1lbnRbMF0ucXVlcnlTZWxlY3RvcignLmR0cC1taW51dGUtaGFuZCcpKS5jc3NcbiAgICAgICAgICAgICAgKHtcbiAgICAgICAgICAgICAgICBsZWZ0OiByICsgKG1MICogMS41KSArICdweCcsXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiBfbUwgKyAncHgnLFxuICAgICAgICAgICAgICAgIG1hcmdpblRvcDogKHIgLSBfbUwgLSBwTCkgKyAncHgnXG4gICAgICAgICAgICAgIH0pLmFkZENsYXNzKG1pbnV0ZU1vZGUgPyAnb24nIDogJycpO1xuXG4gICAgICAgICAgICAgIGFuZ3VsYXIuZWxlbWVudChjbG9ja0NlbnRlcikuY3NzKHtcbiAgICAgICAgICAgICAgICBsZWZ0OiAociArIHBMICsgbUwgLSBjZW50ZXJXaWR0aCkgKyAncHgnLFxuICAgICAgICAgICAgICAgIG1hcmdpblRvcDogKHIgLSAobUwgLyAyKSkgLSBjZW50ZXJIZWlnaHQgKyAncHgnXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICBhbmltYXRlSGFuZHMoKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHZhciBhbmltYXRlSGFuZHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIHZhciBfZGF0ZSA9IHBpY2tlci5jdXJyZW50TmVhcmVzdDVNaW51dGUoKTtcbiAgICAgICAgICAgICAgdmFyIGggPSBfZGF0ZS5ob3VyKCk7XG4gICAgICAgICAgICAgIHZhciBtID0gX2RhdGUubWludXRlKCk7XG5cbiAgICAgICAgICAgICAgcm90YXRlRWxlbWVudChhbmd1bGFyLmVsZW1lbnQoZWxlbWVudFswXS5xdWVyeVNlbGVjdG9yKCcuZHRwLWhvdXItaGFuZCcpKSwgKDM2MCAvIDEyKSAqIGgpO1xuICAgICAgICAgICAgICB2YXIgbWRnID0gKCgzNjAgLyA2MCkgKiAoNSAqIE1hdGgucm91bmQobSAvIDUpKSk7XG4gICAgICAgICAgICAgIHJvdGF0ZUVsZW1lbnQoYW5ndWxhci5lbGVtZW50KGVsZW1lbnRbMF0ucXVlcnlTZWxlY3RvcignLmR0cC1taW51dGUtaGFuZCcpKSwgbWRnKTtcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHZhciByb3RhdGVFbGVtZW50ID0gZnVuY3Rpb24gKGVsLCBkZWcpIHtcbiAgICAgICAgICAgICAgYW5ndWxhci5lbGVtZW50KGVsKS5jc3Moe1xuICAgICAgICAgICAgICAgIFdlYmtpdFRyYW5zZm9ybTogJ3JvdGF0ZSgnICsgZGVnICsgJ2RlZyknLFxuICAgICAgICAgICAgICAgICctbW96LXRyYW5zZm9ybSc6ICdyb3RhdGUoJyArIGRlZyArICdkZWcpJ1xuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH07XG5cblxuICAgICAgICAgICAgdmFyIHNldEN1cnJlbnRWYWx1ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgdmFyIGRhdGUgPSBwaWNrZXIuY3VycmVudE5lYXJlc3Q1TWludXRlKCk7XG4gICAgICAgICAgICAgIHNjb3BlLmN1cnJlbnRWYWx1ZSA9IG1pbnV0ZU1vZGUgPyBkYXRlLm1pbnV0ZSgpIDogKGRhdGUuaG91cigpICUgMTIpO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgc2NvcGUuJHdhdGNoKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgdmFyIHRtcCA9IHBpY2tlci5jdXJyZW50TmVhcmVzdDVNaW51dGUoKTtcbiAgICAgICAgICAgICAgcmV0dXJuIHRtcCA/IHRtcC5mb3JtYXQoJ0hIOm1tJykgOiAnJztcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uIChuZXdWYWwpIHtcbiAgICAgICAgICAgICAgc2V0Q3VycmVudFZhbHVlKCk7XG4gICAgICAgICAgICAgIGFuaW1hdGVIYW5kcygpO1xuICAgICAgICAgICAgfSk7XG5cblxuICAgICAgICAgICAgdmFyIHNldERpc3BsYXlQb2ludHMgPSBmdW5jdGlvbiAoaXNQTSwgcG9pbnRzKSB7XG4gICAgICAgICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcG9pbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgcG9pbnRzW2ldLmRpc3BsYXkgPSBpO1xuICAgICAgICAgICAgICAgIGlmIChpc1BNKSB7XG4gICAgICAgICAgICAgICAgICBwb2ludHNbaV0uZGlzcGxheSArPSAxMjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgcmV0dXJuIHBvaW50cztcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIGlmICghcGlja2VyLnBhcmFtcy5zaG9ydFRpbWUpIHtcbiAgICAgICAgICAgICAgc2NvcGUuJHdhdGNoKCdwaWNrZXIubWVyaWRpZW4nLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFtaW51dGVNb2RlKSB7XG4gICAgICAgICAgICAgICAgICBpZiAoc2NvcGUucG9pbnRzKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBwb2ludHMgPSBzZXREaXNwbGF5UG9pbnRzKHBpY2tlci5pc1BNKCksIGFuZ3VsYXIuY29weShzY29wZS5wb2ludHMpKTtcbiAgICAgICAgICAgICAgICAgICAgc2NvcGUucG9pbnRzID0gcG9pbnRzO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG5cblxuICAgICAgICAgICAgc2NvcGUuc2V0VGltZSA9IGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgICAgICAgICAgaWYgKHZhbCA9PT0gc2NvcGUuY3VycmVudFZhbHVlKSB7XG4gICAgICAgICAgICAgICAgcGlja2VyLm9rKCk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBpZiAoIW1pbnV0ZU1vZGUpIHtcbiAgICAgICAgICAgICAgICBwaWNrZXIuY3VycmVudERhdGUuaG91cihwaWNrZXIuaXNQTSgpID8gKHZhbCArIDEyKSA6IHZhbCk7XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcGlja2VyLmN1cnJlbnREYXRlLm1pbnV0ZSh2YWwpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIHBpY2tlci5jdXJyZW50RGF0ZS5zZWNvbmQoMClcbiAgICAgICAgICAgIH07XG5cbiAgICAgICAgICAgIHNjb3BlLnBvaW50QXZhaWxhYmxlID0gZnVuY3Rpb24gKHBvaW50KSB7XG4gICAgICAgICAgICAgIHJldHVybiBtaW51dGVNb2RlID8gcGlja2VyLmlzTWludXRlQXZhaWxhYmxlKHBvaW50LnZhbHVlKSA6IHBpY2tlci5pc0hvdXJBdmFpbGFibGUocG9pbnQudmFsdWUpO1xuICAgICAgICAgICAgfTtcblxuICAgICAgICAgICAgdmFyIHVud2F0Y2hlciA9IHNjb3BlLiR3YXRjaChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgIHJldHVybiBlbGVtZW50WzBdLnF1ZXJ5U2VsZWN0b3JBbGwoJ2RpdicpLmxlbmd0aDtcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgZXhlYygpO1xuICAgICAgICAgICAgICB1bndhdGNoZXIoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfV0pO1xuXG59KShtb21lbnQpO1xuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zcmMvYXBwL2NvbXBvbmVudHMvYW5ndWxhci1tYXRlcmlhbC1kYXRldGltZXBpY2tlci9qcy9hbmd1bGFyLW1hdGVyaWFsLWRhdGV0aW1lcGlja2VyLmpzXG4gKiovIiwiLy8gc3R5bGUtbG9hZGVyOiBBZGRzIHNvbWUgY3NzIHRvIHRoZSBET00gYnkgYWRkaW5nIGEgPHN0eWxlPiB0YWdcblxuLy8gbG9hZCB0aGUgc3R5bGVzXG52YXIgY29udGVudCA9IHJlcXVpcmUoXCIhIS4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi9tYXRlcmlhbC1kYXRldGltZXBpY2tlci5jc3NcIik7XG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbi8vIGFkZCB0aGUgc3R5bGVzIHRvIHRoZSBET01cbnZhciB1cGRhdGUgPSByZXF1aXJlKFwiIS4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9hZGRTdHlsZXMuanNcIikoY29udGVudCwge30pO1xuaWYoY29udGVudC5sb2NhbHMpIG1vZHVsZS5leHBvcnRzID0gY29udGVudC5sb2NhbHM7XG4vLyBIb3QgTW9kdWxlIFJlcGxhY2VtZW50XG5pZihtb2R1bGUuaG90KSB7XG5cdC8vIFdoZW4gdGhlIHN0eWxlcyBjaGFuZ2UsIHVwZGF0ZSB0aGUgPHN0eWxlPiB0YWdzXG5cdGlmKCFjb250ZW50LmxvY2Fscykge1xuXHRcdG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4vbWF0ZXJpYWwtZGF0ZXRpbWVwaWNrZXIuY3NzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4vbWF0ZXJpYWwtZGF0ZXRpbWVwaWNrZXIuY3NzXCIpO1xuXHRcdFx0aWYodHlwZW9mIG5ld0NvbnRlbnQgPT09ICdzdHJpbmcnKSBuZXdDb250ZW50ID0gW1ttb2R1bGUuaWQsIG5ld0NvbnRlbnQsICcnXV07XG5cdFx0XHR1cGRhdGUobmV3Q29udGVudCk7XG5cdFx0fSk7XG5cdH1cblx0Ly8gV2hlbiB0aGUgbW9kdWxlIGlzIGRpc3Bvc2VkLCByZW1vdmUgdGhlIDxzdHlsZT4gdGFnc1xuXHRtb2R1bGUuaG90LmRpc3Bvc2UoZnVuY3Rpb24oKSB7IHVwZGF0ZSgpOyB9KTtcbn1cblxuXG4vKioqKioqKioqKioqKioqKipcbiAqKiBXRUJQQUNLIEZPT1RFUlxuICoqIC4vc3JjL2FwcC9jb21wb25lbnRzL2FuZ3VsYXItbWF0ZXJpYWwtZGF0ZXRpbWVwaWNrZXIvY3NzL21hdGVyaWFsLWRhdGV0aW1lcGlja2VyLmNzc1xuICoqIG1vZHVsZSBpZCA9IDU5N1xuICoqIG1vZHVsZSBjaHVua3MgPSAwXG4gKiovIiwiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzXCIpKCk7XG4vLyBpbXBvcnRzXG5cblxuLy8gbW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCJtZC1kaWFsb2cuZHRwe2ZvbnQtc2l6ZToxNHB4O2xpbmUtaGVpZ2h0OjEuNDI4NTcxNDM7Y29sb3I6IzMzMztiYWNrZ3JvdW5kLWNvbG9yOiNmZmY7bWF4LWhlaWdodDpub25lfS5kdHAgOmZvY3Vze291dGxpbmU6bm9uZSFpbXBvcnRhbnR9LmR0cCB0YWJsZXtib3JkZXItc3BhY2luZzowO2JvcmRlci1jb2xsYXBzZTpjb2xsYXBzZTt3aWR0aDoxMDAlfS5kdHAgLnRhYmxlPnRib2R5PnRyPnRkLC5kdHAgLnRhYmxlPnRib2R5PnRyPnRoLC5kdHAgLnRhYmxlPnRmb290PnRyPnRkLC5kdHAgLnRhYmxlPnRmb290PnRyPnRoLC5kdHAgLnRhYmxlPnRoZWFkPnRyPnRkLC5kdHAgLnRhYmxlPnRoZWFkPnRyPnRoe3BhZGRpbmc6OHB4O2xpbmUtaGVpZ2h0OjEuNDI4NTcxNDM7dmVydGljYWwtYWxpZ246dG9wO2JvcmRlci10b3A6MXB4IHNvbGlkICNkZGR9LmR0cCwuZHRwICp7Ym94LXNpemluZzpib3JkZXItYm94IWltcG9ydGFudH0uZHRwPi5kdHAtY29udGVudHttYXgtd2lkdGg6MzAwcHg7bWF4LWhlaWdodDo1MDBweH0uZHRwPi5kdHAtY29udGVudD4uZHRwLWRhdGUtdmlldz5oZWFkZXIuZHRwLWhlYWRlcntiYWNrZ3JvdW5kOiM2ODlmMzg7Y29sb3I6I2ZmZjt0ZXh0LWFsaWduOmNlbnRlcjtwYWRkaW5nOjNweH0uZHRwIGRpdi5kdHAtZGF0ZSwuZHRwIGRpdi5kdHAtdGltZXtiYWNrZ3JvdW5kOiM4YmMzNGE7dGV4dC1hbGlnbjpjZW50ZXI7Y29sb3I6I2ZmZjtwYWRkaW5nOjEwcHh9LmR0cCBkaXYuZHRwLWRhdGU+ZGl2e3BhZGRpbmc6MDttYXJnaW46MH0uZHRwIGRpdi5kdHAtYWN0dWFsLW1vbnRoe2ZvbnQtc2l6ZToxLjVlbX0uZHRwIGRpdi5kdHAtYWN0dWFsLW1heHRpbWUsLmR0cCBkaXYuZHRwLWFjdHVhbC1udW17Zm9udC1zaXplOjNlbTtsaW5lLWhlaWdodDouOX0uZHRwIGRpdi5kdHAtYWN0dWFsLXllYXJ7Zm9udC1zaXplOjEuNmVtO2NvbG9yOiNkY2VkYzh9LmR0cCBkaXYuZHRwLXllYXItYnRue2ZvbnQtc2l6ZToxLjRlbTtsaW5lLWhlaWdodDozMHB4O2N1cnNvcjpwb2ludGVyO2NvbG9yOiNkY2VkYzh9LmR0cCBkaXYuZHRwLXllYXItYnRuLXByZXZ7dGV4dC1hbGlnbjpyaWdodH0uZHRwIGRpdi5kdHAteWVhci1idG4tbmV4dHt0ZXh0LWFsaWduOmxlZnR9LmR0cCBkaXYuZHRwLXBpY2tlcntwYWRkaW5nOjEwcHg7dGV4dC1hbGlnbjpjZW50ZXJ9LmR0cCBkaXYuZHRwLWFjdHVhbC10aW1lLC5kdHAgZGl2LmR0cC1waWNrZXItbW9udGh7Zm9udC13ZWlnaHQ6NTAwO3RleHQtYWxpZ246Y2VudGVyfS5kdHAgLmR0cC1jbG9zZXtwb3NpdGlvbjphYnNvbHV0ZTt0b3A6LjI1ZW07cmlnaHQ6NXB4O2ZvbnQtc2l6ZToxNnB4fS5kdHAgLmR0cC1jbG9zZT5he2NvbG9yOiNmZmY7dGV4dC1kZWNvcmF0aW9uOm5vbmV9LmR0cCAuZHRwLWNsb3NlPmE+aXtmb250LXNpemU6MWVtfS5kdHAgdGFibGUuZHRwLXBpY2tlci1kYXlze21hcmdpbjowO21pbi1oZWlnaHQ6MjIwcHh9LmR0cCBtZC12aXJ0dWFsLXJlcGVhdC1jb250YWluZXIubW9udGhze2hlaWdodDoyNjBweH0uZHRwIHRhYmxlLmR0cC1waWNrZXItZGF5cywuZHRwIHRhYmxlLmR0cC1waWNrZXItZGF5cyB0ciwuZHRwIHRhYmxlLmR0cC1waWNrZXItZGF5cyB0cj50ZHtib3JkZXI6bm9uZX0uZHRwIHRhYmxlLmR0cC1waWNrZXItZGF5cyB0cj50ZHtmb250LXNpemU6MTFweDt0ZXh0LWFsaWduOmNlbnRlcjtwYWRkaW5nOjB9LmR0cCB0YWJsZS5kdHAtcGlja2VyLWRheXMgdHI+dGQ+c3Bhbi5kdHAtc2VsZWN0LWRheXtjb2xvcjojYmRiZGJkIWltcG9ydGFudH0uZHRwIHRhYmxlLmR0cC1waWNrZXItZGF5cyB0cj50ZD4uZHRwLXNlbGVjdC1kYXl7d2lkdGg6MzZweDtoZWlnaHQ6MzZweDtkaXNwbGF5OmlubGluZS1ibG9ja30uZHRwIC5kdHAtcGlja2VyLXRpbWU+YSwuZHRwIHRhYmxlLmR0cC1waWNrZXItZGF5cyB0cj50ZD4uZHRwLXNlbGVjdC1kYXl7Y29sb3I6IzIxMjEyMTt0ZXh0LWRlY29yYXRpb246bm9uZTtwYWRkaW5nOjEwcHg7Ym9yZGVyLXJhZGl1czo1MCUhaW1wb3J0YW50fS5kdHAgdGFibGUuZHRwLXBpY2tlci1kYXlzIHRyPnRkPmEuc2VsZWN0ZWR7YmFja2dyb3VuZDojOGJjMzRhO2NvbG9yOiNmZmZ9LmR0cCB0YWJsZS5kdHAtcGlja2VyLWRheXMgdHI+dGQ+YTpob3Zlcjpub3QoLnNlbGVjdGVkKXtiYWNrZ3JvdW5kOiNkZGR9LmR0cCB0YWJsZS5kdHAtcGlja2VyLWRheXMgdHI+dGh7Y29sb3I6Izc1NzU3NTt0ZXh0LWFsaWduOmNlbnRlcjtmb250LXdlaWdodDo3MDA7cGFkZGluZzo0cHggM3B4fS5kdHAgLnAxMD5he2NvbG9yOiM2ODlmMzg7dGV4dC1kZWNvcmF0aW9uOm5vbmV9LmR0cCAucDEwe3dpZHRoOjEwJX0uZHRwIC5wMTAsLmR0cCAucDIwe2Rpc3BsYXk6aW5saW5lLWJsb2NrfS5kdHAgLnAyMHt3aWR0aDoyMCV9LmR0cCAucDYwe3dpZHRoOjYwJX0uZHRwIC5wNjAsLmR0cCAucDgwe2Rpc3BsYXk6aW5saW5lLWJsb2NrfS5kdHAgLnA4MHt3aWR0aDo4MCV9LmR0cCBhLmR0cC1tZXJpZGllbi1hbSwuZHRwIGEuZHRwLW1lcmlkaWVuLXBte3Bvc2l0aW9uOnJlbGF0aXZlO3RvcDoxMHB4O2NvbG9yOiMyMTIxMjE7Zm9udC13ZWlnaHQ6NTAwO3BhZGRpbmc6N3B4IDVweDtib3JkZXItcmFkaXVzOjUwJSFpbXBvcnRhbnQ7dGV4dC1kZWNvcmF0aW9uOm5vbmU7YmFja2dyb3VuZDojZWVlO2ZvbnQtc2l6ZToxMHB4fS5kdHAgLmR0cC1hY3R1YWwtbWVyaWRpZW4gYS5zZWxlY3RlZHtiYWNrZ3JvdW5kOiM2ODlmMzg7Y29sb3I6I2ZmZn0uZHRwIC5kdHAtcGlja2VyLXRpbWU+YXtkaXNwbGF5OmJsb2NrO2xpbmUtaGVpZ2h0OjIzcHg7cGFkZGluZzozcHh9LmR0cCAuZHRwLXBpY2tlci10aW1le3Bvc2l0aW9uOmFic29sdXRlO3dpZHRoOjMwcHg7aGVpZ2h0OjMwcHg7Zm9udC1zaXplOjEuMWVtO2JvcmRlci1yYWRpdXM6NTAlO2N1cnNvcjpwb2ludGVyO3RleHQtYWxpZ246Y2VudGVyIWltcG9ydGFudH0uZHRwIC5kdHAtcGlja2VyLXRpbWU+YS5kdHAtc2VsZWN0LWhvdXIuc2VsZWN0ZWR7YmFja2dyb3VuZDojNjg5ZjM4O2NvbG9yOiNmZmZ9LmR0cCAuZHRwLXBpY2tlci10aW1lPmEuZHRwLXNlbGVjdC1ob3VyLmRpc2FibGVkLC5kdHAgLmR0cC1waWNrZXItdGltZT5hLmR0cC1zZWxlY3QtbWludXRlLmRpc2FibGVke2NvbG9yOiM3NTc1NzV9LmR0cCAuZHRwLXBpY2tlci10aW1lPmEuZHRwLXNlbGVjdC1taW51dGUuc2VsZWN0ZWR7YmFja2dyb3VuZDojOGJjMzRhO2NvbG9yOiNmZmZ9LmR0cCBkaXYuZHRwLXBpY2tlci1jbG9ja3ttYXJnaW46MTBweCAyMHB4IDA7cGFkZGluZzoxMHB4O2JvcmRlci1yYWRpdXM6NTAlIWltcG9ydGFudDtiYWNrZ3JvdW5kOiNlZWV9LmR0cC1jbG9jay1jZW50ZXJ7d2lkdGg6MTVweDtoZWlnaHQ6MTVweDtiYWNrZ3JvdW5kOiM3NTc1NzU7Ym9yZGVyLXJhZGl1czo1MCU7cG9zaXRpb246YWJzb2x1dGU7ei1pbmRleDo1MH0uZHRwIC5kdHAtaGFuZCwuZHRwIC5kdHAtaG91ci1oYW5ke3Bvc2l0aW9uOmFic29sdXRlO3dpZHRoOjRweDttYXJnaW4tbGVmdDotMnB4O2JhY2tncm91bmQ6I2JkYmRiZDstd2Via2l0LXRyYW5zZm9ybTpyb3RhdGUoMGRlZyk7dHJhbnNmb3JtOnJvdGF0ZSgwZGVnKTstd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46Ym90dG9tO3RyYW5zZm9ybS1vcmlnaW46Ym90dG9tO3otaW5kZXg6MX0uZHRwIC5kdHAtbWludXRlLWhhbmR7d2lkdGg6MnB4O21hcmdpbi1sZWZ0Oi0xcHh9LmR0cCAuZHRwLWhhbmQub257YmFja2dyb3VuZDojOGJjMzRhfS5kdHAgLmR0cC1idXR0b25ze3BhZGRpbmc6MCAxMHB4IDEwcHg7dGV4dC1hbGlnbjpyaWdodH0uZHRwLmhpZGRlbiwuZHRwIC5oaWRkZW57ZGlzcGxheTpub25lfS5kdHAgLmludmlzaWJsZXt2aXNpYmlsaXR5OmhpZGRlbn0uZHRwIC5sZWZ0e2Zsb2F0OmxlZnR9LmR0cCAucmlnaHR7ZmxvYXQ6cmlnaHR9LmR0cCAuY2xlYXJmaXh7Y2xlYXI6Ym90aH0uZHRwIC5jZW50ZXJ7dGV4dC1hbGlnbjpjZW50ZXJ9XCIsIFwiXCJdKTtcblxuLy8gZXhwb3J0c1xuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vY3NzLWxvYWRlciEuL3NyYy9hcHAvY29tcG9uZW50cy9hbmd1bGFyLW1hdGVyaWFsLWRhdGV0aW1lcGlja2VyL2Nzcy9tYXRlcmlhbC1kYXRldGltZXBpY2tlci5jc3NcbiAqKiBtb2R1bGUgaWQgPSA1OThcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIid1c2Ugc3RyaWN0JztcblxuLypcbiAqIGFuZ3VsYXItZ29vZ2xlLXBsdXMtZGlyZWN0aXZlIHYwLjAuMVxuICog4pmhIENvcHlIZWFydCAyMDEzIGJ5IEplcmFkIEJpdG5lciBodHRwOi8vamVyYWRiaXRuZXIuY29tXG4gKiBDb3B5aW5nIGlzIGFuIGFjdCBvZiBsb3ZlLiBQbGVhc2UgY29weS5cbiAqL1xuXG5hbmd1bGFyLm1vZHVsZSgnZGlyZWN0aXZlLmcrc2lnbmluJywgW10pLlxuICBkaXJlY3RpdmUoJ2dvb2dsZVBsdXNTaWduaW4nLCBbJyR3aW5kb3cnLCBmdW5jdGlvbiAoJHdpbmRvdykge1xuICAgIHZhciBlbmRpbmcgPSAvXFwuYXBwc1xcLmdvb2dsZXVzZXJjb250ZW50XFwuY29tJC87XG5cbiAgICByZXR1cm4ge1xuICAgICAgcmVzdHJpY3Q6ICdFJyxcbiAgICAgIHRyYW5zY2x1ZGU6IHRydWUsXG4gICAgICB0ZW1wbGF0ZTogJzxzcGFuPjwvc3Bhbj4nLFxuICAgICAgcmVwbGFjZTogdHJ1ZSxcbiAgICAgIGxpbms6IGZ1bmN0aW9uIChzY29wZSwgZWxlbWVudCwgYXR0cnMsIGN0cmwsIGxpbmtlcikge1xuICAgICAgICBhdHRycy5jbGllbnRpZCArPSAoZW5kaW5nLnRlc3QoYXR0cnMuY2xpZW50aWQpID8gJycgOiAnLmFwcHMuZ29vZ2xldXNlcmNvbnRlbnQuY29tJyk7XG5cbiAgICAgICAgYXR0cnMuJHNldCgnZGF0YS1jbGllbnRpZCcsIGF0dHJzLmNsaWVudGlkKTtcbiAgICAgICAgYXR0cnMuJHNldCgndGhlbWUnLCBhdHRycy50aGVtZSk7XG5cbiAgICAgICAgLy8gU29tZSBkZWZhdWx0IHZhbHVlcywgYmFzZWQgb24gcHJpb3IgdmVyc2lvbnMgb2YgdGhpcyBkaXJlY3RpdmVcbiAgICAgICAgdmFyIGRlZmF1bHRzID0ge1xuICAgICAgICAgIGNhbGxiYWNrOiAnc2lnbmluQ2FsbGJhY2snLFxuICAgICAgICAgIGNvb2tpZXBvbGljeTogJ3NpbmdsZV9ob3N0X29yaWdpbicsXG4gICAgICAgICAgcmVxdWVzdHZpc2libGVhY3Rpb25zOiAnaHR0cDovL3NjaGVtYXMuZ29vZ2xlLmNvbS9BZGRBY3Rpdml0eScsXG4gICAgICAgICAgc2NvcGU6ICdodHRwczovL3d3dy5nb29nbGVhcGlzLmNvbS9hdXRoL3BsdXMubG9naW4gaHR0cHM6Ly93d3cuZ29vZ2xlYXBpcy5jb20vYXV0aC91c2VyaW5mby5lbWFpbCcsXG4gICAgICAgICAgaGVpZ2h0OiAnc3RhbmRhcmQnLFxuICAgICAgICAgIHdpZHRoOiAnd2lkZScsXG4gICAgICAgICAgc3RhdGU6ICcnXG4gICAgICAgIH07XG5cbiAgICAgICAgZGVmYXVsdHMuY2xpZW50aWQgPSBhdHRycy5jbGllbnRpZDtcbiAgICAgICAgZGVmYXVsdHMudGhlbWUgPSBhdHRycy50aGVtZTtcblxuICAgICAgICAvLyBPdmVyd3JpdGUgZGVmYXVsdCB2YWx1ZXMgaWYgZXhwbGljaXRseSBzZXRcbiAgICAgICAgYW5ndWxhci5mb3JFYWNoKE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGRlZmF1bHRzKSwgZnVuY3Rpb24ocHJvcE5hbWUpIHtcbiAgICAgICAgICBpZiAoYXR0cnMuaGFzT3duUHJvcGVydHkocHJvcE5hbWUpKSB7XG4gICAgICAgICAgICBkZWZhdWx0c1twcm9wTmFtZV0gPSBhdHRyc1twcm9wTmFtZV07XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcblxuICAgICAgICAvLyBEZWZhdWx0IGxhbmd1YWdlXG4gICAgICAgIC8vIFN1cHBvcnRlZCBsYW5ndWFnZXM6IGh0dHBzOi8vZGV2ZWxvcGVycy5nb29nbGUuY29tLysvd2ViL2FwaS9zdXBwb3J0ZWQtbGFuZ3VhZ2VzXG4gICAgICAgIGF0dHJzLiRvYnNlcnZlKCdsYW5ndWFnZScsIGZ1bmN0aW9uKHZhbHVlKXtcbiAgICAgICAgICAkd2luZG93Ll9fX2djZmcgPSB7XG4gICAgICAgICAgICBsYW5nOiB2YWx1ZSA/IHZhbHVlIDogJ2VuJ1xuICAgICAgICAgIH07XG4gICAgICAgIH0pO1xuICAgICAgICBcbiAgICAgICAgLy8gQXN5bmNocm9ub3VzbHkgbG9hZCB0aGUgRysgU0RLLlxuICAgICAgICB2YXIgcG8gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzY3JpcHQnKTsgcG8udHlwZSA9ICd0ZXh0L2phdmFzY3JpcHQnOyBwby5hc3luYyA9IHRydWU7XG4gICAgICAgIHBvLnNyYyA9ICdodHRwczovL2FwaXMuZ29vZ2xlLmNvbS9qcy9jbGllbnQ6cGx1c29uZS5qcyc7XG4gICAgICAgIHZhciBzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoJ3NjcmlwdCcpWzBdOyBzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKHBvLCBzKTtcblxuICAgICAgICBsaW5rZXIoZnVuY3Rpb24oZWwsIHRTY29wZSl7XG4gICAgICAgICAgcG8ub25sb2FkID0gZnVuY3Rpb24oKSB7XG4gICAgICAgICAgICBpZiAoZWwubGVuZ3RoKSB7XG4gICAgICAgICAgICAgIGVsZW1lbnQuYXBwZW5kKGVsKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGdhcGkuc2lnbmluLnJlbmRlcihlbGVtZW50WzBdLCBkZWZhdWx0cyk7XG4gICAgICAgICAgfTtcbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfVxufV0pLlxuICBydW4oWyckd2luZG93JywnJHJvb3RTY29wZScsZnVuY3Rpb24oJHdpbmRvdywgJHJvb3RTY29wZSkge1xuICAgICR3aW5kb3cuc2lnbmluQ2FsbGJhY2sgPSBmdW5jdGlvbiAoYXV0aFJlc3VsdCkge1xuICAgICAgaWYgKGF1dGhSZXN1bHQgJiYgYXV0aFJlc3VsdC5hY2Nlc3NfdG9rZW4pe1xuICAgICAgICAkcm9vdFNjb3BlLiRicm9hZGNhc3QoJ2V2ZW50Omdvb2dsZS1wbHVzLXNpZ25pbi1zdWNjZXNzJywgYXV0aFJlc3VsdCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAkcm9vdFNjb3BlLiRicm9hZGNhc3QoJ2V2ZW50Omdvb2dsZS1wbHVzLXNpZ25pbi1mYWlsdXJlJywgYXV0aFJlc3VsdCk7XG4gICAgICB9XG4gICAgfTsgXG59XSk7XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL3NyYy9hcHAvY29tcG9uZW50cy9hbmd1bGFyLWRpcmVjdGl2ZS5nLXNpZ25pbi9nb29nbGUtcGx1cy1zaWduaW4uanNcbiAqKi8iLCIvLyBzdHlsZS1sb2FkZXI6IEFkZHMgc29tZSBjc3MgdG8gdGhlIERPTSBieSBhZGRpbmcgYSA8c3R5bGU+IHRhZ1xuXG4vLyBsb2FkIHRoZSBzdHlsZXNcbnZhciBjb250ZW50ID0gcmVxdWlyZShcIiEhLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9pbmRleC5qcyEuL3ZlbmRvci5zY3NzXCIpO1xuaWYodHlwZW9mIGNvbnRlbnQgPT09ICdzdHJpbmcnKSBjb250ZW50ID0gW1ttb2R1bGUuaWQsIGNvbnRlbnQsICcnXV07XG4vLyBhZGQgdGhlIHN0eWxlcyB0byB0aGUgRE9NXG52YXIgdXBkYXRlID0gcmVxdWlyZShcIiEuLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvYWRkU3R5bGVzLmpzXCIpKGNvbnRlbnQsIHt9KTtcbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuLy8gSG90IE1vZHVsZSBSZXBsYWNlbWVudFxuaWYobW9kdWxlLmhvdCkge1xuXHQvLyBXaGVuIHRoZSBzdHlsZXMgY2hhbmdlLCB1cGRhdGUgdGhlIDxzdHlsZT4gdGFnc1xuXHRpZighY29udGVudC5sb2NhbHMpIHtcblx0XHRtb2R1bGUuaG90LmFjY2VwdChcIiEhLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9pbmRleC5qcyEuL3ZlbmRvci5zY3NzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2luZGV4LmpzIS4vdmVuZG9yLnNjc3NcIik7XG5cdFx0XHRpZih0eXBlb2YgbmV3Q29udGVudCA9PT0gJ3N0cmluZycpIG5ld0NvbnRlbnQgPSBbW21vZHVsZS5pZCwgbmV3Q29udGVudCwgJyddXTtcblx0XHRcdHVwZGF0ZShuZXdDb250ZW50KTtcblx0XHR9KTtcblx0fVxuXHQvLyBXaGVuIHRoZSBtb2R1bGUgaXMgZGlzcG9zZWQsIHJlbW92ZSB0aGUgPHN0eWxlPiB0YWdzXG5cdG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufVxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9zcmMvYXBwL3Njc3MvdmVuZG9yLnNjc3NcbiAqKiBtb2R1bGUgaWQgPSA2NDNcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsImV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoXCIuLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2xpYi9jc3MtYmFzZS5qc1wiKSgpO1xuLy8gaW1wb3J0c1xuXG5cbi8vIG1vZHVsZVxuZXhwb3J0cy5wdXNoKFttb2R1bGUuaWQsIFwiXCIsIFwiXCJdKTtcblxuLy8gZXhwb3J0c1xuXG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL34vY3NzLWxvYWRlciEuL34vc2Fzcy1sb2FkZXIhLi9zcmMvYXBwL3Njc3MvdmVuZG9yLnNjc3NcbiAqKiBtb2R1bGUgaWQgPSA2NDRcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsIi8vIHN0eWxlLWxvYWRlcjogQWRkcyBzb21lIGNzcyB0byB0aGUgRE9NIGJ5IGFkZGluZyBhIDxzdHlsZT4gdGFnXG5cbi8vIGxvYWQgdGhlIHN0eWxlc1xudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2luZGV4LmpzIS4vaW5kZXguc2Nzc1wiKTtcbmlmKHR5cGVvZiBjb250ZW50ID09PSAnc3RyaW5nJykgY29udGVudCA9IFtbbW9kdWxlLmlkLCBjb250ZW50LCAnJ11dO1xuLy8gYWRkIHRoZSBzdHlsZXMgdG8gdGhlIERPTVxudmFyIHVwZGF0ZSA9IHJlcXVpcmUoXCIhLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2FkZFN0eWxlcy5qc1wiKShjb250ZW50LCB7fSk7XG5pZihjb250ZW50LmxvY2FscykgbW9kdWxlLmV4cG9ydHMgPSBjb250ZW50LmxvY2Fscztcbi8vIEhvdCBNb2R1bGUgUmVwbGFjZW1lbnRcbmlmKG1vZHVsZS5ob3QpIHtcblx0Ly8gV2hlbiB0aGUgc3R5bGVzIGNoYW5nZSwgdXBkYXRlIHRoZSA8c3R5bGU+IHRhZ3Ncblx0aWYoIWNvbnRlbnQubG9jYWxzKSB7XG5cdFx0bW9kdWxlLmhvdC5hY2NlcHQoXCIhIS4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvaW5kZXguanMhLi9pbmRleC5zY3NzXCIsIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIG5ld0NvbnRlbnQgPSByZXF1aXJlKFwiISEuLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2luZGV4LmpzIS4vaW5kZXguc2Nzc1wiKTtcblx0XHRcdGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuXHRcdFx0dXBkYXRlKG5ld0NvbnRlbnQpO1xuXHRcdH0pO1xuXHR9XG5cdC8vIFdoZW4gdGhlIG1vZHVsZSBpcyBkaXNwb3NlZCwgcmVtb3ZlIHRoZSA8c3R5bGU+IHRhZ3Ncblx0bW9kdWxlLmhvdC5kaXNwb3NlKGZ1bmN0aW9uKCkgeyB1cGRhdGUoKTsgfSk7XG59XG5cblxuLyoqKioqKioqKioqKioqKioqXG4gKiogV0VCUEFDSyBGT09URVJcbiAqKiAuL3NyYy9hcHAvc2Nzcy9pbmRleC5zY3NzXG4gKiogbW9kdWxlIGlkID0gNjQ1XG4gKiogbW9kdWxlIGNodW5rcyA9IDBcbiAqKi8iLCJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9saWIvY3NzLWJhc2UuanNcIikoKTtcbi8vIGltcG9ydHNcblxuXG4vLyBtb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi5kaXN0cmlidXRvci1zZWxlY3Rpb257Zm9udC1zaXplOjE2cHQ7cGFkZGluZzozcHg7bWFyZ2luOjNweH1ib2R5e21hcmdpbi10b3A6MTAwcHg7YmFja2dyb3VuZC1jb2xvcjp0cmFuc3BhcmVudH1AbWVkaWEgKG1pbi13aWR0aDo3NjhweCl7Ym9keXttYXJnaW4tdG9wOjUwcHh9fSN3cmFwcGVye3BhZGRpbmctbGVmdDowfSNwYWdlLXdyYXBwZXJ7d2lkdGg6MTAwJTtwYWRkaW5nOjA7YmFja2dyb3VuZC1jb2xvcjojZmZmfS5odWdle2ZvbnQtc2l6ZTo1MHB4O2xpbmUtaGVpZ2h0Om5vcm1hbH1AbWVkaWEgKG1pbi13aWR0aDo3NjhweCl7I3dyYXBwZXJ7cGFkZGluZy1sZWZ0OjIyNXB4fSNwYWdlLXdyYXBwZXJ7cGFkZGluZzoxMHB4fX0ubWFyZ2luLXRvcC0wNXttYXJnaW4tdG9wOi41ZW19Lm1hcmdpbi10b3AtMTV7bWFyZ2luLXRvcDoxLjVlbX0ubWFyZ2luLXRvcC0yMHttYXJnaW4tdG9wOjJlbX0ubWFyZ2luLXRvcC0yNXttYXJnaW4tdG9wOjIuNWVtfS5tYXJnaW4tdG9wLTUwe21hcmdpbi10b3A6NWVtfS5pc3N1ZS13YXJuaW5nLWJhY2tncm91bmR7YmFja2dyb3VuZC1jb2xvcjpvcmFuZ2V9Lmlzc3VlLXdhcm5pbmctdGV4dHtjb2xvcjpvcmFuZ2V9Lmlzc3VlLWRhbmdlci1iYWNrZ3JvdW5ke2JhY2tncm91bmQtY29sb3I6cmVkfS5pc3N1ZS1kYW5nZXItdGV4dHtjb2xvcjpyZWR9Lmlzc3VlLW5vcm1hbC1iYWNrZ3JvdW5ke2JhY2tncm91bmQtY29sb3I6Z3JlZW59Lmlzc3VlLW5vcm1hbC10ZXh0e2NvbG9yOmdyZWVufS51cC10cnVlLWJhY2tncm91bmR7YmFja2dyb3VuZC1jb2xvcjpncmVlbn0udXAtZmFsc2UtYmFja2dyb3VuZHtiYWNrZ3JvdW5kLWNvbG9yOnJlZH0ubmF2YmFyLWRlZmF1bHR7YmFja2dyb3VuZC1jb2xvcjojMWI3NWJiO2JvcmRlci1jb2xvcjojMTU1OThlfS5uYXZiYXItZGVmYXVsdCAubmF2YmFyLWJyYW5ke2NvbG9yOiNmZmZ9Lm5hdmJhci1kZWZhdWx0IC5uYXZiYXItYnJhbmQ6Zm9jdXMsLm5hdmJhci1kZWZhdWx0IC5uYXZiYXItYnJhbmQ6aG92ZXJ7Y29sb3I6IzU1YTdlN30ubmF2YmFyLWRlZmF1bHQgLm5hdmJhci1uYXY+bGk+YSwubmF2YmFyLWRlZmF1bHQgLm5hdmJhci1uYXY+bGk+YTpmb2N1cywubmF2YmFyLWRlZmF1bHQgLm5hdmJhci1uYXY+bGk+YTpob3Zlcntjb2xvcjojZmZmfS5uYXZiYXItZGVmYXVsdCAubmF2YmFyLW5hdj4uYWN0aXZlPmEsLm5hdmJhci1kZWZhdWx0IC5uYXZiYXItbmF2Pi5hY3RpdmU+YTpmb2N1cywubmF2YmFyLWRlZmF1bHQgLm5hdmJhci1uYXY+LmFjdGl2ZT5hOmhvdmVye2NvbG9yOiNmZmY7YmFja2dyb3VuZC1jb2xvcjojYWZkNWYzfS5uYXZiYXItZGVmYXVsdCAubmF2YmFyLW5hdj4ub3Blbj5hLC5uYXZiYXItZGVmYXVsdCAubmF2YmFyLW5hdj4ub3Blbj5hOmZvY3VzLC5uYXZiYXItZGVmYXVsdCAubmF2YmFyLW5hdj4ub3Blbj5hOmhvdmVye2NvbG9yOiM1NTU7YmFja2dyb3VuZC1jb2xvcjojZDVkNWQ1fS5uYXZiYXItZGVmYXVsdCAubmF2YmFyLW5hdj4uZHJvcGRvd24+YSAuY2FyZXR7Ym9yZGVyLXRvcC1jb2xvcjojNzc3O2JvcmRlci1ib3R0b20tY29sb3I6Izc3N30ubmF2YmFyLWRlZmF1bHQgLm5hdmJhci1uYXY+LmRyb3Bkb3duPmE6Zm9jdXMgLmNhcmV0LC5uYXZiYXItZGVmYXVsdCAubmF2YmFyLW5hdj4uZHJvcGRvd24+YTpob3ZlciAuY2FyZXR7Ym9yZGVyLXRvcC1jb2xvcjojMzMzO2JvcmRlci1ib3R0b20tY29sb3I6IzMzM30ubmF2YmFyLWRlZmF1bHQgLm5hdmJhci1uYXY+Lm9wZW4+YSAuY2FyZXQsLm5hdmJhci1kZWZhdWx0IC5uYXZiYXItbmF2Pi5vcGVuPmE6Zm9jdXMgLmNhcmV0LC5uYXZiYXItZGVmYXVsdCAubmF2YmFyLW5hdj4ub3Blbj5hOmhvdmVyIC5jYXJldHtib3JkZXItdG9wLWNvbG9yOiM1NTU7Ym9yZGVyLWJvdHRvbS1jb2xvcjojNTU1fS5uYXZiYXItZGVmYXVsdCAubmF2YmFyLXRvZ2dsZXtib3JkZXItY29sb3I6I2RkZH0ubmF2YmFyLWRlZmF1bHQgLm5hdmJhci10b2dnbGU6Zm9jdXMsLm5hdmJhci1kZWZhdWx0IC5uYXZiYXItdG9nZ2xlOmhvdmVye2JhY2tncm91bmQtY29sb3I6I2RkZH0ubmF2YmFyLWRlZmF1bHQgLm5hdmJhci10b2dnbGUgLmljb24tYmFye2JhY2tncm91bmQtY29sb3I6I2NjY31AbWVkaWEgKG1heC13aWR0aDo3NjdweCl7Lm5hdmJhci1kZWZhdWx0IC5uYXZiYXItbmF2IC5vcGVuIC5kcm9wZG93bi1tZW51PmxpPmF7Y29sb3I6Izc3N30ubmF2YmFyLWRlZmF1bHQgLm5hdmJhci1uYXYgLm9wZW4gLmRyb3Bkb3duLW1lbnU+bGk+YTpmb2N1cywubmF2YmFyLWRlZmF1bHQgLm5hdmJhci1uYXYgLm9wZW4gLmRyb3Bkb3duLW1lbnU+bGk+YTpob3Zlcntjb2xvcjojMzMzfX0udG9wLW5hdntwYWRkaW5nOjAgMTVweH0udG9wLW5hdj5saXtkaXNwbGF5OmlubGluZS1ibG9jaztmbG9hdDpsZWZ0fS50b3AtbmF2PmxpPmF7cGFkZGluZy10b3A6MTVweDtwYWRkaW5nLWJvdHRvbToxNXB4O2xpbmUtaGVpZ2h0OjIwcHg7Y29sb3I6I2VmZWZlZn0udG9wLW5hdj4ub3Blbj5hLC50b3AtbmF2Pi5vcGVuPmE6Zm9jdXMsLnRvcC1uYXY+Lm9wZW4+YTpob3ZlciwudG9wLW5hdj5saT5hOmZvY3VzLC50b3AtbmF2PmxpPmE6aG92ZXJ7Y29sb3I6I2ZmZjtiYWNrZ3JvdW5kLWNvbG9yOiMxYjc1YmJ9LnRvcC1uYXY+Lm9wZW4+LmRyb3Bkb3duLW1lbnV7ZmxvYXQ6bGVmdDtwb3NpdGlvbjphYnNvbHV0ZTttYXJnaW4tdG9wOjA7Ym9yZGVyOjFweCBzb2xpZCByZ2JhKDAsMCwwLC4xNSk7Ym9yZGVyLXRvcC1sZWZ0LXJhZGl1czowO2JvcmRlci10b3AtcmlnaHQtcmFkaXVzOjA7YmFja2dyb3VuZC1jb2xvcjojZmZmO2JveC1zaGFkb3c6MCA2cHggMTJweCByZ2JhKDAsMCwwLC4xNzUpfS50b3AtbmF2Pi5vcGVuPi5kcm9wZG93bi1tZW51PmxpPmF7d2hpdGUtc3BhY2U6bm9ybWFsfXVsLm1lc3NhZ2UtZHJvcGRvd257cGFkZGluZzowO21heC1oZWlnaHQ6MjUwcHg7b3ZlcmZsb3cteDpoaWRkZW47b3ZlcmZsb3cteTphdXRvfWxpLm1lc3NhZ2UtcHJldmlld3t3aWR0aDoyNzVweDtib3JkZXItYm90dG9tOjFweCBzb2xpZCByZ2JhKDAsMCwwLC4xNSl9bGkubWVzc2FnZS1wcmV2aWV3PmF7cGFkZGluZy10b3A6MTVweDtwYWRkaW5nLWJvdHRvbToxNXB4fWxpLm1lc3NhZ2UtZm9vdGVye21hcmdpbjo1cHggMH11bC5hbGVydC1kcm9wZG93bnt3aWR0aDoyMDBweH1AbWVkaWEgKG1pbi13aWR0aDo3NjhweCl7LnNpZGUtbmF2e3Bvc2l0aW9uOmZpeGVkO3RvcDo1MXB4O2xlZnQ6MjI1cHg7bWFyZ2luLWxlZnQ6LTIyNXB4O2JvcmRlcjpub25lO2JvcmRlci1yYWRpdXM6MDtvdmVyZmxvdy15OmF1dG87YmFja2dyb3VuZC1jb2xvcjojMWI3NWJiO2JvdHRvbTowO292ZXJmbG93LXg6aGlkZGVuO3BhZGRpbmctYm90dG9tOjQwcHh9LnNpZGUtbmF2LC5zaWRlLW5hdj5saT5he3dpZHRoOjIyNXB4fS5zaWRlLW5hdiBsaSBhOmZvY3VzLC5zaWRlLW5hdiBsaSBhOmhvdmVye291dGxpbmU6bm9uZTtiYWNrZ3JvdW5kLWNvbG9yOiMzZjljZTMhaW1wb3J0YW50fX0uc2lkZS1uYXY+bGk+dWx7cGFkZGluZzowfS5zaWRlLW5hdj5saT51bD5saT5he2Rpc3BsYXk6YmxvY2s7cGFkZGluZzoxMHB4IDE1cHggMTBweCAzOHB4O3RleHQtZGVjb3JhdGlvbjpub25lO2NvbG9yOiNkNGQ0ZDR9LnNpZGUtbmF2PmxpPnVsPmxpPmE6aG92ZXJ7Y29sb3I6I2ZmZn0uZmxvdC1jaGFydHtkaXNwbGF5OmJsb2NrO2hlaWdodDo0MDBweH0uZmxvdC1jaGFydC1jb250ZW50e3dpZHRoOjEwMCU7aGVpZ2h0OjEwMCV9Lmh1Z2V7Zm9udC1zaXplOjQwcHh9LnBhbmVsLWdyZWVue2JvcmRlci1jb2xvcjojNWNiODVjfS5wYW5lbC1ncmVlbj4ucGFuZWwtaGVhZGluZ3tib3JkZXItY29sb3I6IzVjYjg1Yztjb2xvcjojZmZmO2JhY2tncm91bmQtY29sb3I6IzVjYjg1Y30ucGFuZWwtZ3JlZW4+YXtjb2xvcjojNWNiODVjfS5wYW5lbC1ncmVlbj5hOmhvdmVye2NvbG9yOiMzZDhiM2R9LnBhbmVsLXJlZHtib3JkZXItY29sb3I6I2Q5NTM0Zn0ucGFuZWwtcmVkPi5wYW5lbC1oZWFkaW5ne2JvcmRlci1jb2xvcjojZDk1MzRmO2NvbG9yOiNmZmY7YmFja2dyb3VuZC1jb2xvcjojZDk1MzRmfS5wYW5lbC1yZWQ+YXtjb2xvcjojZDk1MzRmfS5wYW5lbC1yZWQ+YTpob3Zlcntjb2xvcjojYjUyYjI3fS5wYW5lbC15ZWxsb3d7Ym9yZGVyLWNvbG9yOiNmMGFkNGV9LnBhbmVsLXllbGxvdz4ucGFuZWwtaGVhZGluZ3tib3JkZXItY29sb3I6I2YwYWQ0ZTtjb2xvcjojZmZmO2JhY2tncm91bmQtY29sb3I6I2YwYWQ0ZX0ucGFuZWwteWVsbG93PmF7Y29sb3I6I2YwYWQ0ZX0ucGFuZWwteWVsbG93PmE6aG92ZXJ7Y29sb3I6I2RmOGExM30udG9vbGJhcnttYXJnaW4tYm90dG9tOjEwcHh9LmVudGl0eS1rZXl7Zm9udC1mYW1pbHk6TW9uYWNvLENvbnNvbGFzLEx1Y2lkYSBDb25zb2xlLGRlamF2dSBzYW5zIG1vbm8sbW9ub3NwYWNlO2ZvbnQtc2l6ZToxMXB4fS5wcm9vZi1vZi1wbGF5LWxhYmVse3BhZGRpbmctYm90dG9tOjEwcHg7cGFkZGluZy10b3A6MTBweH0uY29weS1yZWFkeS10cmFuc3BhcmVudHtjb2xvcjp0cmFuc3BhcmVudH0ubm8tZGV2aWNlc3t0ZXh0LWFsaWduOmNlbnRlcn0ucHJvcGVydGllcy13b3JkLWJyZWFre3dpZHRoOjM5MHB4O3dvcmQtd3JhcDpicmVhay13b3JkO2Rpc3BsYXk6YmxvY2t9LmNvbW1hbmQtaGlzdG9yeS1jb21tYW5ke3dpZHRoOjM3NXB4O3dvcmQtd3JhcDpicmVhay13b3JkO2Rpc3BsYXk6YmxvY2t9Lmhvc3RuYW1lLXdvcmQtYnJlYWt7d2lkdGg6MjAwcHg7d29yZC13cmFwOmJyZWFrLXdvcmQ7ZGlzcGxheTppbmxpbmUtYmxvY2t9W2RhdGEtbmctY2xpY2tdLFtuZy1jbGlja10sW3gtbmctY2xpY2tde2N1cnNvcjpwb2ludGVyfSNwcm9vZnBsYXktc2VsZWN0ZWQtaXRlbXN7bWluLXdpZHRoOjAhaW1wb3J0YW50O21hcmdpbjowIGF1dG87cGFkZGluZzowIGF1dG99LnJhZGlvLWJ1dHRvbntwYWRkaW5nOjNweH0uaG9yaXpvbnRhbC1zdWJtaXR7bWFyZ2luOi41ZW19Lmhvcml6b250YWwtc3VibWl0LC5yYWRpby1ob3Jpem9udGFse2Rpc3BsYXk6ZmxleDthbGlnbi1zZWxmOmNlbnRlcjstbXMtZmxleC1hbGlnbjpjZW50ZXI7LXdlYmtpdC1hbGlnbi1pdGVtczpjZW50ZXI7LXdlYmtpdC1ib3gtYWxpZ246Y2VudGVyfW1kLXRvb2xiYXIubWQtZGVmYXVsdC10aGVtZTpub3QoLm1kLW1lbnUtdG9vbGJhciksbWQtdG9vbGJhcjpub3QoLm1kLW1lbnUtdG9vbGJhcil7YmFja2dyb3VuZC1jb2xvcjojMWI3NWJiIWltcG9ydGFudDttYXgtaGVpZ2h0OjY0cHg7bWluLWhlaWdodDo2NHB4fS5tZC10b29sYmFyLXRvb2xze2JhY2tncm91bmQtY29sb3I6IzAwMCFpbXBvcnRhbnQ7bWF4LWhlaWdodDo2NHB4O21pbi1oZWlnaHQ6NjRweH0uc2t5a2l0LWltYWdle21heC13aWR0aDoxMDAlO2hlaWdodDozM3B4fUBtZWRpYSAobWF4LXdpZHRoOjc2N3B4KXttZC10b29sYmFyLm1kLWRlZmF1bHQtdGhlbWU6bm90KC5tZC1tZW51LXRvb2xiYXIpLG1kLXRvb2xiYXI6bm90KC5tZC1tZW51LXRvb2xiYXIpe21hcmdpbi10b3A6LTUwcHg7bWFyZ2luLWJvdHRvbTo1MHB4fX0uY2VudGVyLWJsb2Nre3RleHQtYWxpZ246Y2VudGVyfS5lbGxpcHNpcy1vdmVyZmxvdywucHJvb2Ytb2YtcGxheS1zZWxlY3RlZC1pdGVte3dpZHRoOjEwMCU7d2hpdGUtc3BhY2U6bm93cmFwO292ZXJmbG93OmhpZGRlbjt0ZXh0LWFsaWduOmxlZnQ7dGV4dC1vdmVyZmxvdzplbGxpcHNpc30ucHJvb2Ytb2YtcGxheS10ZW5hbnQtbmFtZS1vcHRpb257d2lkdGg6N2VtO3doaXRlLXNwYWNlOm5vd3JhcDtvdmVyZmxvdzpoaWRkZW47dGV4dC1hbGlnbjpjZW50ZXI7cG9zaXRpdGlvbjphYnNvbHV0ZTt0ZXh0LW92ZXJmbG93OmVsbGlwc2lzfS5wcm9vZi1vZi1wbGF5LWhvcml6b250YWwtdG9wLWJhcnthbGlnbi1zZWxmOmNlbnRlcjstbXMtZmxleC1hbGlnbjpjZW50ZXI7LXdlYmtpdC1hbGlnbi1pdGVtczpjZW50ZXI7LXdlYmtpdC1ib3gtYWxpZ246Y2VudGVyO21hcmdpbi10b3A6LjVlbTttYXJnaW4tYm90dG9tOi41ZW07YWxpZ24taXRlbXM6Y2VudGVyfS5teS1mbGV4LC5wcm9vZi1vZi1wbGF5LWhvcml6b250YWwtdG9wLWJhcntkaXNwbGF5OmZsZXg7anVzdGlmeS1jb250ZW50OmNlbnRlcn0uYmlnZ2VyLWJ1dHRvbnN7cGFkZGluZzouNGVtO21pbi13aWR0aDo4OHB4O2JvcmRlci1yYWRpdXM6NXB4O2ZvbnQtc2l6ZToxNnB4O3RleHQtYWxpZ246Y2VudGVyO3RleHQtZGVjb3JhdGlvbjpub25lO2JvcmRlcjpub25lO291dGxpbmU6bm9uZX0uYWRtaW4tY29udGFpbmVye2Rpc3BsYXk6ZmxleDthbGlnbi1jb250ZW50OmZsZXgtc3RhcnR9LnJlZ2lzdHJhdGlvbi1ldmVudC1jb2x1bW57aGVpZ2h0OjExMHB4O2Rpc3BsYXk6aW5saW5lLWJsb2NrO3ZlcnRpY2FsLWFsaWduOnRvcDtvdmVyZmxvdzpzY3JvbGx9LnB1bGwtY29tbWFuZC1zZW5kLWJ1dHRvbi11cHttYXJnaW4tdG9wOi0ycHh9aGVhZGVyLmR0cC1oZWFkZXJ7YmFja2dyb3VuZDojMWI3NWJiIWltcG9ydGFudH0uZHRwIGRpdi5kdHAtZGF0ZSwuZHRwIGRpdi5kdHAtdGltZXtiYWNrZ3JvdW5kOiMwMDB9LmR0cCAuZHRwLWFjdHVhbC1tZXJpZGllbiBhLnNlbGVjdGVkLC5kdHAgLmR0cC1waWNrZXItdGltZT5hLmR0cC1zZWxlY3QtaG91ci5zZWxlY3RlZCwuZHRwIHRhYmxlLmR0cC1waWNrZXItZGF5cyB0cj50ZD5hLnNlbGVjdGVke2JhY2tncm91bmQ6IzFiNzViYiFpbXBvcnRhbnR9LmR0cCAuZHRwLWhhbmQub257YmFja2dyb3VuZDojMDAwfS5kZXZpY2UtcHJvcGVydGllcy1zd2l0Y2h7bWFyZ2luLXRvcDotMXB4fS5tZC1jb250ZW50LWNvbW1hbmQtb3ZlcnJpZGUgbWQtY29udGVudHtvdmVyZmxvdzp1bnNldH0ucHVsbC10b29sdGlwLWxlZnR7bWFyZ2luLWxlZnQ6LTU1cHh9LmNvbW1hbmQtYnV0dG9uLXJpZ2h0e2Zsb2F0OnJpZ2h0O2ZsZXgtZGlyZWN0aW9uOnJvdy1yZXZlcnNlfW1kLXNlbGVjdHtkaXNwbGF5OmJsb2NrO21hcmdpbjoxMHB4IDAgOHB4O3BhZGRpbmctYm90dG9tOjJweDtwb3NpdGlvbjpyZWxhdGl2ZTttaW4td2lkdGg6MTgwcHg7bWF4LXdpZHRoOjE4MHB4fS5zbWFsbC1kZWxldGUtYnV0dG9ue2Zsb2F0OnJpZ2h0O21pbi13aWR0aDoyNXB4O21hcmdpbi10b3A6LTE1cHg7bWFyZ2luLXJpZ2h0Oi01cHh9LnRlbmFudC1pbWFnZS1uYW1le3dpZHRoOjEwZW07d2hpdGUtc3BhY2U6bm93cmFwO292ZXJmbG93OmhpZGRlbjt0ZXh0LW92ZXJmbG93OmVsbGlwc2lzfVwiLCBcIlwiXSk7XG5cbi8vIGV4cG9ydHNcblxuXG5cbi8qKioqKioqKioqKioqKioqKlxuICoqIFdFQlBBQ0sgRk9PVEVSXG4gKiogLi9+L2Nzcy1sb2FkZXIhLi9+L3Nhc3MtbG9hZGVyIS4vc3JjL2FwcC9zY3NzL2luZGV4LnNjc3NcbiAqKiBtb2R1bGUgaWQgPSA2NDZcbiAqKiBtb2R1bGUgY2h1bmtzID0gMFxuICoqLyIsImltcG9ydCBtb21lbnQgZnJvbSAnbW9tZW50JztcblxuZnVuY3Rpb24gRGV2aWNlRGV0YWlsc0NvbW1hbmRzQ3RybCgkbG9nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc3RhdGVQYXJhbXMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzdGF0ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgU2Vzc2lvbnNTZXJ2aWNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBEZXZpY2VzU2VydmljZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgTG9jYXRpb25zU2VydmljZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgQ29tbWFuZHNTZXJ2aWNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBUaW1lem9uZXNTZXJ2aWNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzd2VldCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUHJvZ3Jlc3NCYXJTZXJ2aWNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAkbWREaWFsb2csXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRvYXN0c1NlcnZpY2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICR0aW1lb3V0KSB7XG4gIFwibmdJbmplY3RcIjtcblxuICBsZXQgdm0gPSB0aGlzO1xuICB2bS50ZW5hbnRLZXkgPSAkc3RhdGVQYXJhbXMudGVuYW50S2V5O1xuICB2bS5kZXZpY2VLZXkgPSAkc3RhdGVQYXJhbXMuZGV2aWNlS2V5O1xuICB2bS5mcm9tRGV2aWNlcyA9ICRzdGF0ZVBhcmFtcy5mcm9tRGV2aWNlcyA9PT0gXCJ0cnVlXCI7XG4gIHZtLmN1cnJlbnREZXZpY2UgPSB7fTtcbiAgdm0uY29tbWFuZEV2ZW50cyA9IFtdO1xuXG4gIHZtLmdlbmVyYXRlTG9jYWxGcm9tVVRDID0gZnVuY3Rpb24gKFVUQ1RpbWUpIHtcbiAgICBsZXQgbG9jYWxUaW1lID0gbW9tZW50LnV0YyhVVENUaW1lKS50b0RhdGUoKTtcbiAgICByZXR1cm4gbG9jYWxUaW1lID0gbW9tZW50KGxvY2FsVGltZSkuZm9ybWF0KCdZWVlZLU1NLUREIGhoOm1tOnNzIEEnKTtcbiAgfTtcblxuICB2bS5yZXBsYWNlQ29tbWFuZFRpbWUgPSBmdW5jdGlvbiAoaXNzdWVzKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpc3N1ZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGxldCBlYWNoID0gaXNzdWVzW2ldO1xuICAgICAgaWYgKGVhY2gucG9zdGVkVGltZSkge1xuICAgICAgICBlYWNoLnBvc3RlZFRpbWUgPSB2bS5nZW5lcmF0ZUxvY2FsRnJvbVVUQyhlYWNoLnBvc3RlZFRpbWUpO1xuICAgICAgfVxuICAgICAgaWYgKGVhY2guY29uZmlybWVkVGltZSkge1xuICAgICAgICBlYWNoLmNvbmZpcm1lZFRpbWUgPSB2bS5nZW5lcmF0ZUxvY2FsRnJvbVVUQyhlYWNoLmNvbmZpcm1lZFRpbWUpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm47XG4gIH07XG5cbiAgdm0uZ2V0RXZlbnRzID0gZnVuY3Rpb24gKGRldmljZUtleSwgcHJldiwgbmV4dCkge1xuICAgIFByb2dyZXNzQmFyU2VydmljZS5zdGFydCgpO1xuICAgIGxldCBjb21tYW5kRXZlbnRzUHJvbWlzZSA9IERldmljZXNTZXJ2aWNlLmdldENvbW1hbmRFdmVudHNCeUtleShkZXZpY2VLZXksIHByZXYsIG5leHQpO1xuICAgIHJldHVybiBjb21tYW5kRXZlbnRzUHJvbWlzZS50aGVuKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICB2bS5yZXBsYWNlQ29tbWFuZFRpbWUoZGF0YS5ldmVudHMpO1xuICAgICAgdm0uZXZlbnRfbmV4dF9jdXJzb3IgPSBkYXRhLm5leHRfY3Vyc29yO1xuICAgICAgdm0uZXZlbnRfcHJldl9jdXJzb3IgPSBkYXRhLnByZXZfY3Vyc29yO1xuICAgICAgdm0uY29tbWFuZEV2ZW50cyA9IGRhdGEuZXZlbnRzO1xuICAgICAgcmV0dXJuIFByb2dyZXNzQmFyU2VydmljZS5jb21wbGV0ZSgpO1xuICAgIH0pO1xuICB9O1xuXG4gIHZtLmdldEV2ZW50c1RpbWVPdXQgPSAoZGV2aWNlS2V5LCBwcmV2LCBuZXh0KSA9PlxuICAgICR0aW1lb3V0KCggKCkgPT4gdm0uZ2V0RXZlbnRzKGRldmljZUtleSwgcHJldiwgbmV4dCkpLCAxMDAwKVxuICA7XG5cbiAgdm0uY29tbWFuZEhpc3RvcnlTZWxlY3RlZCA9ICgpID0+IHZtLmdldEV2ZW50cyh2bS5kZXZpY2VLZXkpO1xuXG4gIHZtLnBhZ2luYXRlRXZlbnRDYWxsID0gZnVuY3Rpb24gKGZvcndhcmQpIHtcbiAgICBpZiAoZm9yd2FyZCkge1xuICAgICAgcmV0dXJuIHZtLmdldEV2ZW50cyh2bS5kZXZpY2VLZXksIG51bGwsIHZtLmV2ZW50X25leHRfY3Vyc29yKTtcblxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdm0uZ2V0RXZlbnRzKHZtLmRldmljZUtleSwgdm0uZXZlbnRfcHJldl9jdXJzb3IsIG51bGwpO1xuICAgIH1cbiAgfTtcblxuICB2bS5pbml0aWFsaXplID0gZnVuY3Rpb24gKCkge1xuICAgIGxldCBkZXZpY2VQcm9taXNlID0gRGV2aWNlc1NlcnZpY2UuZ2V0RGV2aWNlQnlLZXkodm0uZGV2aWNlS2V5KTtcbiAgICBkZXZpY2VQcm9taXNlLnRoZW4oKHJlc3BvbnNlID0+IHZtLm9uR2V0RGV2aWNlU3VjY2VzcyhyZXNwb25zZSkpLCByZXNwb25zZSA9PiB2bS5vbkdldERldmljZUZhaWx1cmUocmVzcG9uc2UpKTtcblxuICAgIHJldHVybiB2bS5nZXRFdmVudHModm0uZGV2aWNlS2V5KTtcbiAgfTtcblxuICB2bS5vbkdldERldmljZVN1Y2Nlc3MgPSBmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICB2bS5jdXJyZW50RGV2aWNlID0gcmVzcG9uc2U7XG4gICAgaWYgKHJlc3BvbnNlLnRpbWV6b25lICE9PSB2bS5zZWxlY3RlZFRpbWV6b25lKSB7XG4gICAgICB2bS5zZWxlY3RlZFRpbWV6b25lID0gcmVzcG9uc2UudGltZXpvbmU7XG4gICAgfVxuICAgIGlmICh2bS50ZW5hbnRLZXkgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdm0udGVuYW50S2V5ID0gdm0uY3VycmVudERldmljZS50ZW5hbnRLZXk7XG4gICAgfVxuICAgIGlmICgkc3RhdGVQYXJhbXMuZnJvbURldmljZXMgPT09IFwidHJ1ZVwiKSB7XG4gICAgICB2bS5iYWNrVXJsID0gJy8jL2RldmljZXMnO1xuICAgICAgcmV0dXJuIHZtLmJhY2tVcmxUZXh0ID0gJ0JhY2sgdG8gZGV2aWNlcyc7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICh2bS5jdXJyZW50RGV2aWNlLmlzVW5tYW5hZ2VkRGV2aWNlID09PSB0cnVlKSB7XG4gICAgICAgIHZtLmJhY2tVcmwgPSBgLyMvdGVuYW50cy8ke3ZtLnRlbmFudEtleX0vdW5tYW5hZ2VkYDtcbiAgICAgICAgcmV0dXJuIHZtLmJhY2tVcmxUZXh0ID0gJ0JhY2sgdG8gdGVuYW50IHVubWFuYWdlZCBkZXZpY2VzJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZtLmJhY2tVcmwgPSBgLyMvdGVuYW50cy8ke3ZtLnRlbmFudEtleX0vbWFuYWdlZGA7XG4gICAgICAgIHJldHVybiB2bS5iYWNrVXJsVGV4dCA9ICdCYWNrIHRvIHRlbmFudCBtYW5hZ2VkIGRldmljZXMnO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICB2bS5vbkdldERldmljZUZhaWx1cmUgPSBmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICBUb2FzdHNTZXJ2aWNlLnNob3dFcnJvclRvYXN0KCdPb3BzLiBXZSB3ZXJlIHVuYWJsZSB0byBmZXRjaCB0aGUgZGV0YWlscyBmb3IgdGhpcyBkZXZpY2UgYXQgdGhpcyB0aW1lLicpO1xuICAgIGxldCBlcnJvck1lc3NhZ2UgPSBgTm8gZGV0YWlsIGZvciBkZXZpY2Vfa2V5ICMke3ZtLmRldmljZUtleX0uIEVycm9yOiAke3Jlc3BvbnNlLnN0YXR1c30gJHtyZXNwb25zZS5zdGF0dXNUZXh0fWA7XG4gICAgJGxvZy5lcnJvcihlcnJvck1lc3NhZ2UpO1xuICAgIHJldHVybiAkc3RhdGUuZ28oJ2RldmljZXMnKTtcbiAgfTtcblxuICB2bS5vblJlc2V0Q29udGVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICBQcm9ncmVzc0JhclNlcnZpY2Uuc3RhcnQoKTtcbiAgICBsZXQgcHJvbWlzZSA9IENvbW1hbmRzU2VydmljZS5jb250ZW50RGVsZXRlKHZtLmRldmljZUtleSk7XG4gICAgcmV0dXJuIHByb21pc2UudGhlbih2bS5vblJlc2V0Q29udGVudFN1Y2Nlc3MsIHZtLm9uUmVzZXRDb250ZW50RmFpbHVyZSk7XG4gIH07XG5cbiAgdm0ub25SZXNldENvbnRlbnRTdWNjZXNzID0gZnVuY3Rpb24gKCkge1xuICAgIFByb2dyZXNzQmFyU2VydmljZS5jb21wbGV0ZSgpO1xuICAgIHZtLmdldEV2ZW50c1RpbWVPdXQodm0uZGV2aWNlS2V5KTtcbiAgICByZXR1cm4gVG9hc3RzU2VydmljZS5zaG93U3VjY2Vzc1RvYXN0KFwiV2UgcG9zdGVkIHlvdXIgcmVzZXQgY29udGVudCBjb21tYW5kIGludG8gdGhlIHBsYXllcidzIHF1ZXVlLlwiKTtcbiAgfTtcblxuICB2bS5vblJlc2V0Q29udGVudEZhaWx1cmUgPSBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICBQcm9ncmVzc0JhclNlcnZpY2UuY29tcGxldGUoKTtcbiAgICAkbG9nLmVycm9yKGBSZXNldCBjb250ZW50IGNvbW1hbmQgZXJyb3I6ICR7ZXJyb3Iuc3RhdHVzIH0gJHtlcnJvci5zdGF0dXNUZXh0fWApO1xuICAgIHJldHVybiBzd2VldC5zaG93KCdPb3BzLi4uJywgXCJXZSB3ZXJlIHVuYWJsZSB0byBwb3N0IHlvdXIgcmVzZXQgY29udGVudCBjb21tYW5kIGludG8gdGhlIHBsYXllcidzIHF1ZXVlLlwiLCAnZXJyb3InKTtcbiAgfTtcblxuICB2bS5vblVwZGF0ZUNvbnRlbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgUHJvZ3Jlc3NCYXJTZXJ2aWNlLnN0YXJ0KCk7XG4gICAgbGV0IHByb21pc2UgPSBDb21tYW5kc1NlcnZpY2UuY29udGVudFVwZGF0ZSh2bS5kZXZpY2VLZXkpO1xuICAgIHJldHVybiBwcm9taXNlLnRoZW4odm0ub25VcGRhdGVDb250ZW50U3VjY2Vzcywgdm0ub25VcGRhdGVDb250ZW50RmFpbHVyZSk7XG4gIH07XG5cbiAgdm0ub25VcGRhdGVDb250ZW50U3VjY2VzcyA9IGZ1bmN0aW9uICgpIHtcbiAgICBQcm9ncmVzc0JhclNlcnZpY2UuY29tcGxldGUoKTtcbiAgICB2bS5nZXRFdmVudHNUaW1lT3V0KHZtLmRldmljZUtleSk7XG4gICAgcmV0dXJuIFRvYXN0c1NlcnZpY2Uuc2hvd1N1Y2Nlc3NUb2FzdChcIldlIHBvc3RlZCB5b3VyIHVwZGF0ZSBjb250ZW50IGNvbW1hbmQgaW50byB0aGUgcGxheWVyJ3MgcXVldWUuXCIpO1xuICB9O1xuXG4gIHZtLm9uVXBkYXRlQ29udGVudEZhaWx1cmUgPSBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICBQcm9ncmVzc0JhclNlcnZpY2UuY29tcGxldGUoKTtcbiAgICAkbG9nLmVycm9yKGBDb250ZW50IHVwZGF0ZSBjb21tYW5kIGVycm9yOiAke2Vycm9yLnN0YXR1cyB9ICR7ZXJyb3Iuc3RhdHVzVGV4dH1gKTtcbiAgICByZXR1cm4gc3dlZXQuc2hvdygnT29wcy4uLicsIFwiV2Ugd2VyZSB1bmFibGUgdG8gcG9zdCB5b3VyIHVwZGF0ZSBjb250ZW50IGNvbW1hbmQgaW50byB0aGUgcGxheWVyJ3MgcXVldWUuXCIsICdlcnJvcicpO1xuICB9O1xuXG4gIHZtLm9uUmVzZXRQbGF5ZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgUHJvZ3Jlc3NCYXJTZXJ2aWNlLnN0YXJ0KCk7XG4gICAgbGV0IHByb21pc2UgPSBDb21tYW5kc1NlcnZpY2UucmVzZXQodm0uZGV2aWNlS2V5KTtcbiAgICByZXR1cm4gcHJvbWlzZS50aGVuKHZtLm9uUmVzZXRQbGF5ZXJTdWNjZXNzLCB2bS5vblJlc2V0UGxheWVyRmFpbHVyZSk7XG4gIH07XG5cbiAgdm0ub25SZXNldFBsYXllclN1Y2Nlc3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgUHJvZ3Jlc3NCYXJTZXJ2aWNlLmNvbXBsZXRlKCk7XG4gICAgdm0uZ2V0RXZlbnRzVGltZU91dCh2bS5kZXZpY2VLZXkpO1xuICAgIHJldHVybiBUb2FzdHNTZXJ2aWNlLnNob3dTdWNjZXNzVG9hc3QoXCJXZSBwb3N0ZWQgeW91ciByZXNldCBwbGF5ZXIgY29tbWFuZCBpbnRvIHRoZSBwbGF5ZXIncyBxdWV1ZS5cIik7XG4gIH07XG5cbiAgdm0ub25SZXNldFBsYXllckZhaWx1cmUgPSBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICBQcm9ncmVzc0JhclNlcnZpY2UuY29tcGxldGUoKTtcbiAgICAkbG9nLmVycm9yKGBSZXNldCBwbGF5ZXIgY29tbWFuZCBlcnJvcjogJHtlcnJvci5zdGF0dXMgfSAke2Vycm9yLnN0YXR1c1RleHR9YCk7XG4gICAgcmV0dXJuIHN3ZWV0LnNob3coJ09vcHMuLi4nLCBcIldlIHdlcmUgdW5hYmxlIHRvIHBvc3QgeW91ciByZXNldCBwbGF5ZXIgY29tbWFuZCBpbnRvIHRoZSBwbGF5ZXIncyBxdWV1ZS5cIiwgJ2Vycm9yJyk7XG4gIH07XG5cbiAgdm0ub25QYW5lbE9uID0gZnVuY3Rpb24gKCkge1xuICAgIFByb2dyZXNzQmFyU2VydmljZS5zdGFydCgpO1xuICAgIGxldCBwcm9taXNlID0gQ29tbWFuZHNTZXJ2aWNlLnBvd2VyT24odm0uZGV2aWNlS2V5KTtcbiAgICByZXR1cm4gcHJvbWlzZS50aGVuKHZtLm9uUGFuZWxPblN1Y2Nlc3MsIHZtLm9uUGFuZWxPbkZhaWx1cmUpO1xuICB9O1xuXG4gIHZtLm9uUGFuZWxPblN1Y2Nlc3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgUHJvZ3Jlc3NCYXJTZXJ2aWNlLmNvbXBsZXRlKCk7XG4gICAgdm0uZ2V0RXZlbnRzVGltZU91dCh2bS5kZXZpY2VLZXkpO1xuICAgIHJldHVybiBUb2FzdHNTZXJ2aWNlLnNob3dTdWNjZXNzVG9hc3QoXCJXZSBwb3N0ZWQgeW91ciBwYW5lbCBvbiBjb21tYW5kIGludG8gdGhlIHBsYXllcidzIHF1ZXVlLlwiKTtcbiAgfTtcblxuICB2bS5vblBhbmVsT25GYWlsdXJlID0gZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgUHJvZ3Jlc3NCYXJTZXJ2aWNlLmNvbXBsZXRlKCk7XG4gICAgJGxvZy5lcnJvcihgUGFuZWwgb24gY29tbWFuZCBlcnJvcjogJHtlcnJvci5zdGF0dXMgfSAke2Vycm9yLnN0YXR1c1RleHR9YCk7XG4gICAgcmV0dXJuIHN3ZWV0LnNob3coJ09vcHMuLi4nLCBcIldlIHdlcmUgdW5hYmxlIHRvIHBvc3QgeW91ciBwYW5lbCBvbiBjb21tYW5kIGludG8gdGhlIHBsYXllcidzIHF1ZXVlLlwiLCAnZXJyb3InKTtcbiAgfTtcblxuICB2bS5vblBhbmVsT2ZmID0gZnVuY3Rpb24gKCkge1xuICAgIFByb2dyZXNzQmFyU2VydmljZS5zdGFydCgpO1xuICAgIGxldCBwcm9taXNlID0gQ29tbWFuZHNTZXJ2aWNlLnBvd2VyT2ZmKHZtLmRldmljZUtleSk7XG4gICAgcmV0dXJuIHByb21pc2UudGhlbih2bS5vblBhbmVsT2ZmU3VjY2Vzcywgdm0ub25QYW5lbE9mZkZhaWx1cmUpO1xuICB9O1xuXG4gIHZtLm9uUGFuZWxPZmZTdWNjZXNzID0gZnVuY3Rpb24gKCkge1xuICAgIFByb2dyZXNzQmFyU2VydmljZS5jb21wbGV0ZSgpO1xuICAgIHZtLmdldEV2ZW50c1RpbWVPdXQodm0uZGV2aWNlS2V5KTtcbiAgICByZXR1cm4gVG9hc3RzU2VydmljZS5zaG93U3VjY2Vzc1RvYXN0KFwiV2UgcG9zdGVkIHlvdXIgcGFuZWwgb2ZmIGNvbW1hbmQgaW50byB0aGUgcGxheWVyJ3MgcXVldWUuXCIpO1xuICB9O1xuXG4gIHZtLm9uUGFuZWxPZmZGYWlsdXJlID0gZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgUHJvZ3Jlc3NCYXJTZXJ2aWNlLmNvbXBsZXRlKCk7XG4gICAgJGxvZy5lcnJvcihgUGFuZWwgb2ZmIGNvbW1hbmQgZXJyb3I6ICR7ZXJyb3Iuc3RhdHVzIH0gJHtlcnJvci5zdGF0dXNUZXh0fWApO1xuICAgIHJldHVybiBzd2VldC5zaG93KCdPb3BzLi4uJywgXCJXZSB3ZXJlIHVuYWJsZSB0byBwb3N0IHlvdXIgcGFuZWwgb2ZmIGNvbW1hbmQgaW50byB0aGUgcGxheWVyJ3MgcXVldWUuXCIsICdlcnJvcicpO1xuICB9O1xuXG4gIHZtLm9uVXBkYXRlRGV2aWNlID0gZnVuY3Rpb24gKCkge1xuICAgIFByb2dyZXNzQmFyU2VydmljZS5zdGFydCgpO1xuICAgIGxldCBwcm9taXNlID0gQ29tbWFuZHNTZXJ2aWNlLnVwZGF0ZURldmljZSh2bS5kZXZpY2VLZXkpO1xuICAgIHJldHVybiBwcm9taXNlLnRoZW4odm0ub25VcGRhdGVEZXZpY2VTdWNjZXNzLCB2bS5vblVwZGF0ZURldmljZUZhaWx1cmUpO1xuICB9O1xuXG4gIHZtLm9uVXBkYXRlRGV2aWNlU3VjY2VzcyA9IGZ1bmN0aW9uICgpIHtcbiAgICBQcm9ncmVzc0JhclNlcnZpY2UuY29tcGxldGUoKTtcbiAgICB2bS5nZXRFdmVudHNUaW1lT3V0KHZtLmRldmljZUtleSk7XG4gICAgcmV0dXJuIFRvYXN0c1NlcnZpY2Uuc2hvd1N1Y2Nlc3NUb2FzdChcIldlIHBvc3RlZCB5b3VyIHVwZGF0ZSBkZXZpY2UgY29tbWFuZCBpbnRvIHRoZSBwbGF5ZXIncyBxdWV1ZS5cIik7XG4gIH07XG5cbiAgdm0ub25VcGRhdGVEZXZpY2VGYWlsdXJlID0gZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgUHJvZ3Jlc3NCYXJTZXJ2aWNlLmNvbXBsZXRlKCk7XG4gICAgJGxvZy5lcnJvcihgVXBkYXRlIGRldmljZSBjb21tYW5kIGVycm9yOiAke2Vycm9yLnN0YXR1cyB9ICR7ZXJyb3Iuc3RhdHVzVGV4dH1gKTtcbiAgICByZXR1cm4gc3dlZXQuc2hvdygnT29wcy4uLicsIFwiV2Ugd2VyZSB1bmFibGUgdG8gcG9zdCB5b3VyIHVwZGF0ZSBkZXZpY2UgY29tbWFuZCBpbnRvIHRoZSBwbGF5ZXIncyBxdWV1ZS5cIiwgJ2Vycm9yJyk7XG4gIH07XG5cbiAgdm0ub25Wb2x1bWVDaGFuZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgUHJvZ3Jlc3NCYXJTZXJ2aWNlLnN0YXJ0KCk7XG4gICAgbGV0IHByb21pc2UgPSBDb21tYW5kc1NlcnZpY2Uudm9sdW1lKHZtLmRldmljZUtleSwgdm0uY3VycmVudERldmljZS52b2x1bWUpO1xuICAgIHJldHVybiBwcm9taXNlLnRoZW4odm0ub25Wb2x1bWVDaGFuZ2VTdWNjZXNzKHZtLmN1cnJlbnREZXZpY2Uudm9sdW1lKSwgdm0ub25Wb2x1bWVDaGFuZ2VGYWlsdXJlKTtcbiAgfTtcblxuICB2bS5vblZvbHVtZUNoYW5nZVN1Y2Nlc3MgPSBmdW5jdGlvbiAobGV2ZWwpIHtcbiAgICBQcm9ncmVzc0JhclNlcnZpY2UuY29tcGxldGUoKTtcbiAgICB2bS5nZXRFdmVudHNUaW1lT3V0KHZtLmRldmljZUtleSk7XG4gICAgcmV0dXJuIFRvYXN0c1NlcnZpY2Uuc2hvd1N1Y2Nlc3NUb2FzdChgV2UgcG9zdGVkIHlvdXIgdm9sdW1lIGNoYW5nZSBjb21tYW5kIG9mICR7bGV2ZWx9IGludG8gdGhlIHBsYXllcidzIHF1ZXVlLmApO1xuICB9O1xuXG4gIHZtLm9uVm9sdW1lQ2hhbmdlRmFpbHVyZSA9IGZ1bmN0aW9uIChlcnJvcikge1xuICAgIFByb2dyZXNzQmFyU2VydmljZS5jb21wbGV0ZSgpO1xuICAgICRsb2cuZXJyb3IoYFZvbHVtZSBjaGFuZ2UgY29tbWFuZCBlcnJvcjogJHtlcnJvci5zdGF0dXMgfSAke2Vycm9yLnN0YXR1c1RleHR9YCk7XG4gICAgcmV0dXJuIHN3ZWV0LnNob3coJ09vcHMuLi4nLCBcIldlIHdlcmUgdW5hYmxlIHRvIHBvc3QgeW91ciB2b2x1bWUgY2hhbmdlIGNvbW1hbmQgaW50byB0aGUgcGxheWVyJ3MgcXVldWUuXCIsICdlcnJvcicpO1xuICB9O1xuXG4gIHZtLm9uQ3VzdG9tQ29tbWFuZCA9IGZ1bmN0aW9uICgpIHtcbiAgICBQcm9ncmVzc0JhclNlcnZpY2Uuc3RhcnQoKTtcbiAgICBsZXQgcHJvbWlzZSA9IENvbW1hbmRzU2VydmljZS5jdXN0b20odm0uZGV2aWNlS2V5LCB2bS5jdXJyZW50RGV2aWNlLmN1c3RvbSk7XG4gICAgcmV0dXJuIHByb21pc2UudGhlbih2bS5vbkN1c3RvbUNvbW1hbmRTdWNjZXNzKHZtLmN1cnJlbnREZXZpY2UuY3VzdG9tKSwgdm0ub25DdXN0b21Db21tYW5kRmFpbHVyZSk7XG4gIH07XG5cbiAgdm0ub25DdXN0b21Db21tYW5kU3VjY2VzcyA9IGZ1bmN0aW9uIChjb21tYW5kKSB7XG4gICAgUHJvZ3Jlc3NCYXJTZXJ2aWNlLmNvbXBsZXRlKCk7XG4gICAgdm0uZ2V0RXZlbnRzVGltZU91dCh2bS5kZXZpY2VLZXkpO1xuICAgIHJldHVybiBUb2FzdHNTZXJ2aWNlLnNob3dTdWNjZXNzVG9hc3QoYFdlIHBvc3RlZCB5b3VyIGN1c3RvbSBjb21tYW5kICcke2NvbW1hbmR9JyBpbnRvIHRoZSBwbGF5ZXIncyBxdWV1ZS5gKTtcbiAgfTtcblxuICB2bS5vbkN1c3RvbUNvbW1hbmRGYWlsdXJlID0gZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgUHJvZ3Jlc3NCYXJTZXJ2aWNlLmNvbXBsZXRlKCk7XG4gICAgJGxvZy5lcnJvcihgQ3VzdG9tIGNvbW1hbmQgZXJyb3I6ICR7ZXJyb3Iuc3RhdHVzIH0gJHtlcnJvci5zdGF0dXNUZXh0fWApO1xuICAgIHJldHVybiBzd2VldC5zaG93KCdPb3BzLi4uJywgXCJXZSB3ZXJlIHVuYWJsZSB0byBwb3N0IHlvdXIgY3VzdG9tIGNvbW1hbmQgaW50byB0aGUgcGxheWVyJ3MgcXVldWUuXCIsICdlcnJvcicpO1xuICB9O1xuXG4gIHZtLm9uRGlhZ25vc3RpY3NUb2dnbGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgUHJvZ3Jlc3NCYXJTZXJ2aWNlLnN0YXJ0KCk7XG4gICAgbGV0IHByb21pc2UgPSBDb21tYW5kc1NlcnZpY2UudG9nZ2xlRGlhZ25vc3RpY3Modm0uZGV2aWNlS2V5KTtcbiAgICByZXR1cm4gcHJvbWlzZS50aGVuKHZtLm9uVG9nZ2xlRGlhZ25vc3RpY3NTdWNjZXNzLCB2bS5vblRvZ2dsZURpYWdub3N0aWNzRmFpbHVyZSk7XG4gIH07XG5cbiAgdm0ub25Ub2dnbGVEaWFnbm9zdGljc1N1Y2Nlc3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgUHJvZ3Jlc3NCYXJTZXJ2aWNlLmNvbXBsZXRlKCk7XG4gICAgcmV0dXJuIFRvYXN0c1NlcnZpY2Uuc2hvd1N1Y2Nlc3NUb2FzdChcIldlIHBvc3RlZCB5b3VyIGRpYWdub3N0aWNzIGNvbW1hbmQgaW50byB0aGUgcGxheWVyJ3MgcXVldWUuXCIpO1xuICB9O1xuXG4gIHZtLm9uVG9nZ2xlRGlhZ25vc3RpY3NGYWlsdXJlID0gZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgUHJvZ3Jlc3NCYXJTZXJ2aWNlLmNvbXBsZXRlKCk7XG4gICAgJGxvZy5lcnJvcihgRGlhZ25vc3RpY3MgY29tbWFuZCBlcnJvcjogJHtlcnJvci5zdGF0dXMgfSAke2Vycm9yLnN0YXR1c1RleHR9YCk7XG4gICAgcmV0dXJuIHN3ZWV0LnNob3coJ09vcHMuLi4nLCBcIldlIHdlcmUgdW5hYmxlIHRvIHBvc3QgeW91ciBkaWFnbm9zdGljcyBjb21tYW5kIGludG8gdGhlIHBsYXllcidzIHF1ZXVlLlwiLFxuICAgICAgJ2Vycm9yJyk7XG4gIH07XG5cbiAgdm0ub25SZXN0YXJ0ID0gZnVuY3Rpb24gKCkge1xuICAgIFByb2dyZXNzQmFyU2VydmljZS5zdGFydCgpO1xuICAgIGxldCBwcm9taXNlID0gQ29tbWFuZHNTZXJ2aWNlLnJlc3RhcnQodm0uZGV2aWNlS2V5KTtcbiAgICByZXR1cm4gcHJvbWlzZS50aGVuKHZtLm9uUmVzdGFydFN1Y2Nlc3MsIHZtLm9uUmVzdGFydEZhaWx1cmUpO1xuICB9O1xuXG4gIHZtLm9uUmVzdGFydFN1Y2Nlc3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgUHJvZ3Jlc3NCYXJTZXJ2aWNlLmNvbXBsZXRlKCk7XG4gICAgcmV0dXJuIFRvYXN0c1NlcnZpY2Uuc2hvd1N1Y2Nlc3NUb2FzdChcIldlIHBvc3RlZCB5b3VyIHJlc3RhcnQgY29tbWFuZCBpbnRvIHRoZSBwbGF5ZXIncyBxdWV1ZS5cIik7XG4gIH07XG5cbiAgdm0ub25SZXN0YXJ0RmFpbHVyZSA9IGZ1bmN0aW9uIChlcnJvcikge1xuICAgIFByb2dyZXNzQmFyU2VydmljZS5jb21wbGV0ZSgpO1xuICAgICRsb2cuZXJyb3IoYFJlc3RhcnQgY29tbWFuZCBlcnJvcjogJHtlcnJvci5zdGF0dXMgfSAke2Vycm9yLnN0YXR1c1RleHR9YCk7XG4gICAgcmV0dXJuIHN3ZWV0LnNob3coJ09vcHMuLi4nLCBcIldlIHdlcmUgdW5hYmxlIHRvIHBvc3QgeW91ciByZXN0YXJ0IGNvbW1hbmQgaW50byB0aGUgcGxheWVyJ3MgcXVldWUuXCIsXG4gICAgICAnZXJyb3InKTtcbiAgfTtcblxuICB2bS5vblBvc3RMb2cgPSBmdW5jdGlvbiAoKSB7XG4gICAgUHJvZ3Jlc3NCYXJTZXJ2aWNlLnN0YXJ0KCk7XG4gICAgbGV0IHByb21pc2UgPSBDb21tYW5kc1NlcnZpY2UucG9zdExvZyh2bS5kZXZpY2VLZXkpO1xuICAgIHJldHVybiBwcm9taXNlLnRoZW4odm0ub25Qb3N0TG9nU3VjY2Vzcywgdm0ub25Qb3N0TG9nRmFpbHVyZSk7XG4gIH07XG5cbiAgdm0ub25Qb3N0TG9nU3VjY2VzcyA9IGZ1bmN0aW9uICgpIHtcbiAgICBQcm9ncmVzc0JhclNlcnZpY2UuY29tcGxldGUoKTtcbiAgICByZXR1cm4gVG9hc3RzU2VydmljZS5zaG93U3VjY2Vzc1RvYXN0KFwiV2UgcG9zdGVkIHlvdXIgcG9zdCBsb2cgY29tbWFuZCBpbnRvIHRoZSBwbGF5ZXIncyBxdWV1ZS5cIik7XG4gIH07XG5cbiAgdm0ub25Qb3N0TG9nRmFpbHVyZSA9IGZ1bmN0aW9uIChlcnJvcikge1xuICAgIFByb2dyZXNzQmFyU2VydmljZS5jb21wbGV0ZSgpO1xuICAgICRsb2cuZXJyb3IoYFBvc3QgbG9nIGNvbW1hbmQgZXJyb3I6ICR7ZXJyb3Iuc3RhdHVzIH0gJHtlcnJvci5zdGF0dXNUZXh0fWApO1xuICAgIHJldHVybiBzd2VldC5zaG93KCdPb3BzLi4uJywgXCJXZSB3ZXJlIHVuYWJsZSB0byBwb3N0IHlvdXIgcG9zdCBsb2cgY29tbWFuZCBpbnRvIHRoZSBwbGF5ZXIncyBxdWV1ZS5cIixcbiAgICAgICdlcnJvcicpO1xuICB9O1xuXG4gIHJldHVybiB2bTtcbn1cblxuZXhwb3J0IHtEZXZpY2VEZXRhaWxzQ29tbWFuZHNDdHJsfVxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zcmMvYXBwL2RldmljZS9kZXZpY2UtZGV0YWlsLWNvbW1hbmQuanNcbiAqKi8iLCJpbXBvcnQgbW9tZW50IGZyb20gJ21vbWVudCc7XG5pbXBvcnQgbmF0dXJhbFNvcnQgZnJvbSAnamF2YXNjcmlwdC1uYXR1cmFsLXNvcnQnO1xuXG5cbmZ1bmN0aW9uIERldmljZURldGFpbHNDdHJsKCRsb2csXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAkc3RhdGVQYXJhbXMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAkc3RhdGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBTZXNzaW9uc1NlcnZpY2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBEZXZpY2VzU2VydmljZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIFRlbmFudHNTZXJ2aWNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgTG9jYXRpb25zU2VydmljZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIENvbW1hbmRzU2VydmljZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIFRpbWV6b25lc1NlcnZpY2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBJbnRlZ3JhdGlvbkV2ZW50cyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIHN3ZWV0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgUHJvZ3Jlc3NCYXJTZXJ2aWNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgJG1kRGlhbG9nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgVG9hc3RzU2VydmljZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIERhdGVNYW5pcHVsYXRpb25TZXJ2aWNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgJHRpbWVvdXQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBJbWFnZVNlcnZpY2UpIHtcbiAgXCJuZ0luamVjdFwiO1xuXG4gIGNvbnN0IHZtID0gdGhpcztcbiAgdm0udGVuYW50S2V5ID0gJHN0YXRlUGFyYW1zLnRlbmFudEtleTtcbiAgdm0uZGV2aWNlS2V5ID0gJHN0YXRlUGFyYW1zLmRldmljZUtleTtcbiAgdm0uZnJvbURldmljZXMgPSAkc3RhdGVQYXJhbXMuZnJvbURldmljZXMgPT09IFwidHJ1ZVwiO1xuICB2bS5jdXJyZW50RGV2aWNlID0ge307XG4gIHZtLmxvY2F0aW9ucyA9IFtdO1xuICB2bS5jb21tYW5kRXZlbnRzID0gW107XG4gIHZtLmRheVJhbmdlID0gMzA7XG4gIHZtLmlzc3VlcyA9IFtdO1xuICB2bS50aW1lem9uZXMgPSBbXTtcbiAgdm0uc2VsZWN0ZWRUaW1lem9uZSA9IHVuZGVmaW5lZDtcbiAgW3ZtLnN0YXJ0VGltZSwgdm0uZW5kVGltZV0gPSBEYXRlTWFuaXB1bGF0aW9uU2VydmljZS5jcmVhdGVGb3JtYXR0ZWRTdGFydEFuZEVuZERhdGVGcm9tVG9kYXkoMzApO1xuICB2bS5lbnJvbGxtZW50RXZlbnRzID0gW107XG4gIHZtLmxvZ29DaGFuZ2UgPSBmYWxzZTtcbiAgdm0uY29udHJvbHNNb2RlT3B0aW9ucyA9IFtcInZpc2libGVcIiwgXCJpbnZpc2libGVcIiwgXCJkaXNhYmxlZFwiXVxuICB2bS5vdmVybGF5Q2hhbmdlZCA9IGZhbHNlO1xuXG5cbiAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAvLyBPdmVybGF5XG4gIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgdm0uY2hlY2tGb3JPdmVybGF5Q2hhbmdlcyA9ICgpID0+IHtcbiAgICBsZXQgY2hhbmdlZCA9IGZhbHNlO1xuICAgIGxldCBjdXJyZW50RGV2aWNlT3ZlcmxheXMgPSB2bS5jdXJyZW50RGV2aWNlLm92ZXJsYXlzO1xuICAgIGxldCBjdXJyZW50RGV2aWNlQ29weU92ZXJsYXlzID0gdm0uY3VycmVudERldmljZUNvcHkub3ZlcmxheXM7XG4gICAgbGV0IHBvc2l0aW9ucyA9IFsndG9wX2xlZnQnLCAndG9wX3JpZ2h0JywgJ2JvdHRvbV9yaWdodCcsICdib3R0b21fbGVmdCddO1xuXG4gICAgZm9yIChsZXQgcG9zIG9mIHBvc2l0aW9ucykge1xuICAgICAgaWYgKGN1cnJlbnREZXZpY2VPdmVybGF5c1twb3NdLnNpemUgIT09IGN1cnJlbnREZXZpY2VDb3B5T3ZlcmxheXNbcG9zXS5zaXplKSB7XG4gICAgICAgIGNoYW5nZWQgPSB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKGN1cnJlbnREZXZpY2VPdmVybGF5c1twb3NdLnR5cGUgIT09IGN1cnJlbnREZXZpY2VDb3B5T3ZlcmxheXNbcG9zXS50eXBlKSB7XG4gICAgICAgIGNoYW5nZWQgPSB0cnVlO1xuICAgICAgfVxuICAgICAgaWYgKGN1cnJlbnREZXZpY2VPdmVybGF5c1twb3NdLnR5cGUgPT09ICdsb2dvJykge1xuICAgICAgICBpZiAoKGN1cnJlbnREZXZpY2VPdmVybGF5c1twb3NdLnR5cGUgKyBcIjogXCIgKyBjdXJyZW50RGV2aWNlT3ZlcmxheXNbcG9zXS5uYW1lKSAhPT0gY3VycmVudERldmljZUNvcHlPdmVybGF5c1twb3NdLm5hbWUpIHtcbiAgICAgICAgICBjaGFuZ2VkID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICB2bS5vdmVybGF5Q2hhbmdlZCA9IGNoYW5nZWQ7XG4gIH1cblxuXG4gIHZtLnJldmVydFRvVGVuYW50T3ZlcmxheSA9IChldikgPT4ge1xuICAgIFByb2dyZXNzQmFyU2VydmljZS5zdGFydCgpO1xuICAgIHZtLmxvYWRpbmdPdmVybGF5cyA9IHRydWU7XG4gICAgbGV0IHRlbmFudFByb21pc2UgPSBUZW5hbnRzU2VydmljZS5nZXRUZW5hbnRCeUtleSgkc3RhdGVQYXJhbXMudGVuYW50S2V5KTtcbiAgICB0ZW5hbnRQcm9taXNlLnRoZW4oZnVuY3Rpb24gKHRlbmFudCkge1xuICAgICAgbGV0IGN1cnJlbnRUZW5hbnRPdmVybGF5cyA9IHRlbmFudC5vdmVybGF5cztcbiAgICAgIGRlbGV0ZSBjdXJyZW50VGVuYW50T3ZlcmxheXMua2V5O1xuXG4gICAgICBmb3IgKGxldCBrZXkgaW4gY3VycmVudFRlbmFudE92ZXJsYXlzKSB7XG4gICAgICAgIGlmIChjdXJyZW50VGVuYW50T3ZlcmxheXNba2V5XVtcInR5cGVcIl0gPT09IFwibG9nb1wiKSB7XG4gICAgICAgICAgY3VycmVudFRlbmFudE92ZXJsYXlzW2tleV1bXCJpbWFnZV9rZXlcIl0gPSBjdXJyZW50VGVuYW50T3ZlcmxheXNba2V5XVtcImltYWdlS2V5XCJdW1wia2V5XCJdXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY3VycmVudFRlbmFudE92ZXJsYXlzW2tleV1bXCJpbWFnZV9rZXlcIl0gPSBudWxsO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICBsZXQgcHJvbWlzZSA9IERldmljZXNTZXJ2aWNlLnNhdmVPdmVybGF5U2V0dGluZ3MoXG4gICAgICAgIHZtLmRldmljZUtleSxcbiAgICAgICAgY3VycmVudFRlbmFudE92ZXJsYXlzLmJvdHRvbV9sZWZ0LFxuICAgICAgICBjdXJyZW50VGVuYW50T3ZlcmxheXMuYm90dG9tX3JpZ2h0LFxuICAgICAgICBjdXJyZW50VGVuYW50T3ZlcmxheXMudG9wX3JpZ2h0LFxuICAgICAgICBjdXJyZW50VGVuYW50T3ZlcmxheXMudG9wX2xlZnRcbiAgICAgICk7XG5cbiAgICAgIHByb21pc2UudGhlbigocmVzKSA9PiB7XG4gICAgICAgIGxldCBkZXZpY2VQcm9taXNlID0gRGV2aWNlc1NlcnZpY2UuZ2V0RGV2aWNlQnlLZXkodm0uZGV2aWNlS2V5KTtcbiAgICAgICAgZGV2aWNlUHJvbWlzZS50aGVuKChjdXJyZW50RGV2aWNlKSA9PiB7XG4gICAgICAgICAgdm0uY3VycmVudERldmljZS5vdmVybGF5cyA9IGN1cnJlbnREZXZpY2Uub3ZlcmxheXM7XG4gICAgICAgICAgdm0uY3VycmVudERldmljZUNvcHkub3ZlcmxheXMgPSBhbmd1bGFyLmNvcHkodm0uY3VycmVudERldmljZS5vdmVybGF5cylcbiAgICAgICAgICB2bS5sb2FkaW5nT3ZlcmxheXMgPSBmYWxzZTtcbiAgICAgICAgICBQcm9ncmVzc0JhclNlcnZpY2UuY29tcGxldGUoKTtcbiAgICAgICAgICBUb2FzdHNTZXJ2aWNlLnNob3dTdWNjZXNzVG9hc3QoJ1dlIHNhdmVkIHlvdXIgdXBkYXRlLicpO1xuICAgICAgICB9KVxuICAgICAgfSk7XG5cbiAgICAgIHByb21pc2UuY2F0Y2goKHJlcykgPT4ge1xuICAgICAgICBQcm9ncmVzc0JhclNlcnZpY2UuY29tcGxldGUoKTtcbiAgICAgICAgVG9hc3RzU2VydmljZS5zaG93RXJyb3JUb2FzdCgnU29tZXRoaW5nIHdlbnQgd3JvbmcnKTtcbiAgICAgIH0pXG4gICAgfSk7XG5cbiAgfTtcblxuICB2bS5hZGp1c3RDb250cm9sc01vZGUgPSAoKSA9PiB7XG4gICAgbGV0IGNvbnRyb2xzTW9kZSA9IHZtLmN1cnJlbnREZXZpY2UuY29udHJvbHNNb2RlO1xuICAgIFByb2dyZXNzQmFyU2VydmljZS5zdGFydCgpO1xuICAgIGxldCBjb250cm9sc1Byb21pc2UgPSBEZXZpY2VzU2VydmljZS5hZGp1c3RDb250cm9sc01vZGUodm0uZGV2aWNlS2V5LCBjb250cm9sc01vZGUpXG4gICAgY29udHJvbHNQcm9taXNlLnRoZW4oKCkgPT4ge1xuICAgICAgUHJvZ3Jlc3NCYXJTZXJ2aWNlLmNvbXBsZXRlKCk7XG4gICAgICBUb2FzdHNTZXJ2aWNlLnNob3dTdWNjZXNzVG9hc3QoYFlvdXIgY29udHJvbHMgbW9kZSBzZWxlY3Rpb24gd2FzIHN1Y2Nlc2Z1bGx5IGNoYW5nZWQgdG86ICR7Y29udHJvbHNNb2RlfWApO1xuICAgIH0pXG4gICAgY29udHJvbHNQcm9taXNlLmNhdGNoKCgpID0+IHtcbiAgICAgIFByb2dyZXNzQmFyU2VydmljZS5jb21wbGV0ZSgpO1xuICAgICAgLy9Ub2FzdHNTZXJ2aWNlLnNob3dFcnJvclRvYXN0KFwiWW91ciBjb250cm9scyBtb2RlIGNoYW5nZSBmYWlsZWQgdG8gc2F2ZS4gUGxlYXNlIGNvbnRhY3Qgc3VwcG9ydC5cIilcbiAgICB9KVxuICB9XG5cbiAgdm0uYWRqdXN0T3ZlcmxheVN0YXR1cyA9IChzdGF0dXMpID0+IHtcbiAgICB2bS5jdXJyZW50RGV2aWNlLm92ZXJsYXlTdGF0dXMgPSBzdGF0dXNcbiAgICBQcm9ncmVzc0JhclNlcnZpY2Uuc3RhcnQoKTtcbiAgICBsZXQgcHJvbWlzZSA9IERldmljZXNTZXJ2aWNlLnNhdmUodm0uY3VycmVudERldmljZSk7XG4gICAgcmV0dXJuIHByb21pc2UudGhlbigoKSA9PiB7XG4gICAgICBsZXQgZGV2aWNlUHJvbWlzZSA9IERldmljZXNTZXJ2aWNlLmdldERldmljZUJ5S2V5KHZtLmRldmljZUtleSk7XG4gICAgICBkZXZpY2VQcm9taXNlLnRoZW4oKHJlc3BvbnNlID0+IHtcbiAgICAgICAgdm0ub25HZXREZXZpY2VTdWNjZXNzKHJlc3BvbnNlKVxuICAgICAgICBQcm9ncmVzc0JhclNlcnZpY2UuY29tcGxldGUoKTtcbiAgICAgIH0pLCByZXNwb25zZSA9PiB2bS5vbkdldERldmljZUZhaWx1cmUocmVzcG9uc2UpKTtcbiAgICB9KVxuICB9XG5cbiAgdm0uc3VibWl0T3ZlcmxheVNldHRpbmdzID0gKCkgPT4ge1xuICAgIGxldCBvdmVybGF5U2V0dGluZ3MgPSBhbmd1bGFyLmNvcHkodm0uY3VycmVudERldmljZUNvcHkub3ZlcmxheXMpXG4gICAgUHJvZ3Jlc3NCYXJTZXJ2aWNlLnN0YXJ0KCk7XG4gICAgdm0ubG9hZGluZ092ZXJsYXlzID0gdHJ1ZTtcbiAgICBsZXQgcHJvbWlzZSA9IERldmljZXNTZXJ2aWNlLnNhdmVPdmVybGF5U2V0dGluZ3MoXG4gICAgICB2bS5kZXZpY2VLZXksXG4gICAgICBvdmVybGF5U2V0dGluZ3MuYm90dG9tX2xlZnQsXG4gICAgICBvdmVybGF5U2V0dGluZ3MuYm90dG9tX3JpZ2h0LFxuICAgICAgb3ZlcmxheVNldHRpbmdzLnRvcF9yaWdodCxcbiAgICAgIG92ZXJsYXlTZXR0aW5ncy50b3BfbGVmdFxuICAgIClcbiAgICBwcm9taXNlLnRoZW4oKHJlcykgPT4ge1xuICAgICAgbGV0IGRldmljZVByb21pc2UgPSBEZXZpY2VzU2VydmljZS5nZXREZXZpY2VCeUtleSh2bS5kZXZpY2VLZXkpO1xuICAgICAgZGV2aWNlUHJvbWlzZS50aGVuKChjdXJyZW50RGV2aWNlKSA9PiB7XG4gICAgICAgIHZtLmN1cnJlbnREZXZpY2Uub3ZlcmxheXMgPSBjdXJyZW50RGV2aWNlLm92ZXJsYXlzO1xuICAgICAgICB2bS5jdXJyZW50RGV2aWNlQ29weS5vdmVybGF5cyA9IGFuZ3VsYXIuY29weSh2bS5jdXJyZW50RGV2aWNlLm92ZXJsYXlzKVxuICAgICAgICB2bS5sb2FkaW5nT3ZlcmxheXMgPSBmYWxzZTtcbiAgICAgICAgUHJvZ3Jlc3NCYXJTZXJ2aWNlLmNvbXBsZXRlKCk7XG4gICAgICAgIFRvYXN0c1NlcnZpY2Uuc2hvd1N1Y2Nlc3NUb2FzdCgnV2Ugc2F2ZWQgeW91ciB1cGRhdGUuJyk7XG4gICAgICB9KVxuICAgIH0pXG5cbiAgICBwcm9taXNlLmNhdGNoKChyZXMpID0+IHtcbiAgICAgIFByb2dyZXNzQmFyU2VydmljZS5jb21wbGV0ZSgpO1xuICAgICAgVG9hc3RzU2VydmljZS5zaG93RXJyb3JUb2FzdCgnU29tZXRoaW5nIHdlbnQgd3JvbmcnKTtcbiAgICB9KVxuICB9O1xuXG4gIHZtLmdldFRlbmFudEltYWdlc0FuZFJlZnJlc2hEZXZpY2UgPSAoKSA9PiB7XG4gICAgbGV0IGRldmljZVByb21pc2UgPSBEZXZpY2VzU2VydmljZS5nZXREZXZpY2VCeUtleSh2bS5kZXZpY2VLZXkpO1xuICAgIGRldmljZVByb21pc2UudGhlbigocmVzKSA9PiB7XG4gICAgICB2bS5vbkdldERldmljZVN1Y2Nlc3MocmVzKVxuICAgICAgdm0uZ2V0VGVuYW50SW1hZ2VzKClcblxuICAgIH0pO1xuICAgIGRldmljZVByb21pc2UuY2F0Y2goKHJlcykgPT4ge1xuICAgICAgdm0ub25HZXREZXZpY2VGYWlsdXJlKHJlcylcbiAgICB9KVxuXG4gIH1cblxuICB2bS5nZXRUZW5hbnRJbWFnZXMgPSAoKSA9PiB7XG4gICAgdm0uT1ZFUkxBWV9UWVBFUyA9IFtcbiAgICAgIHtzaXplOiBudWxsLCB0eXBlOiBudWxsLCBuYW1lOiBcIm5vbmVcIiwgcmVhbE5hbWU6IFwibm9uZVwiLCBuZXc6IGZhbHNlLCBpbWFnZV9rZXk6IG51bGx9LFxuICAgICAge3NpemU6IG51bGwsIHR5cGU6IFwiZGF0ZXRpbWVcIiwgbmFtZTogXCJkYXRldGltZVwiLCByZWFsTmFtZTogXCJkYXRldGltZVwiLCBuZXc6IHRydWUsIGltYWdlX2tleTogbnVsbH0sXG4gICAgXVxuXG4gICAgUHJvZ3Jlc3NCYXJTZXJ2aWNlLnN0YXJ0KCk7XG4gICAgbGV0IHByb21pc2UgPSBJbWFnZVNlcnZpY2UuZ2V0SW1hZ2VzKHZtLnRlbmFudEtleSk7XG4gICAgcHJvbWlzZS50aGVuKChyZXMpID0+IHtcbiAgICAgIHZtLnRlbmFudEltYWdlcyA9IHJlc1xuICAgICAgUHJvZ3Jlc3NCYXJTZXJ2aWNlLmNvbXBsZXRlKCk7XG4gICAgICBmb3IgKGxldCB2YWx1ZSBvZiB2bS50ZW5hbnRJbWFnZXMpIHtcbiAgICAgICAgZm9yIChsZXQgc2l6ZU9wdGlvbiBvZiBbXCJzbWFsbFwiLCBcImxhcmdlXCJdKSB7XG4gICAgICAgICAgbGV0IG5ld1ZhbHVlID0ge1xuICAgICAgICAgICAgcmVhbE5hbWU6IGFuZ3VsYXIuY29weSh2YWx1ZS5uYW1lKSxcbiAgICAgICAgICAgIG5hbWU6IFwibG9nbzogXCIgKyB2YWx1ZS5uYW1lLFxuICAgICAgICAgICAgdHlwZTogXCJsb2dvXCIsXG4gICAgICAgICAgICBzaXplOiBzaXplT3B0aW9uLFxuICAgICAgICAgICAgaW1hZ2Vfa2V5OiB2YWx1ZS5rZXlcbiAgICAgICAgICB9XG4gICAgICAgICAgdm0uT1ZFUkxBWV9UWVBFUy5wdXNoKG5ld1ZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgdm0uT1ZFUkxBWV9UWVBFUy5zb3J0KG5hdHVyYWxTb3J0KTtcblxuICAgIH0pO1xuXG4gICAgcHJvbWlzZS5jYXRjaCgoKSA9PiB7XG4gICAgICBQcm9ncmVzc0JhclNlcnZpY2UuY29tcGxldGUoKTtcbiAgICAgIC8vVG9hc3RzU2VydmljZS5zaG93RXJyb3JUb2FzdChcIlNPTUVUSElORyBXRU5UIFdST05HIFJFVFJJRVZJTkcgWU9VUiBJTUFHRVNcIilcbiAgICB9KVxuICB9XG5cblxuICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgLy8gRXZlbnRzIGFuZCBJc3N1ZXMgVGFiXG4gIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICB2bS5yZXBsYWNlSXNzdWVUaW1lID0gZnVuY3Rpb24gKGlzc3Vlcykge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaXNzdWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBsZXQgZWFjaCA9IGlzc3Vlc1tpXTtcbiAgICAgIGlmIChlYWNoLmNyZWF0ZWQpIHtcbiAgICAgICAgZWFjaC5jcmVhdGVkID0gRGF0ZU1hbmlwdWxhdGlvblNlcnZpY2UuZ2VuZXJhdGVMb2NhbEZyb21VVEMoZWFjaC5jcmVhdGVkKTtcbiAgICAgIH1cbiAgICAgIGlmIChlYWNoLnVwZGF0ZWQpIHtcbiAgICAgICAgZWFjaC51cGRhdGVkID0gRGF0ZU1hbmlwdWxhdGlvblNlcnZpY2UuZ2VuZXJhdGVMb2NhbEZyb21VVEMoZWFjaC51cGRhdGVkKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgdm0ucmVwbGFjZUNvbW1hbmRUaW1lID0gZnVuY3Rpb24gKGlzc3Vlcykge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaXNzdWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBsZXQgZWFjaCA9IGlzc3Vlc1tpXTtcbiAgICAgIGlmIChlYWNoLnBvc3RlZFRpbWUpIHtcbiAgICAgICAgZWFjaC5wb3N0ZWRUaW1lID0gRGF0ZU1hbmlwdWxhdGlvblNlcnZpY2UuZ2VuZXJhdGVMb2NhbEZyb21VVEMoZWFjaC5wb3N0ZWRUaW1lKTtcbiAgICAgIH1cbiAgICAgIGlmIChlYWNoLmNvbmZpcm1lZFRpbWUpIHtcbiAgICAgICAgZWFjaC5jb25maXJtZWRUaW1lID0gRGF0ZU1hbmlwdWxhdGlvblNlcnZpY2UuZ2VuZXJhdGVMb2NhbEZyb21VVEMoZWFjaC5jb25maXJtZWRUaW1lKTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgdm0ubG9jYWxGcm9tVXRjID0gZnVuY3Rpb24gKGV2ZW50cykge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZXZlbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBsZXQgZWFjaCA9IGV2ZW50c1tpXTtcbiAgICAgIGlmIChlYWNoLnV0Y1RpbWVzdGFtcCkge1xuICAgICAgICBlYWNoLnV0Y1RpbWVzdGFtcCA9IERhdGVNYW5pcHVsYXRpb25TZXJ2aWNlLmdlbmVyYXRlTG9jYWxGcm9tVVRDKGVhY2gudXRjVGltZXN0YW1wKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuO1xuICB9O1xuXG4gIHZtLmNvcHlEZXZpY2VLZXkgPSAoKSA9PiBUb2FzdHNTZXJ2aWNlLnNob3dTdWNjZXNzVG9hc3QoJ0RldmljZSBrZXkgY29waWVkIHRvIHlvdXIgY2xpcGJvYXJkJyk7XG5cbiAgdm0uY29weUNvcnJlbGF0aW9uSWRlbnRpZmllciA9ICgpID0+IFRvYXN0c1NlcnZpY2Uuc2hvd1N1Y2Nlc3NUb2FzdCgnQ29ycmVsYXRpb24gSUQgY29waWVkIHRvIHlvdXIgY2xpcGJvYXJkJyk7XG5cbiAgLy8gZXZlbnQgdGFiXG4gIHZtLmdldElzc3VlcyA9IGZ1bmN0aW9uIChkZXZpY2UsIGVwb2NoU3RhcnQsIGVwb2NoRW5kLCBwcmV2LCBuZXh0KSB7XG4gICAgUHJvZ3Jlc3NCYXJTZXJ2aWNlLnN0YXJ0KCk7XG4gICAgbGV0IGlzc3Vlc1Byb21pc2UgPSBEZXZpY2VzU2VydmljZS5nZXRJc3N1ZXNCeUtleShkZXZpY2UsIGVwb2NoU3RhcnQsIGVwb2NoRW5kLCBwcmV2LCBuZXh0KTtcbiAgICByZXR1cm4gaXNzdWVzUHJvbWlzZS50aGVuKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICB2bS5yZXBsYWNlSXNzdWVUaW1lKGRhdGEuaXNzdWVzKTtcbiAgICAgIHZtLmlzc3VlcyA9IGRhdGEuaXNzdWVzO1xuICAgICAgdm0ucHJldl9jdXJzb3IgPSBkYXRhLnByZXY7XG4gICAgICB2bS5uZXh0X2N1cnNvciA9IGRhdGEubmV4dDtcbiAgICAgIHJldHVybiBQcm9ncmVzc0JhclNlcnZpY2UuY29tcGxldGUoKTtcbiAgICB9KTtcbiAgfTtcblxuICAvLyBjb21tYW5kIGhpc3RvcnkgdGFiXG4gIHZtLmdldEV2ZW50cyA9IGZ1bmN0aW9uIChkZXZpY2VLZXksIHByZXYsIG5leHQpIHtcbiAgICBQcm9ncmVzc0JhclNlcnZpY2Uuc3RhcnQoKTtcbiAgICBsZXQgY29tbWFuZEV2ZW50c1Byb21pc2UgPSBEZXZpY2VzU2VydmljZS5nZXRDb21tYW5kRXZlbnRzQnlLZXkoZGV2aWNlS2V5LCBwcmV2LCBuZXh0KTtcbiAgICByZXR1cm4gY29tbWFuZEV2ZW50c1Byb21pc2UudGhlbihmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgdm0ucmVwbGFjZUNvbW1hbmRUaW1lKGRhdGEuZXZlbnRzKTtcbiAgICAgIHZtLmV2ZW50X25leHRfY3Vyc29yID0gZGF0YS5uZXh0X2N1cnNvcjtcbiAgICAgIHZtLmV2ZW50X3ByZXZfY3Vyc29yID0gZGF0YS5wcmV2X2N1cnNvcjtcbiAgICAgIHZtLmNvbW1hbmRFdmVudHMgPSBkYXRhLmV2ZW50cztcbiAgICAgIHJldHVybiBQcm9ncmVzc0JhclNlcnZpY2UuY29tcGxldGUoKTtcbiAgICB9KTtcbiAgfTtcblxuICAvLyBlbnJvbGxtZW50IHRhYlxuICB2bS5nZXRFbnJvbGxtZW50RXZlbnRzID0gZnVuY3Rpb24gKGRldmljZUtleSkge1xuICAgIFByb2dyZXNzQmFyU2VydmljZS5zdGFydCgpO1xuICAgIGxldCBlbnJvbGxtZW50RXZlbnRzUHJvbWlzZSA9IEludGVncmF0aW9uRXZlbnRzLmdldEVucm9sbG1lbnRFdmVudHMoZGV2aWNlS2V5KTtcbiAgICByZXR1cm4gZW5yb2xsbWVudEV2ZW50c1Byb21pc2UudGhlbihmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgdm0uZW5yb2xsbWVudEV2ZW50cyA9IGRhdGE7XG4gICAgICB2bS5sb2NhbEZyb21VdGMoZGF0YSk7XG4gICAgICByZXR1cm4gUHJvZ3Jlc3NCYXJTZXJ2aWNlLmNvbXBsZXRlKCk7XG4gICAgfSk7XG4gIH07XG5cbiAgdm0ucGFnaW5hdGVDYWxsID0gZnVuY3Rpb24gKGZvcndhcmQpIHtcbiAgICBpZiAoZm9yd2FyZCkge1xuICAgICAgcmV0dXJuIHZtLmdldElzc3Vlcyh2bS5kZXZpY2VLZXksIHZtLmVwb2NoU3RhcnQsIHZtLmVwb2NoRW5kLCBudWxsLCB2bS5uZXh0X2N1cnNvcik7XG5cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHZtLmdldElzc3Vlcyh2bS5kZXZpY2VLZXksIHZtLmVwb2NoU3RhcnQsIHZtLmVwb2NoRW5kLCB2bS5wcmV2X2N1cnNvciwgbnVsbCk7XG4gICAgfVxuICB9O1xuXG4gIHZtLnBhZ2luYXRlRXZlbnRDYWxsID0gZnVuY3Rpb24gKGZvcndhcmQpIHtcbiAgICBpZiAoZm9yd2FyZCkge1xuICAgICAgcmV0dXJuIHZtLmdldEV2ZW50cyh2bS5kZXZpY2VLZXksIG51bGwsIHZtLmV2ZW50X25leHRfY3Vyc29yKTtcblxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdm0uZ2V0RXZlbnRzKHZtLmRldmljZUtleSwgdm0uZXZlbnRfcHJldl9jdXJzb3IsIG51bGwpO1xuICAgIH1cbiAgfTtcblxuICB2bS5pbml0aWFsaXplID0gZnVuY3Rpb24gKCkge1xuICAgIHZtLmVwb2NoU3RhcnQgPSBtb21lbnQodm0uc3RhcnRUaW1lLCAnWVlZWS1NTS1ERCBoaDptbSBBJykudW5peCgpO1xuICAgIHZtLmVwb2NoRW5kID0gbW9tZW50KHZtLmVuZFRpbWUsICdZWVlZLU1NLUREIGhoOm1tIEEnKS51bml4KCk7XG5cbiAgICBsZXQgdGltZXpvbmVQcm9taXNlID0gVGltZXpvbmVzU2VydmljZS5nZXRDdXN0b21UaW1lem9uZXMoKTtcbiAgICB0aW1lem9uZVByb21pc2UudGhlbihkYXRhID0+IHZtLnRpbWV6b25lcyA9IGRhdGEpO1xuXG4gICAgdm0ucGFuZWxNb2RlbHMgPSBEZXZpY2VzU2VydmljZS5nZXRQYW5lbE1vZGVscygpO1xuICAgIHZtLnBhbmVsSW5wdXRzID0gRGV2aWNlc1NlcnZpY2UuZ2V0UGFuZWxJbnB1dHMoKTtcblxuICAgIGxldCBkZXZpY2VQcm9taXNlID0gRGV2aWNlc1NlcnZpY2UuZ2V0RGV2aWNlQnlLZXkodm0uZGV2aWNlS2V5KTtcbiAgICBkZXZpY2VQcm9taXNlLnRoZW4oKHJlc3BvbnNlID0+IHZtLm9uR2V0RGV2aWNlU3VjY2VzcyhyZXNwb25zZSkpLCByZXNwb25zZSA9PiB2bS5vbkdldERldmljZUZhaWx1cmUocmVzcG9uc2UpKTtcblxuICAgIHZtLmdldFRlbmFudEltYWdlcygpO1xuICAgIHZtLmdldEV2ZW50cyh2bS5kZXZpY2VLZXkpO1xuICAgIHZtLmdldElzc3Vlcyh2bS5kZXZpY2VLZXksIHZtLmVwb2NoU3RhcnQsIHZtLmVwb2NoRW5kKTtcbiAgICByZXR1cm4gdm0uZ2V0RW5yb2xsbWVudEV2ZW50cyh2bS5kZXZpY2VLZXkpO1xuICB9O1xuXG4gIHZtLm9uR2V0RGV2aWNlU3VjY2VzcyA9IGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgIHZtLmN1cnJlbnREZXZpY2UgPSByZXNwb25zZVxuICAgIHZtLmN1cnJlbnREZXZpY2VDb3B5ID0gYW5ndWxhci5jb3B5KHZtLmN1cnJlbnREZXZpY2UpXG4gICAgaWYgKHJlc3BvbnNlLnRpbWV6b25lICE9PSB2bS5zZWxlY3RlZFRpbWV6b25lKSB7XG4gICAgICB2bS5zZWxlY3RlZFRpbWV6b25lID0gcmVzcG9uc2UudGltZXpvbmU7XG4gICAgfVxuICAgIGlmICh2bS50ZW5hbnRLZXkgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdm0udGVuYW50S2V5ID0gdm0uY3VycmVudERldmljZS50ZW5hbnRLZXk7XG4gICAgfVxuXG4gICAgaWYgKCRzdGF0ZVBhcmFtcy5mcm9tRGV2aWNlcyA9PT0gXCJ0cnVlXCIpIHtcbiAgICAgIHZtLmJhY2tVcmwgPSAnLyMvZGV2aWNlcyc7XG4gICAgICB2bS5iYWNrVXJsVGV4dCA9ICdCYWNrIHRvIGRldmljZXMnO1xuICAgIH0gZWxzZSB7XG4gICAgICBpZiAodm0uY3VycmVudERldmljZS5pc1VubWFuYWdlZERldmljZSA9PT0gdHJ1ZSkge1xuICAgICAgICB2bS5iYWNrVXJsID0gYC8jL3RlbmFudHMvJHt2bS50ZW5hbnRLZXl9L3VubWFuYWdlZGA7XG4gICAgICAgIHZtLmJhY2tVcmxUZXh0ID0gJ0JhY2sgdG8gdGVuYW50IHVubWFuYWdlZCBkZXZpY2VzJztcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZtLmJhY2tVcmwgPSBgLyMvdGVuYW50cy8ke3ZtLnRlbmFudEtleX0vbWFuYWdlZGA7XG4gICAgICAgIHZtLmJhY2tVcmxUZXh0ID0gJ0JhY2sgdG8gdGVuYW50IG1hbmFnZWQgZGV2aWNlcyc7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbGV0IGxvY2F0aW9uc1Byb21pc2UgPSBMb2NhdGlvbnNTZXJ2aWNlLmdldExvY2F0aW9uc0J5VGVuYW50S2V5KHZtLnRlbmFudEtleSk7XG4gICAgcmV0dXJuIGxvY2F0aW9uc1Byb21pc2UudGhlbihmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgdm0ubG9jYXRpb25zID0gZGF0YTtcbiAgICAgIHJldHVybiB2bS5zZXRTZWxlY3RlZE9wdGlvbnMoKTtcbiAgICB9KTtcbiAgfTtcblxuICB2bS5vbkdldERldmljZUZhaWx1cmUgPSBmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICBUb2FzdHNTZXJ2aWNlLnNob3dFcnJvclRvYXN0KCdPb3BzLiBXZSB3ZXJlIHVuYWJsZSB0byBmZXRjaCB0aGUgZGV0YWlscyBmb3IgdGhpcyBkZXZpY2UgYXQgdGhpcyB0aW1lLicpO1xuICAgIGxldCBlcnJvck1lc3NhZ2UgPSBgTm8gZGV0YWlsIGZvciBkZXZpY2Vfa2V5ICR7dm0uZGV2aWNlS2V5fS4gRXJyb3I6ICR7cmVzcG9uc2Uuc3RhdHVzfSAke3Jlc3BvbnNlLnN0YXR1c1RleHR9YDtcbiAgICAkbG9nLmVycm9yKGVycm9yTWVzc2FnZSk7XG4gICAgcmV0dXJuICRzdGF0ZS5nbygnZGV2aWNlcycpO1xuICB9O1xuXG4gIHZtLnNldFNlbGVjdGVkT3B0aW9ucyA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodm0uY3VycmVudERldmljZS5wYW5lbE1vZGVsID09PSBudWxsKSB7XG4gICAgICB2bS5jdXJyZW50RGV2aWNlLnBhbmVsTW9kZWwgPSB2bS5wYW5lbE1vZGVsc1swXTtcbiAgICAgIHZtLmN1cnJlbnREZXZpY2UucGFuZWxJbnB1dCA9IHZtLnBhbmVsSW5wdXRzWzBdO1xuICAgIH0gZWxzZSB7XG4gICAgICBmb3IgKGxldCBpID0gMDsgaSA8IHZtLnBhbmVsTW9kZWxzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGxldCBwYW5lbE1vZGVsID0gdm0ucGFuZWxNb2RlbHNbaV07XG4gICAgICAgIGlmIChwYW5lbE1vZGVsLmlkID09PSB2bS5jdXJyZW50RGV2aWNlLnBhbmVsTW9kZWwpIHtcbiAgICAgICAgICB2bS5jdXJyZW50RGV2aWNlLnBhbmVsTW9kZWwgPSBwYW5lbE1vZGVsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHZtLnBhbmVsSW5wdXRzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgIGxldCBwYW5lbElucHV0ID0gdm0ucGFuZWxJbnB1dHNbal07XG4gICAgICAgIGxldCBpc1BhcmVudCA9IHBhbmVsSW5wdXQucGFyZW50SWQgPT09IHZtLmN1cnJlbnREZXZpY2UucGFuZWxNb2RlbC5pZDtcbiAgICAgICAgaWYgKGlzUGFyZW50ICYmIHBhbmVsSW5wdXQuaWQudG9Mb3dlckNhc2UoKSA9PT0gdm0uY3VycmVudERldmljZS5wYW5lbElucHV0KSB7XG4gICAgICAgICAgdm0uY3VycmVudERldmljZS5wYW5lbElucHV0ID0gcGFuZWxJbnB1dDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAodm0uY3VycmVudERldmljZS5sb2NhdGlvbktleSAhPT0gbnVsbCkge1xuICAgICAgZm9yIChsZXQgayA9IDA7IGsgPCB2bS5sb2NhdGlvbnMubGVuZ3RoOyBrKyspIHtcbiAgICAgICAgbGV0IGxvY2F0aW9uID0gdm0ubG9jYXRpb25zW2tdO1xuICAgICAgICBpZiAobG9jYXRpb24ua2V5ID09PSB2bS5jdXJyZW50RGV2aWNlLmxvY2F0aW9uS2V5KSB7XG4gICAgICAgICAgdm0uY3VycmVudERldmljZS5sb2NhdGlvbiA9IGxvY2F0aW9uO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm47XG4gICAgfVxuICB9O1xuXG4gIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgLy8gUHJvcGVydGllcyBUYWJcbiAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICB2bS5vblNhdmVEZXZpY2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgUHJvZ3Jlc3NCYXJTZXJ2aWNlLnN0YXJ0KCk7XG4gICAgaWYgKHZtLmN1cnJlbnREZXZpY2UubG9jYXRpb24gIT09IHVuZGVmaW5lZCAmJiB2bS5jdXJyZW50RGV2aWNlLmxvY2F0aW9uLmtleSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB2bS5jdXJyZW50RGV2aWNlLmxvY2F0aW9uS2V5ID0gdm0uY3VycmVudERldmljZS5sb2NhdGlvbi5rZXk7XG4gICAgfVxuICAgIGlmICh2bS5jdXJyZW50RGV2aWNlLnBhbmVsTW9kZWwuaWQgIT09IHVuZGVmaW5lZCAmJiB2bS5jdXJyZW50RGV2aWNlLnBhbmVsTW9kZWwuaWQgIT09ICdOb25lJykge1xuICAgICAgdm0uY3VycmVudERldmljZS5wYW5lbE1vZGVsTnVtYmVyID0gdm0uY3VycmVudERldmljZS5wYW5lbE1vZGVsLmlkO1xuICAgIH1cbiAgICBpZiAodm0uY3VycmVudERldmljZS5wYW5lbElucHV0LmlkICE9PSB1bmRlZmluZWQgJiYgdm0uY3VycmVudERldmljZS5wYW5lbElucHV0LmlkICE9PSAnTm9uZScpIHtcbiAgICAgIHZtLmN1cnJlbnREZXZpY2UucGFuZWxTZXJpYWxJbnB1dCA9IHZtLmN1cnJlbnREZXZpY2UucGFuZWxJbnB1dC5pZC50b0xvd2VyQ2FzZSgpO1xuICAgIH1cbiAgICB2bS5jdXJyZW50RGV2aWNlLnRpbWV6b25lID0gdm0uc2VsZWN0ZWRUaW1lem9uZTtcbiAgICBsZXQgcHJvbWlzZSA9IERldmljZXNTZXJ2aWNlLnNhdmUodm0uY3VycmVudERldmljZSk7XG4gICAgcmV0dXJuIHByb21pc2UudGhlbih2bS5vblN1Y2Nlc3NEZXZpY2VTYXZlLCB2bS5vbkZhaWx1cmVEZXZpY2VTYXZlKTtcbiAgfTtcblxuICB2bS5vblN1Y2Nlc3NEZXZpY2VTYXZlID0gZnVuY3Rpb24gKCkge1xuICAgIFByb2dyZXNzQmFyU2VydmljZS5jb21wbGV0ZSgpO1xuICAgIHJldHVybiBUb2FzdHNTZXJ2aWNlLnNob3dTdWNjZXNzVG9hc3QoJ1dlIHNhdmVkIHlvdXIgdXBkYXRlLicpO1xuICB9O1xuXG4gIHZtLm9uRmFpbHVyZURldmljZVNhdmUgPSBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICBQcm9ncmVzc0JhclNlcnZpY2UuY29tcGxldGUoKTtcbiAgICBpZiAoZXJyb3Iuc3RhdHVzID09PSA0MDkpIHtcbiAgICAgICRsb2cuaW5mbyhcbiAgICAgICAgYEZhaWx1cmUgc2F2aW5nIGRldmljZS4gQ3VzdG9tZXIgZGlzcGxheSBjb2RlIGFscmVhZHkgZXhpc3RzIGZvciB0ZW5hbnQ6ICR7ZXJyb3Iuc3RhdHVzIH0gJHtlcnJvci5zdGF0dXNUZXh0fWApO1xuICAgICAgcmV0dXJuIHN3ZWV0LnNob3coJ09vcHMuLi4nLCAnVGhpcyBjdXN0b21lciBkaXNwbGF5IGNvZGUgYWxyZWFkeSBleGlzdHMgZm9yIHRoaXMgdGVuYW50LiBQbGVhc2UgY2hvb3NlIGFub3RoZXIuJywgJ2Vycm9yJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgICRsb2cuZXJyb3IoYEZhaWx1cmUgc2F2aW5nIGRldmljZTogJHtlcnJvci5zdGF0dXMgfSAke2Vycm9yLnN0YXR1c1RleHR9YCk7XG4gICAgICByZXR1cm4gVG9hc3RzU2VydmljZS5zaG93RXJyb3JUb2FzdCgnT29wcy4gV2Ugd2VyZSB1bmFibGUgdG8gc2F2ZSB5b3VyIHVwZGF0ZXMgdG8gdGhpcyBkZXZpY2UgYXQgdGhpcyB0aW1lLicpO1xuICAgIH1cbiAgfTtcblxuICB2bS5vblBhbmVsU2xlZXAgPSBmdW5jdGlvbiAoY29tbWFuZCkge1xuICAgIFByb2dyZXNzQmFyU2VydmljZS5zdGFydCgpO1xuICAgIGxldCBwcm9taXNlID0gQ29tbWFuZHNTZXJ2aWNlLnBhbmVsU2xlZXAodm0uZGV2aWNlS2V5LCBjb21tYW5kKTtcbiAgICByZXR1cm4gcHJvbWlzZS50aGVuKHZtLm9uUGFuZWxTbGVlcFN1Y2Nlc3MsIHZtLm9uUGFuZWxTbGVlcEZhaWx1cmUpO1xuICB9O1xuXG4gIHZtLm9uUGFuZWxTbGVlcFN1Y2Nlc3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgUHJvZ3Jlc3NCYXJTZXJ2aWNlLmNvbXBsZXRlKCk7XG4gICAgcmV0dXJuIFRvYXN0c1NlcnZpY2Uuc2hvd1N1Y2Nlc3NUb2FzdChcIldlIHRvZ2dsZWQgdGhlIHBhbmVsIHNsZWVwIGF0dHJpYnV0ZS4gVGhlIHBsYXllciBzaG91bGQgYWRqdXN0IHRvIHRoZXNlIGNoYW5nZXMgd2l0aGluIDE1IG1pbnV0ZXMuXCIpO1xuICB9O1xuXG4gIHZtLm9uUGFuZWxTbGVlcEZhaWx1cmUgPSBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICBQcm9ncmVzc0JhclNlcnZpY2UuY29tcGxldGUoKTtcbiAgICByZXR1cm4gc3dlZXQuc2hvdygnT29wcy4uLicsIFwiV2Ugd2VyZSB1bmFibGUgdG8gdG9nZ2xlIHRoZSBwYW5lbCBzbGVlcCBhdHRyaWJ1dGUuXCIsICdlcnJvcicpO1xuICB9O1xuXG4gIHZtLmNvbmZpcm1EZXZpY2VEZWxldGUgPSBmdW5jdGlvbiAoZXZlbnQsIGtleSkge1xuICAgIGxldCBjb25maXJtID0gJG1kRGlhbG9nLmNvbmZpcm0oXG4gICAgICB7XG4gICAgICAgIHRpdGxlOiAnQXJlIHlvdSBzdXJlIHRvIGRlbGV0ZSB0aGlzIGRldmljZT8nLFxuICAgICAgICB0ZXh0Q29udGVudDogJ1BsZWFzZSByZW1lbWJlciwgeW91IE1VU1QgcmVtb3ZlIHRoaXMgZGV2aWNlIGZyb20gQ29udGVudCBNYW5hZ2VyIGJlZm9yZSBkZWxldGluZyBpdCBmcm9tIFByb3Zpc2lvbmluZy4nLFxuICAgICAgICB0YXJnZXRFdmVudDogZXZlbnQsXG4gICAgICAgIG9rOiAnRGVsZXRlJyxcbiAgICAgICAgY2FuY2VsOiAnQ2FuY2VsJ1xuICAgICAgfVxuICAgICk7XG4gICAgbGV0IHNob3dQcm9taXNlID0gJG1kRGlhbG9nLnNob3coY29uZmlybSk7XG4gICAgbGV0IHN1Y2Nlc3MgPSAoKSA9PiB2bS5vbkNvbmZpcm1EZWxldGUoa2V5KTtcbiAgICBsZXQgZmFpbHVyZSA9ICgpID0+IHZtLm9uQ29uZmlybUNhbmNlbCgpO1xuICAgIHJldHVybiBzaG93UHJvbWlzZS50aGVuKHN1Y2Nlc3MsIGZhaWx1cmUpO1xuICB9O1xuXG4gIHZtLm9uQ29uZmlybURlbGV0ZSA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgICBsZXQgc3VjY2VzcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIFRvYXN0c1NlcnZpY2Uuc2hvd1N1Y2Nlc3NUb2FzdCgnV2UgcHJvY2Vzc2VkIHlvdXIgZGVsZXRlIHJlcXVlc3QuJyk7XG4gICAgICByZXR1cm4gJHN0YXRlLmdvKCdkZXZpY2VzJyk7XG4gICAgfTtcbiAgICBsZXQgZmFpbHVyZSA9IGZ1bmN0aW9uIChlcnJvcikge1xuICAgICAgbGV0IGZyaWVuZGx5TWVzc2FnZSA9ICdXZSB3ZXJlIHVuYWJsZSB0byBjb21wbGV0ZSB5b3VyIGRlbGV0ZSByZXF1ZXN0IGF0IHRoaXMgdGltZS4nO1xuICAgICAgVG9hc3RzU2VydmljZS5zaG93RXJyb3JUb2FzdChmcmllbmRseU1lc3NhZ2UpO1xuICAgICAgcmV0dXJuICRsb2cuZXJyb3IoYERlbGV0ZSBkZXZpY2UgZmFpbHVyZSBmb3IgZGV2aWNlX2tleSAke2tleX06ICR7ZXJyb3Iuc3RhdHVzIH0gJHtlcnJvci5zdGF0dXNUZXh0fWApO1xuICAgIH07XG4gICAgbGV0IGRlbGV0ZVByb21pc2UgPSBEZXZpY2VzU2VydmljZS5kZWxldGUoa2V5KTtcbiAgICByZXR1cm4gZGVsZXRlUHJvbWlzZS50aGVuKHN1Y2Nlc3MsIGZhaWx1cmUpO1xuICB9O1xuXG4gIHZtLm9uQ29uZmlybUNhbmNlbCA9ICgpID0+IFRvYXN0c1NlcnZpY2Uuc2hvd0luZm9Ub2FzdCgnV2UgY2FuY2VsZWQgeW91ciBkZWxldGUgcmVxdWVzdC4nKTtcblxuICB2bS5vblByb29mT2ZQbGF5TG9nZ2luZ0NoZWNrID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICh2bS5jdXJyZW50RGV2aWNlLnByb29mT2ZQbGF5TG9nZ2luZykge1xuICAgICAgbGV0IG5vTG9jYXRpb24gPSB2bS5jdXJyZW50RGV2aWNlLmxvY2F0aW9uS2V5ID09PSBudWxsO1xuICAgICAgbGV0IG5vRGlzcGxheUNvZGUgPSB2bS5jdXJyZW50RGV2aWNlLmN1c3RvbWVyRGlzcGxheUNvZGUgPT09IG51bGw7XG4gICAgICBpZiAobm9Mb2NhdGlvbikge1xuICAgICAgICBzd2VldC5zaG93KCdPb3BzLi4uJywgXCJZb3UgbXVzdCBoYXZlIGEgTG9jYXRpb24gdG8gZW5hYmxlIFByb29mIG9mIHBsYXkuXCIsICdlcnJvcicpO1xuICAgICAgICByZXR1cm4gdm0uY3VycmVudERldmljZS5wcm9vZk9mUGxheUxvZ2dpbmcgPSBmYWxzZTtcbiAgICAgIH0gZWxzZSBpZiAobm9EaXNwbGF5Q29kZSkge1xuICAgICAgICBzd2VldC5zaG93KCdPb3BzLi4uJywgXCJZb3UgbXVzdCBoYXZlIGEgRGlzcGxheSBjb2RlIHRvIGVuYWJsZSBQcm9vZiBvZiBwbGF5LlwiLCAnZXJyb3InKTtcbiAgICAgICAgcmV0dXJuIHZtLmN1cnJlbnREZXZpY2UucHJvb2ZPZlBsYXlMb2dnaW5nID0gZmFsc2U7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdm0ub25TYXZlRGV2aWNlKCk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB2bS5vblNhdmVEZXZpY2UoKTtcbiAgICB9XG4gIH07XG5cbiAgdm0ub25VcGRhdGVMb2NhdGlvbiA9ICgpID0+IHZtLm9uU2F2ZURldmljZSgpO1xuXG4gIHZtLmF1dG9HZW5lcmF0ZUN1c3RvbWVyRGlzcGxheUNvZGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgbGV0IG5ld0Rpc3BsYXlDb2RlID0gJyc7XG4gICAgaWYgKHZtLmN1cnJlbnREZXZpY2UuY3VzdG9tZXJEaXNwbGF5TmFtZSkge1xuICAgICAgbmV3RGlzcGxheUNvZGUgPSB2bS5jdXJyZW50RGV2aWNlLmN1c3RvbWVyRGlzcGxheU5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICAgIG5ld0Rpc3BsYXlDb2RlID0gbmV3RGlzcGxheUNvZGUucmVwbGFjZSgvXFxzKy9nLCAnXycpO1xuICAgICAgbmV3RGlzcGxheUNvZGUgPSBuZXdEaXNwbGF5Q29kZS5yZXBsYWNlKC9cXFcrL2csICcnKTtcbiAgICB9XG4gICAgcmV0dXJuIHZtLmN1cnJlbnREZXZpY2UuY3VzdG9tZXJEaXNwbGF5Q29kZSA9IG5ld0Rpc3BsYXlDb2RlO1xuICB9O1xuXG4gIHZtLmxvZ2dseUZvclVzZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgbGV0IHVzZXJEb21haW4gPSBTZXNzaW9uc1NlcnZpY2UuZ2V0VXNlckVtYWlsKCkuc3BsaXQoXCJAXCIpWzFdO1xuICAgIHJldHVybiB1c2VyRG9tYWluID09PSBcImRlbW8uYWdvc3RvLmNvbVwiIHx8IHVzZXJEb21haW4gPT09IFwiYWdvc3RvLmNvbVwiO1xuICB9O1xuXG4gIHZtLm9uQ2xpY2tSZWZyZXNoQnV0dG9uID0gZnVuY3Rpb24gKCkge1xuICAgIFByb2dyZXNzQmFyU2VydmljZS5zdGFydCgpO1xuICAgIHZtLnN0YXJ0VGltZSA9IERhdGVNYW5pcHVsYXRpb25TZXJ2aWNlLmNvbnZlcnRUb01vbWVudElmTm90QWxyZWFkeSh2bS5zdGFydFRpbWUpO1xuICAgIHZtLmVuZFRpbWUgPSBEYXRlTWFuaXB1bGF0aW9uU2VydmljZS5jb252ZXJ0VG9Nb21lbnRJZk5vdEFscmVhZHkodm0uZW5kVGltZSk7XG4gICAgdm0uZXBvY2hTdGFydCA9IG1vbWVudCh2bS5zdGFydFRpbWUsICdZWVlZLU1NLUREIGhoOm1tIEEnKS51bml4KCk7XG4gICAgdm0uZXBvY2hFbmQgPSBtb21lbnQodm0uZW5kVGltZSwgJ1lZWVktTU0tREQgaGg6bW0gQScpLnVuaXgoKTtcbiAgICB2bS5wcmV2X2N1cnNvciA9IG51bGw7XG4gICAgdm0ubmV4dF9jdXJzb3IgPSBudWxsO1xuICAgIGxldCBpc3N1ZXNQcm9taXNlID0gRGV2aWNlc1NlcnZpY2UuZ2V0SXNzdWVzQnlLZXkodm0uZGV2aWNlS2V5LCB2bS5lcG9jaFN0YXJ0LCB2bS5lcG9jaEVuZCwgdm0ucHJldl9jdXJzb3IsIHZtLm5leHRfY3Vyc29yKTtcbiAgICByZXR1cm4gaXNzdWVzUHJvbWlzZS50aGVuKChkYXRhID0+IHZtLm9uUmVmcmVzaElzc3Vlc1N1Y2Nlc3MoZGF0YSkpLCBlcnJvciA9PiB2bS5vblJlZnJlc2hJc3N1ZXNGYWlsdXJlKGVycm9yKSk7XG4gIH07XG5cbiAgdm0ub25SZWZyZXNoSXNzdWVzU3VjY2VzcyA9IGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgdm0ucmVwbGFjZUlzc3VlVGltZShkYXRhLmlzc3Vlcyk7XG4gICAgdm0uaXNzdWVzID0gZGF0YS5pc3N1ZXM7XG4gICAgdm0ucHJldl9jdXJzb3IgPSBkYXRhLnByZXY7XG4gICAgdm0ubmV4dF9jdXJzb3IgPSBkYXRhLm5leHQ7XG4gICAgcmV0dXJuIFByb2dyZXNzQmFyU2VydmljZS5jb21wbGV0ZSgpO1xuICB9O1xuXG4gIHZtLm9uUmVmcmVzaElzc3Vlc0ZhaWx1cmUgPSBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICBQcm9ncmVzc0JhclNlcnZpY2UuY29tcGxldGUoKTtcbiAgICBUb2FzdHNTZXJ2aWNlLnNob3dJbmZvVG9hc3QoJ1dlIHdlcmUgdW5hYmxlIHRvIHJlZnJlc2ggdGhlIGRldmljZSBpc3N1ZXMgbGlzdCBhdCB0aGlzIHRpbWUuJyk7XG4gICAgcmV0dXJuICRsb2cuZXJyb3IoYEZhaWx1cmUgdG8gcmVmcmVzaCBkZXZpY2UgaXNzdWVzOiAke2Vycm9yLnN0YXR1cyB9ICR7ZXJyb3Iuc3RhdHVzVGV4dH1gKTtcbiAgfTtcblxuICByZXR1cm4gdm07XG59XG5cbmV4cG9ydCB7RGV2aWNlRGV0YWlsc0N0cmx9XG5cblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vc3JjL2FwcC9kZXZpY2UvZGV2aWNlLWRldGFpbHMuY29udHJvbGxlci5qc1xuICoqLyIsImZ1bmN0aW9uIERldmljZXNMaXN0aW5nQ3RybCgkc3RhdGVQYXJhbXMsICRsb2csIERldmljZXNTZXJ2aWNlLCAkc3RhdGUsIFNlc3Npb25zU2VydmljZSwgUHJvZ3Jlc3NCYXJTZXJ2aWNlLCBzd2VldCkge1xuICBcIm5nSW5qZWN0XCI7XG4gIGxldCB2bSA9IHRoaXM7XG4gIHZtLmRpc3RyaWJ1dG9yS2V5ID0gdW5kZWZpbmVkO1xuICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gIC8vIE1hbmFnZWRcbiAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICB2bS5kZXZpY2VzID0gW107XG4gIHZtLmRldmljZXNQcmV2ID0gbnVsbDtcbiAgdm0uZGV2aWNlc05leHQgPSBudWxsO1xuICB2bS5zZWxlY3RlZEJ1dHRvbiA9IFwiU2VyaWFsIE51bWJlclwiO1xuICB2bS5zZXJpYWxEZXZpY2VzID0ge307XG4gIHZtLmRpc2FibGVkID0gdHJ1ZTtcbiAgdm0ubWFjRGV2aWNlcyA9IHt9O1xuICB2bS5nY21pZERldmljZXMgPSB7fTtcblxuICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gIC8vIFVubWFuYWdlZFxuICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gIHZtLnVubWFuYWdlZFNlbGVjdGVkQnV0dG9uID0gXCJNQUNcIjtcbiAgdm0udW5tYW5hZ2VkU2VyaWFsRGV2aWNlcyA9IHt9O1xuICB2bS51bm1hbmFnZWREaXNhYmxlZCA9IHRydWU7XG4gIHZtLnVubWFuYWdlZERldmljZXNQcmV2ID0gbnVsbDtcbiAgdm0udW5tYW5hZ2VkRGV2aWNlc05leHQgPSBudWxsO1xuICB2bS51bm1hbmFnZWREZXZpY2VzID0gW107XG4gIHZtLnVubWFuYWdlZE1hY0RldmljZXMgPSB7fTtcbiAgdm0udW5tYW5hZ2VkR0NNaWREZXZpY2VzID0ge307XG4gIHZtLmRldmljZXNUb01hdGNoT25Vbm1hbmFnZWQgPSBbXTtcbiAgdm0uZGV2aWNlc1RvTWF0Y2hPbk1hbmFnZWQgPSBbXTtcblxuICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG5cbiAgdm0ucmVmcmVzaE1hbmFnZWREZXZpY2VzID0gZnVuY3Rpb24gKCkge1xuICAgIHZtLmRldmljZXNQcmV2ID0gbnVsbDtcbiAgICB2bS5kZXZpY2VzTmV4dCA9IG51bGw7XG4gICAgcmV0dXJuIHZtLmdldE1hbmFnZWREZXZpY2VzKHZtLmRpc3RyaWJ1dG9yS2V5LCB2bS5kZXZpY2VzUHJldiwgdm0uZGV2aWNlc05leHQpO1xuICB9O1xuXG4gIHZtLnJlZnJlc2hVbm1hbmFnZWREZXZpY2VzID0gZnVuY3Rpb24gKCkge1xuICAgIHZtLnVubWFuYWdlZERldmljZXNQcmV2ID0gbnVsbDtcbiAgICB2bS51bm1hbmFnZWREZXZpY2VzTmV4dCA9IG51bGw7XG4gICAgcmV0dXJuIHZtLmdldFVubWFuYWdlZERldmljZXModm0uZGlzdHJpYnV0b3JLZXksIHZtLnVubWFuYWdlZERldmljZXNQcmV2LCB2bS51bm1hbmFnZWREZXZpY2VzTmV4dCk7XG4gIH07XG5cbiAgdm0uY2hhbmdlUmFkaW8gPSBmdW5jdGlvbiAodW5tYW5hZ2VkKSB7XG4gICAgaWYgKHVubWFuYWdlZCkge1xuICAgICAgdm0udW5tYW5hZ2VkU2VhcmNoVGV4dCA9ICcnO1xuICAgICAgdm0udW5tYW5hZ2VkRGlzYWJsZWQgPSB0cnVlO1xuICAgICAgdm0udW5tYW5hZ2VkU2VyaWFsRGV2aWNlcyA9IHt9O1xuICAgICAgdm0udW5tYW5hZ2VkTWFjRGV2aWNlcyA9IHt9O1xuICAgICAgdm0uZGV2aWNlc1RvTWF0Y2hPblVubWFuYWdlZCA9IFtdO1xuICAgIH0gZWxzZSB7XG4gICAgICB2bS5zZWFyY2hUZXh0ID0gJyc7XG4gICAgICB2bS5kaXNhYmxlZCA9IHRydWU7XG4gICAgICB2bS5zZXJpYWxEZXZpY2VzID0ge307XG4gICAgICB2bS5tYWNEZXZpY2VzID0ge307XG4gICAgICB2bS5kZXZpY2VzVG9NYXRjaE9uTWFuYWdlZCA9IFtdO1xuICAgIH1cbiAgfTtcblxuICB2bS5lZGl0SXRlbSA9IChpdGVtKSA9PiBEZXZpY2VzU2VydmljZS5lZGl0SXRlbShpdGVtLCB0cnVlKVxuXG4gIHZtLnByZXBhcmVGb3JFZGl0VmlldyA9IGZ1bmN0aW9uICh1bm1hbmFnZWQsIHNlYXJjaFRleHQpIHtcbiAgICBsZXQgbWFjLCBzZXJpYWwsIGdjbWlkO1xuICAgIGlmICh1bm1hbmFnZWQpIHtcbiAgICAgIG1hYyA9IHZtLnVubWFuYWdlZFNlbGVjdGVkQnV0dG9uID09PSBcIk1BQ1wiO1xuICAgICAgc2VyaWFsID0gdm0udW5tYW5hZ2VkU2VsZWN0ZWRCdXR0b24gPT09IFwiU2VyaWFsIE51bWJlclwiO1xuICAgICAgZ2NtaWQgPSB2bS51bm1hbmFnZWRTZWxlY3RlZEJ1dHRvbiA9PT0gXCJHQ00gSURcIlxuICAgICAgaWYgKG1hYykge1xuICAgICAgICByZXR1cm4gdm0uZWRpdEl0ZW0odm0udW5tYW5hZ2VkTWFjRGV2aWNlc1tzZWFyY2hUZXh0XSk7XG4gICAgICB9IGVsc2UgaWYgKHNlcmlhbCkge1xuICAgICAgICByZXR1cm4gdm0uZWRpdEl0ZW0odm0udW5tYW5hZ2VkU2VyaWFsRGV2aWNlc1tzZWFyY2hUZXh0XSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdm0uZWRpdEl0ZW0odm0udW5tYW5hZ2VkR0NNaWREZXZpY2VzW3NlYXJjaFRleHRdKVxuICAgICAgfVxuXG4gICAgfSBlbHNlIHtcbiAgICAgIG1hYyA9IHZtLnNlbGVjdGVkQnV0dG9uID09PSBcIk1BQ1wiO1xuICAgICAgc2VyaWFsID0gdm0uc2VsZWN0ZWRCdXR0b24gPT09IFwiU2VyaWFsIE51bWJlclwiO1xuICAgICAgZ2NtaWQgPSB2bS5zZWxlY3RlZEJ1dHRvbiA9PT0gXCJHQ00gSURcIlxuICAgICAgaWYgKG1hYykge1xuICAgICAgICByZXR1cm4gdm0uZWRpdEl0ZW0odm0ubWFjRGV2aWNlc1tzZWFyY2hUZXh0XSk7XG4gICAgICB9IGVsc2UgaWYgKHNlcmlhbCkge1xuICAgICAgICByZXR1cm4gdm0uZWRpdEl0ZW0odm0uc2VyaWFsRGV2aWNlc1tzZWFyY2hUZXh0XSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdm0uZWRpdEl0ZW0odm0uZ2NtaWREZXZpY2VzW3NlYXJjaFRleHRdKVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG5cbiAgdm0uY29udHJvbE9wZW5CdXR0b24gPSBmdW5jdGlvbiAodW5tYW5hZ2VkLCBpc01hdGNoKSB7XG4gICAgaWYgKCF1bm1hbmFnZWQpIHtcbiAgICAgIHZtLmRpc2FibGVkID0gIWlzTWF0Y2g7XG4gICAgICB2bS5kaXNhYmxlZEJ1dHRvbkxvYWRpbmcgPSBmYWxzZTtcbiAgICB9IGVsc2Uge1xuICAgICAgdm0udW5tYW5hZ2VkRGlzYWJsZWQgPSAhaXNNYXRjaDtcbiAgICAgIHZtLnVubWFuYWdlZERpc2FibGVkQnV0dG9uTG9hZGluZyA9IGZhbHNlO1xuICAgIH1cbiAgfTtcblxuXG4gIHZtLmlzUmVzb3VyY2VWYWxpZCA9IGZ1bmN0aW9uICh1bm1hbmFnZWQsIHJlc291cmNlKSB7XG4gICAgbGV0IGRldmljZXNUb01hdGNoT24gPSB1bm1hbmFnZWQgPyB2bS5kZXZpY2VzVG9NYXRjaE9uVW5tYW5hZ2VkIDogdm0uZGV2aWNlc1RvTWF0Y2hPbk1hbmFnZWRcbiAgICBsZXQgZm91bmRNYXRjaCA9IGZhbHNlO1xuICAgIGZvciAobGV0IGl0ZW0gb2YgZGV2aWNlc1RvTWF0Y2hPbikge1xuICAgICAgaWYgKHJlc291cmNlID09PSBpdGVtKSB7XG4gICAgICAgIGZvdW5kTWF0Y2ggPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICB2bS5jb250cm9sT3BlbkJ1dHRvbih1bm1hbmFnZWQsIGZvdW5kTWF0Y2gpXG4gICAgcmV0dXJuIGZvdW5kTWF0Y2hcbiAgfTtcblxuXG4gIHZtLnNlYXJjaERldmljZXMgPSBmdW5jdGlvbiAodW5tYW5hZ2VkLCBwYXJ0aWFsKSB7XG4gICAgbGV0IGJ1dHRvbjtcbiAgICBpZiAodW5tYW5hZ2VkKSB7XG4gICAgICBidXR0b24gPSB2bS51bm1hbmFnZWRTZWxlY3RlZEJ1dHRvbjtcbiAgICB9IGVsc2Uge1xuICAgICAgYnV0dG9uID0gdm0uc2VsZWN0ZWRCdXR0b247XG4gICAgfVxuXG4gICAgbGV0IGJ5VGVuYW50ID0gZmFsc2U7XG4gICAgbGV0IHRlbmFudEtleSA9IG51bGw7XG5cbiAgICByZXR1cm4gRGV2aWNlc1NlcnZpY2Uuc2VhcmNoRGV2aWNlcyhwYXJ0aWFsLCBidXR0b24sIGJ5VGVuYW50LCB0ZW5hbnRLZXksIHZtLmRpc3RyaWJ1dG9yS2V5LCB1bm1hbmFnZWQpXG4gICAgICAudGhlbihmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICAgICAgbGV0IGRldmljZXNUb1JldHVybjtcbiAgICAgICAgaWYgKHJlc3BvbnNlLnN1Y2Nlc3MpIHtcbiAgICAgICAgICBsZXQgZGV2aWNlcyA9IHJlc3BvbnNlLmRldmljZXM7XG4gICAgICAgICAgaWYgKGJ1dHRvbiA9PT0gXCJTZXJpYWwgTnVtYmVyXCIpIHtcbiAgICAgICAgICAgIGlmICh1bm1hbmFnZWQpIHtcbiAgICAgICAgICAgICAgdm0udW5tYW5hZ2VkU2VyaWFsRGV2aWNlcyA9IGRldmljZXNbMV1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHZtLnNlcmlhbERldmljZXMgPSBkZXZpY2VzWzFdXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkZXZpY2VzVG9SZXR1cm4gPSBkZXZpY2VzWzBdXG4gICAgICAgICAgfSBlbHNlIGlmIChidXR0b24gPT09IFwiTUFDXCIpIHtcbiAgICAgICAgICAgIGlmICh1bm1hbmFnZWQpIHtcbiAgICAgICAgICAgICAgdm0udW5tYW5hZ2VkTWFjRGV2aWNlcyA9IGRldmljZXNbMV1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHZtLm1hY0RldmljZXMgPSBkZXZpY2VzWzFdXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkZXZpY2VzVG9SZXR1cm4gPSBkZXZpY2VzWzBdXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGlmICh1bm1hbmFnZWQpIHtcbiAgICAgICAgICAgICAgdm0udW5tYW5hZ2VkR0NNaWREZXZpY2VzID0gZGV2aWNlc1sxXVxuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgdm0uZ2NtaWREZXZpY2VzID0gZGV2aWNlc1sxXVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGV2aWNlc1RvUmV0dXJuID0gZGV2aWNlc1swXVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAodW5tYW5hZ2VkKSB7XG4gICAgICAgICAgICB2bS5kZXZpY2VzVG9NYXRjaE9uVW5tYW5hZ2VkID0gZGV2aWNlc1RvUmV0dXJuXG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZtLmRldmljZXNUb01hdGNoT25NYW5hZ2VkID0gZGV2aWNlc1RvUmV0dXJuXG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBkZXZpY2VzVG9SZXR1cm47XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIFtdXG4gICAgICAgIH1cbiAgICAgIH0pXG4gIH07XG5cbiAgdm0uZ2V0TWFuYWdlZERldmljZXMgPSBmdW5jdGlvbiAoa2V5LCBwcmV2LCBuZXh0KSB7XG4gICAgUHJvZ3Jlc3NCYXJTZXJ2aWNlLnN0YXJ0KCk7XG4gICAgbGV0IGRldmljZXNQcm9taXNlID0gRGV2aWNlc1NlcnZpY2UuZ2V0RGV2aWNlc0J5RGlzdHJpYnV0b3Ioa2V5LCBwcmV2LCBuZXh0KTtcbiAgICByZXR1cm4gZGV2aWNlc1Byb21pc2UudGhlbigoZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgICB2bS5kZXZpY2VzID0gcmVzcG9uc2UuZGV2aWNlcztcbiAgICAgIHZtLmRldmljZXNOZXh0ID0gcmVzcG9uc2UubmV4dF9jdXJzb3I7XG4gICAgICB2bS5kZXZpY2VzUHJldiA9IHJlc3BvbnNlLnByZXZfY3Vyc29yO1xuICAgICAgcmV0dXJuIHZtLmdldEZldGNoU3VjY2VzcygpO1xuICAgIH0pLCByZXNwb25zZSA9PiB2bS5nZXRGZXRjaEZhaWx1cmUocmVzcG9uc2UpKTtcbiAgfTtcblxuICB2bS5nZXRVbm1hbmFnZWREZXZpY2VzID0gZnVuY3Rpb24gKGtleSwgcHJldiwgbmV4dCkge1xuICAgIFByb2dyZXNzQmFyU2VydmljZS5zdGFydCgpO1xuICAgIGxldCB1bm1hbmFnZWREZXZpY2VzUHJvbWlzZSA9IERldmljZXNTZXJ2aWNlLmdldFVubWFuYWdlZERldmljZXNCeURpc3RyaWJ1dG9yKGtleSwgcHJldiwgbmV4dCk7XG4gICAgcmV0dXJuIHVubWFuYWdlZERldmljZXNQcm9taXNlLnRoZW4oKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgdm0udW5tYW5hZ2VkRGV2aWNlcyA9IHJlc3BvbnNlLmRldmljZXM7XG4gICAgICB2bS51bm1hbmFnZWREZXZpY2VzUHJldiA9IHJlc3BvbnNlLnByZXZfY3Vyc29yO1xuICAgICAgdm0udW5tYW5hZ2VkRGV2aWNlc05leHQgPSByZXNwb25zZS5uZXh0X2N1cnNvcjtcbiAgICAgIHJldHVybiB2bS5nZXRGZXRjaFN1Y2Nlc3MoKTtcbiAgICB9KSwgcmVzcG9uc2UgPT4gdm0uZ2V0RmV0Y2hGYWlsdXJlKHJlc3BvbnNlKSk7XG4gIH07XG5cbiAgdm0uaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICB2bS5kaXN0cmlidXRvcktleSA9IFNlc3Npb25zU2VydmljZS5nZXRDdXJyZW50RGlzdHJpYnV0b3JLZXkoKTtcbiAgICB2bS5nZXRNYW5hZ2VkRGV2aWNlcyh2bS5kaXN0cmlidXRvcktleSwgdm0uZGV2aWNlc1ByZXYsIHZtLmRldmljZXNOZXh0KTtcbiAgICByZXR1cm4gdm0uZ2V0VW5tYW5hZ2VkRGV2aWNlcyh2bS5kaXN0cmlidXRvcktleSwgdm0udW5tYW5hZ2VkRGV2aWNlc1ByZXYsIHZtLnVubWFuYWdlZERldmljZXNOZXh0KTtcbiAgfTtcblxuICB2bS5nZXRGZXRjaFN1Y2Nlc3MgPSAoKSA9PiBQcm9ncmVzc0JhclNlcnZpY2UuY29tcGxldGUoKTtcblxuICB2bS5nZXRGZXRjaEZhaWx1cmUgPSBmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICBQcm9ncmVzc0JhclNlcnZpY2UuY29tcGxldGUoKTtcbiAgICBsZXQgZXJyb3JNZXNzYWdlID0gYFVuYWJsZSB0byBmZXRjaCBkZXZpY2VzLiBFcnJvcjogJHtyZXNwb25zZS5zdGF0dXN9ICR7cmVzcG9uc2Uuc3RhdHVzVGV4dH0uYDtcbiAgICByZXR1cm4gc3dlZXQuc2hvdygnT29wcy4uLicsIGVycm9yTWVzc2FnZSwgJ2Vycm9yJyk7XG4gIH07XG5cblxuICB2bS5wYWdpbmF0ZUNhbGwgPSBmdW5jdGlvbiAoZm9yd2FyZCwgbWFuYWdlZCkge1xuICAgIGlmIChmb3J3YXJkKSB7XG4gICAgICBpZiAobWFuYWdlZCkge1xuICAgICAgICB2bS5nZXRNYW5hZ2VkRGV2aWNlcyh2bS5kaXN0cmlidXRvcktleSwgbnVsbCwgdm0uZGV2aWNlc05leHQpO1xuICAgICAgfVxuICAgICAgaWYgKCFtYW5hZ2VkKSB7XG4gICAgICAgIHZtLmdldFVubWFuYWdlZERldmljZXModm0uZGlzdHJpYnV0b3JLZXksIG51bGwsIHZtLnVubWFuYWdlZERldmljZXNOZXh0KTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKG1hbmFnZWQpIHtcbiAgICAgICAgdm0uZ2V0TWFuYWdlZERldmljZXModm0uZGlzdHJpYnV0b3JLZXksIHZtLmRldmljZXNQcmV2LCBudWxsKTtcbiAgICAgIH1cbiAgICAgIGlmICghbWFuYWdlZCkge1xuICAgICAgICByZXR1cm4gdm0uZ2V0VW5tYW5hZ2VkRGV2aWNlcyh2bS5kaXN0cmlidXRvcktleSwgdm0udW5tYW5hZ2VkRGV2aWNlc1ByZXYsIG51bGwpO1xuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICByZXR1cm4gdm07XG59XG5leHBvcnQge0RldmljZXNMaXN0aW5nQ3RybH1cblxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zcmMvYXBwL2RldmljZS9kZXZpY2VzLWxpc3RpbmcuY29udHJvbGxlci5qc1xuICoqLyIsImZ1bmN0aW9uIEFkbWluQ3RybChBZG1pblNlcnZpY2UsXG4gICAgICAgICAgICAgICAgICAgU2Vzc2lvbnNTZXJ2aWNlLFxuICAgICAgICAgICAgICAgICAgIFRvYXN0c1NlcnZpY2UsXG4gICAgICAgICAgICAgICAgICAgJG1kRGlhbG9nLFxuICAgICAgICAgICAgICAgICAgIERpc3RyaWJ1dG9yc1NlcnZpY2UpIHtcbiAgXCJuZ0luamVjdFwiO1xuXG4gIGxldCB2bSA9IHRoaXM7XG5cbiAgdm0uZ2V0QWxsRGlzdHJpYnV0b3JzID0gZnVuY3Rpb24gKCkge1xuICAgIHZtLmxvYWRpbmdBbGxEaXN0cmlidXRvcnMgPSB0cnVlO1xuICAgIGxldCBnZXRBbGxEaXN0cmlidXRvcnNQcm9taXNlID0gQWRtaW5TZXJ2aWNlLmdldEFsbERpc3RyaWJ1dG9ycygpO1xuICAgIHJldHVybiBnZXRBbGxEaXN0cmlidXRvcnNQcm9taXNlLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgIHZtLmxvYWRpbmdBbGxEaXN0cmlidXRvcnMgPSBmYWxzZTtcbiAgICAgIHJldHVybiB2bS5hbGxEaXN0cmlidXRvcnMgPSBkYXRhO1xuICAgIH0pO1xuICB9O1xuXG4gIHZtLmFkZFVzZXJUb0Rpc3RyaWJ1dG9yID0gZnVuY3Rpb24gKGV2LCB1c2VyRW1haWwsIGRpc3RyaWJ1dG9yQWRtaW4sIHdoaWNoRGlzdHJpYnV0b3IsIGZvcm0pIHtcbiAgICBpZiAoIWRpc3RyaWJ1dG9yQWRtaW4pIHtcbiAgICAgIGRpc3RyaWJ1dG9yQWRtaW4gPSBmYWxzZTtcbiAgICB9XG4gICAgbGV0IHdpdGhPcldpdGhvdXQgPSBkaXN0cmlidXRvckFkbWluID8gXCJ3aXRoXCIgOiBcIndpdGhvdXRcIjtcblxuICAgIC8vIG5vIG9wdGlvbiB0byBzZWxlY3QgZGlzdHJpYnV0b3IgaXMgZ2l2ZW4gd2hlbiB0aGVyZSBpcyBvbmx5IG9uZSBvcHRpb25cbiAgICBpZiAoIXdoaWNoRGlzdHJpYnV0b3IpIHtcbiAgICAgIHdoaWNoRGlzdHJpYnV0b3IgPSB2bS5kaXN0cmlidXRvcnNBc0FkbWluWzBdO1xuICAgIH1cblxuICAgIGxldCBjb25maXJtID0gJG1kRGlhbG9nLmNvbmZpcm0oXG4gICAgICB7XG4gICAgICAgIHRpdGxlOiAnQXJlIHlvdSBzdXJlPycsXG4gICAgICAgIHRleHRDb250ZW50OiBgJHt1c2VyRW1haWx9IHdpbGwgYmUgYWRkZWQgdG8gJHt3aGljaERpc3RyaWJ1dG9yfVxuICAgICAgICAke3dpdGhPcldpdGhvdXR9IGFkbWluaXN0cmF0b3IgcHJpdmlsZWdlc2AsXG4gICAgICAgIHRhcmdldEV2ZW50OiBldixcbiAgICAgICAgb2s6ICdPZiBjb3Vyc2UhJyxcbiAgICAgICAgY2FuY2VsOiAnT29wcywgbmV2ZXJtaW5kLidcbiAgICAgIH1cbiAgICApO1xuXG4gICAgcmV0dXJuICRtZERpYWxvZy5zaG93KGNvbmZpcm0pLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgbGV0IGFkZFVzZXJUb0Rpc3RyaWJ1dG9yUHJvbWlzZSA9IEFkbWluU2VydmljZS5hZGRVc2VyVG9EaXN0cmlidXRvcih1c2VyRW1haWwsIHdoaWNoRGlzdHJpYnV0b3IsIGRpc3RyaWJ1dG9yQWRtaW4pO1xuICAgICAgYWRkVXNlclRvRGlzdHJpYnV0b3JQcm9taXNlLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgVG9hc3RzU2VydmljZS5zaG93U3VjY2Vzc1RvYXN0KGRhdGEubWVzc2FnZSk7XG4gICAgICAgIHZtLnVzZXIgPSB7fTtcbiAgICAgICAgZm9ybS4kc2V0UHJpc3RpbmUoKTtcbiAgICAgICAgZm9ybS4kc2V0VW50b3VjaGVkKCk7XG4gICAgICAgIHJldHVybiBzZXRUaW1lb3V0KCgoKSA9PiB2bS5nZXRVc2Vyc09mRGlzdHJpYnV0b3IoKSksIDIwMDApO1xuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBhZGRVc2VyVG9EaXN0cmlidXRvclByb21pc2UuY2F0Y2goZGF0YSA9PiBUb2FzdHNTZXJ2aWNlLnNob3dFcnJvclRvYXN0KGRhdGEuZGF0YS5tZXNzYWdlKSk7XG4gICAgfSk7XG4gIH07XG5cbiAgdm0ubWFrZURpc3RyaWJ1dG9yID0gZnVuY3Rpb24gKGV2LCBkaXN0cmlidXRvck5hbWUsIGFkbWluRW1haWwsIGZvcm0pIHtcbiAgICBsZXQgY29uZmlybSA9ICRtZERpYWxvZy5jb25maXJtKFxuICAgICAge1xuICAgICAgICB0aXRsZTogJ0FyZSB5b3Ugc3VyZT8nLFxuICAgICAgICB0ZXh0Q29udGVudDogYElmIHlvdSBwcm9jZWVkLCAke2Rpc3RyaWJ1dG9yTmFtZX0gd2lsbCBiZSBjcmVhdGVkLmAsXG4gICAgICAgIHRhcmdldEV2ZW50OiBldixcbiAgICAgICAgYXJpYUxhYmVsOiAnTHVja3kgZGF5JyxcbiAgICAgICAgb2s6ICdZZWFoIScsXG4gICAgICAgIGNhbmNlbDogJ0ZvcmdldCBpdC4nXG4gICAgICB9XG4gICAgKTtcbiAgICByZXR1cm4gJG1kRGlhbG9nLnNob3coY29uZmlybSkudGhlbigoZnVuY3Rpb24gKCkge1xuICAgICAgbGV0IG1ha2VEaXN0cmlidXRvclByb21pc2UgPSBBZG1pblNlcnZpY2UubWFrZURpc3RyaWJ1dG9yKGRpc3RyaWJ1dG9yTmFtZSwgYWRtaW5FbWFpbCk7XG4gICAgICBtYWtlRGlzdHJpYnV0b3JQcm9taXNlLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgdm0uZGlzdHJpYnV0b3IgPSB7fTtcbiAgICAgICAgZm9ybS4kc2V0UHJpc3RpbmUoKTtcbiAgICAgICAgZm9ybS4kc2V0VW50b3VjaGVkKCk7XG4gICAgICAgIFRvYXN0c1NlcnZpY2Uuc2hvd1N1Y2Nlc3NUb2FzdChkYXRhLm1lc3NhZ2UpO1xuICAgICAgICByZXR1cm4gc2V0VGltZW91dCgoKCkgPT4gdm0uYWxsRGlzdHJpYnV0b3JzID0gdm0uZ2V0QWxsRGlzdHJpYnV0b3JzKCkpLCAyMDAwKTtcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gbWFrZURpc3RyaWJ1dG9yUHJvbWlzZS5jYXRjaChkYXRhID0+IFRvYXN0c1NlcnZpY2Uuc2hvd0Vycm9yVG9hc3QoZGF0YS5kYXRhLm1lc3NhZ2UpKTtcbiAgICB9KSk7XG4gIH07XG5cbiAgdm0uZ2V0VXNlcnNPZkRpc3RyaWJ1dG9yID0gZnVuY3Rpb24gKCkge1xuICAgIHZtLmxvYWRpbmdVc2Vyc09mRGlzdHJpYnV0b3IgPSB0cnVlO1xuICAgIGxldCBjdXJyZW50RGlzdHJpYnV0b3JLZXkgPSBTZXNzaW9uc1NlcnZpY2UuZ2V0Q3VycmVudERpc3RyaWJ1dG9yS2V5KCk7XG4gICAgbGV0IHVzZXJzb2ZEaXN0cmlidXRvclByb21pc2UgPSBBZG1pblNlcnZpY2UuZ2V0VXNlcnNPZkRpc3RyaWJ1dG9yKGN1cnJlbnREaXN0cmlidXRvcktleSk7XG4gICAgcmV0dXJuIHVzZXJzb2ZEaXN0cmlidXRvclByb21pc2UudGhlbihmdW5jdGlvbiAoZGF0YSkge1xuICAgICAgdm0ubG9hZGluZ1VzZXJzT2ZEaXN0cmlidXRvciA9IGZhbHNlO1xuICAgICAgcmV0dXJuIHZtLnVzZXJzT2ZEaXN0cmlidXRvciA9IGRhdGE7XG4gICAgfSk7XG4gIH07XG5cbiAgdm0uc3dpdGNoRGlzdHJpYnV0b3IgPSBmdW5jdGlvbiAoZGlzdHJpYnV0b3IpIHtcbiAgICBEaXN0cmlidXRvcnNTZXJ2aWNlLnN3aXRjaERpc3RyaWJ1dG9yKGRpc3RyaWJ1dG9yKTtcbiAgICByZXR1cm4gVG9hc3RzU2VydmljZS5zaG93U3VjY2Vzc1RvYXN0KGBEaXN0cmlidXRvciAke2Rpc3RyaWJ1dG9yLm5hbWV9IHNlbGVjdGVkIWApO1xuICB9O1xuXG4gIHZtLmluaXRpYWxpemUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdm0uZ2V0VXNlcnNPZkRpc3RyaWJ1dG9yKCk7XG4gICAgdm0uZ2V0QWxsRGlzdHJpYnV0b3JzKCk7XG4gICAgdm0uaXNBZG1pbiA9IFNlc3Npb25zU2VydmljZS5nZXRJc0FkbWluKCk7XG4gICAgdm0uZGlzdHJpYnV0b3JzQXNBZG1pbiA9IFNlc3Npb25zU2VydmljZS5nZXREaXN0cmlidXRvcnNBc0FkbWluKCk7XG4gICAgdm0uY3VycmVudERpc3RyaWJ1dG9yTmFtZSA9IFNlc3Npb25zU2VydmljZS5nZXRDdXJyZW50RGlzdHJpYnV0b3JOYW1lKCk7XG5cbiAgICBpZiAodm0uaXNBZG1pbikge1xuICAgICAgcmV0dXJuIHZtLmdldEFsbERpc3RyaWJ1dG9ycygpO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gdm07XG59XG5cbmV4cG9ydCB7QWRtaW5DdHJsfVxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zcmMvYXBwL2FkbWluL2FkbWluLWNvbnRyb2xsZXIuanNcbiAqKi8iLCJmdW5jdGlvbiBBdXRoZW50aWNhdGlvbkN0cmwoJHNjb3BlLCAkbG9nLCAkc3RhdGUsICR0aW1lb3V0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlkZW50aXR5LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN3ZWV0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNlc3Npb25zU2VydmljZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBQcm9ncmVzc0JhclNlcnZpY2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgUHJvb2ZQbGF5U2VydmljZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBEZXZpY2VzU2VydmljZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBUZW5hbnRzU2VydmljZSkge1xuICBcIm5nSW5qZWN0XCI7XG5cbiAgbGV0IHZtID0gdGhpcztcblxuICB2bS5vbkdvb2dsZVBsdXNTaWduSW5TdWNjZXNzID0gZnVuY3Rpb24gKGV2ZW50LCBhdXRoUmVzdWx0KSB7XG4gICAgaWYgKCF2bS5nb29nbGVQbHVzU2lnbkluQnV0dG9uQ2xpY2tlZCkge1xuICAgICAgUHJvZ3Jlc3NCYXJTZXJ2aWNlLnN0YXJ0KCk7XG4gICAgfVxuICAgIFNlc3Npb25zU2VydmljZS5yZW1vdmVVc2VySW5mbygpXG4gICAgbGV0IHByb21pc2UgPSBTZXNzaW9uc1NlcnZpY2UubG9naW4oYXV0aFJlc3VsdCk7XG4gICAgcmV0dXJuIHByb21pc2UudGhlbih2bS5sb2dpblN1Y2Nlc3MsIHZtLmxvZ2luRmFpbHVyZSk7XG4gIH07XG5cblxuICB2bS5vbkdvb2dsZVBsdXNTaWduSW5GYWlsdXJlID0gZnVuY3Rpb24gKGV2ZW50LCBhdXRoUmVzdWx0KSB7XG4gICAgaWYgKHZtLmdvb2dsZVBsdXNTaWduSW5CdXR0b25DbGlja2VkKSB7XG4gICAgICBQcm9ncmVzc0JhclNlcnZpY2UuY29tcGxldGUoKTtcbiAgICAgIHJldHVybiBzd2VldC5zaG93KCdPb3BzLi4uJywgJ1VuYWJsZSB0byBhdXRoZW50aWNhdGUgdG8gR29vZ2xlKy4nLCAnZXJyb3InKTtcbiAgICB9XG4gIH07XG5cbiAgJHNjb3BlLiRvbignZXZlbnQ6Z29vZ2xlLXBsdXMtc2lnbmluLXN1Y2Nlc3MnLCB2bS5vbkdvb2dsZVBsdXNTaWduSW5TdWNjZXNzKTtcbiAgJHNjb3BlLiRvbignZXZlbnQ6Z29vZ2xlLXBsdXMtc2lnbmluLWZhaWx1cmUnLCB2bS5vbkdvb2dsZVBsdXNTaWduSW5GYWlsdXJlKTtcblxuICB2bS5pbml0aWFsaXplU2lnbkluID0gZnVuY3Rpb24gKCkge1xuICAgIHZtLmNsaWVudElkID0gaWRlbnRpdHkuT0FVVEhfQ0xJRU5UX0lEO1xuICAgIHZtLnN0YXRlID0gaWRlbnRpdHkuU1RBVEU7XG4gICAgcmV0dXJuIHZtLmdvb2dsZVBsdXNTaWduSW5CdXR0b25DbGlja2VkID0gZmFsc2U7XG4gIH07XG5cbiAgdm0uaW5pdGlhbGl6ZVNpZ25PdXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgU2Vzc2lvbnNTZXJ2aWNlLnJlbW92ZVVzZXJJbmZvKCk7XG4gICAgcmV0dXJuICR0aW1lb3V0KHZtLnByb2NlZWRUb1NpZ25lZE91dCwgNTApO1xuICB9O1xuXG4gIHZtLmxvZ2luU3VjY2VzcyA9IGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgIFByb2dyZXNzQmFyU2VydmljZS5jb21wbGV0ZSgpO1xuICAgIHJldHVybiAkc3RhdGUuZ28oJ2Rpc3RyaWJ1dG9yX3NlbGVjdGlvbicpO1xuICB9O1xuXG4gIHZtLmxvZ2luRmFpbHVyZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBQcm9ncmVzc0JhclNlcnZpY2UuY29tcGxldGUoKTtcbiAgICByZXR1cm4gc3dlZXQuc2hvdygnT29wcy4uLicsICdVbmFibGUgdG8gYXV0aGVudGljYXRlIHRvIFN0b3JtcGF0aC4nLCAnZXJyb3InKTtcbiAgfTtcblxuXG4gIHZtLnByb2NlZWRUb1NpZ25lZE91dCA9ICgpID0+ICRzdGF0ZS5nbygnc2lnbmVkX291dCcpO1xuXG4gIHZtLnByb2NlZWRUb1NpZ25JbiA9ICgpID0+ICRzdGF0ZS5nbygnc2lnbl9pbicpO1xuXG4gIHZtLm9uQ2xpY2tHb29nbGVQbHVzU2lnbkluID0gZnVuY3Rpb24gKCkge1xuICAgIHZtLmdvb2dsZVBsdXNTaWduSW5CdXR0b25DbGlja2VkID0gdHJ1ZTtcbiAgICByZXR1cm4gUHJvZ3Jlc3NCYXJTZXJ2aWNlLnN0YXJ0KCk7XG4gIH07XG5cbiAgcmV0dXJuIHZtO1xufVxuXG5leHBvcnQge0F1dGhlbnRpY2F0aW9uQ3RybH1cblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vc3JjL2FwcC9hdXRoZW50aWNhdGlvbi9hdXRoZW50aWNhdGlvbi1jb250cm9sbGVyLmpzXG4gKiovIiwiaW1wb3J0IGNvbnRhaW5zIGZyb20gJ2xvZGFzaC5jb250YWlucyc7XG5cbmZ1bmN0aW9uIEFwcENvbnRyb2xsZXIoJG1kU2lkZW5hdiwgJHN0YXRlLCAkd2luZG93LCBTZXNzaW9uc1NlcnZpY2UpIHtcbiAgXCJuZ0luamVjdFwiO1xuXG4gIGxldCB2bSA9IHRoaXM7XG5cbiAgdm0uY3VycmVudERpc3RyaWJ1dGVySW5EaXN0cmlidXRlckFkbWluTGlzdCA9IGZ1bmN0aW9uICgpIHtcbiAgICBsZXQgY3VycmVudERpc3RyaWJ1dG9yTmFtZSA9IFNlc3Npb25zU2VydmljZS5nZXRDdXJyZW50RGlzdHJpYnV0b3JOYW1lKCk7XG4gICAgbGV0IGRpc3RyaWJ1dG9yc0FzQWRtaW4gPSBTZXNzaW9uc1NlcnZpY2UuZ2V0RGlzdHJpYnV0b3JzQXNBZG1pbigpO1xuICAgIHJldHVybiBjb250YWlucyhkaXN0cmlidXRvcnNBc0FkbWluLCBjdXJyZW50RGlzdHJpYnV0b3JOYW1lKTtcbiAgfTtcblxuICB2bS5nZXRJZGVudGl0eSA9ICgpID0+IHtcbiAgICByZXR1cm4ge1xuICAgICAga2V5OiBTZXNzaW9uc1NlcnZpY2UuZ2V0VXNlcktleSgpLFxuICAgICAgZW1haWw6IFNlc3Npb25zU2VydmljZS5nZXRVc2VyRW1haWwoKSxcbiAgICAgIGFkbWluOiBTZXNzaW9uc1NlcnZpY2UuZ2V0SXNBZG1pbigpLFxuICAgICAgZGlzdHJpYnV0b3JfYWRtaW46IFNlc3Npb25zU2VydmljZS5nZXREaXN0cmlidXRvcnNBc0FkbWluKCksXG4gICAgICBhZG1pbl9vZl9jdXJyZW50X2Rpc3RyaWJ1dG9yOiB2bS5jdXJyZW50RGlzdHJpYnV0ZXJJbkRpc3RyaWJ1dGVyQWRtaW5MaXN0KCksXG4gICAgICBkaXN0cmlidXRvcktleTogU2Vzc2lvbnNTZXJ2aWNlLmdldEN1cnJlbnREaXN0cmlidXRvcktleSgpLFxuICAgICAgZGlzdHJpYnV0b3JOYW1lOiBTZXNzaW9uc1NlcnZpY2UuZ2V0Q3VycmVudERpc3RyaWJ1dG9yTmFtZSgpXG4gICAgfVxuICB9O1xuXG4gIHZtLmlzQ3VycmVudFVSTERpc3RyaWJ1dG9yU2VsZWN0b3IgPSBmdW5jdGlvbiAoKSB7XG4gICAgbGV0IHRlc3QgPSAkd2luZG93LmxvY2F0aW9uLmhyZWYuc2VhcmNoKC9kaXN0cmlidXRvcl9zZWxlY3Rpb24vKTtcbiAgICBsZXQgcmVzdWx0ID0gdGVzdCA+PSAwO1xuICAgIHJldHVybiByZXN1bHRcbiAgfTtcblxuICB2bS5pbml0aWFsaXplID0gKCkgPT4gdm0uZ2V0SWRlbnRpdHkoKTtcblxuICB2bS50b2dnbGVTaWRlbmF2ID0gKCkgPT4gJG1kU2lkZW5hdignbGVmdCcpLnRvZ2dsZSgpO1xuXG4gIHZtLmdvVG8gPSBmdW5jdGlvbiAoc3RhdGVOYW1lLCBpZCkge1xuICAgICRzdGF0ZS5nbyhzdGF0ZU5hbWUsIHtpZH0pO1xuICAgIGlmICgkbWRTaWRlbmF2KCdsZWZ0JykuaXNPcGVuKCkpIHtcbiAgICAgIHJldHVybiAkbWRTaWRlbmF2KCdsZWZ0JykuY2xvc2UoKTtcbiAgICB9XG4gIH07XG5cbiAgdm0uaW5pdGlhbGl6ZSgpXG5cbiAgcmV0dXJuIHZtO1xufVxuXG5leHBvcnQge0FwcENvbnRyb2xsZXJ9XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL3NyYy9hcHAvYXBwL2FwcC1jb250cm9sbGVyLmpzXG4gKiovIiwiZnVuY3Rpb24gRGlzdHJpYnV0b3JTZWxlY3RvckN0cmwoJHN0YXRlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgRGlzdHJpYnV0b3JzU2VydmljZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFNlc3Npb25zU2VydmljZSkge1xuICBcIm5nSW5qZWN0XCI7XG4gIGxldCB2bSA9IHRoaXM7XG4gIHZtLmRpc3RyaWJ1dG9ycyA9IFtdO1xuICB2bS5jdXJyZW50RGlzdHJpYnV0b3IgPSB1bmRlZmluZWQ7XG4gIHZtLmxvYWRpbmcgPSB0cnVlO1xuXG4gIHZtLmluaXRpYWxpemUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdm0ubG9lYWRpbmcgPSB0cnVlO1xuICAgIGxldCBkaXN0cmlidXRvcnNQcm9taXNlID0gRGlzdHJpYnV0b3JzU2VydmljZS5mZXRjaEFsbEJ5VXNlcihTZXNzaW9uc1NlcnZpY2UuZ2V0VXNlcktleSgpKTtcbiAgICByZXR1cm4gZGlzdHJpYnV0b3JzUHJvbWlzZS50aGVuKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICB2bS5kaXN0cmlidXRvcnMgPSBkYXRhO1xuICAgICAgaWYgKHZtLmRpc3RyaWJ1dG9ycy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgcmV0dXJuIHZtLnNlbGVjdERpc3RyaWJ1dG9yKHZtLmRpc3RyaWJ1dG9yc1swXSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gdm0ubG9hZGluZyA9IGZhbHNlO1xuICAgICAgfVxuICAgIH0pO1xuICB9O1xuXG4gIHZtLnNlbGVjdERpc3RyaWJ1dG9yID0gKGRpc3RyaWJ1dG9yKSA9PiBEaXN0cmlidXRvcnNTZXJ2aWNlLnN3aXRjaERpc3RyaWJ1dG9yKGRpc3RyaWJ1dG9yKTtcblxuICByZXR1cm4gdm07XG59XG5cbmV4cG9ydCB7RGlzdHJpYnV0b3JTZWxlY3RvckN0cmx9XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL3NyYy9hcHAvZGlzdHJpYnV0b3IvZGlzdHJpYnV0b3Itc2VsZWN0b3ItY29udHJvbGxlci5qc1xuICoqLyIsImZ1bmN0aW9uIERpc3RyaWJ1dG9yc0N0cmwoJHN0YXRlKSB7XG4gIFwibmdJbmplY3RcIjtcblxuICBsZXQgdm0gPSB0aGlzO1xuICB2bS5kaXN0cmlidXRvcnMgPSBbXTtcblxuICByZXR1cm4gdm07XG59XG5cbmV4cG9ydCB7RGlzdHJpYnV0b3JzQ3RybH1cblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vc3JjL2FwcC9kaXN0cmlidXRvci9kaXN0cmlidXRvcnMtY29udHJvbGxlci5qc1xuICoqLyIsImZ1bmN0aW9uIERvbWFpbnNDdHJsKCRzdGF0ZSxcbiAgICAgICAgICAgICAgICAgICAgIERvbWFpbnNTZXJ2aWNlLFxuICAgICAgICAgICAgICAgICAgICAgc3dlZXQpIHtcbiAgXCJuZ0luamVjdFwiO1xuXG4gIGxldCB2bSA9IHRoaXM7XG4gIHZtLmRvbWFpbnMgPSBbXTtcblxuICB2bS5pbml0aWFsaXplID0gZnVuY3Rpb24gKCkge1xuICAgIGxldCBwcm9taXNlID0gRG9tYWluc1NlcnZpY2UuZmV0Y2hBbGxEb21haW5zKCk7XG4gICAgcmV0dXJuIHByb21pc2UudGhlbihkYXRhID0+IHZtLmRvbWFpbnMgPSBkYXRhKTtcbiAgfTtcblxuICB2bS5lZGl0SXRlbSA9IGl0ZW0gPT4gJHN0YXRlLmdvKCdlZGl0RG9tYWluJywge2RvbWFpbktleTogaXRlbS5rZXl9KTtcblxuICB2bS5kZWxldGVJdGVtID0gZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICBsZXQgY2FsbGJhY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBsZXQgcHJvbWlzZSA9IERvbWFpbnNTZXJ2aWNlLmRlbGV0ZShpdGVtKTtcbiAgICAgIHJldHVybiBwcm9taXNlLnRoZW4oKCkgPT4gdm0uaW5pdGlhbGl6ZSgpKTtcbiAgICB9O1xuICAgIHJldHVybiBzd2VldC5zaG93KHtcbiAgICAgIHRpdGxlOiBcIkFyZSB5b3Ugc3VyZT9cIixcbiAgICAgIHRleHQ6IFwiVGhpcyB3aWxsIHBlcm1hbmVudGx5IHJlbW92ZSB0aGUgZG9tYWluIGZyb20gdGhlIGRpc3RyaWJ1dG9yIGFuZCBkaXNjb25uZWN0IGZyb20gdGVuYW50cy5cIixcbiAgICAgIHR5cGU6IFwid2FybmluZ1wiLFxuICAgICAgc2hvd0NhbmNlbEJ1dHRvbjogdHJ1ZSxcbiAgICAgIGNvbmZpcm1CdXR0b25Db2xvcjogXCIjREQ2QjU1XCIsXG4gICAgICBjb25maXJtQnV0dG9uVGV4dDogXCJZZXMsIHJlbW92ZSB0aGUgZG9tYWluIVwiLFxuICAgICAgY2xvc2VPbkNvbmZpcm06IHRydWVcbiAgICB9LCBjYWxsYmFjayk7XG4gIH07XG5cbiAgcmV0dXJuIHZtO1xufVxuXG5leHBvcnQge0RvbWFpbnNDdHJsfVxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zcmMvYXBwL2RvbWFpbi9kb21haW5zLmNvbnRyb2xsZXIuanNcbiAqKi8iLCJmdW5jdGlvbiBEb21haW5EZXRhaWxzQ3RybCgkbG9nLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgJHN0YXRlUGFyYW1zLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgRG9tYWluc1NlcnZpY2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAkc3RhdGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBzd2VldCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIFByb2dyZXNzQmFyU2VydmljZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIFRvYXN0c1NlcnZpY2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBTZXNzaW9uc1NlcnZpY2UpIHtcbiAgXCJuZ0luamVjdFwiO1xuXG4gIGxldCB2bSA9IHRoaXM7XG4gIHZtLmN1cnJlbnREb21haW4gPSB7XG4gICAga2V5OiB1bmRlZmluZWQsXG4gICAgbmFtZTogdW5kZWZpbmVkLFxuICAgIGltcGVyc29uYXRpb25fYWRtaW5fZW1haWxfYWRkcmVzczogdW5kZWZpbmVkLFxuICAgIGRpc3RyaWJ1dG9yX2tleTogdW5kZWZpbmVkLFxuICAgIG9yZ2FuaXphdGlvbl91bml0X3BhdGg6ICcvc2t5a2l0JyxcbiAgICBhY3RpdmU6IHRydWVcbiAgfTtcbiAgdm0uZGV2aWNlc0FjY2VzcyA9IGZhbHNlO1xuICB2bS5vcmdVbml0c0FjY2VzcyA9IGZhbHNlO1xuICB2bS51c2Vyc0FjY2VzcyA9IGZhbHNlO1xuICB2bS5jdXJyZW50RG9tYWlucyA9IFtdO1xuICB2bS5lZGl0TW9kZSA9ICEhJHN0YXRlUGFyYW1zLmRvbWFpbktleTtcblxuICBpZiAodm0uZWRpdE1vZGUpIHtcbiAgICBsZXQgZG9tYWluUHJvbWlzZSA9IERvbWFpbnNTZXJ2aWNlLmdldERvbWFpbkJ5S2V5KCRzdGF0ZVBhcmFtcy5kb21haW5LZXkpO1xuICAgIGRvbWFpblByb21pc2UudGhlbihkYXRhID0+IHZtLmN1cnJlbnREb21haW4gPSBkYXRhKTtcbiAgfSBlbHNlIHtcbiAgICB2bS5jdXJyZW50RG9tYWluLmRpc3RyaWJ1dG9yX2tleSA9IFNlc3Npb25zU2VydmljZS5nZXRDdXJyZW50RGlzdHJpYnV0b3JLZXkoKTtcbiAgfVxuXG4gIHZtLmluaXRpYWxpemUgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHZtLmVkaXRNb2RlKSB7XG4gICAgICBQcm9ncmVzc0JhclNlcnZpY2Uuc3RhcnQoKTtcbiAgICAgIGxldCBjb25uZWN0aXZpdHlQcm9taXNlID0gRG9tYWluc1NlcnZpY2UuZ2V0RGlyZWN0b3J5QXBpQ29ubmVjdGl2aXR5SW5mb3JtYXRpb24oJHN0YXRlUGFyYW1zLmRvbWFpbktleSk7XG4gICAgICByZXR1cm4gY29ubmVjdGl2aXR5UHJvbWlzZS50aGVuKHZtLm9uU3VjY2Vzc0RldGVybWluaW5nQ29ubmVjdGl2aXR5LCB2bS5vbkZhaWx1cmVEZXRlcm1pbmluZ0Nvbm5lY3Rpdml0eSk7XG4gICAgfVxuICB9O1xuXG4gIHZtLm9uU3VjY2Vzc0RldGVybWluaW5nQ29ubmVjdGl2aXR5ID0gZnVuY3Rpb24gKGRhdGEpIHtcbiAgICB2bS5kZXZpY2VzQWNjZXNzID0gZGF0YS5kZXZpY2VzQWNjZXNzO1xuICAgIHZtLm9yZ1VuaXRzQWNjZXNzID0gZGF0YS5vcmdVbml0c0FjY2VzcztcbiAgICB2bS51c2Vyc0FjY2VzcyA9IGRhdGEudXNlcnNBY2Nlc3M7XG4gICAgdm0uZGV2aWNlc0FjY2Vzc0V4Y2VwdGlvbiA9IGRhdGEuZGV2aWNlc0FjY2Vzc0V4Y2VwdGlvbjtcbiAgICB2bS5vcmdVbml0c0FjY2Vzc0V4Y2VwdGlvbiA9IGRhdGEub3JnVW5pdHNBY2Nlc3NFeGNlcHRpb247XG4gICAgdm0udXNlcnNBY2Nlc3NFeGNlcHRpb24gPSBkYXRhLnVzZXJzQWNjZXNzRXhjZXB0aW9uO1xuICAgIFByb2dyZXNzQmFyU2VydmljZS5jb21wbGV0ZSgpO1xuICB9O1xuXG4gIHZtLm9uRmFpbHVyZURldGVybWluaW5nQ29ubmVjdGl2aXR5ID0gZnVuY3Rpb24gKGVycm9yKSB7XG4gICAgUHJvZ3Jlc3NCYXJTZXJ2aWNlLmNvbXBsZXRlKCk7XG4gICAgJGxvZy5lcnJvcihgRmFpbHVyZSBkZXRlcm1pbmluZyBkaXJlY3RvcnkgQVBJIGNvbm5lY3Rpdml0eTogJHtlcnJvci5zdGF0dXMgfSAke2Vycm9yLnN0YXR1c1RleHR9YCk7XG4gICAgcmV0dXJuIFRvYXN0c1NlcnZpY2Uuc2hvd0Vycm9yVG9hc3QoJ09vcHMuIFdlIHdlcmUgdW5hYmxlIGRldGVybWluZSB5b3VyIGRldmljZSBjb25uZWN0aXZpdHkgYXQgdGhpcyB0aW1lLicpO1xuICB9O1xuXG4gIHZtLm9uU2F2ZURvbWFpbiA9IGZ1bmN0aW9uICgpIHtcbiAgICBQcm9ncmVzc0JhclNlcnZpY2Uuc3RhcnQoKTtcbiAgICBsZXQgcHJvbWlzZSA9IERvbWFpbnNTZXJ2aWNlLnNhdmUodm0uY3VycmVudERvbWFpbik7XG4gICAgcmV0dXJuIHByb21pc2UudGhlbih2bS5vblN1Y2Nlc3NTYXZlRG9tYWluLCB2bS5vbkZhaWx1cmVTYXZlRG9tYWluKTtcbiAgfTtcblxuICB2bS5vblN1Y2Nlc3NTYXZlRG9tYWluID0gZnVuY3Rpb24gKCkge1xuICAgIFByb2dyZXNzQmFyU2VydmljZS5jb21wbGV0ZSgpO1xuICAgIHJldHVybiBUb2FzdHNTZXJ2aWNlLnNob3dTdWNjZXNzVG9hc3QoJ1dlIHNhdmVkIHlvdXIgdXBkYXRlLicpO1xuICB9O1xuXG4gIHZtLm9uRmFpbHVyZVNhdmVEb21haW4gPSBmdW5jdGlvbiAoZXJyb3IpIHtcbiAgICBQcm9ncmVzc0JhclNlcnZpY2UuY29tcGxldGUoKTtcbiAgICBpZiAoZXJyb3Iuc3RhdHVzID09PSA0MDkpIHtcbiAgICAgICRsb2cuaW5mbyhgRmFpbHVyZSBzYXZpbmcgZG9tYWluLiBEb21haW4gYWxyZWFkeSBleGlzdHM6ICR7ZXJyb3Iuc3RhdHVzfSAke2Vycm9yLnN0YXR1c1RleHR9YCk7XG4gICAgICByZXR1cm4gc3dlZXQuc2hvdygnT29wcy4uLicsICdUaGlzIGRvbWFpbiBuYW1lIGFscmVhZHkgZXhpc3QuIFBsZWFzZSBlbnRlciBhIHVuaXF1ZSBkb21haW4gbmFtZS4nLCAnZXJyb3InKTtcbiAgICB9IGVsc2Uge1xuICAgICAgJGxvZy5lcnJvcihgRmFpbHVyZSBzYXZpbmcgZG9tYWluOiAke2Vycm9yLnN0YXR1cyB9ICR7ZXJyb3Iuc3RhdHVzVGV4dH1gKTtcbiAgICAgIHJldHVybiBUb2FzdHNTZXJ2aWNlLnNob3dFcnJvclRvYXN0KCdPb3BzLiBXZSB3ZXJlIHVuYWJsZSB0byBzYXZlIHlvdXIgdXBkYXRlcyBhdCB0aGlzIHRpbWUuJyk7XG4gICAgfVxuICB9O1xuXG4gIHZtLmVkaXRJdGVtID0gaXRlbSA9PiAkc3RhdGUuZ28oJ2VkaXREb21haW4nLCB7ZG9tYWluS2V5OiBpdGVtLmtleX0pO1xuXG4gIHJldHVybiB2bTtcbn1cblxuZXhwb3J0IHtEb21haW5EZXRhaWxzQ3RybH1cblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vc3JjL2FwcC9kb21haW4vZG9tYWluLWRldGFpbHMuY29udHJvbGxlci5qc1xuICoqLyIsImltcG9ydCBtb21lbnQgZnJvbSAnbW9tZW50JztcblxuZnVuY3Rpb24gUHJvb2ZPZlBsYXlNdWx0aUxvY2F0aW9uQ3RybChQcm9vZlBsYXlTZXJ2aWNlLCAkc3RhdGVQYXJhbXMsICRzdGF0ZSwgVG9hc3RzU2VydmljZSkge1xuICBcIm5nSW5qZWN0XCI7XG5cbiAgbGV0IHZtID0gdGhpcztcbiAgdm0ucmFkaW9CdXR0b25DaG9pY2VzID0ge1xuICAgIGdyb3VwMTogJ0J5IERldmljZScsXG4gICAgZ3JvdXAyOiAnU3VtbWFyaXplZCcsXG4gICAgc2VsZWN0aW9uOiBudWxsXG4gIH07XG5cblxuICB2bS5kYXRlVGltZVNlbGVjdGlvbiA9IHtcbiAgICBzdGFydDogbnVsbCxcbiAgICBlbmQ6IG51bGxcbiAgfTtcblxuICB2bS5mb3JtVmFsaWRpdHkgPSB7XG4gICAgc3RhcnRfZGF0ZTogZmFsc2UsXG4gICAgZW5kX2RhdGU6IGZhbHNlLFxuICAgIGxvY2F0aW9uczogZmFsc2UsXG4gIH07XG5cbiAgdm0udGVuYW50ID0gJHN0YXRlUGFyYW1zLnRlbmFudDtcbiAgdm0ubm9fY2FjaGUgPSB0cnVlO1xuICB2bS5sb2FkaW5nID0gdHJ1ZTtcbiAgdm0uZGlzYWJsZWQgPSB0cnVlO1xuICB2bS5kaXNhYmxlZFRlbmFudCA9IHRydWU7XG4gIHZtLnNlbGVjdGVkX2xvY2F0aW9ucyA9IFtdO1xuXG4gIHZtLmluaXRpYWxpemUgPSAoKSA9PlxuICAgIFByb29mUGxheVNlcnZpY2UuZ2V0QWxsTG9jYXRpb25zKHZtLnRlbmFudClcbiAgICAgIC50aGVuKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgIHZtLmxvYWRpbmcgPSBmYWxzZTtcbiAgICAgICAgdm0ubG9jYXRpb25zID0gZGF0YS5kYXRhLmxvY2F0aW9ucztcbiAgICAgICAgaWYgKHZtLmxvY2F0aW9ucy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgcmV0dXJuIHZtLmhhZF9zb21lX2l0ZW1zID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gdm0uaGFkX3NvbWVfaXRlbXMgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfSlcbiAgO1xuXG4gIHZtLnJlZnJlc2hMb2NhdGlvbnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgdm0uc2VhcmNoVGV4dCA9ICcnO1xuICAgIHZtLnNlbGVjdGVkSXRlbSA9ICcnO1xuICAgIHZtLmxvYWRpbmcgPSB0cnVlO1xuICAgIHZtLmRpc2FibGVkID0gdHJ1ZTtcbiAgICB2bS5zZWxlY3RlZF9sb2NhdGlvbnMgPSBbXTtcbiAgICB2bS5pbml0aWFsaXplKCk7XG4gIH07XG5cbiAgdm0uYWRkVG9TZWxlY3RlZExvY2F0aW9ucyA9IGZ1bmN0aW9uIChzZWFyY2hUZXh0KSB7XG4gICAgaWYgKHZtLmlzTG9jYXRpb25WYWxpZChzZWFyY2hUZXh0KSkge1xuICAgICAgdm0uc2VsZWN0ZWRfbG9jYXRpb25zLnB1c2goc2VhcmNoVGV4dCk7XG4gICAgICBsZXQgaW5kZXggPSB2bS5sb2NhdGlvbnMuaW5kZXhPZihzZWFyY2hUZXh0KTtcbiAgICAgIHZtLmxvY2F0aW9ucy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgdm0uc2VhcmNoVGV4dCA9ICcnO1xuICAgIH1cbiAgICB2bS5hcmVMb2NhdGlvbnNWYWxpZCgpO1xuICAgIHJldHVybiB2bS5pc0Rpc2FibGVkKCk7XG4gIH07XG5cbiAgdm0ucXVlcnlTZWFyY2ggPSAobG9jYXRpb25zLCBzZWFyY2hUZXh0KSA9PiBQcm9vZlBsYXlTZXJ2aWNlLnF1ZXJ5U2VhcmNoKGxvY2F0aW9ucywgc2VhcmNoVGV4dCk7XG5cblxuICB2bS5pc1JhZGlvVmFsaWQgPSBmdW5jdGlvbiAoc2VsZWN0aW9uKSB7XG4gICAgdm0uZm9ybVZhbGlkaXR5LnR5cGUgPSBzZWxlY3Rpb247XG4gICAgcmV0dXJuIHZtLmlzRGlzYWJsZWQoKTtcbiAgfTtcblxuXG4gIHZtLmlzTG9jYXRpb25WYWxpZCA9IGZ1bmN0aW9uIChzZWFyY2hUZXh0KSB7XG4gICAgaWYgKF9faW5fXyhzZWFyY2hUZXh0LCB2bS5sb2NhdGlvbnMpKSB7XG4gICAgICBpZiAoIV9faW5fXyhzZWFyY2hUZXh0LCB2bS5zZWxlY3RlZF9sb2NhdGlvbnMpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9O1xuXG5cbiAgdm0uYXJlTG9jYXRpb25zVmFsaWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdm0uZm9ybVZhbGlkaXR5LmxvY2F0aW9ucyA9ICh2bS5zZWxlY3RlZF9sb2NhdGlvbnMubGVuZ3RoID4gMCk7XG4gICAgcmV0dXJuIHZtLmlzRGlzYWJsZWQoKTtcbiAgfTtcblxuICB2bS5pc1N0YXJ0RGF0ZVZhbGlkID0gZnVuY3Rpb24gKHN0YXJ0X2RhdGUpIHtcbiAgICB2bS5mb3JtVmFsaWRpdHkuc3RhcnRfZGF0ZSA9IChzdGFydF9kYXRlIGluc3RhbmNlb2YgRGF0ZSk7XG4gICAgcmV0dXJuIHZtLmlzRGlzYWJsZWQoKTtcbiAgfTtcblxuXG4gIHZtLmlzRW5kRGF0ZVZhbGlkID0gZnVuY3Rpb24gKGVuZF9kYXRlKSB7XG4gICAgdm0uZm9ybVZhbGlkaXR5LmVuZF9kYXRlID0gKGVuZF9kYXRlIGluc3RhbmNlb2YgRGF0ZSk7XG4gICAgcmV0dXJuIHZtLmlzRGlzYWJsZWQoKTtcbiAgfTtcblxuICB2bS5yZW1vdmVGcm9tU2VsZWN0ZWRMb2NhdGlvbiA9IGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgbGV0IGluZGV4ID0gdm0uc2VsZWN0ZWRfbG9jYXRpb25zLmluZGV4T2YoaXRlbSk7XG4gICAgdm0uc2VsZWN0ZWRfbG9jYXRpb25zLnNwbGljZShpbmRleCwgMSk7XG4gICAgdm0ubG9jYXRpb25zLnB1c2goaXRlbSk7XG4gICAgdm0uYXJlTG9jYXRpb25zVmFsaWQoKTtcbiAgICByZXR1cm4gdm0uaXNEaXNhYmxlZCgpO1xuICB9O1xuXG5cbiAgdm0uaXNEaXNhYmxlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodm0uZm9ybVZhbGlkaXR5LnN0YXJ0X2RhdGUgJiYgdm0uZm9ybVZhbGlkaXR5LmVuZF9kYXRlICYmIHZtLmZvcm1WYWxpZGl0eS5sb2NhdGlvbnMgJiYgdm0uZm9ybVZhbGlkaXR5LnR5cGUpIHtcbiAgICAgIHZtLmRpc2FibGVkID0gZmFsc2U7XG4gICAgICByZXR1cm4gdm0uZmluYWwgPSB7XG4gICAgICAgIHN0YXJ0X2RhdGVfdW5peDogbW9tZW50KHZtLmRhdGVUaW1lU2VsZWN0aW9uLnN0YXJ0KS51bml4KCksXG4gICAgICAgIGVuZF9kYXRlX3VuaXg6IG1vbWVudCh2bS5kYXRlVGltZVNlbGVjdGlvbi5lbmQpLnVuaXgoKSxcbiAgICAgICAgbG9jYXRpb25zOiB2bS5zZWxlY3RlZF9sb2NhdGlvbnMsXG4gICAgICAgIHR5cGU6IHZtLnJhZGlvQnV0dG9uQ2hvaWNlcy5zZWxlY3Rpb25cblxuICAgICAgfTtcblxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdm0uZGlzYWJsZWQgPSB0cnVlO1xuICAgIH1cbiAgfTtcblxuICB2bS5zdWJtaXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHZtLmZpbmFsLnR5cGUgPT09IFwiMVwiKSB7XG4gICAgICByZXR1cm4gUHJvb2ZQbGF5U2VydmljZS5kb3dubG9hZENTVkZvck11bHRpcGxlTG9jYXRpb25zQnlEZXZpY2Uodm0uZmluYWwuc3RhcnRfZGF0ZV91bml4LCB2bS5maW5hbC5lbmRfZGF0ZV91bml4LCB2bS5maW5hbC5sb2NhdGlvbnMsIHZtLnRlbmFudCk7XG5cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFByb29mUGxheVNlcnZpY2UuZG93bmxvYWRDU1ZGb3JNdWx0aXBsZUxvY2F0aW9uc1N1bW1hcml6ZWQodm0uZmluYWwuc3RhcnRfZGF0ZV91bml4LCB2bS5maW5hbC5lbmRfZGF0ZV91bml4LCB2bS5maW5hbC5sb2NhdGlvbnMsIHZtLnRlbmFudCk7XG4gICAgfVxuICB9O1xuXG4gIHZtLnRlbmFudHMgPSBudWxsO1xuICB2bS5jdXJyZW50VGVuYW50ID0gdm0udGVuYW50O1xuXG4gIHZtLmluaXRpYWxpemVfdGVuYW50X3NlbGVjdCA9ICgpID0+XG4gICAgUHJvb2ZQbGF5U2VydmljZS5nZXRBbGxUZW5hbnRzKClcbiAgICAgIC50aGVuKGRhdGEgPT4gdm0udGVuYW50cyA9IGRhdGEuZGF0YS50ZW5hbnRzKVxuICA7XG5cbiAgdm0ucXVlcnlTZWFyY2ggPSAocmVzb3VyY2VzLCBzZWFyY2hUZXh0KSA9PiBQcm9vZlBsYXlTZXJ2aWNlLnF1ZXJ5U2VhcmNoKHJlc291cmNlcywgc2VhcmNoVGV4dCk7XG5cbiAgdm0uaXNTZWxlY3Rpb25WYWxpZCA9IGZ1bmN0aW9uIChzZWFyY2gpIHtcbiAgICBpZiAoX19pbl9fKHNlYXJjaCwgdm0udGVuYW50cykpIHtcbiAgICAgIHJldHVybiB2bS5kaXNhYmxlZFRlbmFudCA9IGZhbHNlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdm0uZGlzYWJsZWRUZW5hbnQgPSB0cnVlO1xuICAgIH1cbiAgfTtcblxuXG4gIHZtLnN1Ym1pdFRlbmFudCA9IGZ1bmN0aW9uICh0ZW5hbnQpIHtcbiAgICBpZiAodGVuYW50ICE9PSB2bS5jdXJyZW50VGVuYW50KSB7XG4gICAgICAkc3RhdGUuZ28oJ3Byb29mRGV0YWlsJywge1xuICAgICAgICB0ZW5hbnRcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gVG9hc3RzU2VydmljZS5zaG93U3VjY2Vzc1RvYXN0KGBQcm9vZiBvZiBQbGF5IHJlcG9ydGluZyBzZXQgdG8gJHt0ZW5hbnR9YCk7XG5cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFRvYXN0c1NlcnZpY2Uuc2hvd0Vycm9yVG9hc3QoYFByb29mIG9mIFBsYXkgcmVwb3J0aW5nIGlzIGFscmVhZHkgc2V0IHRvICR7dGVuYW50fWApO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gdm07XG59O1xuXG5mdW5jdGlvbiBfX2luX18obmVlZGxlLCBoYXlzdGFjaykge1xuICByZXR1cm4gaGF5c3RhY2suaW5kZXhPZihuZWVkbGUpID49IDA7XG59XG5cbmV4cG9ydCB7UHJvb2ZPZlBsYXlNdWx0aUxvY2F0aW9uQ3RybH1cblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vc3JjL2FwcC9wcm9vZi9tdWx0aS1sb2NhdGlvbi5jb250cm9sbGVyLmpzXG4gKiovIiwiaW1wb3J0IG1vbWVudCBmcm9tICdtb21lbnQnO1xuXG5mdW5jdGlvbiBQcm9vZk9mUGxheU11bHRpRGlzcGxheUN0cmwoUHJvb2ZQbGF5U2VydmljZSwgJHN0YXRlUGFyYW1zLCAkc3RhdGUsIFRvYXN0c1NlcnZpY2UpIHtcbiAgXCJuZ0luamVjdFwiO1xuXG4gIGxldCB2bSA9IHRoaXM7XG5cbiAgdm0ucmFkaW9CdXR0b25DaG9pY2VzID0ge1xuICAgIGdyb3VwMTogJ0J5IERhdGUnLFxuICAgIGdyb3VwMjogJ1N1bW1hcml6ZWQnLFxuICAgIHNlbGVjdGlvbjogbnVsbFxuICB9O1xuXG5cbiAgdm0uZGF0ZVRpbWVTZWxlY3Rpb24gPSB7XG4gICAgc3RhcnQ6IG51bGwsXG4gICAgZW5kOiBudWxsXG4gIH07XG5cbiAgdm0uZm9ybVZhbGlkaXR5ID0ge1xuICAgIHN0YXJ0X2RhdGU6IGZhbHNlLFxuICAgIGVuZF9kYXRlOiBmYWxzZSxcbiAgICBkaXNwbGF5czogZmFsc2UsXG4gIH07XG5cbiAgdm0udGVuYW50ID0gJHN0YXRlUGFyYW1zLnRlbmFudDtcbiAgdm0ubm9fY2FjaGUgPSB0cnVlO1xuICB2bS5sb2FkaW5nID0gdHJ1ZTtcbiAgdm0uZGlzYWJsZWQgPSB0cnVlO1xuICB2bS5kaXNhYmxlZFRlbmFudCA9IHRydWU7XG4gIHZtLnNlbGVjdGVkX2Rpc3BsYXlzID0gW107XG5cblxuICB2bS5pbml0aWFsaXplID0gKCkgPT5cbiAgICBQcm9vZlBsYXlTZXJ2aWNlLmdldEFsbERpc3BsYXlzKHZtLnRlbmFudClcbiAgICAgIC50aGVuKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICAgIHZtLmxvYWRpbmcgPSBmYWxzZTtcbiAgICAgICAgdm0uZGlzcGxheXMgPSBkYXRhLmRhdGEuZGV2aWNlcztcbiAgICAgICAgaWYgKHZtLmRpc3BsYXlzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICByZXR1cm4gdm0uaGFkX3NvbWVfaXRlbXMgPSB0cnVlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiB2bS5oYWRfc29tZV9pdGVtcyA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9KVxuICA7XG5cbiAgdm0ucmVmcmVzaERpc3BsYXlzID0gZnVuY3Rpb24gKCkge1xuICAgIHZtLnNlYXJjaFRleHQgPSAnJztcbiAgICB2bS5zZWxlY3RlZEl0ZW0gPSAnJztcbiAgICB2bS5sb2FkaW5nID0gdHJ1ZTtcbiAgICB2bS5kaXNhYmxlZCA9IHRydWU7XG4gICAgdm0uc2VsZWN0ZWRfZGlzcGxheXMgPSBbXTtcbiAgICB2bS5pbml0aWFsaXplKCk7XG4gIH07XG5cbiAgdm0uYWRkVG9TZWxlY3RlZERpc3BsYXlzID0gZnVuY3Rpb24gKHNlYXJjaFRleHQpIHtcbiAgICBpZiAodm0uaXNEaXNwbGF5VmFsaWQoc2VhcmNoVGV4dCkpIHtcbiAgICAgIHZtLnNlbGVjdGVkX2Rpc3BsYXlzLnB1c2goc2VhcmNoVGV4dCk7XG4gICAgICBsZXQgaW5kZXggPSB2bS5kaXNwbGF5cy5pbmRleE9mKHNlYXJjaFRleHQpO1xuICAgICAgdm0uZGlzcGxheXMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgIHZtLnNlYXJjaFRleHQgPSAnJztcbiAgICB9XG4gICAgdm0uYXJlRGlzcGxheXNWYWxpZCgpO1xuICAgIHJldHVybiB2bS5pc0Rpc2FibGVkKCk7XG4gIH07XG5cbiAgdm0ucXVlcnlTZWFyY2ggPSAoZGlzcGxheXMsIHNlYXJjaFRleHQpID0+IFByb29mUGxheVNlcnZpY2UucXVlcnlTZWFyY2goZGlzcGxheXMsIHNlYXJjaFRleHQpO1xuXG5cbiAgdm0uaXNSYWRpb1ZhbGlkID0gZnVuY3Rpb24gKHNlbGVjdGlvbikge1xuICAgIHZtLmZvcm1WYWxpZGl0eS50eXBlID0gc2VsZWN0aW9uO1xuICAgIHJldHVybiB2bS5pc0Rpc2FibGVkKCk7XG4gIH07XG5cblxuICB2bS5pc0Rpc3BsYXlWYWxpZCA9IGZ1bmN0aW9uIChzZWFyY2hUZXh0KSB7XG4gICAgaWYgKF9faW5fXyhzZWFyY2hUZXh0LCB2bS5kaXNwbGF5cykpIHtcbiAgICAgIGlmICghX19pbl9fKHNlYXJjaFRleHQsIHZtLnNlbGVjdGVkX2Rpc3BsYXlzKSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfTtcblxuICB2bS5hcmVEaXNwbGF5c1ZhbGlkID0gZnVuY3Rpb24gKCkge1xuICAgIHZtLmZvcm1WYWxpZGl0eS5kaXNwbGF5cyA9ICh2bS5zZWxlY3RlZF9kaXNwbGF5cy5sZW5ndGggPiAwKTtcbiAgICByZXR1cm4gdm0uaXNEaXNhYmxlZCgpO1xuICB9O1xuXG4gIHZtLmlzU3RhcnREYXRlVmFsaWQgPSBmdW5jdGlvbiAoc3RhcnRfZGF0ZSkge1xuICAgIHZtLmZvcm1WYWxpZGl0eS5zdGFydF9kYXRlID0gKHN0YXJ0X2RhdGUgaW5zdGFuY2VvZiBEYXRlKTtcbiAgICByZXR1cm4gdm0uaXNEaXNhYmxlZCgpO1xuICB9O1xuXG5cbiAgdm0uaXNFbmREYXRlVmFsaWQgPSBmdW5jdGlvbiAoZW5kX2RhdGUpIHtcbiAgICB2bS5mb3JtVmFsaWRpdHkuZW5kX2RhdGUgPSAoZW5kX2RhdGUgaW5zdGFuY2VvZiBEYXRlKTtcbiAgICByZXR1cm4gdm0uaXNEaXNhYmxlZCgpO1xuICB9O1xuXG4gIHZtLnJlbW92ZUZyb21TZWxlY3RlZERpc3BsYXkgPSBmdW5jdGlvbiAoaXRlbSkge1xuICAgIGxldCBpbmRleCA9IHZtLnNlbGVjdGVkX2Rpc3BsYXlzLmluZGV4T2YoaXRlbSk7XG4gICAgdm0uc2VsZWN0ZWRfZGlzcGxheXMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICB2bS5kaXNwbGF5cy5wdXNoKGl0ZW0pO1xuICAgIHZtLmFyZURpc3BsYXlzVmFsaWQoKTtcbiAgICByZXR1cm4gdm0uaXNEaXNhYmxlZCgpO1xuICB9O1xuXG5cbiAgdm0uaXNEaXNhYmxlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodm0uZm9ybVZhbGlkaXR5LnN0YXJ0X2RhdGUgJiYgdm0uZm9ybVZhbGlkaXR5LmVuZF9kYXRlICYmIHZtLmZvcm1WYWxpZGl0eS5kaXNwbGF5cyAmJiB2bS5mb3JtVmFsaWRpdHkudHlwZSkge1xuICAgICAgdm0uZGlzYWJsZWQgPSBmYWxzZTtcbiAgICAgIHJldHVybiB2bS5maW5hbCA9IHtcbiAgICAgICAgc3RhcnRfZGF0ZV91bml4OiBtb21lbnQodm0uZGF0ZVRpbWVTZWxlY3Rpb24uc3RhcnQpLnVuaXgoKSxcbiAgICAgICAgZW5kX2RhdGVfdW5peDogbW9tZW50KHZtLmRhdGVUaW1lU2VsZWN0aW9uLmVuZCkudW5peCgpLFxuICAgICAgICBkaXNwbGF5czogdm0uc2VsZWN0ZWRfZGlzcGxheXMsXG4gICAgICAgIHR5cGU6IHZtLnJhZGlvQnV0dG9uQ2hvaWNlcy5zZWxlY3Rpb25cblxuICAgICAgfTtcblxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdm0uZGlzYWJsZWQgPSB0cnVlO1xuICAgIH1cbiAgfTtcblxuICB2bS5zdWJtaXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKHZtLmZpbmFsLnR5cGUgPT09IFwiMVwiKSB7XG4gICAgICByZXR1cm4gUHJvb2ZQbGF5U2VydmljZS5kb3dubG9hZENTVkZvck11bHRpcGxlRGV2aWNlc0J5RGF0ZSh2bS5maW5hbC5zdGFydF9kYXRlX3VuaXgsIHZtLmZpbmFsLmVuZF9kYXRlX3VuaXgsIHZtLmZpbmFsLmRpc3BsYXlzLCB2bS50ZW5hbnQpO1xuXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBQcm9vZlBsYXlTZXJ2aWNlLmRvd25sb2FkQ1NWRm9yTXVsdGlwbGVEZXZpY2VzU3VtbWFyaXplZCh2bS5maW5hbC5zdGFydF9kYXRlX3VuaXgsIHZtLmZpbmFsLmVuZF9kYXRlX3VuaXgsIHZtLmZpbmFsLmRpc3BsYXlzLCB2bS50ZW5hbnQpO1xuICAgIH1cbiAgfTtcblxuXG4gIHZtLnRlbmFudHMgPSBudWxsO1xuICB2bS5jdXJyZW50VGVuYW50ID0gdm0udGVuYW50O1xuXG4gIHZtLmluaXRpYWxpemVfdGVuYW50X3NlbGVjdCA9ICgpID0+XG4gICAgUHJvb2ZQbGF5U2VydmljZS5nZXRBbGxUZW5hbnRzKClcbiAgICAgIC50aGVuKGRhdGEgPT4gdm0udGVuYW50cyA9IGRhdGEuZGF0YS50ZW5hbnRzKVxuICA7XG5cbiAgdm0uc3VibWl0VGVuYW50ID0gZnVuY3Rpb24gKHRlbmFudCkge1xuICAgIGlmICh0ZW5hbnQgIT09IHZtLmN1cnJlbnRUZW5hbnQpIHtcbiAgICAgICRzdGF0ZS5nbygncHJvb2ZEZXRhaWwnLCB7XG4gICAgICAgIHRlbmFudFxuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBUb2FzdHNTZXJ2aWNlLnNob3dTdWNjZXNzVG9hc3QoYFByb29mIG9mIFBsYXkgcmVwb3J0aW5nIHNldCB0byAke3RlbmFudH1gKTtcblxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gVG9hc3RzU2VydmljZS5zaG93RXJyb3JUb2FzdChgUHJvb2Ygb2YgUGxheSByZXBvcnRpbmcgaXMgYWxyZWFkeSBzZXQgdG8gJHt0ZW5hbnR9YCk7XG4gICAgfVxuICB9O1xuXG4gIHZtLnF1ZXJ5U2VhcmNoID0gKHJlc291cmNlcywgc2VhcmNoVGV4dCkgPT4gUHJvb2ZQbGF5U2VydmljZS5xdWVyeVNlYXJjaChyZXNvdXJjZXMsIHNlYXJjaFRleHQpO1xuXG4gIHZtLmlzU2VsZWN0aW9uVmFsaWQgPSBmdW5jdGlvbiAoc2VhcmNoKSB7XG4gICAgaWYgKF9faW5fXyhzZWFyY2gsIHZtLnRlbmFudHMpKSB7XG4gICAgICByZXR1cm4gdm0uZGlzYWJsZWRUZW5hbnQgPSBmYWxzZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHZtLmRpc2FibGVkVGVuYW50ID0gdHJ1ZTtcbiAgICB9XG4gIH07XG5cblxuICByZXR1cm4gdm07XG59O1xuXG5mdW5jdGlvbiBfX2luX18obmVlZGxlLCBoYXlzdGFjaykge1xuICByZXR1cm4gaGF5c3RhY2suaW5kZXhPZihuZWVkbGUpID49IDA7XG59XG5cbmV4cG9ydCB7UHJvb2ZPZlBsYXlNdWx0aURpc3BsYXlDdHJsfVxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zcmMvYXBwL3Byb29mL211bHRpLWRpc3BsYXkuY29udHJvbGxlci5qc1xuICoqLyIsImltcG9ydCBtb21lbnQgZnJvbSAnbW9tZW50JztcblxuXG5mdW5jdGlvbiBQcm9vZk9mUGxheU11bHRpUmVzb3VyY2VDdHJsKFByb29mUGxheVNlcnZpY2UsICRzdGF0ZVBhcmFtcywgJHN0YXRlLCBUb2FzdHNTZXJ2aWNlKSB7XG4gIFwibmdJbmplY3RcIjtcblxuICBsZXQgdm0gPSB0aGlzO1xuICB2bS5yYWRpb0J1dHRvbkNob2ljZXMgPSB7XG4gICAgZ3JvdXAxOiAnQnkgRGV2aWNlJyxcbiAgICBncm91cDI6ICdCeSBEYXRlJyxcbiAgICBzZWxlY3Rpb246IG51bGxcbiAgfTtcblxuXG4gIHZtLmRhdGVUaW1lU2VsZWN0aW9uID0ge1xuICAgIHN0YXJ0OiBudWxsLFxuICAgIGVuZDogbnVsbFxuICB9O1xuXG4gIHZtLmZvcm1WYWxpZGl0eSA9IHtcbiAgICBzdGFydF9kYXRlOiBmYWxzZSxcbiAgICBlbmRfZGF0ZTogZmFsc2UsXG4gICAgcmVzb3VyY2VzOiBmYWxzZSxcbiAgfTtcblxuICB2bS50ZW5hbnQgPSAkc3RhdGVQYXJhbXMudGVuYW50O1xuICB2bS5ub19jYWNoZSA9IHRydWU7XG4gIHZtLmxvYWRpbmcgPSB0cnVlO1xuICB2bS5kaXNhYmxlZCA9IHRydWU7XG4gIHZtLmRpc2FibGVkVGVuYW50ID0gdHJ1ZTtcbiAgdm0uc2VsZWN0ZWRfcmVzb3VyY2VzID0gW107XG5cbiAgdm0uaW5pdGlhbGl6ZSA9ICgpID0+XG4gICAgUHJvb2ZQbGF5U2VydmljZS5nZXRBbGxSZXNvdXJjZXModm0udGVuYW50KVxuICAgICAgLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgICAgdm0ubG9hZGluZyA9IGZhbHNlO1xuICAgICAgICB2bS5mdWxsX3Jlc291cmNlX21hcCA9IGRhdGEuZGF0YS5yZXNvdXJjZXM7XG4gICAgICAgIHZtLnJlc291cmNlcyA9IFtdO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRhdGEuZGF0YS5yZXNvdXJjZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBsZXQgcmVzb3VyY2UgPSBkYXRhLmRhdGEucmVzb3VyY2VzW2ldO1xuICAgICAgICAgIHZtLnJlc291cmNlcy5wdXNoKHJlc291cmNlLnJlc291cmNlX25hbWUpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHZtLnJlc291cmNlcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgcmV0dXJuIHZtLmhhZF9zb21lX2l0ZW1zID0gdHJ1ZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gdm0uaGFkX3NvbWVfaXRlbXMgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfSlcbiAgO1xuXG4gIHZtLnJlZnJlc2hSZXNvdXJjZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgdm0uc2VhcmNoVGV4dCA9ICcnO1xuICAgIHZtLnNlbGVjdGVkSXRlbSA9ICcnO1xuICAgIHZtLmxvYWRpbmcgPSB0cnVlO1xuICAgIHZtLmRpc2FibGVkID0gdHJ1ZTtcbiAgICB2bS5zZWxlY3RlZF9yZXNvdXJjZXMgPSBbXTtcbiAgICB2bS5pbml0aWFsaXplKCk7XG4gIH07XG5cbiAgdm0uYWRkVG9TZWxlY3RlZFJlc291cmNlcyA9IGZ1bmN0aW9uIChzZWFyY2hUZXh0KSB7XG4gICAgaWYgKHZtLmlzUmVzb3VyY2VWYWxpZChzZWFyY2hUZXh0KSkge1xuICAgICAgdm0uc2VsZWN0ZWRfcmVzb3VyY2VzLnB1c2goc2VhcmNoVGV4dCk7XG4gICAgICBsZXQgaW5kZXggPSB2bS5yZXNvdXJjZXMuaW5kZXhPZihzZWFyY2hUZXh0KTtcbiAgICAgIHZtLnJlc291cmNlcy5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgdm0uc2VhcmNoVGV4dCA9ICcnO1xuICAgIH1cbiAgICB2bS5hcmVSZXNvdXJjZXNWYWxpZCgpO1xuICAgIHJldHVybiB2bS5pc0Rpc2FibGVkKCk7XG4gIH07XG5cbiAgdm0ucXVlcnlTZWFyY2ggPSAocmVzb3VyY2VzLCBzZWFyY2hUZXh0KSA9PiBQcm9vZlBsYXlTZXJ2aWNlLnF1ZXJ5U2VhcmNoKHJlc291cmNlcywgc2VhcmNoVGV4dCk7XG5cblxuICB2bS5pc1JhZGlvVmFsaWQgPSBmdW5jdGlvbiAoc2VsZWN0aW9uKSB7XG4gICAgdm0uZm9ybVZhbGlkaXR5LnR5cGUgPSBzZWxlY3Rpb247XG4gICAgcmV0dXJuIHZtLmlzRGlzYWJsZWQoKTtcbiAgfTtcblxuXG4gIHZtLmlzUmVzb3VyY2VWYWxpZCA9IGZ1bmN0aW9uIChzZWFyY2hUZXh0KSB7XG4gICAgaWYgKF9faW5fXyhzZWFyY2hUZXh0LCB2bS5yZXNvdXJjZXMpKSB7XG4gICAgICBpZiAoIV9faW5fXyhzZWFyY2hUZXh0LCB2bS5zZWxlY3RlZF9yZXNvdXJjZXMpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9O1xuXG5cbiAgdm0uYXJlUmVzb3VyY2VzVmFsaWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgdm0uZm9ybVZhbGlkaXR5LnJlc291cmNlcyA9ICh2bS5zZWxlY3RlZF9yZXNvdXJjZXMubGVuZ3RoID4gMCk7XG4gICAgcmV0dXJuIHZtLmlzRGlzYWJsZWQoKTtcbiAgfTtcblxuICB2bS5pc1N0YXJ0RGF0ZVZhbGlkID0gZnVuY3Rpb24gKHN0YXJ0X2RhdGUpIHtcbiAgICB2bS5mb3JtVmFsaWRpdHkuc3RhcnRfZGF0ZSA9IChzdGFydF9kYXRlIGluc3RhbmNlb2YgRGF0ZSk7XG4gICAgcmV0dXJuIHZtLmlzRGlzYWJsZWQoKTtcbiAgfTtcblxuXG4gIHZtLmlzRW5kRGF0ZVZhbGlkID0gZnVuY3Rpb24gKGVuZF9kYXRlKSB7XG4gICAgdm0uZm9ybVZhbGlkaXR5LmVuZF9kYXRlID0gKGVuZF9kYXRlIGluc3RhbmNlb2YgRGF0ZSk7XG4gICAgcmV0dXJuIHZtLmlzRGlzYWJsZWQoKTtcbiAgfTtcblxuICB2bS5yZW1vdmVGcm9tU2VsZWN0ZWRSZXNvdXJjZSA9IGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgbGV0IGluZGV4ID0gdm0uc2VsZWN0ZWRfcmVzb3VyY2VzLmluZGV4T2YoaXRlbSk7XG4gICAgdm0uc2VsZWN0ZWRfcmVzb3VyY2VzLnNwbGljZShpbmRleCwgMSk7XG4gICAgdm0ucmVzb3VyY2VzLnB1c2goaXRlbSk7XG4gICAgdm0uYXJlUmVzb3VyY2VzVmFsaWQoKTtcbiAgICByZXR1cm4gdm0uaXNEaXNhYmxlZCgpO1xuICB9O1xuXG5cbiAgdm0uaXNEaXNhYmxlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAodm0uZm9ybVZhbGlkaXR5LnN0YXJ0X2RhdGUgJiYgdm0uZm9ybVZhbGlkaXR5LmVuZF9kYXRlICYmIHZtLmZvcm1WYWxpZGl0eS5yZXNvdXJjZXMgJiYgdm0uZm9ybVZhbGlkaXR5LnR5cGUpIHtcbiAgICAgIHZtLmRpc2FibGVkID0gZmFsc2U7XG4gICAgICByZXR1cm4gdm0uZmluYWwgPSB7XG4gICAgICAgIHN0YXJ0X2RhdGVfdW5peDogbW9tZW50KHZtLmRhdGVUaW1lU2VsZWN0aW9uLnN0YXJ0KS51bml4KCksXG4gICAgICAgIGVuZF9kYXRlX3VuaXg6IG1vbWVudCh2bS5kYXRlVGltZVNlbGVjdGlvbi5lbmQpLnVuaXgoKSxcbiAgICAgICAgcmVzb3VyY2VzOiB2bS5zZWxlY3RlZF9yZXNvdXJjZXMsXG4gICAgICAgIHR5cGU6IHZtLnJhZGlvQnV0dG9uQ2hvaWNlcy5zZWxlY3Rpb25cbiAgICAgIH07XG5cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHZtLmRpc2FibGVkID0gdHJ1ZTtcbiAgICB9XG4gIH07XG5cbiAgdm0uc3VibWl0ID0gZnVuY3Rpb24gKCkge1xuICAgIGxldCByZXNvdXJjZXNfYXNfaWRzID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB2bS5maW5hbC5yZXNvdXJjZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGxldCBpdGVtID0gdm0uZmluYWwucmVzb3VyY2VzW2ldO1xuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCB2bS5mdWxsX3Jlc291cmNlX21hcC5sZW5ndGg7IGorKykge1xuICAgICAgICBsZXQgZWFjaCA9IHZtLmZ1bGxfcmVzb3VyY2VfbWFwW2pdO1xuICAgICAgICBpZiAoZWFjaFtcInJlc291cmNlX25hbWVcIl0gPT09IGl0ZW0pIHtcbiAgICAgICAgICByZXNvdXJjZXNfYXNfaWRzLnB1c2goZWFjaFtcInJlc291cmNlX2lkZW50aWZpZXJcIl0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHZtLmZpbmFsLnR5cGUgPT09IFwiMVwiKSB7XG4gICAgICByZXR1cm4gUHJvb2ZQbGF5U2VydmljZS5kb3dubG9hZENTVkZvck11bHRpcGxlUmVzb3VyY2VzQnlEZXZpY2Uodm0uZmluYWwuc3RhcnRfZGF0ZV91bml4LCB2bS5maW5hbC5lbmRfZGF0ZV91bml4LCByZXNvdXJjZXNfYXNfaWRzLCB2bS50ZW5hbnQpO1xuXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBQcm9vZlBsYXlTZXJ2aWNlLmRvd25sb2FkQ1NWRm9yTXVsdGlwbGVSZXNvdXJjZXNCeURhdGUodm0uZmluYWwuc3RhcnRfZGF0ZV91bml4LCB2bS5maW5hbC5lbmRfZGF0ZV91bml4LCByZXNvdXJjZXNfYXNfaWRzLCB2bS50ZW5hbnQpO1xuICAgIH1cbiAgfTtcblxuICB2bS50ZW5hbnRzID0gbnVsbDtcbiAgdm0uY3VycmVudFRlbmFudCA9IHZtLnRlbmFudDtcblxuICB2bS5pbml0aWFsaXplX3RlbmFudF9zZWxlY3QgPSAoKSA9PlxuICAgIFByb29mUGxheVNlcnZpY2UuZ2V0QWxsVGVuYW50cygpXG4gICAgICAudGhlbihkYXRhID0+IHZtLnRlbmFudHMgPSBkYXRhLmRhdGEudGVuYW50cylcbiAgO1xuXG4gIHZtLnF1ZXJ5U2VhcmNoID0gKHJlc291cmNlcywgc2VhcmNoVGV4dCkgPT4gUHJvb2ZQbGF5U2VydmljZS5xdWVyeVNlYXJjaChyZXNvdXJjZXMsIHNlYXJjaFRleHQpO1xuXG4gIHZtLmlzU2VsZWN0aW9uVmFsaWQgPSBmdW5jdGlvbiAoc2VhcmNoKSB7XG4gICAgaWYgKF9faW5fXyhzZWFyY2gsIHZtLnRlbmFudHMpKSB7XG4gICAgICByZXR1cm4gdm0uZGlzYWJsZWRUZW5hbnQgPSBmYWxzZTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHZtLmRpc2FibGVkVGVuYW50ID0gdHJ1ZTtcbiAgICB9XG4gIH07XG5cblxuICB2bS5zdWJtaXRUZW5hbnQgPSBmdW5jdGlvbiAodGVuYW50KSB7XG4gICAgaWYgKHRlbmFudCAhPT0gdm0uY3VycmVudFRlbmFudCkge1xuICAgICAgJHN0YXRlLmdvKCdwcm9vZkRldGFpbCcsIHtcbiAgICAgICAgdGVuYW50XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBUb2FzdHNTZXJ2aWNlLnNob3dTdWNjZXNzVG9hc3QoYFByb29mIG9mIFBsYXkgcmVwb3J0aW5nIHNldCB0byAke3RlbmFudH1gKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIFRvYXN0c1NlcnZpY2Uuc2hvd0Vycm9yVG9hc3QoYFByb29mIG9mIFBsYXkgcmVwb3J0aW5nIGlzIGFscmVhZHkgc2V0IHRvICR7dGVuYW50fWApO1xuICAgIH1cbiAgfTtcblxuXG4gIHJldHVybiB2bTtcbn07XG5cbmZ1bmN0aW9uIF9faW5fXyhuZWVkbGUsIGhheXN0YWNrKSB7XG4gIHJldHVybiBoYXlzdGFjay5pbmRleE9mKG5lZWRsZSkgPj0gMDtcbn1cblxuZXhwb3J0IHtQcm9vZk9mUGxheU11bHRpUmVzb3VyY2VDdHJsfVxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zcmMvYXBwL3Byb29mL211bHRpLXJlc291cmNlLmNvbnRyb2xsZXIuanNcbiAqKi8iLCJmdW5jdGlvbiBQcm9vZk9mUGxheUN0cmwoUHJvb2ZQbGF5U2VydmljZSwgJHN0YXRlUGFyYW1zLCAkc3RhdGUsIFRvYXN0c1NlcnZpY2UpIHtcbiAgXCJuZ0luamVjdFwiO1xuXG4gIGxldCB2bSA9IHRoaXM7XG4gIHZtLnJlc291cmNlID0ge3RpdGxlOiBcIlJlc291cmNlIFJlcG9ydFwifTtcbiAgdm0ubG9jYXRpb24gPSB7dGl0bGU6IFwiTG9jYXRpb24gUmVwb3J0XCJ9O1xuICB2bS5kaXNwbGF5ID0ge3RpdGxlOiBcIkRpc3BsYXkgUmVwb3J0XCJ9O1xuXG4gIHZtLmNob3Nlbl90ZW5hbnQgPSBudWxsO1xuICB2bS50ZW5hbnRzID0gbnVsbDtcbiAgdm0uZGlzYWJsZWQgPSB0cnVlO1xuXG5cbiAgdm0uaW5pdGlhbGl6ZSA9ICgpID0+XG4gICAgUHJvb2ZQbGF5U2VydmljZS5nZXRBbGxUZW5hbnRzKClcbiAgICAgIC50aGVuKGRhdGEgPT4gdm0udGVuYW50cyA9IGRhdGEuZGF0YS50ZW5hbnRzKVxuICA7XG5cbiAgdm0ucXVlcnlTZWFyY2ggPSAocmVzb3VyY2VzLCBzZWFyY2hUZXh0KSA9PiBQcm9vZlBsYXlTZXJ2aWNlLnF1ZXJ5U2VhcmNoKHJlc291cmNlcywgc2VhcmNoVGV4dCk7XG5cblxuICB2bS5pc1NlbGVjdGlvblZhbGlkID0gZnVuY3Rpb24gKHNlYXJjaCkge1xuICAgIGlmIChfX2luX18oc2VhcmNoLCB2bS50ZW5hbnRzKSkge1xuICAgICAgcmV0dXJuIHZtLmRpc2FibGVkID0gZmFsc2U7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB2bS5kaXNhYmxlZCA9IHRydWU7XG4gICAgfVxuICB9O1xuXG5cbiAgdm0uc3VibWl0VGVuYW50ID0gZnVuY3Rpb24gKHRlbmFudCkge1xuICAgIGlmICh0ZW5hbnQpIHtcbiAgICAgIHZtLmNob3Nlbl90ZW5hbnQgPSAodGVuYW50KTtcbiAgICAgIHJldHVybiAkc3RhdGUuZ28oJ3Byb29mRGV0YWlsJywge1xuICAgICAgICB0ZW5hbnQ6IHZtLmNob3Nlbl90ZW5hbnRcbiAgICAgIH0pO1xuICAgIH1cbiAgfTtcblxuICB2bS5yZWZyZXNoVGVuYW50cyA9IGZ1bmN0aW9uICgpIHtcbiAgICB2bS50ZW5hbnRzID0gbnVsbDtcbiAgICBsZXQgdXJsID0gUHJvb2ZQbGF5U2VydmljZS5tYWtlSFRUUFVSTChcIi9yZXRyaWV2ZV9teV90ZW5hbnRzXCIsICcnKTtcbiAgICB2bS5pbml0aWFsaXplKCk7XG4gIH07XG5cblxuICByZXR1cm4gdm07XG59O1xuXG5mdW5jdGlvbiBfX2luX18obmVlZGxlLCBoYXlzdGFjaykge1xuICByZXR1cm4gaGF5c3RhY2suaW5kZXhPZihuZWVkbGUpID49IDA7XG59XG5cbmV4cG9ydCB7UHJvb2ZPZlBsYXlDdHJsfVxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zcmMvYXBwL3Byb29mL3Byb29mLW9mLXBsYXkuY29udHJvbGxlci5qc1xuICoqLyIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIEltYWdlU2VydmljZSB7XG5cbiAgY29uc3RydWN0b3IoUmVzdGFuZ3VsYXIsIFNlc3Npb25zU2VydmljZSkge1xuICAgICduZ0luamVjdCc7XG4gICAgdGhpcy5SZXN0YW5ndWxhciA9IFJlc3Rhbmd1bGFyO1xuICAgIHRoaXMuU2Vzc2lvbnNTZXJ2aWNlID0gU2Vzc2lvbnNTZXJ2aWNlO1xuICB9XG5cbiAgZ2V0SW1hZ2VzKHRlbmFudF91cmxzYWZlX2tleSkge1xuICAgIHJldHVybiB0aGlzLlJlc3Rhbmd1bGFyLm9uZVVybCgnaW1hZ2UnLCBgL2FwaS92MS9pbWFnZS90ZW5hbnQvJHt0ZW5hbnRfdXJsc2FmZV9rZXl9YCkuZ2V0TGlzdCgpXG4gIH1cblxuICBzYXZlSW1hZ2UodGVuYW50X3VybHNhZmVfa2V5LCBmb3JtRGF0YSkge1xuICAgIC8vIGpRdWVyeSBhamF4IHVzZWQgaGVyZSBpbnN0ZWFkIG9mIGFuZ3VsYXIgLyBSZXN0YW5ndWxhciBkdWUgdG8gYW5ndWxhciBidWcgd2l0aCBwb3N0aW5nIGZvcm0gZGF0YVxuICAgIHJldHVybiAkLmFqYXgoe1xuICAgICAgdHlwZTogXCJQT1NUXCIsXG4gICAgICB1cmw6IGAvYXBpL3YxL2ltYWdlL3RlbmFudC8ke3RlbmFudF91cmxzYWZlX2tleX1gLFxuICAgICAgZGF0YTogZm9ybURhdGEsXG4gICAgICBwcm9jZXNzRGF0YTogZmFsc2UsXG4gICAgICBjb250ZW50VHlwZTogZmFsc2VcbiAgICB9KTtcbiAgfVxuXG4gIGRlbGV0ZUltYWdlKGltYWdlX3VybHNhZmVfa2V5KSB7XG4gICAgbGV0IHByb21pc2UgPSB0aGlzLlJlc3Rhbmd1bGFyLm9uZVVybCgnaW1hZ2UnLCBgL2FwaS92MS9pbWFnZS8ke2ltYWdlX3VybHNhZmVfa2V5fWApLnJlbW92ZSgpO1xuICAgIHJldHVybiBwcm9taXNlO1xuICB9XG5cblxufVxuXG5cblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vc3JjL2FwcC9zZXJ2aWNlcy9pbWFnZS5zZXJ2aWNlLmpzXG4gKiovIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgQWRtaW5TZXJ2aWNlIHtcbiAgY29uc3RydWN0b3IoUmVzdGFuZ3VsYXIpIHtcbiAgICAnbmdJbmplY3QnO1xuICAgIHRoaXMuUmVzdGFuZ3VsYXIgPSBSZXN0YW5ndWxhclxuICAgIHRoaXMuVVNFUl9TRVJWSUNFID0gXCJ1c2Vyc1wiO1xuICAgIHRoaXMuRElTVFJJQlVUT1JfU0VSVklDRSA9IFwiZGlzdHJpYnV0b3JzXCI7XG4gIH1cblxuICBtYWtlRGlzdHJpYnV0b3IoZGlzdHJpYnV0b3IsIGFkbWluX2VtYWlsKSB7XG4gICAgbGV0IHBheWxvYWQgPSB7XG4gICAgICBkaXN0cmlidXRvcixcbiAgICAgIGFkbWluX2VtYWlsXG4gICAgfTtcblxuICAgIGxldCBwcm9taXNlID0gdGhpcy5SZXN0YW5ndWxhci5vbmVVcmwodGhpcy5ESVNUUklCVVRPUl9TRVJWSUNFLCAnL2FwaS92MS9kaXN0cmlidXRvcnMnKS5jdXN0b21QT1NUKHBheWxvYWQpO1xuICAgIHJldHVybiBwcm9taXNlO1xuICB9XG5cbiAgYWRkVXNlclRvRGlzdHJpYnV0b3IodXNlckVtYWlsLCBkaXN0cmlidXRvciwgZGlzdHJpYnV0b3JBZG1pbikge1xuICAgIGxldCBwYXlsb2FkID0ge1xuICAgICAgdXNlcl9lbWFpbDogdXNlckVtYWlsLFxuICAgICAgZGlzdHJpYnV0b3IsXG4gICAgICBkaXN0cmlidXRvcl9hZG1pbjogZGlzdHJpYnV0b3JBZG1pblxuICAgIH07XG5cbiAgICBsZXQgcHJvbWlzZSA9IHRoaXMuUmVzdGFuZ3VsYXIub25lVXJsKHRoaXMuVVNFUl9TRVJWSUNFLCBcIi9hcGkvdjEvdXNlcnNcIikuY3VzdG9tUE9TVChwYXlsb2FkKTtcbiAgICByZXR1cm4gcHJvbWlzZTtcbiAgfVxuXG4gIGdldFVzZXJzT2ZEaXN0cmlidXRvcihkaXN0cmlidXRvcktleSkge1xuICAgIGxldCBwcm9taXNlID0gdGhpcy5SZXN0YW5ndWxhci5vbmVVcmwodGhpcy5ESVNUUklCVVRPUl9TRVJWSUNFLCBgL2FwaS92MS9hbmFseXRpY3MvZGlzdHJpYnV0b3JzLyR7ZGlzdHJpYnV0b3JLZXl9L3VzZXJzYCkuZ2V0KCk7XG4gICAgcmV0dXJuIHByb21pc2U7XG4gIH1cblxuICBnZXRBbGxEaXN0cmlidXRvcnMoKSB7XG4gICAgbGV0IHByb21pc2UgPSB0aGlzLlJlc3Rhbmd1bGFyLm9uZVVybCh0aGlzLkRJU1RSSUJVVE9SX1NFUlZJQ0UsIFwiL2FwaS92MS9kaXN0cmlidXRvcnNcIikuZ2V0KCk7XG4gICAgcmV0dXJuIHByb21pc2U7XG4gIH1cbn1cblxuXG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL3NyYy9hcHAvc2VydmljZXMvYWRtaW4uc2VydmljZS5qc1xuICoqLyIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIEF1dGhvcml6YXRpb25TZXJ2aWNlIHtcblxuICBjb25zdHJ1Y3RvcihTZXNzaW9uc1NlcnZpY2UsICRxKSB7XG4gICAgJ25nSW5qZWN0JztcbiAgICB0aGlzLiRxID0gJHFcbiAgICB0aGlzLlNlc3Npb25zU2VydmljZSA9IFNlc3Npb25zU2VydmljZVxuICB9XG5cbiAgYXV0aGVudGljYXRlZCgpIHtcbiAgICBsZXQgZGVmZXJyZWQgPSB0aGlzLiRxLmRlZmVyKCk7XG4gICAgbGV0IHVzZXJLZXkgPSB0aGlzLlNlc3Npb25zU2VydmljZS5nZXRVc2VyS2V5KCk7XG4gICAgaWYgKHVzZXJLZXkpIHtcbiAgICAgIGRlZmVycmVkLnJlc29sdmUodHJ1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlZmVycmVkLnJlamVjdChbXCJhdXRoRXJyb3JcIiwgJ3NpZ25faW4nXSk7XG4gICAgfVxuICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xuICB9XG5cbiAgbm90QXV0aGVudGljYXRlZCgpIHtcbiAgICBsZXQgZGVmZXJyZWQgPSB0aGlzLiRxLmRlZmVyKCk7XG4gICAgbGV0IHVzZXJLZXkgPSB0aGlzLlNlc3Npb25zU2VydmljZS5nZXRVc2VyS2V5KCk7XG4gICAgaWYgKCF1c2VyS2V5KSB7XG4gICAgICBkZWZlcnJlZC5yZXNvbHZlKHRydWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBkZWZlcnJlZC5yZWplY3QoW1wiYXV0aEVycm9yXCIsICdob21lJ10pO1xuICAgIH1cbiAgICByZXR1cm4gZGVmZXJyZWQucHJvbWlzZTtcbiAgfVxuXG4gIGlzQWRtaW5PckRpc3RyaWJ1dG9yQWRtaW4oKSB7XG4gICAgbGV0IGRlZmVycmVkID0gdGhpcy4kcS5kZWZlcigpO1xuICAgIGxldCBhZG1pbiA9IHRoaXMuU2Vzc2lvbnNTZXJ2aWNlLmdldElzQWRtaW4oKTtcbiAgICBsZXQgZGlzdHJpYnV0b3JBZG1pbiA9IHRoaXMuU2Vzc2lvbnNTZXJ2aWNlLmdldERpc3RyaWJ1dG9yc0FzQWRtaW4oKTtcbiAgICBsZXQgaGFzQXRMZWFzdE9uZURpc3RyaWJ1dG9yQWRtaW4gPSBmYWxzZTtcbiAgICBpZiAoZGlzdHJpYnV0b3JBZG1pbiAmJiBkaXN0cmlidXRvckFkbWluLmxlbmd0aCA+IDApIHtcbiAgICAgIGhhc0F0TGVhc3RPbmVEaXN0cmlidXRvckFkbWluID0gdHJ1ZTtcbiAgICB9XG4gICAgbGV0IHVzZXJLZXkgPSB0aGlzLlNlc3Npb25zU2VydmljZS5nZXRVc2VyS2V5KCk7XG4gICAgaWYgKCF1c2VyS2V5KSB7XG4gICAgICBkZWZlcnJlZC5yZWplY3QoJ3NpZ25faW4nKTtcbiAgICB9IGVsc2UgaWYgKCFhZG1pbiAmJiAhaGFzQXRMZWFzdE9uZURpc3RyaWJ1dG9yQWRtaW4pIHtcbiAgICAgIGRlZmVycmVkLnJlamVjdChbXCJhdXRoRXJyb3JcIiwgJ2hvbWUnXSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlZmVycmVkLnJlc29sdmUodHJ1ZSk7XG4gICAgfVxuICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xuICB9XG59XG5cblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vc3JjL2FwcC9zZXJ2aWNlcy9hdXRob3JpemF0aW9uLnNlcnZpY2UuanNcbiAqKi8iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBDb21tYW5kc1NlcnZpY2Uge1xuXG4gIGNvbnN0cnVjdG9yKFJlc3Rhbmd1bGFyKSB7XG4gICAgJ25nSW5qZWN0JztcbiAgICB0aGlzLlJlc3Rhbmd1bGFyID0gUmVzdGFuZ3VsYXJcbiAgICB0aGlzLlNFUlZJQ0VfTkFNRSA9ICdkZXZpY2VzJztcbiAgfVxuXG4gIHBhbmVsU2xlZXAoa2V5LCBwYW5lbFNsZWVwKSB7XG4gICAgLyoqIHBhbmVsU2xlZXA6IGJvb2xlYW4gKiovXG4gICAgbGV0IHBheWxvYWQgPSB7XG4gICAgICBwYW5lbFNsZWVwXG4gICAgfTtcblxuICAgIGxldCBwcm9taXNlID0gdGhpcy5SZXN0YW5ndWxhci5vbmVVcmwodGhpcy5TRVJWSUNFX05BTUUsIGBhcGkvdjEvZGV2aWNlcy8ke2tleX0vcGFuZWwtc2xlZXBgKS5jdXN0b21QVVQocGF5bG9hZCk7XG4gICAgcmV0dXJuIHByb21pc2U7XG4gIH1cblxuICByZXNldChrZXkpIHtcbiAgICBsZXQgcHJvbWlzZSA9IHRoaXMuUmVzdGFuZ3VsYXIub25lVXJsKHRoaXMuU0VSVklDRV9OQU1FLCBgYXBpL3YxL2RldmljZXMvJHtrZXl9L2NvbW1hbmRzL3Jlc2V0YCkucG9zdCgpO1xuICAgIHJldHVybiBwcm9taXNlO1xuICB9XG5cbiAgY29udGVudERlbGV0ZShrZXkpIHtcbiAgICBsZXQgcHJvbWlzZSA9IHRoaXMuUmVzdGFuZ3VsYXIub25lVXJsKHRoaXMuU0VSVklDRV9OQU1FLCBgYXBpL3YxL2RldmljZXMvJHtrZXl9L2NvbW1hbmRzL2NvbnRlbnQtZGVsZXRlYCkucG9zdCgpO1xuICAgIHJldHVybiBwcm9taXNlO1xuICB9XG5cbiAgY29udGVudFVwZGF0ZShrZXkpIHtcbiAgICBsZXQgcHJvbWlzZSA9IHRoaXMuUmVzdGFuZ3VsYXIub25lVXJsKHRoaXMuU0VSVklDRV9OQU1FLCBgYXBpL3YxL2RldmljZXMvJHtrZXl9L2NvbW1hbmRzL2NvbnRlbnQtdXBkYXRlYCkucG9zdCgpO1xuICAgIHJldHVybiBwcm9taXNlO1xuICB9XG5cbiAgdXBkYXRlRGV2aWNlKGtleSkge1xuICAgIGxldCBwcm9taXNlID0gdGhpcy5SZXN0YW5ndWxhci5vbmVVcmwodGhpcy5TRVJWSUNFX05BTUUsIGBhcGkvdjEvZGV2aWNlcy8ke2tleX0vY29tbWFuZHMvcmVmcmVzaC1kZXZpY2UtcmVwcmVzZW50YXRpb25gKS5wb3N0KCk7XG4gICAgcmV0dXJuIHByb21pc2U7XG4gIH1cblxuICB0b2dnbGVEaWFnbm9zdGljcyhrZXkpIHtcbiAgICBsZXQgcHJvbWlzZSA9IHRoaXMuUmVzdGFuZ3VsYXIub25lVXJsKHRoaXMuU0VSVklDRV9OQU1FLCBgYXBpL3YxL2RldmljZXMvJHtrZXl9L2NvbW1hbmRzL2RpYWdub3N0aWNzYCkucG9zdCgpO1xuICAgIHJldHVybiBwcm9taXNlO1xuICB9XG5cbiAgcmVzdGFydChrZXkpIHtcbiAgICBsZXQgcHJvbWlzZSA9IHRoaXMuUmVzdGFuZ3VsYXIub25lVXJsKHRoaXMuU0VSVklDRV9OQU1FLCBgYXBpL3YxL2RldmljZXMvJHtrZXl9L2NvbW1hbmRzL3Jlc3RhcnRgKS5wb3N0KCk7XG4gICAgcmV0dXJuIHByb21pc2U7XG4gIH1cblxuICBwb3N0TG9nKGtleSkge1xuICAgIGxldCBwcm9taXNlID0gdGhpcy5SZXN0YW5ndWxhci5vbmVVcmwodGhpcy5TRVJWSUNFX05BTUUsIGBhcGkvdjEvZGV2aWNlcy8ke2tleX0vY29tbWFuZHMvcG9zdC1sb2dgKS5wb3N0KCk7XG4gICAgcmV0dXJuIHByb21pc2U7XG4gIH1cblxuICBwb3dlck9uKGtleSkge1xuICAgIGxldCBwcm9taXNlID0gdGhpcy5SZXN0YW5ndWxhci5vbmVVcmwodGhpcy5TRVJWSUNFX05BTUUsIGBhcGkvdjEvZGV2aWNlcy8ke2tleX0vY29tbWFuZHMvcG93ZXItb25gKS5wb3N0KCk7XG4gICAgcmV0dXJuIHByb21pc2U7XG4gIH1cblxuICBwb3dlck9mZihrZXkpIHtcbiAgICBsZXQgcHJvbWlzZSA9IHRoaXMuUmVzdGFuZ3VsYXIub25lVXJsKHRoaXMuU0VSVklDRV9OQU1FLCBgYXBpL3YxL2RldmljZXMvJHtrZXl9L2NvbW1hbmRzL3Bvd2VyLW9mZmApLnBvc3QoKTtcbiAgICByZXR1cm4gcHJvbWlzZTtcbiAgfVxuXG4gIHZvbHVtZShrZXksIHZvbHVtZSkge1xuICAgIGxldCBwYXlsb2FkID0ge1xuICAgICAgdm9sdW1lXG4gICAgfTtcbiAgICBsZXQgcHJvbWlzZSA9IHRoaXMuUmVzdGFuZ3VsYXIub25lVXJsKHRoaXMuU0VSVklDRV9OQU1FLCBgYXBpL3YxL2RldmljZXMvJHtrZXl9YCkuY3VzdG9tUE9TVChwYXlsb2FkLCAnY29tbWFuZHMvdm9sdW1lJyk7XG4gICAgcmV0dXJuIHByb21pc2U7XG4gIH1cblxuICBjdXN0b20oa2V5LCBjb21tYW5kKSB7XG4gICAgbGV0IHBheWxvYWQgPSB7XG4gICAgICBjb21tYW5kXG4gICAgfTtcbiAgICBsZXQgcHJvbWlzZSA9IHRoaXMuUmVzdGFuZ3VsYXIub25lVXJsKHRoaXMuU0VSVklDRV9OQU1FLCBgYXBpL3YxL2RldmljZXMvJHtrZXl9YCkuY3VzdG9tUE9TVChwYXlsb2FkLCAnY29tbWFuZHMvY3VzdG9tJyk7XG4gICAgcmV0dXJuIHByb21pc2U7XG4gIH1cbn1cblxuXG5cblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vc3JjL2FwcC9zZXJ2aWNlcy9jb21tYW5kcy5zZXJ2aWNlLmpzXG4gKiovIiwiaW1wb3J0IG1vbWVudCBmcm9tICdtb21lbnQnXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBEYXRlTWFuaXB1bGF0aW9uU2VydmljZSB7XG5cbiAgY29uc3RydWN0b3IoKSB7XG4gIH1cblxuICBjb252ZXJ0VG9Nb21lbnRJZk5vdEFscmVhZHkoZGF0ZSkge1xuICAgIGlmICghbW9tZW50LmlzTW9tZW50KGRhdGUpKSB7XG4gICAgICByZXR1cm4gbW9tZW50KG5ldyBEYXRlKGRhdGUpKVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZGF0ZVxuICAgIH1cbiAgfVxuXG4gIGNyZWF0ZUZvcm1hdHRlZFN0YXJ0QW5kRW5kRGF0ZUZyb21Ub2RheShkYXlzQmFjaykge1xuICAgIGxldCBzdGFydFRpbWUgPSBtb21lbnQoKS5mb3JtYXQoJ1lZWVktTU0tREQnKVxuICAgIGxldCBzdGFydFRpbWVNaWROaWdodCA9IG1vbWVudChzdGFydFRpbWUsICdZWVlZLU1NLUREJykuZm9ybWF0KCdZWVlZLU1NLUREIGhoOm1tIEEnKVxuICAgIGxldCBzdGFydFRpbWVFbmRPZkRheSA9IG1vbWVudChzdGFydFRpbWVNaWROaWdodCwgJ1lZWVktTU0tREQgaGg6bW0gQScpLmFkZCgxLCAnZGF5Jykuc3VidHJhY3QoNjAsICdzZWNvbmRzJykuZm9ybWF0KCdZWVlZLU1NLUREIGhoOm1tIEEnKVxuXG4gICAgbGV0IGVuZFRpbWUgPSBtb21lbnQoKS5zdWJ0cmFjdCgzMCwgJ2RheXMnKS5mb3JtYXQoJ1lZWVktTU0tREQnKVxuICAgIGxldCBlbmRUaW1lTWlkTmlnaHQgPSBtb21lbnQoZW5kVGltZSwgJ1lZWVktTU0tREQnKS5mb3JtYXQoJ1lZWVktTU0tREQgaGg6bW0gQScpXG5cbiAgICByZXR1cm4gW2VuZFRpbWVNaWROaWdodCwgc3RhcnRUaW1lRW5kT2ZEYXldXG4gIH1cblxuICBnZW5lcmF0ZUxvY2FsRnJvbVVUQyhVVENUaW1lKSB7XG4gICAgbGV0IGxvY2FsVGltZSA9IG1vbWVudC51dGMoVVRDVGltZSkudG9EYXRlKCk7XG4gICAgcmV0dXJuIG1vbWVudChsb2NhbFRpbWUpLmZvcm1hdCgnWVlZWS1NTS1ERCBoaDptbTpzcyBBJyk7XG4gIH07XG5cblxufVxuXG5cblxuXG5cblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vc3JjL2FwcC9zZXJ2aWNlcy9kYXRlbWFuaXB1bGF0aW9uLnNlcnZpY2UuanNcbiAqKi8iLCJpbXBvcnQgJ3Jlc3Rhbmd1bGFyJztcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRGV2aWNlc1NlcnZpY2Uge1xuICBjb25zdHJ1Y3RvcigkbG9nLCBSZXN0YW5ndWxhciwgJHEsICRodHRwLCAkc3RhdGUpIHtcbiAgICAnbmdJbmplY3QnO1xuICAgIHRoaXMuJGxvZyA9ICRsb2dcbiAgICB0aGlzLlJlc3Rhbmd1bGFyID0gUmVzdGFuZ3VsYXJcbiAgICB0aGlzLiRxID0gJHFcbiAgICB0aGlzLiRodHRwID0gJGh0dHBcbiAgICB0aGlzLiRzdGF0ZSA9ICRzdGF0ZVxuICAgIHRoaXMuU0VSVklDRV9OQU1FID0gJ2RldmljZXMnO1xuICAgIHRoaXMudXJpQmFzZSA9ICd2MS9kZXZpY2VzJztcbiAgfVxuXG4gIGFkanVzdENvbnRyb2xzTW9kZShkZXZpY2VLZXksIGNvbnRyb2xzTW9kZSkge1xuICAgIGxldCBwYXlsb2FkID0ge1xuICAgICAgY29udHJvbHNNb2RlXG4gICAgfTtcblxuICAgIGxldCBwcm9taXNlID0gdGhpcy5SZXN0YW5ndWxhci5vbmVVcmwodGhpcy5TRVJWSUNFX05BTUUsIGAvYXBpL3YxL2RldmljZXMvJHtkZXZpY2VLZXl9L2NvbnRyb2xzLW1vZGVgKS5jdXN0b21QVVQocGF5bG9hZCk7XG4gICAgcmV0dXJuIHByb21pc2U7XG4gIH1cblxuICBnZXREZXZpY2VCeU1hY0FkZHJlc3MobWFjQWRkcmVzcykge1xuICAgIGxldCB1cmwgPSBgYXBpL3YxL2RldmljZXM/bWFjX2FkZHJlc3M9JHttYWNBZGRyZXNzfWA7XG4gICAgcmV0dXJuIHRoaXMuUmVzdGFuZ3VsYXIub25lVXJsKCdhcGkvdjEvZGV2aWNlcycsIHVybCkuZ2V0KCk7XG4gIH1cblxuICBnZXREZXZpY2VCeUtleShkZXZpY2VLZXkpIHtcbiAgICBsZXQgdXJsID0gYGFwaS92MS9kZXZpY2VzLyR7ZGV2aWNlS2V5fWA7XG4gICAgbGV0IHByb21pc2UgPSB0aGlzLlJlc3Rhbmd1bGFyLm9uZVVybCh0aGlzLlNFUlZJQ0VfTkFNRSwgdXJsKS5nZXQoKTtcbiAgICByZXR1cm4gcHJvbWlzZTtcbiAgfVxuXG4gIHJldHJpdmVGaWx0ZXJlZERpY3Rpb25hcnlWYWx1ZShkaWN0aW9uYXJ5LCB2YWx1ZSkge1xuICAgIGxldCByZXN1bHRzID0gW11cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGRpY3Rpb25hcnkubGVuZ3RoOyBpKyspIHtcbiAgICAgIGxldCBlYWNoID0gZGljdGlvbmFyeVtpXTtcbiAgICAgIHJlc3VsdHMucHVzaChlYWNoW3ZhbHVlXSk7XG4gICAgfVxuICAgIHJldHVybiByZXN1bHRzXG4gIH1cblxuICBleGVjdXRlU2VhcmNoaW5nUGFydGlhbFNlcmlhbEJ5VGVuYW50KHRlbmFudEtleSwgcGFydGlhbFNlYXJjaCwgdW5tYW5hZ2VkKSB7XG4gICAgcmV0dXJuIHRoaXMuc2VhcmNoRGV2aWNlc0J5UGFydGlhbFNlcmlhbEJ5VGVuYW50KHRlbmFudEtleSwgcGFydGlhbFNlYXJjaCwgdW5tYW5hZ2VkKVxuICAgICAgLnRoZW4oKHJlcykgPT4ge1xuICAgICAgICBsZXQgcmVzdWx0ID0gcmVzW1wibWF0Y2hlc1wiXTtcbiAgICAgICAgbGV0IGlzTWFjID0gZmFsc2VcbiAgICAgICAgbGV0IGlzR0NNaWQgPSBmYWxzZVxuICAgICAgICBsZXQgc2VyaWFsRGV2aWNlc0RpY3QgPSB0aGlzLmNvbnZlcnREZXZpY2VzQXJyYXlUb0RpY3Rpb25hcnlPYmoocmVzdWx0LCBpc01hYywgaXNHQ01pZCk7XG4gICAgICAgIGxldCBkZXZpY2VTZXJpYWxzT25seSA9IHRoaXMucmV0cml2ZUZpbHRlcmVkRGljdGlvbmFyeVZhbHVlKHJlc3VsdCwgXCJzZXJpYWxcIik7XG4gICAgICAgIHJldHVybiBbZGV2aWNlU2VyaWFsc09ubHksIHNlcmlhbERldmljZXNEaWN0XTtcbiAgICAgIH0pO1xuICB9XG5cbiAgZXhlY3V0ZVNlYXJjaGluZ1BhcnRpYWxTZXJpYWxCeURpc3RyaWJ1dG9yKGRpc3RyaWJ1dG9yS2V5LCBwYXJ0aWFsU2VhcmNoLCB1bm1hbmFnZWQpIHtcbiAgICByZXR1cm4gdGhpcy5zZWFyY2hEZXZpY2VzQnlQYXJ0aWFsU2VyaWFsKGRpc3RyaWJ1dG9yS2V5LCBwYXJ0aWFsU2VhcmNoLCB1bm1hbmFnZWQpXG4gICAgICAudGhlbigocmVzKSA9PiB7XG4gICAgICAgIGxldCByZXN1bHQgPSByZXNbXCJtYXRjaGVzXCJdO1xuICAgICAgICBsZXQgc2VyaWFsRGV2aWNlc0RpY3Q7XG4gICAgICAgIGxldCBpc01hYyA9IGZhbHNlXG4gICAgICAgIGxldCBpc0dDTWlkID0gZmFsc2VcbiAgICAgICAgaWYgKHVubWFuYWdlZCkge1xuICAgICAgICAgIHNlcmlhbERldmljZXNEaWN0ID0gdGhpcy5jb252ZXJ0RGV2aWNlc0FycmF5VG9EaWN0aW9uYXJ5T2JqKHJlc3VsdCwgaXNNYWMsIGlzR0NNaWQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHNlcmlhbERldmljZXNEaWN0ID0gdGhpcy5jb252ZXJ0RGV2aWNlc0FycmF5VG9EaWN0aW9uYXJ5T2JqKHJlc3VsdCwgaXNNYWMsIGlzR0NNaWQpO1xuICAgICAgICB9XG4gICAgICAgIGxldCBzZXJpYWxEZXZpY2VzT25seSA9IHRoaXMucmV0cml2ZUZpbHRlcmVkRGljdGlvbmFyeVZhbHVlKHJlc3VsdCwgXCJzZXJpYWxcIik7XG4gICAgICAgIHJldHVybiBbc2VyaWFsRGV2aWNlc09ubHksIHNlcmlhbERldmljZXNEaWN0XTtcbiAgICAgIH0pO1xuICB9XG5cbiAgZXhlY3V0ZVNlYXJjaGluZ1BhcnRpYWxNYWNCeVRlbmFudCh0ZW5hbnRLZXksIHBhcnRpYWxTZWFyY2gsIHVubWFuYWdlZCkge1xuICAgIHJldHVybiB0aGlzLnNlYXJjaERldmljZXNCeVBhcnRpYWxNYWNCeVRlbmFudCh0ZW5hbnRLZXksIHBhcnRpYWxTZWFyY2gsIHVubWFuYWdlZClcbiAgICAgIC50aGVuKChyZXMpID0+IHtcbiAgICAgICAgbGV0IHJlc3VsdCA9IHJlc1tcIm1hdGNoZXNcIl07XG4gICAgICAgIGxldCBtYWNEZXZpY2VzRGljdCA9IHRoaXMuY29udmVydERldmljZXNBcnJheVRvRGljdGlvbmFyeU9iaihyZXN1bHQsIHRydWUpO1xuICAgICAgICBsZXQgZGV2aWNlTWFjc09ubHkgPSB0aGlzLnJldHJpdmVGaWx0ZXJlZERpY3Rpb25hcnlWYWx1ZShyZXN1bHQsIFwibWFjXCIpO1xuICAgICAgICByZXR1cm4gW2RldmljZU1hY3NPbmx5LCBtYWNEZXZpY2VzRGljdF07XG4gICAgICB9KVxuICB9XG5cbiAgZXhlY3V0ZVNlYXJjaGluZ1BhcnRpYWxNYWNCeURpc3RyaWJ1dG9yKGRpc3RyaWJ1dG9yS2V5LCBwYXJ0aWFsU2VhcmNoLCB1bm1hbmFnZWQpIHtcbiAgICByZXR1cm4gdGhpcy5zZWFyY2hEZXZpY2VzQnlQYXJ0aWFsTWFjKGRpc3RyaWJ1dG9yS2V5LCBwYXJ0aWFsU2VhcmNoLCB1bm1hbmFnZWQpXG4gICAgICAudGhlbigocmVzKSA9PiB7XG4gICAgICAgIGxldCByZXN1bHQgPSByZXNbXCJtYXRjaGVzXCJdO1xuICAgICAgICBsZXQgbWFjRGV2aWNlc0RpY3Q7XG4gICAgICAgIGxldCBpc01hYyA9IHRydWU7XG4gICAgICAgIGxldCBpc0dDTWlkID0gZmFsc2U7XG4gICAgICAgIGlmICh1bm1hbmFnZWQpIHtcbiAgICAgICAgICBtYWNEZXZpY2VzRGljdCA9IHRoaXMuY29udmVydERldmljZXNBcnJheVRvRGljdGlvbmFyeU9iaihyZXN1bHQsIGlzTWFjLCBpc0dDTWlkKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBtYWNEZXZpY2VzRGljdCA9IHRoaXMuY29udmVydERldmljZXNBcnJheVRvRGljdGlvbmFyeU9iaihyZXN1bHQsIGlzTWFjLCBpc0dDTWlkKTtcbiAgICAgICAgfVxuICAgICAgICBsZXQgbWFjRGV2aWNlcyA9IHRoaXMucmV0cml2ZUZpbHRlcmVkRGljdGlvbmFyeVZhbHVlKHJlc3VsdCwgXCJtYWNcIilcbiAgICAgICAgcmV0dXJuIFttYWNEZXZpY2VzLCBtYWNEZXZpY2VzRGljdF07XG4gICAgICB9KTtcblxuICB9XG5cbiAgZXhlY3V0ZVNlYXJjaGluZ1BhcnRpYWxHQ01pZEJ5VGVuYW50KHRlbmFudEtleSwgcGFydGlhbFNlYXJjaCwgdW5tYW5hZ2VkKSB7XG4gICAgcmV0dXJuIHRoaXMuc2VhcmNoRGlzdHJpYnV0b3JEZXZpY2VzQnlQYXJ0aWFsR0NNaWRCeVRlbmFudCh0ZW5hbnRLZXksIHBhcnRpYWxTZWFyY2gsIHVubWFuYWdlZClcbiAgICAgIC50aGVuKChyZXMpID0+IHtcbiAgICAgICAgbGV0IHJlc3VsdCA9IHJlc1tcIm1hdGNoZXNcIl07XG4gICAgICAgIGxldCBnY21pZERldmljZXNEaWN0ID0gdGhpcy5jb252ZXJ0RGV2aWNlc0FycmF5VG9EaWN0aW9uYXJ5T2JqKHJlc3VsdCwgZmFsc2UsIHRydWUpO1xuICAgICAgICBsZXQgZ2NtaWREZXZpY2VzT25seSA9IHRoaXMucmV0cml2ZUZpbHRlcmVkRGljdGlvbmFyeVZhbHVlKHJlc3VsdCwgXCJnY21pZFwiKVxuICAgICAgICByZXR1cm4gW2djbWlkRGV2aWNlc09ubHksIGdjbWlkRGV2aWNlc0RpY3RdO1xuICAgICAgfSk7XG4gIH1cblxuICBleGVjdXRlU2VhcmNoaW5nUGFydGlhbEdDTWlkQnlEaXN0cmlidXRvcihkaXN0cmlidXRvcktleSwgcGFydGlhbFNlYXJjaCwgdW5tYW5hZ2VkKSB7XG4gICAgcmV0dXJuIHRoaXMuc2VhcmNoRGlzdHJpYnV0b3JEZXZpY2VzQnlQYXJ0aWFsR0NNaWQoZGlzdHJpYnV0b3JLZXksIHBhcnRpYWxTZWFyY2gsIHVubWFuYWdlZClcbiAgICAgIC50aGVuKChyZXMpID0+IHtcbiAgICAgICAgbGV0IHJlc3VsdCA9IHJlc1tcIm1hdGNoZXNcIl07XG4gICAgICAgIGxldCBHQ01pZERldmljZXNEaWN0O1xuICAgICAgICBpZiAodW5tYW5hZ2VkKSB7XG4gICAgICAgICAgR0NNaWREZXZpY2VzRGljdCA9IHRoaXMuY29udmVydERldmljZXNBcnJheVRvRGljdGlvbmFyeU9iaihyZXN1bHQsIGZhbHNlLCB0cnVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBHQ01pZERldmljZXNEaWN0ID0gdGhpcy5jb252ZXJ0RGV2aWNlc0FycmF5VG9EaWN0aW9uYXJ5T2JqKHJlc3VsdCwgZmFsc2UsIHRydWUpO1xuICAgICAgICB9XG4gICAgICAgIGxldCBnY21pZERldmljZXNPbmx5ID0gdGhpcy5yZXRyaXZlRmlsdGVyZWREaWN0aW9uYXJ5VmFsdWUocmVzdWx0LCBcImdjbWlkXCIpXG4gICAgICAgIHJldHVybiBbZ2NtaWREZXZpY2VzT25seSwgR0NNaWREZXZpY2VzRGljdF07XG4gICAgICB9KTtcbiAgfVxuXG4gIHJlamVjdGVkUHJvbWlzZSgpIHtcbiAgICBsZXQgZGV2aWNlRGVmZXJyZWQgPSB0aGlzLiRxLmRlZmVyKCk7XG4gICAgZGV2aWNlRGVmZXJyZWQucmVqZWN0KClcbiAgICByZXR1cm4gZGV2aWNlRGVmZXJyZWQucHJvbWlzZVxuICB9O1xuXG5cbiAgc2VhcmNoRGV2aWNlcyhwYXJ0aWFsU2VhcmNoLCBidXR0b24sIGJ5VGVuYW50LCB0ZW5hbnRLZXksIGRpc3RyaWJ1dG9yS2V5LCB1bm1hbmFnZWQpIHtcbiAgICBsZXQgZGVmZXJyZWQgPSB0aGlzLiRxLmRlZmVyKCk7XG4gICAgbGV0IGRldmljZXNQcm9taXNlO1xuICAgIGlmIChwYXJ0aWFsU2VhcmNoKSB7XG4gICAgICBpZiAocGFydGlhbFNlYXJjaC5sZW5ndGggPiAyKSB7XG4gICAgICAgIGlmIChidXR0b24gPT09IFwiU2VyaWFsIE51bWJlclwiKSB7XG4gICAgICAgICAgaWYgKGJ5VGVuYW50KSB7XG4gICAgICAgICAgICBkZXZpY2VzUHJvbWlzZSA9IHRoaXMuZXhlY3V0ZVNlYXJjaGluZ1BhcnRpYWxTZXJpYWxCeVRlbmFudCh0ZW5hbnRLZXksIHBhcnRpYWxTZWFyY2gsIHVubWFuYWdlZClcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZGV2aWNlc1Byb21pc2UgPSB0aGlzLmV4ZWN1dGVTZWFyY2hpbmdQYXJ0aWFsU2VyaWFsQnlEaXN0cmlidXRvcihkaXN0cmlidXRvcktleSwgcGFydGlhbFNlYXJjaCwgdW5tYW5hZ2VkKVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmIChidXR0b24gPT09IFwiTUFDXCIpIHtcbiAgICAgICAgICBpZiAoYnlUZW5hbnQpIHtcbiAgICAgICAgICAgIGRldmljZXNQcm9taXNlID0gdGhpcy5leGVjdXRlU2VhcmNoaW5nUGFydGlhbE1hY0J5VGVuYW50KHRlbmFudEtleSwgcGFydGlhbFNlYXJjaCwgdW5tYW5hZ2VkKVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBkZXZpY2VzUHJvbWlzZSA9IHRoaXMuZXhlY3V0ZVNlYXJjaGluZ1BhcnRpYWxNYWNCeURpc3RyaWJ1dG9yKGRpc3RyaWJ1dG9yS2V5LCBwYXJ0aWFsU2VhcmNoLCB1bm1hbmFnZWQpXG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGlmIChieVRlbmFudCkge1xuICAgICAgICAgICAgZGV2aWNlc1Byb21pc2UgPSB0aGlzLmV4ZWN1dGVTZWFyY2hpbmdQYXJ0aWFsR0NNaWRCeVRlbmFudCh0ZW5hbnRLZXksIHBhcnRpYWxTZWFyY2gsIHVubWFuYWdlZClcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZGV2aWNlc1Byb21pc2UgPSB0aGlzLmV4ZWN1dGVTZWFyY2hpbmdQYXJ0aWFsR0NNaWRCeURpc3RyaWJ1dG9yKGRpc3RyaWJ1dG9yS2V5LCBwYXJ0aWFsU2VhcmNoLCB1bm1hbmFnZWQpXG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkZXZpY2VzUHJvbWlzZSA9IHRoaXMucmVqZWN0ZWRQcm9taXNlKClcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgZGV2aWNlc1Byb21pc2UgPSB0aGlzLnJlamVjdGVkUHJvbWlzZSgpXG4gICAgfVxuXG4gICAgZGV2aWNlc1Byb21pc2UudGhlbihmdW5jdGlvbiAoZGV2aWNlc1Jlc3VsdCkge1xuICAgICAgZGVmZXJyZWQucmVzb2x2ZSh7XG4gICAgICAgIFwic3VjY2Vzc1wiOiB0cnVlLFxuICAgICAgICBcImRldmljZXNcIjogZGV2aWNlc1Jlc3VsdFxuICAgICAgfSlcbiAgICB9KVxuXG4gICAgZGV2aWNlc1Byb21pc2UuY2F0Y2goZnVuY3Rpb24gKGRldmljZXNSZXN1bHQpIHtcbiAgICAgIGRlZmVycmVkLnJlc29sdmUoe1xuICAgICAgICBcInN1Y2Nlc3NcIjogZmFsc2UsXG4gICAgICAgIFwiZGV2aWNlc1wiOiBbXVxuICAgICAgfSlcbiAgICB9KVxuXG4gICAgcmV0dXJuIGRlZmVycmVkLnByb21pc2VcbiAgfVxuXG4gIGNvbnZlcnREZXZpY2VzQXJyYXlUb0RpY3Rpb25hcnlPYmoodGhlQXJyYXksIG1hYywgZ2NtKSB7XG4gICAgLyoqIENvbnZlcnRzIGFycmF5IHRvIGRpY3Rpb25hcnkgd2l0aCBtYWMsIGdjbWlkLCBvciBzZXJpYWwgYXMgdGhlIGtleSAqKi9cbiAgICBsZXQgZGV2aWNlcyA9IHt9O1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhlQXJyYXkubGVuZ3RoOyBpKyspIHtcbiAgICAgIGxldCBpdGVtID0gdGhlQXJyYXlbaV07XG4gICAgICBpZiAobWFjKSB7XG4gICAgICAgIGRldmljZXNbaXRlbS5tYWNdID0gaXRlbTtcbiAgICAgIH0gZWxzZSBpZiAoZ2NtKSB7XG4gICAgICAgIGRldmljZXNbaXRlbS5nY21pZF0gPSBpdGVtO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGV2aWNlc1tpdGVtLnNlcmlhbF0gPSBpdGVtO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZGV2aWNlcztcbiAgfTtcblxuICBlZGl0SXRlbShpdGVtLCBmcm9tRGV2aWNlcykge1xuICAgIGlmICghZnJvbURldmljZXMpIHtcbiAgICAgIGZyb21EZXZpY2VzID0gZmFsc2VcbiAgICB9XG4gICAgdGhpcy4kc3RhdGUuZ28oJ2VkaXREZXZpY2UnLCB7XG4gICAgICBkZXZpY2VLZXk6IGl0ZW0ua2V5LFxuICAgICAgdGVuYW50S2V5OiBpdGVtLnRlbmFudEtleSxcbiAgICAgIGZyb21EZXZpY2VzOiBmcm9tRGV2aWNlc1xuICAgIH0pO1xuICB9XG5cbiAgcHJlcHJhdGVGb3JFZGl0VmlldyhidXR0b24sIHRlbmFudEtleSwgc2VhcmNoVGV4dCwgbWFjRGV2aWNlcywgc2VyaWFsRGV2aWNlcywgZ2NtaWREZXZpY2VzKSB7XG4gICAgbGV0IG1hYywgc2VyaWFsLCBnY21pZDtcblxuICAgIG1hYyA9IGJ1dHRvbiA9PT0gXCJNQUNcIjtcbiAgICBzZXJpYWwgPSBidXR0b24gPT09IFwiU2VyaWFsIE51bWJlclwiO1xuICAgIGdjbWlkID0gYnV0dG9uID09PSBcIkdDTSBJRFwiXG5cbiAgICBpZiAobWFjKSB7XG4gICAgICByZXR1cm4gdGhpcy5lZGl0SXRlbShtYWNEZXZpY2VzW3NlYXJjaFRleHRdKTtcbiAgICB9IGVsc2UgaWYgKHNlcmlhbCkge1xuICAgICAgcmV0dXJuIHRoaXMuZWRpdEl0ZW0oc2VyaWFsRGV2aWNlc1tzZWFyY2hUZXh0XSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB0aGlzLmVkaXRJdGVtKGdjbWlkRGV2aWNlc1tzZWFyY2hUZXh0XSlcbiAgICB9XG5cbiAgfVxuXG4gIGdldElzc3Vlc0J5S2V5KGRldmljZUtleSwgc3RhcnRFcG9jaCwgZW5kRXBvY2gsIHByZXYsIG5leHQpIHtcbiAgICBwcmV2ID0gcHJldiA9PT0gdW5kZWZpbmVkIHx8IG51bGwgPyBudWxsIDogcHJldjtcbiAgICBuZXh0ID0gbmV4dCA9PT0gdW5kZWZpbmVkIHx8IG51bGwgPyBudWxsIDogbmV4dDtcbiAgICBsZXQgdXJsID0gYC9hcGkvdjEvZGV2aWNlcy8ke3ByZXZ9LyR7bmV4dH0vJHtkZXZpY2VLZXl9L2lzc3Vlcz9zdGFydD0ke3N0YXJ0RXBvY2h9JmVuZD0ke2VuZEVwb2NofWA7XG4gICAgbGV0IHByb21pc2UgPSB0aGlzLlJlc3Rhbmd1bGFyLm9uZVVybCh0aGlzLlNFUlZJQ0VfTkFNRSwgdXJsKS5nZXQoKTtcbiAgICByZXR1cm4gcHJvbWlzZTtcbiAgfVxuXG4gIGdldENvbW1hbmRFdmVudHNCeUtleShkZXZpY2VLZXksIHByZXYsIG5leHQpIHtcbiAgICBwcmV2ID0gcHJldiA9PT0gdW5kZWZpbmVkIHx8IG51bGwgPyBudWxsIDogcHJldjtcbiAgICBuZXh0ID0gbmV4dCA9PT0gdW5kZWZpbmVkIHx8IG51bGwgPyBudWxsIDogbmV4dDtcbiAgICBsZXQgdXJsID0gYC9hcGkvdjEvcGxheWVyLWNvbW1hbmQtZXZlbnRzLyR7cHJldn0vJHtuZXh0fS8ke2RldmljZUtleX1gO1xuICAgIGxldCBwcm9taXNlID0gdGhpcy5SZXN0YW5ndWxhci5vbmVVcmwodGhpcy5TRVJWSUNFX05BTUUsIHVybCkuZ2V0KCk7XG4gICAgcmV0dXJuIHByb21pc2U7XG4gIH1cblxuICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gIC8vIFRFTkFOVCBWSUVXXG4gIC8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgZ2V0RGV2aWNlc0J5VGVuYW50KHRlbmFudEtleSwgcHJldiwgbmV4dCkge1xuICAgIGlmICh0ZW5hbnRLZXkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgbGV0IHVybCA9IHRoaXMubWFrZURldmljZXNCeVRlbmFudFVSTCh0ZW5hbnRLZXksIHByZXYsIG5leHQsIGZhbHNlKTtcbiAgICAgIHJldHVybiB0aGlzLlJlc3Rhbmd1bGFyLm9uZVVybCh0aGlzLlNFUlZJQ0VfTkFNRSwgdXJsKS5nZXQoKTtcbiAgICB9XG4gIH1cblxuICBnZXRVbm1hbmFnZWREZXZpY2VzQnlUZW5hbnQodGVuYW50S2V5LCBwcmV2LCBuZXh0KSB7XG4gICAgaWYgKHRlbmFudEtleSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBsZXQgZGVmZXJyZWQgPSB0aGlzLiRxLmRlZmVyKCk7XG4gICAgICBsZXQgdXJsID0gdGhpcy5tYWtlRGV2aWNlc0J5VGVuYW50VVJMKHRlbmFudEtleSwgcHJldiwgbmV4dCwgdHJ1ZSk7XG4gICAgICByZXR1cm4gdGhpcy5SZXN0YW5ndWxhci5vbmVVcmwodGhpcy5TRVJWSUNFX05BTUUsIHVybCkuZ2V0KCk7XG4gICAgfVxuICB9XG5cbiAgc2VhcmNoRGV2aWNlc0J5UGFydGlhbFNlcmlhbEJ5VGVuYW50KHRlbmFudEtleSwgcGFydGlhbF9zZXJpYWwsIHVubWFuYWdlZCkge1xuICAgIGlmICh0ZW5hbnRLZXkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgbGV0IHVybCA9IGAvYXBpL3YxL3RlbmFudHMvc2VhcmNoLyR7dGVuYW50S2V5fS9kZXZpY2VzP3VubWFuYWdlZD0ke3VubWFuYWdlZH0mcGFydGlhbF9zZXJpYWw9JHtwYXJ0aWFsX3NlcmlhbH1gO1xuICAgICAgbGV0IHByb21pc2UgPSB0aGlzLlJlc3Rhbmd1bGFyLm9uZVVybCh0aGlzLlNFUlZJQ0VfTkFNRSwgdXJsKS5nZXQoKTtcbiAgICAgIHJldHVybiBwcm9taXNlO1xuICAgIH1cbiAgfVxuXG4gIHNlYXJjaERldmljZXNCeVBhcnRpYWxNYWNCeVRlbmFudCh0ZW5hbnRLZXksIHBhcnRpYWxfbWFjLCB1bm1hbmFnZWQpIHtcbiAgICBpZiAodGVuYW50S2V5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGxldCB1cmwgPSBgL2FwaS92MS90ZW5hbnRzL3NlYXJjaC8ke3RlbmFudEtleX0vZGV2aWNlcz91bm1hbmFnZWQ9JHt1bm1hbmFnZWR9JnBhcnRpYWxfbWFjPSR7cGFydGlhbF9tYWN9YDtcbiAgICAgIGxldCBwcm9taXNlID0gdGhpcy5SZXN0YW5ndWxhci5vbmVVcmwodGhpcy5TRVJWSUNFX05BTUUsIHVybCkuZ2V0KCk7XG4gICAgICByZXR1cm4gcHJvbWlzZTtcbiAgICB9XG4gIH1cblxuICBzZWFyY2hEaXN0cmlidXRvckRldmljZXNCeVBhcnRpYWxHQ01pZEJ5VGVuYW50KHRlbmFudEtleSwgcGFydGlhbF9nY21pZCwgdW5tYW5hZ2VkKSB7XG4gICAgaWYgKHRlbmFudEtleSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBsZXQgdXJsID0gYC9hcGkvdjEvdGVuYW50cy9zZWFyY2gvJHt0ZW5hbnRLZXl9L2RldmljZXM/dW5tYW5hZ2VkPSR7dW5tYW5hZ2VkfSZwYXJ0aWFsX2djbWlkPSR7cGFydGlhbF9nY21pZH1gO1xuICAgICAgbGV0IHByb21pc2UgPSB0aGlzLlJlc3Rhbmd1bGFyLm9uZVVybCh0aGlzLlNFUlZJQ0VfTkFNRSwgdXJsKS5nZXQoKTtcbiAgICAgIHJldHVybiBwcm9taXNlO1xuICAgIH1cbiAgfVxuXG5cbiAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAvLyBERVZJQ0VTIFZJRVdcbiAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICBzZWFyY2hEZXZpY2VzQnlQYXJ0aWFsU2VyaWFsKGRpc3RyaWJ1dG9yS2V5LCBwYXJ0aWFsX3NlcmlhbCwgdW5tYW5hZ2VkKSB7XG4gICAgaWYgKGRpc3RyaWJ1dG9yS2V5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGxldCB1cmwgPSBgL2FwaS92MS9kaXN0cmlidXRvcnMvc2VhcmNoLyR7ZGlzdHJpYnV0b3JLZXl9L2RldmljZXM/dW5tYW5hZ2VkPSR7dW5tYW5hZ2VkfSZwYXJ0aWFsX3NlcmlhbD0ke3BhcnRpYWxfc2VyaWFsfWA7XG4gICAgICBsZXQgcHJvbWlzZSA9IHRoaXMuUmVzdGFuZ3VsYXIub25lVXJsKHRoaXMuU0VSVklDRV9OQU1FLCB1cmwpLmdldCgpO1xuICAgICAgcmV0dXJuIHByb21pc2U7XG4gICAgfVxuICB9XG5cbiAgc2VhcmNoRGV2aWNlc0J5UGFydGlhbE1hYyhkaXN0cmlidXRvcktleSwgcGFydGlhbF9tYWMsIHVubWFuYWdlZCkge1xuICAgIGlmIChkaXN0cmlidXRvcktleSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBsZXQgdXJsID0gYC9hcGkvdjEvZGlzdHJpYnV0b3JzL3NlYXJjaC8ke2Rpc3RyaWJ1dG9yS2V5fS9kZXZpY2VzP3VubWFuYWdlZD0ke3VubWFuYWdlZH0mcGFydGlhbF9tYWM9JHtwYXJ0aWFsX21hY31gO1xuICAgICAgbGV0IHByb21pc2UgPSB0aGlzLlJlc3Rhbmd1bGFyLm9uZVVybCh0aGlzLlNFUlZJQ0VfTkFNRSwgdXJsKS5nZXQoKTtcbiAgICAgIHJldHVybiBwcm9taXNlO1xuICAgIH1cbiAgfVxuXG4gIHNlYXJjaERpc3RyaWJ1dG9yRGV2aWNlc0J5UGFydGlhbEdDTWlkKGRpc3RyaWJ1dG9yS2V5LCBwYXJ0aWFsX2djbWlkLCB1bm1hbmFnZWQpIHtcbiAgICBpZiAoZGlzdHJpYnV0b3JLZXkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgbGV0IHVybCA9IGAvYXBpL3YxL2Rpc3RyaWJ1dG9ycy9zZWFyY2gvJHtkaXN0cmlidXRvcktleX0vZGV2aWNlcz91bm1hbmFnZWQ9JHt1bm1hbmFnZWR9JnBhcnRpYWxfZ2NtaWQ9JHtwYXJ0aWFsX2djbWlkfWA7XG4gICAgICBsZXQgcHJvbWlzZSA9IHRoaXMuUmVzdGFuZ3VsYXIub25lVXJsKHRoaXMuU0VSVklDRV9OQU1FLCB1cmwpLmdldCgpO1xuICAgICAgcmV0dXJuIHByb21pc2U7XG4gICAgfVxuICB9XG5cbiAgZ2V0RGV2aWNlc0J5RGlzdHJpYnV0b3IoZGlzdHJpYnV0b3JLZXksIHByZXYsIG5leHQpIHtcbiAgICBpZiAoZGlzdHJpYnV0b3JLZXkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgbGV0IHVybCA9IHRoaXMubWFrZURldmljZXNCeURpc3RyaWJ1dG9yVVJMKGRpc3RyaWJ1dG9yS2V5LCBwcmV2LCBuZXh0LCBmYWxzZSk7XG4gICAgICByZXR1cm4gdGhpcy5SZXN0YW5ndWxhci5vbmVVcmwodGhpcy5TRVJWSUNFX05BTUUsIHVybCkuZ2V0KCk7XG4gICAgfVxuICB9XG5cbiAgZ2V0VW5tYW5hZ2VkRGV2aWNlc0J5RGlzdHJpYnV0b3IoZGlzdHJpYnV0b3JLZXksIHByZXYsIG5leHQpIHtcbiAgICBpZiAoZGlzdHJpYnV0b3JLZXkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgbGV0IHVybCA9IHRoaXMubWFrZURldmljZXNCeURpc3RyaWJ1dG9yVVJMKGRpc3RyaWJ1dG9yS2V5LCBwcmV2LCBuZXh0LCB0cnVlKTtcbiAgICAgIHJldHVybiB0aGlzLlJlc3Rhbmd1bGFyLm9uZVVybCh0aGlzLlNFUlZJQ0VfTkFNRSwgdXJsKS5nZXQoKTtcbiAgICB9XG4gIH1cblxuICBnZXREZXZpY2VzKCkge1xuICAgIGxldCBwcm9taXNlID0gdGhpcy5SZXN0YW5ndWxhci5hbGwodGhpcy5TRVJWSUNFX05BTUUpLmdldExpc3QoKTtcbiAgICByZXR1cm4gcHJvbWlzZTtcbiAgfVxuXG4gIHNhdmUoZGV2aWNlKSB7XG4gICAgaWYgKGRldmljZS5rZXkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgdmFyIHByb21pc2UgPSBkZXZpY2UucHV0KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBwcm9taXNlID0gdGhpcy5SZXN0YW5ndWxhci5zZXJ2aWNlKCdkZXZpY2VzJykucG9zdChkZXZpY2UpO1xuICAgIH1cbiAgICByZXR1cm4gcHJvbWlzZTtcbiAgfVxuXG4gIHNhdmVPdmVybGF5U2V0dGluZ3MoZGV2aWNlX3VybHNhZmVfa2V5LCBib3R0b21fbGVmdCwgYm90dG9tX3JpZ2h0LCB0b3BfcmlnaHQsIHRvcF9sZWZ0KSB7XG4gICAgbGV0IHBheWxvYWQgPSB7XG4gICAgICBib3R0b21fbGVmdCxcbiAgICAgIGJvdHRvbV9yaWdodCxcbiAgICAgIHRvcF9yaWdodCxcbiAgICAgIHRvcF9sZWZ0LFxuICAgIH1cblxuICAgIHJldHVybiB0aGlzLlJlc3Rhbmd1bGFyLm9uZVVybCgnb3ZlcmxheScsIGAvYXBpL3YxL292ZXJsYXkvZGV2aWNlLyR7ZGV2aWNlX3VybHNhZmVfa2V5fWApLmN1c3RvbVBPU1QocGF5bG9hZCk7XG4gIH1cblxuICBkZWxldGUoZGV2aWNlS2V5KSB7XG4gICAgbGV0IHByb21pc2UgPSB0aGlzLlJlc3Rhbmd1bGFyLm9uZSh0aGlzLlNFUlZJQ0VfTkFNRSwgZGV2aWNlS2V5KS5yZW1vdmUoKTtcbiAgICByZXR1cm4gcHJvbWlzZTtcbiAgfVxuXG4gIGdldFBhbmVsTW9kZWxzKCkge1xuICAgIHJldHVybiBbXG4gICAgICB7XG4gICAgICAgICdpZCc6ICdOb25lJyxcbiAgICAgICAgJ2Rpc3BsYXlOYW1lJzogJ05vbmUnXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICAnaWQnOiAnU29ueS1GWEQ0MExYMkYnLFxuICAgICAgICAnZGlzcGxheU5hbWUnOiAnU29ueSBGWEQ0MExYMkYnXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICAnaWQnOiAnTkVDLUxDRDQyMTUnLFxuICAgICAgICAnZGlzcGxheU5hbWUnOiAnTkVDIExDRDQyMTUnXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICAnaWQnOiAnUGhpbGxpcHMtQkRMNTU2MEVMJyxcbiAgICAgICAgJ2Rpc3BsYXlOYW1lJzogJ1BoaWxsaXBzIEJETDU1NjBFTCdcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgICdpZCc6ICdQYW5hc29uaWMtVEg1NUxGNlUnLFxuICAgICAgICAnZGlzcGxheU5hbWUnOiAnUGFuYXNvbmljIFRINTVMRjZVJ1xuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgJ2lkJzogJ1NoYXJwLVBORTUyMScsXG4gICAgICAgICdkaXNwbGF5TmFtZSc6ICdTaGFycCBQTkU1MjEnXG4gICAgICB9XG4gICAgXTtcbiAgfVxuXG4gIGdldFBhbmVsSW5wdXRzKCkge1xuICAgIHJldHVybiBbXG4gICAgICB7XG4gICAgICAgICdpZCc6ICdOb25lJyxcbiAgICAgICAgJ3BhcmVudElkJzogJ05vbmUnXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICAnaWQnOiAnSERNSTEnLFxuICAgICAgICAncGFyZW50SWQnOiAnU29ueS1GWEQ0MExYMkYnXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICAnaWQnOiAnSERNSTInLFxuICAgICAgICAncGFyZW50SWQnOiAnU29ueS1GWEQ0MExYMkYnXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICAnaWQnOiAnSERNSTEnLFxuICAgICAgICAncGFyZW50SWQnOiAnUGhpbGxpcHMtQkRMNTU2MEVMJ1xuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgJ2lkJzogJ0hETUkyJyxcbiAgICAgICAgJ3BhcmVudElkJzogJ1BoaWxsaXBzLUJETDU1NjBFTCdcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgICdpZCc6ICdEVkknLFxuICAgICAgICAncGFyZW50SWQnOiAnUGhpbGxpcHMtQkRMNTU2MEVMJ1xuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgJ2lkJzogJ0hETUkxJyxcbiAgICAgICAgJ3BhcmVudElkJzogJ1BhbmFzb25pYy1USDU1TEY2VSdcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgICdpZCc6ICdIRE1JMicsXG4gICAgICAgICdwYXJlbnRJZCc6ICdQYW5hc29uaWMtVEg1NUxGNlUnXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICAnaWQnOiAnRFZJJyxcbiAgICAgICAgJ3BhcmVudElkJzogJ1BhbmFzb25pYy1USDU1TEY2VSdcbiAgICAgIH0sXG4gICAgICB7XG4gICAgICAgICdpZCc6ICdIRE1JMScsXG4gICAgICAgICdwYXJlbnRJZCc6ICdTaGFycC1QTkU1MjEnXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICAnaWQnOiAnSERNSTInLFxuICAgICAgICAncGFyZW50SWQnOiAnU2hhcnAtUE5FNTIxJ1xuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgJ2lkJzogJ0RWSScsXG4gICAgICAgICdwYXJlbnRJZCc6ICdTaGFycC1QTkU1MjEnXG4gICAgICB9LFxuICAgICAge1xuICAgICAgICAnaWQnOiAnVkdBJyxcbiAgICAgICAgJ3BhcmVudElkJzogJ05FQy1MQ0Q0MjE1J1xuICAgICAgfSxcbiAgICAgIHtcbiAgICAgICAgJ2lkJzogJ0RWSTEnLFxuICAgICAgICAncGFyZW50SWQnOiAnTkVDLUxDRDQyMTUnXG4gICAgICB9XG4gICAgXTtcbiAgfVxuXG4gIG1ha2VEZXZpY2VzQnlEaXN0cmlidXRvclVSTChkaXN0cmlidXRvcktleSwgcHJldiwgbmV4dCwgdW5tYW5hZ2VkKSB7XG4gICAgbGV0IHVybCA9IGAvYXBpL3YxL2Rpc3RyaWJ1dG9ycy8ke2Rpc3RyaWJ1dG9yS2V5fS9kZXZpY2VzP3VubWFuYWdlZD0ke3VubWFuYWdlZH0mbmV4dF9jdXJzb3I9JHtuZXh0fSZwcmV2X2N1cnNvcj0ke3ByZXZ9YDtcbiAgICByZXR1cm4gdXJsXG4gIH1cblxuICBtYWtlRGV2aWNlc0J5VGVuYW50VVJMKHRlbmFudEtleSwgcHJldiwgbmV4dCwgdW5tYW5hZ2VkKSB7XG4gICAgbGV0IHVybCA9IGAvYXBpL3YxL3RlbmFudHMvJHt0ZW5hbnRLZXl9L2RldmljZXM/dW5tYW5hZ2VkPSR7dW5tYW5hZ2VkfSZuZXh0X2N1cnNvcj0ke25leHR9JnByZXZfY3Vyc29yPSR7cHJldn1gO1xuICAgIHJldHVybiB1cmxcbiAgfVxufVxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zcmMvYXBwL3NlcnZpY2VzL2RldmljZXMuc2VydmljZS5qc1xuICoqLyIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIERpc3RyaWJ1dG9yc1NlcnZpY2Uge1xuXG4gIGNvbnN0cnVjdG9yKFJlc3Rhbmd1bGFyLCAkc3RhdGUsIFNlc3Npb25zU2VydmljZSkge1xuICAgICduZ0luamVjdCc7XG4gICAgdGhpcy5SZXN0YW5ndWxhciA9IFJlc3Rhbmd1bGFyO1xuICAgIHRoaXMuJHN0YXRlID0gJHN0YXRlO1xuICAgIHRoaXMuU2Vzc2lvbnNTZXJ2aWNlID0gU2Vzc2lvbnNTZXJ2aWNlO1xuICAgIHRoaXMuRElTVFJJQlVUT1JfU0VSVklDRSA9ICdkaXN0cmlidXRvcnMnO1xuICB9XG5cbiAgc2F2ZSh0ZW5hbnQpIHtcbiAgICBpZiAodGVuYW50LmtleSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICB2YXIgcHJvbWlzZSA9IHRlbmFudC5wdXQoKTtcbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHByb21pc2UgPSB0aGlzLlJlc3Rhbmd1bGFyLnNlcnZpY2UodGhpcy5ESVNUUklCVVRPUl9TRVJWSUNFKS5wb3N0KHRlbmFudCk7XG4gICAgfVxuICAgIHJldHVybiBwcm9taXNlO1xuICB9XG5cbiAgZmV0Y2hBbGwoKSB7XG4gICAgbGV0IHByb21pc2UgPSB0aGlzLlJlc3Rhbmd1bGFyLmFsbCh0aGlzLkRJU1RSSUJVVE9SX1NFUlZJQ0UpLmdldExpc3QoKTtcbiAgICByZXR1cm4gcHJvbWlzZTtcbiAgfVxuXG4gIGZldGNoQWxsQnlVc2VyKHVzZXJLZXkpIHtcbiAgICBpZiAodXNlcktleSkge1xuICAgICAgbGV0IHByb21pc2UgPSB0aGlzLlJlc3Rhbmd1bGFyLm9uZSgndXNlcnMnLCB1c2VyS2V5KS5kb0dFVCh0aGlzLkRJU1RSSUJVVE9SX1NFUlZJQ0UpO1xuICAgICAgcmV0dXJuIHByb21pc2U7XG4gICAgfVxuICB9XG5cbiAgZ2V0QnlLZXkoa2V5KSB7XG4gICAgbGV0IHByb21pc2UgPSB0aGlzLlJlc3Rhbmd1bGFyLm9uZVVybCh0aGlzLkRJU1RSSUJVVE9SX1NFUlZJQ0UsIGBhcGkvdjEvZGlzdHJpYnV0b3JzLyR7a2V5fWApLmdldCgpO1xuICAgIHJldHVybiBwcm9taXNlO1xuICB9XG5cbiAgZGVsZXRlKGVudGl0eSkge1xuICAgIGlmIChlbnRpdHkua2V5KSB7XG4gICAgICBsZXQgcHJvbWlzZSA9IHRoaXMuUmVzdGFuZ3VsYXIub25lKHRoaXMuRElTVFJJQlVUT1JfU0VSVklDRSwgZW50aXR5LmtleSkucmVtb3ZlKCk7XG4gICAgICByZXR1cm4gcHJvbWlzZTtcbiAgICB9XG4gIH1cblxuICBnZXRCeU5hbWUobmFtZSkge1xuICAgIGxldCBwcm9taXNlID0gdGhpcy5SZXN0YW5ndWxhci5hbGwodGhpcy5ESVNUUklCVVRPUl9TRVJWSUNFKS5nZXRMaXN0KHtkaXN0cmlidXRvck5hbWU6IG5hbWV9KTtcbiAgICByZXR1cm4gcHJvbWlzZTtcbiAgfVxuXG4gIGdldERvbWFpbnNCeUtleShrZXkpIHtcbiAgICBsZXQgcHJvbWlzZSA9IHRoaXMuUmVzdGFuZ3VsYXIub25lVXJsKHRoaXMuRElTVFJJQlVUT1JfU0VSVklDRSwgYGFwaS92MS9kaXN0cmlidXRvcnMvJHtrZXl9L2RvbWFpbnNgKS5nZXQoKTtcbiAgICByZXR1cm4gcHJvbWlzZTtcbiAgfVxuXG4gIHN3aXRjaERpc3RyaWJ1dG9yKGRpc3RyaWJ1dG9yKSB7XG4gICAgdGhpcy5TZXNzaW9uc1NlcnZpY2Uuc2V0Q3VycmVudERpc3RyaWJ1dG9yTmFtZShkaXN0cmlidXRvci5uYW1lKTtcbiAgICB0aGlzLlNlc3Npb25zU2VydmljZS5zZXRDdXJyZW50RGlzdHJpYnV0b3JLZXkoZGlzdHJpYnV0b3Iua2V5KTtcbiAgICByZXR1cm4gdGhpcy4kc3RhdGUuZ28oJ3dlbGNvbWUnKTtcbiAgfVxufVxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zcmMvYXBwL3NlcnZpY2VzL2Rpc3RyaWJ1dG9ycy5zZXJ2aWNlLmpzXG4gKiovIiwiZXhwb3J0IGRlZmF1bHQgIGNsYXNzIERvbWFpbnNTZXJ2aWNlIHtcblxuICBjb25zdHJ1Y3RvcihSZXN0YW5ndWxhcikge1xuICAgICduZ0luamVjdCc7XG4gICAgdGhpcy5SZXN0YW5ndWxhciA9IFJlc3Rhbmd1bGFyXG4gIH1cblxuICBzYXZlKGRvbWFpbikge1xuICAgIGlmIChkb21haW4ua2V5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHZhciBwcm9taXNlID0gZG9tYWluLnB1dCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgcHJvbWlzZSA9IHRoaXMuUmVzdGFuZ3VsYXIuc2VydmljZSgnZG9tYWlucycpLnBvc3QoZG9tYWluKTtcbiAgICB9XG4gICAgcmV0dXJuIHByb21pc2U7XG4gIH1cblxuICBmZXRjaEFsbERvbWFpbnMoKSB7XG4gICAgbGV0IHByb21pc2UgPSB0aGlzLlJlc3Rhbmd1bGFyLmFsbCgnZG9tYWlucycpLmdldExpc3QoKTtcbiAgICByZXR1cm4gcHJvbWlzZTtcbiAgfVxuXG4gIGdldERvbWFpbkJ5S2V5KGRvbWFpbktleSkge1xuICAgIGxldCBwcm9taXNlID0gdGhpcy5SZXN0YW5ndWxhci5vbmVVcmwoJ2RvbWFpbnMnLCBgYXBpL3YxL2RvbWFpbnMvJHtkb21haW5LZXl9YCkuZ2V0KCk7XG4gICAgcmV0dXJuIHByb21pc2U7XG4gIH1cblxuICBnZXREaXJlY3RvcnlBcGlDb25uZWN0aXZpdHlJbmZvcm1hdGlvbihkb21haW5LZXkpIHtcbiAgICBsZXQgcHJvbWlzZSA9IHRoaXMuUmVzdGFuZ3VsYXIub25lVXJsKCdkb21haW5zJywgYGFwaS92MS9kb21haW5zLyR7ZG9tYWluS2V5fS9kaXJlY3RvcnlfYXBpYCkuZ2V0KCk7XG4gICAgcmV0dXJuIHByb21pc2U7XG4gIH1cblxuICBkZWxldGUoZG9tYWluKSB7XG4gICAgaWYgKGRvbWFpbi5rZXkgIT09IHVuZGVmaW5lZCkge1xuICAgICAgbGV0IHByb21pc2UgPSB0aGlzLlJlc3Rhbmd1bGFyLm9uZShcImRvbWFpbnNcIiwgZG9tYWluLmtleSkucmVtb3ZlKCk7XG4gICAgICByZXR1cm4gcHJvbWlzZTtcbiAgICB9XG4gIH1cbn1cblxuXG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL3NyYy9hcHAvc2VydmljZXMvZG9tYWlucy5zZXJ2aWNlLmpzXG4gKiovIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgSWRlbnRpdHlTZXJ2aWNlIHtcblxuICBjb25zdHJ1Y3RvcihSZXN0YW5ndWxhcikge1xuICAgICduZ0luamVjdCc7XG4gICAgdGhpcy5SZXN0YW5ndWxhciA9IFJlc3Rhbmd1bGFyO1xuICB9XG5cbiAgZ2V0SWRlbnRpdHkoKSB7XG4gICAgcmV0dXJuIHRoaXMuUmVzdGFuZ3VsYXIub25lVXJsKCdpZGVudGl0eScpLmdldCgpO1xuICB9XG59XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL3NyYy9hcHAvc2VydmljZXMvaWRlbnRpdHkuc2VydmljZS5qc1xuICoqLyIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIEludGVncmF0aW9uRXZlbnRzIHtcblxuICBjb25zdHJ1Y3RvcihSZXN0YW5ndWxhcikge1xuICAgICduZ0luamVjdCc7XG4gICAgdGhpcy5SZXN0YW5ndWxhciA9IFJlc3Rhbmd1bGFyXG4gICAgdGhpcy5DUkVBVEVfVEVOQU5UX0VWRU5UUyA9ICdpbnRlZ3JhdGlvbl9ldmVudHMvdGVuYW50X2NyZWF0ZSc7XG4gICAgdGhpcy5FTlJPTExNRU5UX0VWRU5UUyA9ICdpbnRlZ3JhdGlvbl9ldmVudHMvZW5yb2xsbWVudCc7XG4gIH1cblxuICAgZ2V0VGVuYW50Q3JlYXRlRXZlbnRzKHRlbmFudEtleSkge1xuICAgIGxldCBxdWVyeSA9IHtcbiAgICAgIHRlbmFudEtleVxuICAgIH07XG4gICAgcmV0dXJuIHRoaXMuUmVzdGFuZ3VsYXIuYWxsKHRoaXMuQ1JFQVRFX1RFTkFOVF9FVkVOVFMpLmN1c3RvbUdFVCgnJywgcXVlcnkpO1xuICB9XG5cbiAgZ2V0RW5yb2xsbWVudEV2ZW50cyhkZXZpY2VLZXkpIHtcbiAgICBsZXQgcXVlcnkgPSB7XG4gICAgICBkZXZpY2VLZXlcbiAgICB9O1xuICAgIHJldHVybiB0aGlzLlJlc3Rhbmd1bGFyLmFsbCh0aGlzLkVOUk9MTE1FTlRfRVZFTlRTKS5jdXN0b21HRVQoJycsIHF1ZXJ5KTtcbiAgfVxufVxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zcmMvYXBwL3NlcnZpY2VzL2ludGVncmF0aW9uLWV2ZW50cy5zZXJ2aWNlLmpzXG4gKiovIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgTG9jYXRpb25zU2VydmljZSB7XG5cbiAgY29uc3RydWN0b3IoUmVzdGFuZ3VsYXIpIHtcbiAgICAnbmdJbmplY3QnO1xuICAgIHRoaXMuUmVzdGFuZ3VsYXIgPSBSZXN0YW5ndWxhcjtcbiAgfVxuXG4gIHNhdmUobG9jYXRpb24pIHtcbiAgICBpZiAobG9jYXRpb24ua2V5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHZhciBwcm9taXNlID0gbG9jYXRpb24ucHV0KCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBwcm9taXNlID0gdGhpcy5SZXN0YW5ndWxhci5zZXJ2aWNlKCdsb2NhdGlvbnMnKS5wb3N0KGxvY2F0aW9uKTtcbiAgICB9XG4gICAgcmV0dXJuIHByb21pc2U7XG4gIH1cblxuICBzZWFyY2hBbGxUZW5hbnRMb2NhdGlvbnNCeU5hbWUodGVuYW50S2V5LCBjdXN0b21lcl9sb2NhdGlvbl9uYW1lKSB7XG4gICAgbGV0IHByb21pc2UgPSB0aGlzLlJlc3Rhbmd1bGFyLmFsbCgndGVuYW50cycpLmN1c3RvbUdFVExJU1QodGVuYW50S2V5ICsgXCIvbG9jYXRpb25zXCIsIHtjdXN0b21lcl9sb2NhdGlvbl9uYW1lOiBjdXN0b21lcl9sb2NhdGlvbl9uYW1lfSlcbiAgICByZXR1cm4gcHJvbWlzZTtcbiAgfVxuXG4gIGdldExvY2F0aW9uc0J5VGVuYW50S2V5KHRlbmFudEtleSkge1xuICAgIGxldCBwcm9taXNlID0gdGhpcy5SZXN0YW5ndWxhci5vbmVVcmwoJ3RlbmFudHMnLCBgYXBpL3YxL3RlbmFudHMvJHt0ZW5hbnRLZXl9L2xvY2F0aW9uc2ApLmdldCgpO1xuICAgIHJldHVybiBwcm9taXNlO1xuICB9XG5cbiAgZ2V0TG9jYXRpb25zQnlUZW5hbnRLZXlQYWdpbmF0ZWQodGVuYW50S2V5LCBwcmV2LCBuZXh0KSB7XG4gICAgcHJldiA9IHByZXYgPT09IHVuZGVmaW5lZCB8fCBudWxsID8gbnVsbCA6IHByZXY7XG4gICAgbmV4dCA9IG5leHQgPT09IHVuZGVmaW5lZCB8fCBudWxsID8gbnVsbCA6IG5leHQ7XG4gICAgbGV0IHByb21pc2UgPSB0aGlzLlJlc3Rhbmd1bGFyLm9uZVVybCgndGVuYW50cycsIGBhcGkvdjEvdGVuYW50cy8ke3RlbmFudEtleX0vJHtwcmV2fS8ke25leHR9L2xvY2F0aW9uc2ApLmdldCgpO1xuICAgIHJldHVybiBwcm9taXNlO1xuICB9XG5cbiAgZ2V0TG9jYXRpb25CeUtleShsb2NhdGlvbktleSkge1xuICAgIGxldCBwcm9taXNlID0gdGhpcy5SZXN0YW5ndWxhci5vbmVVcmwoJ2xvY2F0aW9ucycsIGBhcGkvdjEvbG9jYXRpb25zLyR7bG9jYXRpb25LZXl9YCkuZ2V0KCk7XG4gICAgcmV0dXJuIHByb21pc2U7XG4gIH1cbn1cblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vc3JjL2FwcC9zZXJ2aWNlcy9sb2NhdGlvbnMuc2VydmljZS5qc1xuICoqLyIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIFByb2dyZXNzQmFyU2VydmljZSB7XG5cbiAgY29uc3RydWN0b3IobmdQcm9ncmVzc0ZhY3RvcnkpIHtcbiAgICAnbmdJbmplY3QnO1xuICAgIHRoaXMubmdQcm9ncmVzc0ZhY3RvcnkgPSBuZ1Byb2dyZXNzRmFjdG9yeVxuICAgIHRoaXMucHJvZ3Jlc3NCYXIgPSB0aGlzLm5nUHJvZ3Jlc3NGYWN0b3J5LmNyZWF0ZUluc3RhbmNlKCk7XG4gIH1cblxuICBzdGFydCgpIHtcbiAgICB0aGlzLnByb2dyZXNzQmFyLnNldENvbG9yKCcjMDBGQ0ZGJyk7XG4gICAgdGhpcy5wcm9ncmVzc0Jhci5zZXRIZWlnaHQoJzRweCcpO1xuICAgIHJldHVybiB0aGlzLnByb2dyZXNzQmFyLnN0YXJ0KCk7XG4gIH1cblxuICBjb21wbGV0ZSgpIHtcbiAgICByZXR1cm4gdGhpcy5wcm9ncmVzc0Jhci5jb21wbGV0ZSgpO1xuICB9XG59XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL3NyYy9hcHAvc2VydmljZXMvcHJvZ3Jlc3NiYXIuc2VydmljZS5qc1xuICoqLyIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIFByb29mUGxheVNlcnZpY2Uge1xuXG4gIGNvbnN0cnVjdG9yKCRodHRwLFxuICAgICAgICAgICAgICAkcSxcbiAgICAgICAgICAgICAgJHdpbmRvdyxcbiAgICAgICAgICAgICAgU2Vzc2lvbnNTZXJ2aWNlLFxuICAgICAgICAgICAgICAkc3RhdGVQYXJhbXMsXG4gICAgICAgICAgICAgICRzdGF0ZSxcbiAgICAgICAgICAgICAgVG9hc3RzU2VydmljZSkge1xuICAgICduZ0luamVjdCc7XG4gICAgdGhpcy4kaHR0cCA9ICRodHRwXG4gICAgdGhpcy4kcSA9ICRxXG4gICAgdGhpcy4kd2luZG93ID0gJHdpbmRvd1xuICAgIHRoaXMuU2Vzc2lvbnNTZXJ2aWNlID0gU2Vzc2lvbnNTZXJ2aWNlXG4gICAgdGhpcy4kc3RhdGVQYXJhbXMgPSAkc3RhdGVQYXJhbXNcbiAgICB0aGlzLiRzdGF0ZSA9ICRzdGF0ZVxuICAgIHRoaXMuVG9hc3RzU2VydmljZSA9IFRvYXN0c1NlcnZpY2VcbiAgICB0aGlzLm1ha2VIVFRQUmVxdWVzdCA9IHRoaXMubWFrZUhUVFBSZXF1ZXN0LmJpbmQodGhpcyk7XG4gICAgdGhpcy51cmlCYXNlID0gJ3Byb29mcGxheS9hcGkvdjEnO1xuICB9XG5cbiAgbWFrZUhUVFBVUkwod2hlcmVfdG9fZ28sIHRlbmFudCkge1xuICAgIHJldHVybiB0aGlzLnVyaUJhc2UgKyB3aGVyZV90b19nbyArIHRlbmFudDtcbiAgfVxuXG4gIG1ha2VIVFRQUmVxdWVzdCh3aGVyZV90b19nbywgdGVuYW50KSB7XG4gICAgbGV0IGRlZmVycmVkID0gdGhpcy4kcS5kZWZlcigpO1xuICAgIGxldCB1cmwgPSB0aGlzLm1ha2VIVFRQVVJMKHdoZXJlX3RvX2dvLCB0ZW5hbnQpO1xuICAgIHJldHVybiB0aGlzLiRodHRwLmdldCh1cmwpO1xuICB9XG5cbiAgZ2V0QWxsUmVzb3VyY2VzKHRlbmFudCkge1xuICAgIGxldCByID0gdGhpcy5tYWtlSFRUUFJlcXVlc3QoXCIvcmV0cmlldmVfYWxsX3Jlc291cmNlcy9cIiwgdGVuYW50KTtcbiAgICAvLyB0aGUgY2F0Y2ggaXMgb25seSBkb25lIGhlcmUgYmVjYXVzZSAzIHByb29mIG9mIHBsYXkgdmlld3MgYXJlIGluaXRpbGl6ZWQgYXQgdGhlIHNhbWUgdGltZVxuICAgIC8vIHNvIHRoaXMgY2F0Y2ggd2lsbCBiZSBkb25lIDMgdGltZXMgd2l0aCAzIGVycm9yIG1lc3NhZ2VzIGlmIHdlIGFkZCBpdCB0byBnZXRBbGxEaXNwbGF5cyBhbmQgZ2V0QWxsTG9jYXRpb25zXG4gICAgci5jYXRjaChmdW5jdGlvbiAoZXJyLCBkYXRhKSB7XG4gICAgICBsZXQge3N0YXR1c30gPSBlcnI7XG4gICAgICBpZiAoc3RhdHVzID09PSA0MDMpIHtcbiAgICAgICAgdGhpcy5Ub2FzdHNTZXJ2aWNlLnNob3dFcnJvclRvYXN0KFwiWW91IGFyZSBub3QgYWxsb3dlZCB0byB2aWV3IHRoaXMgdGVuYW50IVwiKTtcbiAgICAgICAgdGhpcy4kc3RhdGUuZ28oJ3Byb29mJywge30pO1xuICAgICAgfVxuICAgICAgaWYgKHN0YXR1cyA9PT0gNDA0KSB7XG4gICAgICAgIHRoaXMuVG9hc3RzU2VydmljZS5zaG93RXJyb3JUb2FzdChcIllvdSBtdXN0IHNlbGVjdCBhIHRlbmFudCBmaXJzdCFcIik7XG4gICAgICAgIHJldHVybiB0aGlzLiRzdGF0ZS5nbygncHJvb2YnLCB7fSk7XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gci50aGVuKGRhdGEgPT4gZGF0YSk7XG4gIH1cblxuXG4gIGdldEFsbERpc3BsYXlzKHRlbmFudCkge1xuICAgIHJldHVybiB0aGlzLm1ha2VIVFRQUmVxdWVzdChcIi9yZXRyaWV2ZV9hbGxfZGlzcGxheXMvXCIsIHRlbmFudCk7XG4gIH1cblxuXG4gIGdldEFsbExvY2F0aW9ucyh0ZW5hbnQpIHtcbiAgICByZXR1cm4gdGhpcy5tYWtlSFRUUFJlcXVlc3QoXCIvcmV0cmlldmVfYWxsX2xvY2F0aW9ucy9cIiwgdGVuYW50KTtcbiAgfVxuXG5cbiAgZ2V0QWxsVGVuYW50cygpIHtcbiAgICByZXR1cm4gdGhpcy5tYWtlSFRUUFJlcXVlc3QoXCIvcmV0cmlldmVfbXlfdGVuYW50c1wiLCAnJyk7XG4gIH1cblxuXG4gIGRvd25sb2FkQ1NWRm9yTXVsdGlwbGVSZXNvdXJjZXNCeURhdGUoc3RhcnRfZGF0ZSwgZW5kX2RhdGUsIHJlc291cmNlcywgdGVuYW50KSB7XG4gICAgbGV0IGFsbFJlc291cmNlcyA9ICcnO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCByZXNvdXJjZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGxldCBlYWNoID0gcmVzb3VyY2VzW2ldO1xuICAgICAgYWxsUmVzb3VyY2VzID0gYWxsUmVzb3VyY2VzICsgXCJ8XCIgKyBlYWNoO1xuICAgIH1cblxuICAgIHRoaXMuJHdpbmRvdy5vcGVuKHRoaXMudXJpQmFzZSArICcvbXVsdGlfcmVzb3VyY2VfYnlfZGF0ZS8nICsgc3RhcnRfZGF0ZSArICcvJyArIGVuZF9kYXRlICsgJy8nICsgYWxsUmVzb3VyY2VzICsgJy8nICtcbiAgICAgIHRlbmFudCArIFwiL1wiICsgdGhpcy5TZXNzaW9uc1NlcnZpY2UuZ2V0Q3VycmVudERpc3RyaWJ1dG9yS2V5KClcblxuICAgICAgLCAnX2JsYW5rJyk7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuXG4gIGRvd25sb2FkQ1NWRm9yTXVsdGlwbGVSZXNvdXJjZXNCeURldmljZShzdGFydF9kYXRlLCBlbmRfZGF0ZSwgcmVzb3VyY2VzLCB0ZW5hbnQpIHtcbiAgICBsZXQgYWxsUmVzb3VyY2VzID0gJyc7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHJlc291cmNlcy5sZW5ndGg7IGkrKykge1xuICAgICAgbGV0IGVhY2ggPSByZXNvdXJjZXNbaV07XG4gICAgICBhbGxSZXNvdXJjZXMgPSBhbGxSZXNvdXJjZXMgKyBcInxcIiArIGVhY2g7XG4gICAgfVxuXG4gICAgdGhpcy4kd2luZG93Lm9wZW4odGhpcy51cmlCYXNlICsgJy9tdWx0aV9yZXNvdXJjZV9ieV9kZXZpY2UvJyArIHN0YXJ0X2RhdGUgKyAnLycgKyBlbmRfZGF0ZSArICcvJyArIGFsbFJlc291cmNlcyArICcvJyArXG4gICAgICB0ZW5hbnQgKyBcIi9cIiArIHRoaXMuU2Vzc2lvbnNTZXJ2aWNlLmdldEN1cnJlbnREaXN0cmlidXRvcktleSgpXG4gICAgICAsICdfYmxhbmsnKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG5cbiAgZG93bmxvYWRDU1ZGb3JNdWx0aXBsZURldmljZXNTdW1tYXJpemVkKHN0YXJ0X2RhdGUsIGVuZF9kYXRlLCBkZXZpY2VzLCB0ZW5hbnQpIHtcbiAgICBsZXQgYWxsRGV2aWNlcyA9ICcnO1xuXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkZXZpY2VzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBsZXQgZWFjaCA9IGRldmljZXNbaV07XG4gICAgICBhbGxEZXZpY2VzID0gYWxsRGV2aWNlcyArIFwifFwiICsgZWFjaDtcbiAgICB9XG5cbiAgICB0aGlzLiR3aW5kb3cub3Blbih0aGlzLnVyaUJhc2UgKyAnL211bHRpX2RldmljZV9zdW1tYXJpemVkLycgKyBzdGFydF9kYXRlICsgJy8nICsgZW5kX2RhdGUgKyAnLycgKyBhbGxEZXZpY2VzICsgJy8nICtcbiAgICAgIHRlbmFudCArIFwiL1wiICsgdGhpcy5TZXNzaW9uc1NlcnZpY2UuZ2V0Q3VycmVudERpc3RyaWJ1dG9yS2V5KClcbiAgICAgICwgJ19ibGFuaycpO1xuICAgIHJldHVybiB0cnVlO1xuICB9XG5cblxuICBkb3dubG9hZENTVkZvck11bHRpcGxlRGV2aWNlc0J5RGF0ZShzdGFydF9kYXRlLCBlbmRfZGF0ZSwgZGV2aWNlcywgdGVuYW50KSB7XG4gICAgbGV0IGFsbERldmljZXMgPSAnJztcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGV2aWNlcy5sZW5ndGg7IGkrKykge1xuICAgICAgbGV0IGVhY2ggPSBkZXZpY2VzW2ldO1xuICAgICAgYWxsRGV2aWNlcyA9IGFsbERldmljZXMgKyBcInxcIiArIGVhY2g7XG4gICAgfVxuXG4gICAgdGhpcy4kd2luZG93Lm9wZW4odGhpcy51cmlCYXNlICsgJy9tdWx0aV9kZXZpY2VfYnlfZGF0ZS8nICsgc3RhcnRfZGF0ZSArICcvJyArIGVuZF9kYXRlICsgJy8nICsgYWxsRGV2aWNlcyArICcvJyArXG4gICAgICB0ZW5hbnQgKyBcIi9cIiArIHRoaXMuU2Vzc2lvbnNTZXJ2aWNlLmdldEN1cnJlbnREaXN0cmlidXRvcktleSgpXG4gICAgICAsICdfYmxhbmsnKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGRvd25sb2FkQ1NWRm9yTXVsdGlwbGVMb2NhdGlvbnNCeURldmljZShzdGFydF9kYXRlLCBlbmRfZGF0ZSwgbG9jYXRpb25zLCB0ZW5hbnQpIHtcbiAgICBsZXQgYWxsTG9jYXRpb25zID0gJyc7XG5cbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxvY2F0aW9ucy5sZW5ndGg7IGkrKykge1xuICAgICAgbGV0IGVhY2ggPSBsb2NhdGlvbnNbaV07XG4gICAgICBhbGxMb2NhdGlvbnMgPSBhbGxMb2NhdGlvbnMgKyBcInxcIiArIGVhY2g7XG4gICAgfVxuXG4gICAgdGhpcy4kd2luZG93Lm9wZW4odGhpcy51cmlCYXNlICsgJy9tdWx0aV9sb2NhdGlvbl9ieV9kZXZpY2UvJyArIHN0YXJ0X2RhdGUgKyAnLycgKyBlbmRfZGF0ZSArICcvJyArIGFsbExvY2F0aW9ucyArICcvJyArXG4gICAgICB0ZW5hbnQgKyBcIi9cIiArIHRoaXMuU2Vzc2lvbnNTZXJ2aWNlLmdldEN1cnJlbnREaXN0cmlidXRvcktleSgpXG4gICAgICAsICdfYmxhbmsnKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGRvd25sb2FkQ1NWRm9yTXVsdGlwbGVMb2NhdGlvbnNTdW1tYXJpemVkKHN0YXJ0X2RhdGUsIGVuZF9kYXRlLCBsb2NhdGlvbnMsIHRlbmFudCkge1xuICAgIGxldCBhbGxMb2NhdGlvbnMgPSAnJztcblxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbG9jYXRpb25zLmxlbmd0aDsgaSsrKSB7XG4gICAgICBsZXQgZWFjaCA9IGxvY2F0aW9uc1tpXTtcbiAgICAgIGFsbExvY2F0aW9ucyA9IGFsbExvY2F0aW9ucyArIFwifFwiICsgZWFjaDtcbiAgICB9XG5cbiAgICB0aGlzLiR3aW5kb3cub3Blbih0aGlzLnVyaUJhc2UgKyAnL211bHRpX2xvY2F0aW9uX3N1bW1hcml6ZWQvJyArIHN0YXJ0X2RhdGUgKyAnLycgKyBlbmRfZGF0ZSArICcvJyArIGFsbExvY2F0aW9ucyArICcvJyArXG4gICAgICB0ZW5hbnQgKyBcIi9cIiArIHRoaXMuU2Vzc2lvbnNTZXJ2aWNlLmdldEN1cnJlbnREaXN0cmlidXRvcktleSgpXG4gICAgICAsICdfYmxhbmsnKTtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGNyZWF0ZUZpbHRlckZvcihxdWVyeSkge1xuICAgIHF1ZXJ5ID0gYW5ndWxhci5sb3dlcmNhc2UocXVlcnkpO1xuICAgIHJldHVybiBmdW5jdGlvbiAocmVzb3VyY2UpIHtcbiAgICAgIHJlc291cmNlID0gYW5ndWxhci5sb3dlcmNhc2UocmVzb3VyY2UpO1xuICAgICAgcmV0dXJuIChyZXNvdXJjZS5pbmRleE9mKHF1ZXJ5KSA9PT0gMCk7XG4gICAgfTtcbiAgfVxuICBcbiAgcXVlcnlTZWFyY2gocmVzb3VyY2VzLCBzZWFyY2hUZXh0KSB7XG4gICAgaWYgKHNlYXJjaFRleHQpIHtcbiAgICAgIHJldHVybiByZXNvdXJjZXMuZmlsdGVyKHRoaXMuY3JlYXRlRmlsdGVyRm9yKHNlYXJjaFRleHQpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHJlc291cmNlcztcbiAgICB9XG4gIH1cbn1cblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vc3JjL2FwcC9zZXJ2aWNlcy9wcm9vZnBsYXkuc2VydmljZS5qc1xuICoqLyIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIFNlc3Npb25zU2VydmljZSB7XG5cbiAgY29uc3RydWN0b3IoJGh0dHAsICRsb2csIFN0b3JhZ2VTZXJ2aWNlLCBJZGVudGl0eVNlcnZpY2UsIFJlc3Rhbmd1bGFyLCAkcSkge1xuICAgICduZ0luamVjdCc7XG4gICAgdGhpcy4kaHR0cCA9ICRodHRwXG4gICAgdGhpcy4kbG9nID0gJGxvZ1xuICAgIHRoaXMuU3RvcmFnZVNlcnZpY2UgPSBTdG9yYWdlU2VydmljZVxuICAgIHRoaXMuSWRlbnRpdHlTZXJ2aWNlID0gSWRlbnRpdHlTZXJ2aWNlXG4gICAgdGhpcy5SZXN0YW5ndWxhciA9IFJlc3Rhbmd1bGFyXG4gICAgdGhpcy4kcSA9ICRxXG4gICAgdGhpcy5zZXRJZGVudGl0eSA9IHRoaXMuc2V0SWRlbnRpdHkuYmluZCh0aGlzKTtcbiAgICB0aGlzLnVyaUJhc2UgPSAndjEvc2Vzc2lvbnMnO1xuICB9XG5cbiAgc2V0RGlzdHJpYnV0b3JzKGRpc3RyaWJ1dG9ycykge1xuICAgIHJldHVybiB0aGlzLlN0b3JhZ2VTZXJ2aWNlLnNldCgnZGlzdHJpYnV0b3JzJywgZGlzdHJpYnV0b3JzKTtcbiAgfVxuXG4gIHNldERpc3RyaWJ1dG9yc0FzQWRtaW4oZGlzdHJpYnV0b3JzQXNBZG1pbikge1xuICAgIHJldHVybiB0aGlzLlN0b3JhZ2VTZXJ2aWNlLnNldCgnZGlzdHJpYnV0b3JzQXNBZG1pbicsIGRpc3RyaWJ1dG9yc0FzQWRtaW4pO1xuICB9XG5cbiAgc2V0SXNBZG1pbihpc0FkbWluKSB7XG4gICAgcmV0dXJuIHRoaXMuU3RvcmFnZVNlcnZpY2Uuc2V0KCdpc0FkbWluJywgaXNBZG1pbik7XG4gIH1cblxuICBzZXRVc2VyS2V5KHZhbHVlKSB7XG4gICAgcmV0dXJuIHRoaXMuU3RvcmFnZVNlcnZpY2Uuc2V0KCd1c2VyS2V5JywgdmFsdWUpO1xuICB9XG5cbiAgc2V0VXNlckVtYWlsKHZhbHVlKSB7XG4gICAgcmV0dXJuIHRoaXMuU3RvcmFnZVNlcnZpY2Uuc2V0KCd1c2VyRW1haWwnLCB2YWx1ZSk7XG4gIH1cblxuICBzZXRDdXJyZW50RGlzdHJpYnV0b3JLZXkodmFsdWUpIHtcbiAgICByZXR1cm4gdGhpcy5TdG9yYWdlU2VydmljZS5zZXQoJ2N1cnJlbnREaXN0cmlidXRvcktleScsIHZhbHVlKTtcbiAgfVxuXG4gIHNldEN1cnJlbnREaXN0cmlidXRvck5hbWUodmFsdWUpIHtcbiAgICByZXR1cm4gdGhpcy5TdG9yYWdlU2VydmljZS5zZXQoJ2N1cnJlbnREaXN0cmlidXRvck5hbWUnLCB2YWx1ZSk7XG4gIH1cblxuICBnZXRVc2VyS2V5KCkge1xuICAgIHJldHVybiB0aGlzLlN0b3JhZ2VTZXJ2aWNlLmdldCgndXNlcktleScpO1xuICB9XG5cbiAgZ2V0VXNlckVtYWlsKCkge1xuICAgIHJldHVybiB0aGlzLlN0b3JhZ2VTZXJ2aWNlLmdldCgndXNlckVtYWlsJyk7XG4gIH1cblxuICBnZXREaXN0cmlidXRvcnMoKSB7XG4gICAgcmV0dXJuIHRoaXMuU3RvcmFnZVNlcnZpY2UuZ2V0KCdkaXN0cmlidXRvcnMnKTtcbiAgfVxuXG4gIGdldEN1cnJlbnREaXN0cmlidXRvck5hbWUoKSB7XG4gICAgcmV0dXJuIHRoaXMuU3RvcmFnZVNlcnZpY2UuZ2V0KCdjdXJyZW50RGlzdHJpYnV0b3JOYW1lJyk7XG4gIH1cblxuICBnZXRDdXJyZW50RGlzdHJpYnV0b3JLZXkoKSB7XG4gICAgcmV0dXJuIHRoaXMuU3RvcmFnZVNlcnZpY2UuZ2V0KCdjdXJyZW50RGlzdHJpYnV0b3JLZXknKTtcbiAgfVxuXG4gIGdldERpc3RyaWJ1dG9yc0FzQWRtaW4oKSB7XG4gICAgcmV0dXJuIHRoaXMuU3RvcmFnZVNlcnZpY2UuZ2V0KCdkaXN0cmlidXRvcnNBc0FkbWluJyk7XG4gIH1cblxuICBnZXRJc0FkbWluKCkge1xuICAgIHJldHVybiB0aGlzLlN0b3JhZ2VTZXJ2aWNlLmdldCgnaXNBZG1pbicpO1xuICB9XG5cbiAgbG9naW4oY3JlZGVudGlhbHMpIHtcbiAgICBsZXQgYXV0aGVudGljYXRpb25QYXlsb2FkID0ge1xuICAgICAgYWNjZXNzX3Rva2VuOiBfLmNsb25lKGNyZWRlbnRpYWxzLmFjY2Vzc190b2tlbiksXG4gICAgICBhdXRodXNlcjogXy5jbG9uZShjcmVkZW50aWFscy5hdXRodXNlciksXG4gICAgICBjbGllbnRfaWQ6IF8uY2xvbmUoY3JlZGVudGlhbHMuY2xpZW50X2lkKSxcbiAgICAgIGNvZGU6IF8uY2xvbmUoY3JlZGVudGlhbHMuY29kZSksXG4gICAgICBpZF90b2tlbjogXy5jbG9uZShjcmVkZW50aWFscy5pZF90b2tlbiksXG4gICAgICBzY29wZTogXy5jbG9uZShjcmVkZW50aWFscy5zY29wZSksXG4gICAgICBzZXNzaW9uX3N0YXRlOiBfLmNsb25lKGNyZWRlbnRpYWxzLnNlc3Npb25fc3RhdGUpLFxuICAgICAgc3RhdGU6IF8uY2xvbmUoY3JlZGVudGlhbHMuc3RhdGUpLFxuICAgICAgc3RhdHVzOiBfLmNsb25lKGNyZWRlbnRpYWxzLnN0YXR1cylcbiAgICB9O1xuXG4gICAgaWYgKGNyZWRlbnRpYWxzLmVtYWlsICYmIGNyZWRlbnRpYWxzLnBhc3N3b3JkKSB7XG4gICAgICBhdXRoZW50aWNhdGlvblBheWxvYWQgPSBjcmVkZW50aWFscztcbiAgICB9XG5cbiAgICBsZXQgcHJvbWlzZSA9IHRoaXMuJGh0dHAucG9zdCgnL2xvZ2luJywgYXV0aGVudGljYXRpb25QYXlsb2FkKTtcbiAgICByZXR1cm4gcHJvbWlzZS5zdWNjZXNzKGRhdGEgPT4ge1xuICAgICAgdGhpcy5zZXRVc2VyS2V5KGRhdGEudXNlci5rZXkpO1xuICAgICAgcmV0dXJuIHRoaXMuc2V0SWRlbnRpdHkoKVxuICAgICAgICAudGhlbigoKSA9PiBkYXRhKTtcbiAgICB9KTtcbiAgfVxuXG4gIHNldElkZW50aXR5KCkge1xuICAgIGxldCBkZWZlcnJlZCA9IHRoaXMuJHEuZGVmZXIoKTtcbiAgICBsZXQgaWRlbnRpdHlQcm9taXNlID0gdGhpcy5JZGVudGl0eVNlcnZpY2UuZ2V0SWRlbnRpdHkoKTtcbiAgICBpZGVudGl0eVByb21pc2UudGhlbihkYXRhID0+IHtcbiAgICAgIHRoaXMuc2V0RGlzdHJpYnV0b3JzKGRhdGFbJ2Rpc3RyaWJ1dG9ycyddKTtcbiAgICAgIHRoaXMuc2V0RGlzdHJpYnV0b3JzQXNBZG1pbihkYXRhWydkaXN0cmlidXRvcnNfYXNfYWRtaW4nXSk7XG4gICAgICB0aGlzLnNldElzQWRtaW4oZGF0YVsnaXNfYWRtaW4nXSk7XG4gICAgICB0aGlzLnNldFVzZXJFbWFpbChkYXRhWydlbWFpbCddKTtcbiAgICAgIHRoaXMuc2V0SXNBZG1pbihkYXRhW1wiaXNfYWRtaW5cIl0pO1xuXG4gICAgICByZXR1cm4gZGVmZXJyZWQucmVzb2x2ZSgpO1xuICAgIH0pO1xuICAgIHJldHVybiBkZWZlcnJlZC5wcm9taXNlO1xuICB9XG5cbiAgcmVtb3ZlVXNlckluZm8oKSB7XG4gICAgdGhpcy5TdG9yYWdlU2VydmljZS5yZW1vdmVBbGwoKTtcbiAgfVxufVxuXG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL3NyYy9hcHAvc2VydmljZXMvc2Vzc2lvbnMuc2VydmljZS5qc1xuICoqLyIsImltcG9ydCBMb2NrciBmcm9tICdsb2Nrcic7XG5cbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFN0b3JhZ2VTZXJ2aWNlIHtcblxuICBjb25zdHJ1Y3RvcigpIHtcbiAgfVxuXG4gIHNldChrZXksIHZhbHVlKSB7XG4gICAgcmV0dXJuIExvY2tyLnNldChrZXksIHZhbHVlKTtcbiAgfVxuXG4gIGdldChrZXkpIHtcbiAgICByZXR1cm4gTG9ja3IuZ2V0KGtleSk7XG4gIH1cblxuICBybShrZXkpIHtcbiAgICByZXR1cm4gTG9ja3Iucm0oa2V5KTtcbiAgfVxuXG4gIHJlbW92ZUFsbCgpIHtcbiAgICBMb2Nrci5mbHVzaCgpO1xuICB9XG5cbn1cblxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zcmMvYXBwL3NlcnZpY2VzL3N0b3JhZ2Uuc2VydmljZS5qc1xuICoqLyIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIFRlbmFudHNTZXJ2aWNlIHtcblxuICBjb25zdHJ1Y3RvcihSZXN0YW5ndWxhciwgU2Vzc2lvbnNTZXJ2aWNlKSB7XG4gICAgJ25nSW5qZWN0JztcbiAgICB0aGlzLlJlc3Rhbmd1bGFyID0gUmVzdGFuZ3VsYXI7XG4gICAgdGhpcy5TZXNzaW9uc1NlcnZpY2UgPSBTZXNzaW9uc1NlcnZpY2U7XG4gIH1cblxuICBzYXZlKHRlbmFudCkge1xuICAgIGlmICh0ZW5hbnQua2V5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHZhciBwcm9taXNlID0gdGVuYW50LnB1dCgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgcHJvbWlzZSA9IHRoaXMuUmVzdGFuZ3VsYXIuc2VydmljZSgndGVuYW50cycpLnBvc3QodGVuYW50KTtcbiAgICB9XG4gICAgcmV0dXJuIHByb21pc2U7XG4gIH1cblxuICBzYXZlT3ZlcmxheVNldHRpbmdzKHRlbmFudF91cmxzYWZlX2tleSwgYm90dG9tX2xlZnQsIGJvdHRvbV9yaWdodCwgdG9wX3JpZ2h0LCB0b3BfbGVmdCkge1xuICAgIGxldCBwYXlsb2FkID0ge1xuICAgICAgYm90dG9tX2xlZnQsXG4gICAgICBib3R0b21fcmlnaHQsXG4gICAgICB0b3BfcmlnaHQsXG4gICAgICB0b3BfbGVmdCxcbiAgICB9XG4gICAgcmV0dXJuIHRoaXMuUmVzdGFuZ3VsYXIub25lVXJsKCdvdmVybGF5JywgYC9hcGkvdjEvb3ZlcmxheS90ZW5hbnQvJHt0ZW5hbnRfdXJsc2FmZV9rZXl9YCkuY3VzdG9tUE9TVChwYXlsb2FkKTtcbiAgfVxuXG4gIG92ZXJsYXlBcHBseVRlbmFudCh0ZW5hbnRfdXJsc2FmZV9rZXkpIHtcbiAgICByZXR1cm4gdGhpcy5SZXN0YW5ndWxhci5vbmVVcmwoJ292ZXJsYXknLCBgL2FwaS92MS9vdmVybGF5L3RlbmFudC8ke3RlbmFudF91cmxzYWZlX2tleX0vYXBwbHlgKS5wb3N0KCk7XG4gIH1cblxuICBzZWFyY2hBbGxUZW5hbnRzQnlOYW1lKHRlbmFudF9uYW1lKSB7XG4gICAgbGV0IHByb21pc2UgPSB0aGlzLlJlc3Rhbmd1bGFyLmFsbCgndGVuYW50cycpLmN1c3RvbUdFVExJU1QoXCJcIiwge3RlbmFudF9uYW1lOiB0ZW5hbnRfbmFtZX0pXG4gICAgcmV0dXJuIHByb21pc2U7XG4gIH1cblxuICBmZXRjaEFsbFRlbmFudHMoKSB7XG4gICAgbGV0IHByb21pc2UgPSB0aGlzLlJlc3Rhbmd1bGFyLmFsbCgndGVuYW50cycpLmdldExpc3QoKTtcbiAgICByZXR1cm4gcHJvbWlzZTtcbiAgfVxuXG4gIGZldGNoQWxsVGVuYW50c1BhZ2luYXRlZChwYWdlX3NpemUsIG9mZnNldCkge1xuICAgIGxldCB1cmwgPSBgYXBpL3YxL3RlbmFudHMvcGFnaW5hdGVkLyR7cGFnZV9zaXplfS8ke29mZnNldH1gO1xuICAgIGxldCBwcm9taXNlID0gdGhpcy5SZXN0YW5ndWxhci5vbmVVcmwoJ3RlbmFudHMnLCB1cmwpLmdldCgpO1xuICAgIHJldHVybiBwcm9taXNlO1xuICB9XG5cbiAgZ2V0VGVuYW50QnlLZXkodGVuYW50S2V5KSB7XG4gICAgbGV0IHVybCA9IGBhcGkvdjEvdGVuYW50cy8ke3RlbmFudEtleX1gO1xuICAgIGxldCBwcm9taXNlID0gdGhpcy5SZXN0YW5ndWxhci5vbmVVcmwoJ3RlbmFudHMnLCB1cmwpLmdldCgpO1xuICAgIHJldHVybiBwcm9taXNlO1xuICB9XG5cbiAgZGVsZXRlKHRlbmFudCkge1xuICAgIGlmICh0ZW5hbnQua2V5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGxldCBwcm9taXNlID0gdGhpcy5SZXN0YW5ndWxhci5vbmUoXCJ0ZW5hbnRzXCIsIHRlbmFudC5rZXkpLnJlbW92ZSgpO1xuICAgICAgcmV0dXJuIHByb21pc2U7XG4gICAgfVxuICB9XG59XG5cblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vc3JjL2FwcC9zZXJ2aWNlcy90ZW5hbnRzLnNlcnZpY2UuanNcbiAqKi8iLCJleHBvcnQgZGVmYXVsdCBjbGFzcyBUaW1lem9uZXNTZXJ2aWNlIHtcbiAgY29uc3RydWN0b3IoUmVzdGFuZ3VsYXIpIHtcbiAgICAnbmdJbmplY3QnO1xuICAgIHRoaXMuUmVzdGFuZ3VsYXIgPSBSZXN0YW5ndWxhclxuICB9XG5cbiAgZ2V0VXNUaW1lem9uZXMoKSB7XG4gICAgbGV0IHByb21pc2UgPSB0aGlzLlJlc3Rhbmd1bGFyLm9uZVVybCgndGltZXpvbmVzJywgJ2FwaS92MS90aW1lem9uZXMvdXMnKS5nZXQoKTtcbiAgICByZXR1cm4gcHJvbWlzZTtcbiAgfVxuXG4gIGdldEFsbFRpbWV6b25lcygpIHtcbiAgICBsZXQgcHJvbWlzZSA9IHRoaXMuUmVzdGFuZ3VsYXIub25lVXJsKCd0aW1lem9uZXMnLCAnYXBpL3YxL3RpbWV6b25lcy9hbGwnKS5nZXQoKTtcbiAgICByZXR1cm4gcHJvbWlzZTtcbiAgfVxuXG4gIGdldEN1c3RvbVRpbWV6b25lcygpIHtcbiAgICBsZXQgcHJvbWlzZSA9IHRoaXMuUmVzdGFuZ3VsYXIub25lVXJsKCd0aW1lem9uZXMnLCAnYXBpL3YxL3RpbWV6b25lcy9jdXN0b20nKS5nZXQoKTtcbiAgICByZXR1cm4gcHJvbWlzZTtcbiAgfVxufVxuXG5cblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vc3JjL2FwcC9zZXJ2aWNlcy90aW1lem9uZXMuc2VydmljZS5qc1xuICoqLyIsImV4cG9ydCBkZWZhdWx0IGNsYXNzIFRvYXN0c1NlcnZpY2Uge1xuICBcbiAgY29uc3RydWN0b3IodG9hc3RyKSB7XG4gICAgJ25nSW5qZWN0JztcbiAgICB0aGlzLnRvYXN0ciA9IHRvYXN0cjtcbiAgfVxuXG4gIHNob3dTdWNjZXNzVG9hc3QobWVzc2FnZSwgdGl0bGUgPSAnU3VjY2VzcyEnKSB7XG4gICAgcmV0dXJuIHRoaXMudG9hc3RyLnN1Y2Nlc3MobWVzc2FnZSwgdGl0bGUpO1xuICB9XG5cbiAgc2hvd0Vycm9yVG9hc3QobWVzc2FnZSwgdGl0bGUgPSAnRXJyb3IhJykge1xuICAgIHJldHVybiB0aGlzLnRvYXN0ci5lcnJvcihtZXNzYWdlLCB0aXRsZSk7XG4gIH1cblxuICBzaG93SW5mb1RvYXN0KG1lc3NhZ2UsIHRpdGxlID0gJ0luZm9ybWF0aW9uJykge1xuICAgIHJldHVybiB0aGlzLnRvYXN0ci5pbmZvKG1lc3NhZ2UsIHRpdGxlKTtcbiAgfVxufVxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zcmMvYXBwL3NlcnZpY2VzL3RvYXN0cy5zZXJ2aWNlLmpzXG4gKiovIiwiZXhwb3J0IGRlZmF1bHQgY2xhc3MgVmVyc2lvbnNTZXJ2aWNlIHtcblxuICBjb25zdHJ1Y3RvcihSZXN0YW5ndWxhcikge1xuICAgICduZ0luamVjdCc7XG4gICAgdGhpcy5SZXN0YW5ndWxhciA9IFJlc3Rhbmd1bGFyXG4gIH1cblxuICBnZXRWZXJzaW9ucygpIHtcbiAgICBsZXQgcHJvbWlzZSA9IHRoaXMuUmVzdGFuZ3VsYXIub25lVXJsKCd2ZXJzaW9ucycpLmdldCgpO1xuICAgIHJldHVybiBwcm9taXNlO1xuICB9XG59XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL3NyYy9hcHAvc2VydmljZXMvdmVyc2lvbnMuc2VydmljZS5qc1xuICoqLyIsImltcG9ydCBuYXR1cmFsU29ydCBmcm9tICdqYXZhc2NyaXB0LW5hdHVyYWwtc29ydCc7XG5cblxuZnVuY3Rpb24gVGVuYW50TG9nc0N0cmwoJHN0YXRlUGFyYW1zLFxuICAgICAgICAgICAgICAgICAgICAgICAgVGVuYW50c1NlcnZpY2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAkc3RhdGUsXG4gICAgICAgICAgICAgICAgICAgICAgICBQcm9ncmVzc0JhclNlcnZpY2UsXG4gICAgICAgICAgICAgICAgICAgICAgICBJbnRlZ3JhdGlvbkV2ZW50cyxcbiAgICAgICAgICAgICAgICAgICAgICAgICRzY29wZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIERhdGVNYW5pcHVsYXRpb25TZXJ2aWNlKSB7XG4gIFwibmdJbmplY3RcIjtcblxuICBsZXQgdm0gPSB0aGlzO1xuICAkc2NvcGUudGFiSW5kZXggPSA1O1xuICB2bS50ZW5hbnRLZXkgPSAkc3RhdGVQYXJhbXMudGVuYW50S2V5O1xuICBsZXQgdGVuYW50UHJvbWlzZSA9IFRlbmFudHNTZXJ2aWNlLmdldFRlbmFudEJ5S2V5KHZtLnRlbmFudEtleSk7XG4gIHRlbmFudFByb21pc2UudGhlbihkYXRhID0+IHtcbiAgICB2bS5jdXJyZW50VGVuYW50ID0gZGF0YVxuICB9KTtcblxuICB2bS5sb2NhbEZyb21VdGMgPSBmdW5jdGlvbiAoZXZlbnRzKSB7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBldmVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGxldCBlYWNoID0gZXZlbnRzW2ldO1xuICAgICAgaWYgKGVhY2gudXRjVGltZXN0YW1wKSB7XG4gICAgICAgIGVhY2gudXRjVGltZXN0YW1wID0gRGF0ZU1hbmlwdWxhdGlvblNlcnZpY2UuZ2VuZXJhdGVMb2NhbEZyb21VVEMoZWFjaC51dGNUaW1lc3RhbXApO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm47XG4gIH07XG5cbiAgdm0uZ2V0VGVuYW50Q3JlYXRlRXZlbnRzID0gZnVuY3Rpb24gKCkge1xuICAgIFByb2dyZXNzQmFyU2VydmljZS5zdGFydCgpO1xuICAgIGxldCBlbnJvbGxtZW50RXZlbnRzUHJvbWlzZSA9IEludGVncmF0aW9uRXZlbnRzLmdldFRlbmFudENyZWF0ZUV2ZW50cyh2bS50ZW5hbnRLZXkpO1xuICAgIHJldHVybiBlbnJvbGxtZW50RXZlbnRzUHJvbWlzZS50aGVuKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICB2bS50ZW5hbnRDcmVhdGVFdmVudHMgPSBkYXRhO1xuICAgICAgdm0ubG9jYWxGcm9tVXRjKGRhdGEpO1xuICAgICAgcmV0dXJuIFByb2dyZXNzQmFyU2VydmljZS5jb21wbGV0ZSgpO1xuICAgIH0pO1xuICB9O1xuXG5cbiAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgLy8gU2V0dXBcbiAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cblxuICB2bS5pbml0aWFsaXplID0gKCkgPT4ge1xuICAgIHZtLmdldFRlbmFudENyZWF0ZUV2ZW50cygpXG4gIH1cblxuICAkc2NvcGUuJHdhdGNoKCd0YWJJbmRleCcsIGZ1bmN0aW9uICh0b1RhYiwgZnJvbVRhYikge1xuICAgIGlmICh0b1RhYiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBzd2l0Y2ggKHRvVGFiKSB7XG4gICAgICAgIGNhc2UgMDpcbiAgICAgICAgICByZXR1cm4gJHN0YXRlLmdvKCd0ZW5hbnREZXRhaWxzJywge3RlbmFudEtleTogJHN0YXRlUGFyYW1zLnRlbmFudEtleX0pO1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgcmV0dXJuICRzdGF0ZS5nbygndGVuYW50TWFuYWdlZERldmljZXMnLCB7dGVuYW50S2V5OiAkc3RhdGVQYXJhbXMudGVuYW50S2V5fSk7XG4gICAgICAgIGNhc2UgMjpcbiAgICAgICAgICByZXR1cm4gJHN0YXRlLmdvKCd0ZW5hbnRVbm1hbmFnZWREZXZpY2VzJywge3RlbmFudEtleTogJHN0YXRlUGFyYW1zLnRlbmFudEtleX0pO1xuICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgcmV0dXJuICRzdGF0ZS5nbygndGVuYW50TG9jYXRpb25zJywge3RlbmFudEtleTogJHN0YXRlUGFyYW1zLnRlbmFudEtleX0pO1xuICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgcmV0dXJuICRzdGF0ZS5nbygndGVuYW50T3ZlcmxheXMnLCB7dGVuYW50S2V5OiAkc3RhdGVQYXJhbXMudGVuYW50S2V5fSk7XG4gICAgICAgIGNhc2UgNTpcbiAgICAgICAgICByZXR1cm4gJHN0YXRlLmdvKCd0ZW5hbnRMb2dzJywge3RlbmFudEtleTogJHN0YXRlUGFyYW1zLnRlbmFudEtleX0pO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgcmV0dXJuIHZtO1xufVxuXG5leHBvcnQge1RlbmFudExvZ3NDdHJsfVxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zcmMvYXBwL3RlbmFudC90ZW5hbnQtbG9ncy5jb250cm9sbGVyLmpzXG4gKiovIiwiaW1wb3J0IG5hdHVyYWxTb3J0IGZyb20gJ2phdmFzY3JpcHQtbmF0dXJhbC1zb3J0JztcblxuXG5mdW5jdGlvbiBUZW5hbnRPdmVybGF5c0N0cmwoJHN0YXRlUGFyYW1zLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRlbmFudHNTZXJ2aWNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRzdGF0ZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBQcm9ncmVzc0JhclNlcnZpY2UsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgVG9hc3RzU2VydmljZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkc2NvcGUsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgSW1hZ2VTZXJ2aWNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICR0aW1lb3V0LFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICRtZERpYWxvZykge1xuICBcIm5nSW5qZWN0XCI7XG5cbiAgbGV0IHZtID0gdGhpcztcbiAgJHNjb3BlLnRhYkluZGV4ID0gNDtcbiAgdm0udGVuYW50S2V5ID0gJHN0YXRlUGFyYW1zLnRlbmFudEtleTtcbiAgdm0uZWRpdE1vZGUgPSAhISRzdGF0ZVBhcmFtcy50ZW5hbnRLZXk7XG4gIGxldCB0ZW5hbnRQcm9taXNlID0gVGVuYW50c1NlcnZpY2UuZ2V0VGVuYW50QnlLZXkodm0udGVuYW50S2V5KTtcbiAgdGVuYW50UHJvbWlzZS50aGVuKGRhdGEgPT4ge1xuICAgIHZtLmN1cnJlbnRUZW5hbnQgPSBkYXRhXG4gIH0pO1xuXG4gIHZtLm92ZXJsYXlDaGFuZ2VkID0gZmFsc2U7XG5cbiAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAvLyBPdmVybGF5c1xuICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vXG4gIHZtLmFkanVzdE92ZXJsYXlTdGF0dXMgPSAoc3RhdHVzKSA9PiB7XG4gICAgdm0uY3VycmVudFRlbmFudC5vdmVybGF5U3RhdHVzID0gc3RhdHVzXG4gICAgUHJvZ3Jlc3NCYXJTZXJ2aWNlLnN0YXJ0KCk7XG4gICAgdm0ubG9hZGluZ092ZXJsYXlzID0gdHJ1ZTtcbiAgICBsZXQgcHJvbWlzZSA9IFRlbmFudHNTZXJ2aWNlLnNhdmUodm0uY3VycmVudFRlbmFudCk7XG4gICAgcHJvbWlzZS50aGVuKCgpID0+IHtcbiAgICAgIFByb2dyZXNzQmFyU2VydmljZS5jb21wbGV0ZSgpXG4gICAgICBsZXQgdGVuYW50UHJvbWlzZSA9IFRlbmFudHNTZXJ2aWNlLmdldFRlbmFudEJ5S2V5KCRzdGF0ZVBhcmFtcy50ZW5hbnRLZXkpO1xuICAgICAgdGVuYW50UHJvbWlzZS50aGVuKGZ1bmN0aW9uICh0ZW5hbnQpIHtcbiAgICAgICAgdm0ubG9hZGluZ092ZXJsYXlzID0gZmFsc2U7XG4gICAgICAgIHZtLm9uU3VjY2Vzc1Jlc29sdmluZ1RlbmFudCh0ZW5hbnQpO1xuICAgICAgfSk7XG4gICAgfSlcbiAgICBwcm9taXNlLmNhdGNoKChlcnIpID0+IHtcbiAgICAgIFByb2dyZXNzQmFyU2VydmljZS5jb21wbGV0ZSgpO1xuICAgICAgVG9hc3RzU2VydmljZS5zaG93RXJyb3JUb2FzdCgnU29tZXRoaW5nIHdlbnQgd3JvbmcnKTtcbiAgICAgIGNvbnNvbGUubG9nKGVycilcbiAgICB9KVxuICAgIHJldHVybiBwcm9taXNlO1xuICB9XG5cbiAgdm0udXBkYXRlT3ZlcmxheXMgPSAoKSA9PiB7XG4gICAgdm0ubG9hZGluZ092ZXJsYXlzID0gdHJ1ZTtcbiAgICBsZXQgdGVuYW50UHJvbWlzZSA9IHZtLmdldFRlbmFudCgpO1xuICAgIHRlbmFudFByb21pc2UudGhlbigodGVuYW50KSA9PiB7XG4gICAgICB2bS5vdmVybGF5Q2hhbmdlZCA9IGZhbHNlO1xuICAgICAgdm0uY3VycmVudFRlbmFudC5vdmVybGF5cyA9IHRlbmFudC5vdmVybGF5cztcbiAgICAgIHZtLmN1cnJlbnRUZW5hbnRDb3B5Lm92ZXJsYXlzID0gYW5ndWxhci5jb3B5KHZtLmN1cnJlbnRUZW5hbnQub3ZlcmxheXMpO1xuICAgICAgdm0ubG9hZGluZ092ZXJsYXlzID0gZmFsc2U7XG4gICAgfSlcbiAgICByZXR1cm4gdGVuYW50UHJvbWlzZTtcbiAgfVxuXG4gIHZtLnN1Ym1pdE92ZXJsYXlTZXR0aW5ncyA9ICgpID0+IHtcbiAgICB2bS5sb2FkaW5nT3ZlcmxheXMgPSB0cnVlO1xuXG4gICAgbGV0IG92ZXJsYXlTZXR0aW5ncyA9IGFuZ3VsYXIuY29weSh2bS5jdXJyZW50VGVuYW50Q29weS5vdmVybGF5cylcbiAgICBQcm9ncmVzc0JhclNlcnZpY2Uuc3RhcnQoKTtcbiAgICBsZXQgcHJvbWlzZSA9IFRlbmFudHNTZXJ2aWNlLnNhdmVPdmVybGF5U2V0dGluZ3MoXG4gICAgICB2bS50ZW5hbnRLZXksXG4gICAgICBvdmVybGF5U2V0dGluZ3MuYm90dG9tX2xlZnQsXG4gICAgICBvdmVybGF5U2V0dGluZ3MuYm90dG9tX3JpZ2h0LFxuICAgICAgb3ZlcmxheVNldHRpbmdzLnRvcF9yaWdodCxcbiAgICAgIG92ZXJsYXlTZXR0aW5ncy50b3BfbGVmdFxuICAgICk7XG5cbiAgICBsZXQgdXBkYXRlT3ZlcmxheVByb21pc2VEZWZlcnJlZCA9ICgpID0+IHtcbiAgICAgIGxldCB1cGRhdGVPdmVybGF5UHJvbWlzZSA9IHZtLnVwZGF0ZU92ZXJsYXlzKCk7XG4gICAgICB1cGRhdGVPdmVybGF5UHJvbWlzZS50aGVuKChyZXMpID0+IHtcbiAgICAgICAgVG9hc3RzU2VydmljZS5zaG93U3VjY2Vzc1RvYXN0KCdXZSBzYXZlZCB5b3VyIHVwZGF0ZS4nKTtcbiAgICAgICAgUHJvZ3Jlc3NCYXJTZXJ2aWNlLmNvbXBsZXRlKCk7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiB1cGRhdGVPdmVybGF5UHJvbWlzZTtcbiAgICB9O1xuXG4gICAgcHJvbWlzZS50aGVuKCgpID0+IHtcbiAgICAgICR0aW1lb3V0KHVwZGF0ZU92ZXJsYXlQcm9taXNlRGVmZXJyZWQsIDEwMDApXG4gICAgfSlcblxuICAgIHByb21pc2UuY2F0Y2goKHJlcykgPT4ge1xuICAgICAgUHJvZ3Jlc3NCYXJTZXJ2aWNlLmNvbXBsZXRlKCk7XG4gICAgICBUb2FzdHNTZXJ2aWNlLnNob3dFcnJvclRvYXN0KCdTb21ldGhpbmcgd2VudCB3cm9uZycpO1xuICAgIH0pXG4gICAgcmV0dXJuIHByb21pc2U7XG4gIH07XG5cbiAgdm0uYXBwbHlUZW5hbnRPdmVybGF5ID0gKGV2KSA9PiB7XG4gICAgbGV0IGNvbmZpcm0gPSAkbWREaWFsb2cuY29uZmlybShcbiAgICAgIHtcbiAgICAgICAgdGl0bGU6IGBBcmUgeW91IHN1cmU/YCxcbiAgICAgICAgdGV4dENvbnRlbnQ6IGBFYWNoIGRldmljZSBpbiB5b3VyIFRlbmFudCB3aWxsIGhhdmUgdGhlIGN1cnJlbnQgT3ZlcmxheSBUZW1wbGF0ZSBhcHBsaWVkIGFzIGl0cyBzZXR0aW5ncy5gLFxuICAgICAgICB0YXJnZXRFdmVudDogZXYsXG4gICAgICAgIGFyaWFMYWJlbDogJ0x1Y2t5IGRheScsXG4gICAgICAgIG9rOiAnQ29uZmlybScsXG4gICAgICAgIGNhbmNlbDogJ05ldmVybWluZCdcbiAgICAgIH1cbiAgICApO1xuXG4gICAgJG1kRGlhbG9nLnNob3coY29uZmlybSkudGhlbigoZnVuY3Rpb24gKCkge1xuICAgICAgUHJvZ3Jlc3NCYXJTZXJ2aWNlLnN0YXJ0KCk7XG4gICAgICBsZXQgcHJvbWlzZSA9IFRlbmFudHNTZXJ2aWNlLm92ZXJsYXlBcHBseVRlbmFudCh2bS50ZW5hbnRLZXkpXG4gICAgICBwcm9taXNlLnRoZW4oKHJlcykgPT4ge1xuICAgICAgICBsZXQgbWVzc2FnZSA9ICdZb3VyIFRlbmFudCBPdmVybGF5IFNldHRpbmdzIGFyZSBiZWluZyBhcHBsaWVkIHRvIGVhY2ggZGV2aWNlIGluIHlvdXIgVGVuYW50LiBQbGVhc2Ugd2FpdCBwYXRpZW50bHkgZm9yIHRoaXMgcHJvY2VzcyB0byBjb21wbGV0ZS4nXG4gICAgICAgIFRvYXN0c1NlcnZpY2Uuc2hvd1N1Y2Nlc3NUb2FzdChtZXNzYWdlKTtcbiAgICAgICAgdm0ubG9hZGluZyA9IHRydWU7XG4gICAgICAgIHZtLmdldFRlbmFudCgpO1xuICAgICAgICBQcm9ncmVzc0JhclNlcnZpY2UuY29tcGxldGUoKVxuICAgICAgfSlcbiAgICAgIHByb21pc2UuY2F0Y2goKHJlcykgPT4ge1xuICAgICAgICBQcm9ncmVzc0JhclNlcnZpY2UuY29tcGxldGUoKVxuICAgICAgICBUb2FzdHNTZXJ2aWNlLnNob3dFcnJvclRvYXN0KCdTb21ldGhpbmcgd2VudCB3cm9uZycpO1xuXG4gICAgICB9KVxuICAgICAgcmV0dXJuIHByb21pc2U7XG4gICAgfSkpXG5cbiAgfVxuXG4gIHZtLmNoZWNrRm9yT3ZlcmxheUNoYW5nZXMgPSAoKSA9PiB7XG4gICAgbGV0IGNoYW5nZWQgPSBmYWxzZTtcbiAgICBsZXQgY3VycmVudFRlbmFudE92ZXJsYXlzID0gdm0uY3VycmVudFRlbmFudC5vdmVybGF5cztcbiAgICBsZXQgY3VycmVudFRlbmFudENvcHlPdmVybGF5cyA9IHZtLmN1cnJlbnRUZW5hbnRDb3B5Lm92ZXJsYXlzO1xuICAgIGxldCBwb3NpdGlvbnMgPSBbJ3RvcF9sZWZ0JywgJ3RvcF9yaWdodCcsICdib3R0b21fcmlnaHQnLCAnYm90dG9tX2xlZnQnXTtcblxuICAgIGZvciAobGV0IHBvcyBvZiBwb3NpdGlvbnMpIHtcbiAgICAgIGlmIChjdXJyZW50VGVuYW50T3ZlcmxheXNbcG9zXS5zaXplICE9PSBjdXJyZW50VGVuYW50Q29weU92ZXJsYXlzW3Bvc10uc2l6ZSkge1xuICAgICAgICBjaGFuZ2VkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmIChjdXJyZW50VGVuYW50T3ZlcmxheXNbcG9zXS50eXBlICE9PSBjdXJyZW50VGVuYW50Q29weU92ZXJsYXlzW3Bvc10udHlwZSkge1xuICAgICAgICBjaGFuZ2VkID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIGlmIChjdXJyZW50VGVuYW50T3ZlcmxheXNbcG9zXS50eXBlID09PSAnbG9nbycpIHtcbiAgICAgICAgaWYgKChjdXJyZW50VGVuYW50T3ZlcmxheXNbcG9zXS50eXBlICsgXCI6IFwiICsgY3VycmVudFRlbmFudE92ZXJsYXlzW3Bvc10ubmFtZSkgIT09IGN1cnJlbnRUZW5hbnRDb3B5T3ZlcmxheXNbcG9zXS5uYW1lKSB7XG4gICAgICAgICAgY2hhbmdlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICB2bS5vdmVybGF5Q2hhbmdlZCA9IGNoYW5nZWQ7XG5cbiAgfVxuXG5cbiAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICAvLyBJbWFnZXNcbiAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xuICB2bS5zdWJtaXRJbWFnZSA9ICgpID0+IHtcbiAgICBpZiAodm0uc2VsZWN0ZWRMb2dvICYmIHZtLnNlbGVjdGVkTG9nb1swXSkge1xuICAgICAgdmFyIGZvcm1EYXRhID0gbmV3IEZvcm1EYXRhKCk7XG4gICAgICBsZXQgdmFsaWRGaWxlID0gdHJ1ZTtcbiAgICAgIGFuZ3VsYXIuZm9yRWFjaCh2bS5zZWxlY3RlZExvZ28sIGZ1bmN0aW9uIChvYmopIHtcbiAgICAgICAgaWYgKG9iai5sZkZpbGUuc2l6ZSA8IDE1MDAwMDAwKSB7XG4gICAgICAgICAgZm9ybURhdGEuYXBwZW5kKCdmaWxlcycsIG9iai5sZkZpbGUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZtLmZpbGVBcGkucmVtb3ZlQWxsKClcbiAgICAgICAgICB2YWxpZEZpbGUgPSBmYWxzZTtcbiAgICAgICAgICBUb2FzdHNTZXJ2aWNlLnNob3dFcnJvclRvYXN0KCdZb3VyIGltYWdlIGlzIGxhcmdlciB0aGFuIDE1IE1CLiBQbGVhc2UgY2hvb3NlIGEgc21hbGxlciBpbWFnZScpO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgaWYgKHZhbGlkRmlsZSkge1xuICAgICAgICBsZXQgcHJvbWlzZSA9IEltYWdlU2VydmljZS5zYXZlSW1hZ2Uodm0udGVuYW50S2V5LCBmb3JtRGF0YSlcbiAgICAgICAgcHJvbWlzZS50aGVuKChyZXMpID0+IHtcbiAgICAgICAgICBQcm9ncmVzc0JhclNlcnZpY2UuY29tcGxldGUoKTtcbiAgICAgICAgICAkdGltZW91dCh2bS5nZXRUZW5hbnRJbWFnZXMsIDEwMDApO1xuICAgICAgICAgIHZtLmZpbGVBcGkucmVtb3ZlQWxsKClcbiAgICAgICAgICBUb2FzdHNTZXJ2aWNlLnNob3dTdWNjZXNzVG9hc3QoJ1dlIHVwbG9hZGVkIHlvdXIgaW1hZ2UuJyk7XG4gICAgICAgIH0pXG4gICAgICAgIHByb21pc2UuY2F0Y2goKHJlcykgPT4ge1xuICAgICAgICAgIFByb2dyZXNzQmFyU2VydmljZS5jb21wbGV0ZSgpO1xuICAgICAgICAgIFRvYXN0c1NlcnZpY2Uuc2hvd0Vycm9yVG9hc3QoJ1NvbWV0aGluZyB3ZW50IHdyb25nLiBZb3UgbWF5IGhhdmUgYWxyZWFkeSB1cGxvYWRlZCB0aGlzIGltYWdlLicpO1xuICAgICAgICB9KVxuICAgICAgICByZXR1cm4gcHJvbWlzZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB2bS5nZXRUZW5hbnRJbWFnZXNBbmRSZWxvYWRUZW5hbnRBZnRlckRlbGV0ZSA9ICgpID0+IHtcbiAgICBsZXQgdGVuYW50SW1hZ2VQcm9taXNlID0gdm0uZ2V0VGVuYW50SW1hZ2VzKCk7XG4gICAgdGVuYW50SW1hZ2VQcm9taXNlLnRoZW4oKCkgPT4ge1xuICAgICAgbGV0IHVwZGF0ZU92ZXJsYXlQcm9taXNlID0gdm0udXBkYXRlT3ZlcmxheXMoKTtcbiAgICAgIHVwZGF0ZU92ZXJsYXlQcm9taXNlLnRoZW4oKCkgPT4ge1xuICAgICAgICBUb2FzdHNTZXJ2aWNlLnNob3dTdWNjZXNzVG9hc3QoJ1dlIGRlbGV0ZWQgeW91ciBpbWFnZS4nKTtcbiAgICAgICAgUHJvZ3Jlc3NCYXJTZXJ2aWNlLmNvbXBsZXRlKCk7XG4gICAgICB9KVxuICAgIH0pXG4gIH1cblxuICB2bS5kZWxldGVJbWFnZSA9IChldiwgbmFtZSwga2V5KSA9PiB7XG4gICAgbGV0IGNvbmZpcm0gPSAkbWREaWFsb2cuY29uZmlybShcbiAgICAgIHtcbiAgICAgICAgdGl0bGU6IGBBcmUgeW91IHN1cmU/YCxcbiAgICAgICAgdGV4dENvbnRlbnQ6IGBJZiB5b3UgcHJvY2VlZCwgJHtuYW1lfSB3aWxsIGJlIGRlbGV0ZWQgYW5kIHJlbW92ZWQgZnJvbSBhbGwgZGV2aWNlcyB0aGF0IHVzZSBpdC5gLFxuICAgICAgICB0YXJnZXRFdmVudDogZXYsXG4gICAgICAgIGFyaWFMYWJlbDogJ0x1Y2t5IGRheScsXG4gICAgICAgIG9rOiAnQ29uZmlybScsXG4gICAgICAgIGNhbmNlbDogJ05ldmVybWluZCdcbiAgICAgIH1cbiAgICApO1xuXG4gICAgJG1kRGlhbG9nLnNob3coY29uZmlybSkudGhlbigoZnVuY3Rpb24gKCkge1xuICAgICAgUHJvZ3Jlc3NCYXJTZXJ2aWNlLnN0YXJ0KCk7XG4gICAgICBsZXQgcHJvbWlzZSA9IEltYWdlU2VydmljZS5kZWxldGVJbWFnZShrZXkpXG4gICAgICBwcm9taXNlLnRoZW4oKHJlcykgPT4ge1xuICAgICAgICAkdGltZW91dCh2bS5nZXRUZW5hbnRJbWFnZXNBbmRSZWxvYWRUZW5hbnRBZnRlckRlbGV0ZSwgMTAwMCk7XG4gICAgICB9KVxuICAgICAgcHJvbWlzZS5jYXRjaCgocmVzKSA9PiB7XG4gICAgICAgIFRvYXN0c1NlcnZpY2Uuc2hvd0Vycm9yVG9hc3QoJ1NvbWV0aGluZyB3ZW50IHdyb25nIHdoaWxlIGRlbGV0aW5nIHlvdXIgaW1hZ2UuJyk7XG4gICAgICAgIFByb2dyZXNzQmFyU2VydmljZS5jb21wbGV0ZSgpO1xuICAgICAgfSlcbiAgICAgIHJldHVybiBwcm9taXNlO1xuICAgIH0pKVxuICB9O1xuXG4gIHZtLmdldFRlbmFudEltYWdlcyA9ICgpID0+IHtcbiAgICB2bS5PVkVSTEFZX1RZUEVTID0gW1xuICAgICAge3NpemU6IG51bGwsIHR5cGU6IG51bGwsIG5hbWU6IFwibm9uZVwiLCByZWFsTmFtZTogXCJub25lXCIsIG5ldzogZmFsc2UsIGltYWdlX2tleTogbnVsbH0sXG4gICAgICB7c2l6ZTogbnVsbCwgdHlwZTogXCJkYXRldGltZVwiLCBuYW1lOiBcImRhdGV0aW1lXCIsIHJlYWxOYW1lOiBcImRhdGV0aW1lXCIsIG5ldzogdHJ1ZSwgaW1hZ2Vfa2V5OiBudWxsfSxcbiAgICBdXG5cbiAgICBQcm9ncmVzc0JhclNlcnZpY2Uuc3RhcnQoKTtcbiAgICBsZXQgcHJvbWlzZSA9IEltYWdlU2VydmljZS5nZXRJbWFnZXModm0udGVuYW50S2V5KTtcbiAgICBwcm9taXNlLnRoZW4oKHJlcykgPT4ge1xuICAgICAgdm0udGVuYW50SW1hZ2VzID0gcmVzXG4gICAgICBQcm9ncmVzc0JhclNlcnZpY2UuY29tcGxldGUoKTtcbiAgICAgIGZvciAobGV0IHZhbHVlIG9mIHZtLnRlbmFudEltYWdlcykge1xuICAgICAgICBmb3IgKGxldCBzaXplT3B0aW9uIG9mIFtcInNtYWxsXCIsIFwibGFyZ2VcIl0pIHtcbiAgICAgICAgICBsZXQgbmV3VmFsdWUgPSB7XG4gICAgICAgICAgICByZWFsTmFtZTogYW5ndWxhci5jb3B5KHZhbHVlLm5hbWUpLFxuICAgICAgICAgICAgbmFtZTogXCJsb2dvOiBcIiArIHZhbHVlLm5hbWUsXG4gICAgICAgICAgICB0eXBlOiBcImxvZ29cIixcbiAgICAgICAgICAgIHNpemU6IHNpemVPcHRpb24sXG4gICAgICAgICAgICBpbWFnZV9rZXk6IHZhbHVlLmtleVxuICAgICAgICAgIH1cbiAgICAgICAgICB2bS5PVkVSTEFZX1RZUEVTLnB1c2gobmV3VmFsdWUpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICB2bS5PVkVSTEFZX1RZUEVTLnNvcnQobmF0dXJhbFNvcnQpO1xuXG4gICAgfSk7XG5cbiAgICBwcm9taXNlLmNhdGNoKCgpID0+IHtcbiAgICAgIFByb2dyZXNzQmFyU2VydmljZS5jb21wbGV0ZSgpO1xuICAgICAgVG9hc3RzU2VydmljZS5zaG93RXJyb3JTdGF0dXMoXCJTT01FVEhJTkcgV0VOVCBXUk9ORyBSRVRSSUVWSU5HIFlPVVIgSU1BR0VTXCIpXG4gICAgfSlcblxuICAgIHJldHVybiBwcm9taXNlXG4gIH07XG5cbiAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgLy8gU2V0dXBcbiAgLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy9cbiAgdm0ub25TdWNjZXNzUmVzb2x2aW5nVGVuYW50ID0gZnVuY3Rpb24gKHRlbmFudCkge1xuICAgIHZtLmN1cnJlbnRUZW5hbnQgPSB0ZW5hbnQ7XG4gICAgdm0uY3VycmVudFRlbmFudENvcHkgPSBhbmd1bGFyLmNvcHkodm0uY3VycmVudFRlbmFudCk7XG4gICAgdm0uc2VsZWN0ZWRUaW1lem9uZSA9IHRlbmFudC5kZWZhdWx0X3RpbWV6b25lO1xuXG4gIH07XG5cbiAgdm0uZ2V0VGVuYW50ID0gKCkgPT4ge1xuICAgIGxldCB0ZW5hbnRQcm9taXNlID0gVGVuYW50c1NlcnZpY2UuZ2V0VGVuYW50QnlLZXkoJHN0YXRlUGFyYW1zLnRlbmFudEtleSk7XG4gICAgdGVuYW50UHJvbWlzZS50aGVuKGZ1bmN0aW9uICh0ZW5hbnQpIHtcbiAgICAgIHZtLmN1cnJlbnRUZW5hbnQgPSB0ZW5hbnQ7XG4gICAgICBpZiAodm0uY3VycmVudFRlbmFudC5vdmVybGF5c1VwZGF0ZUluUHJvZ3Jlc3MpIHtcbiAgICAgICAgdm0ubG9hZGluZyA9IHRydWU7XG4gICAgICAgICR0aW1lb3V0KHZtLmdldFRlbmFudCwgMzAwMCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2bS5sb2FkaW5nID0gZmFsc2U7XG4gICAgICB9XG4gICAgICB2bS5jdXJyZW50VGVuYW50Q29weSA9IGFuZ3VsYXIuY29weSh2bS5jdXJyZW50VGVuYW50KTtcbiAgICB9KVxuICAgIHJldHVybiB0ZW5hbnRQcm9taXNlXG4gIH1cblxuICB2bS5pbml0aWFsaXplID0gKCkgPT4ge1xuICAgIHZtLmdldFRlbmFudEltYWdlcygpXG4gICAgdm0uZ2V0VGVuYW50KClcbiAgfVxuXG4gICRzY29wZS4kd2F0Y2goJ3RhYkluZGV4JywgZnVuY3Rpb24gKHRvVGFiLCBmcm9tVGFiKSB7XG4gICAgaWYgKHRvVGFiICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHN3aXRjaCAodG9UYWIpIHtcbiAgICAgICAgY2FzZSAwOlxuICAgICAgICAgIHJldHVybiAkc3RhdGUuZ28oJ3RlbmFudERldGFpbHMnLCB7dGVuYW50S2V5OiAkc3RhdGVQYXJhbXMudGVuYW50S2V5fSk7XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICByZXR1cm4gJHN0YXRlLmdvKCd0ZW5hbnRNYW5hZ2VkRGV2aWNlcycsIHt0ZW5hbnRLZXk6ICRzdGF0ZVBhcmFtcy50ZW5hbnRLZXl9KTtcbiAgICAgICAgY2FzZSAyOlxuICAgICAgICAgIHJldHVybiAkc3RhdGUuZ28oJ3RlbmFudFVubWFuYWdlZERldmljZXMnLCB7dGVuYW50S2V5OiAkc3RhdGVQYXJhbXMudGVuYW50S2V5fSk7XG4gICAgICAgIGNhc2UgMzpcbiAgICAgICAgICByZXR1cm4gJHN0YXRlLmdvKCd0ZW5hbnRMb2NhdGlvbnMnLCB7dGVuYW50S2V5OiAkc3RhdGVQYXJhbXMudGVuYW50S2V5fSk7XG4gICAgICAgIGNhc2UgNDpcbiAgICAgICAgICByZXR1cm4gJHN0YXRlLmdvKCd0ZW5hbnRPdmVybGF5cycsIHt0ZW5hbnRLZXk6ICRzdGF0ZVBhcmFtcy50ZW5hbnRLZXl9KTtcbiAgICAgICAgY2FzZSA1OlxuICAgICAgICAgIHJldHVybiAkc3RhdGUuZ28oJ3RlbmFudExvZ3MnLCB7dGVuYW50S2V5OiAkc3RhdGVQYXJhbXMudGVuYW50S2V5fSk7XG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gdm07XG59XG5cbmV4cG9ydCB7VGVuYW50T3ZlcmxheXNDdHJsfVxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zcmMvYXBwL3RlbmFudC90ZW5hbnQtb3ZlcmxheXMuY29udHJvbGxlci5qc1xuICoqLyIsImZ1bmN0aW9uIFRlbmFudEFkZEN0cmwoJGxvZywgJGxvY2F0aW9uLCBUZW5hbnRzU2VydmljZSwgRGlzdHJpYnV0b3JzU2VydmljZSwgVGltZXpvbmVzU2VydmljZSwgJHN0YXRlLCBzd2VldCwgUHJvZ3Jlc3NCYXJTZXJ2aWNlLFxuICAgICAgICAgICAgICAgICAgICAgICBTZXNzaW9uc1NlcnZpY2UpIHtcbiAgXCJuZ0luamVjdFwiO1xuXG4gIGxldCB2bSA9IHRoaXM7XG4gIHZtLmdhbWVTdG9wU2VydmVyID0gJGxvY2F0aW9uLmhvc3QoKS5pbmRleE9mKCdwcm92aXNpb25pbmctZ2FtZXN0b3AnKSA+IC0xO1xuICB2bS5jdXJyZW50VGVuYW50ID0ge1xuICAgIGtleTogdW5kZWZpbmVkLFxuICAgIG5hbWU6IHVuZGVmaW5lZCxcbiAgICB0ZW5hbnRfY29kZTogdW5kZWZpbmVkLFxuICAgIGFkbWluX2VtYWlsOiB1bmRlZmluZWQsXG4gICAgY29udGVudF9zZXJ2ZXJfdXJsOiB1bmRlZmluZWQsXG4gICAgY29udGVudF9tYW5hZ2VyX2Jhc2VfdXJsOiB1bmRlZmluZWQsXG4gICAgZG9tYWluX2tleTogdW5kZWZpbmVkLFxuICAgIG5vdGlmaWNhdGlvbl9lbWFpbHM6IHVuZGVmaW5lZCxcbiAgICBwcm9vZl9vZl9wbGF5X2xvZ2dpbmc6IGZhbHNlLFxuICAgIHByb29mX29mX3BsYXlfdXJsOiB1bmRlZmluZWQsXG4gICAgYWN0aXZlOiB0cnVlXG4gIH07XG4gIHZtLnNlbGVjdGVkRG9tYWluID0gdW5kZWZpbmVkO1xuICB2bS5kaXN0cmlidXRvckRvbWFpbnMgPSBbXTtcbiAgdm0udGltZXpvbmVzID0gW107XG4gIHZtLnNlbGVjdGVkVGltZXpvbmUgPSAnQW1lcmljYS9DaGljYWdvJztcblxuICB2bS5pbml0aWFsaXplID0gZnVuY3Rpb24gKCkge1xuICAgIGxldCB0aW1lem9uZVByb21pc2UgPSBUaW1lem9uZXNTZXJ2aWNlLmdldEN1c3RvbVRpbWV6b25lcygpO1xuICAgIHRpbWV6b25lUHJvbWlzZS50aGVuKGRhdGEgPT4gdm0udGltZXpvbmVzID0gZGF0YSk7XG4gICAgdm0uY3VycmVudERpc3RyaWJ1dG9yS2V5ID0gU2Vzc2lvbnNTZXJ2aWNlLmdldEN1cnJlbnREaXN0cmlidXRvcktleSgpO1xuICAgIGxldCBkaXN0cmlidXRvclByb21pc2UgPSBEaXN0cmlidXRvcnNTZXJ2aWNlLmdldEJ5S2V5KHZtLmN1cnJlbnREaXN0cmlidXRvcktleSk7XG4gICAgZGlzdHJpYnV0b3JQcm9taXNlLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgIHZtLmN1cnJlbnRUZW5hbnQuY29udGVudF9tYW5hZ2VyX2Jhc2VfdXJsID0gZGF0YS5jb250ZW50X21hbmFnZXJfdXJsO1xuICAgICAgcmV0dXJuIHZtLmN1cnJlbnRUZW5hbnQuY29udGVudF9zZXJ2ZXJfdXJsID0gZGF0YS5wbGF5ZXJfY29udGVudF91cmw7XG4gICAgfSk7XG4gICAgbGV0IGRpc3RyaWJ1dG9yRG9tYWluUHJvbWlzZSA9IERpc3RyaWJ1dG9yc1NlcnZpY2UuZ2V0RG9tYWluc0J5S2V5KHZtLmN1cnJlbnREaXN0cmlidXRvcktleSk7XG4gICAgcmV0dXJuIGRpc3RyaWJ1dG9yRG9tYWluUHJvbWlzZS50aGVuKGRvbWFpbnMgPT4gdm0uZGlzdHJpYnV0b3JEb21haW5zID0gZG9tYWlucyk7XG4gIH07XG5cbiAgdm0ub25DbGlja1NhdmVCdXR0b24gPSBmdW5jdGlvbiAoKSB7XG4gICAgUHJvZ3Jlc3NCYXJTZXJ2aWNlLnN0YXJ0KCk7XG4gICAgdm0uY3VycmVudFRlbmFudC5kZWZhdWx0X3RpbWV6b25lID0gdm0uc2VsZWN0ZWRUaW1lem9uZTtcbiAgICB2bS5jdXJyZW50VGVuYW50LmRvbWFpbl9rZXkgPSB2bS5zZWxlY3RlZERvbWFpbi5rZXk7XG4gICAgbGV0IHByb21pc2UgPSBUZW5hbnRzU2VydmljZS5zYXZlKHZtLmN1cnJlbnRUZW5hbnQpO1xuICAgIHJldHVybiBwcm9taXNlLnRoZW4odm0ub25TdWNjZXNzVGVuYW50U2F2ZSwgdm0ub25GYWlsdXJlVGVuYW50U2F2ZSk7XG4gIH07XG5cbiAgdm0ub25TdWNjZXNzVGVuYW50U2F2ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBQcm9ncmVzc0JhclNlcnZpY2UuY29tcGxldGUoKTtcbiAgICByZXR1cm4gJHN0YXRlLmdvKCd0ZW5hbnRzJyk7XG4gIH07XG5cbiAgdm0ub25GYWlsdXJlVGVuYW50U2F2ZSA9IGZ1bmN0aW9uIChlcnJvck9iamVjdCkge1xuICAgIFByb2dyZXNzQmFyU2VydmljZS5jb21wbGV0ZSgpO1xuICAgIGlmKGVycm9yT2JqZWN0LnN0YXR1cyA9PT0gNDA5KSB7XG4gICAgICByZXR1cm4gc3dlZXQuc2hvdygnT29wcy4uLicsXG4gICAgICAgICdUZW5hbnQgY29kZSB1bmF2YWlsYWJsZSBpbiBQcm92aXNpb25pbmcuIFBsZWFzZSBtb2RpZnkgdGVuYW50IG5hbWUgdG8gZ2VuZXJhdGUgYSB1bmlxdWUgdGVuYW50IGNvZGUuJyxcbiAgICAgICAgJ2Vycm9yJyk7XG4gICAgfVxuICAgIGVsc2UgaWYoZXJyb3JPYmplY3Quc3RhdHVzID09PSA0MTIpIHtcbiAgICAgIHJldHVybiBzd2VldC5zaG93KCdPb3BzLi4uJyxcbiAgICAgICAgJ1RlbmFudCBjb2RlIHVuYXZhaWxhYmxlIGluIENocm9tZSBEZXZpY2UgTWFuYWdlbWVudC4gTW9kaWZ5IHRlbmFudCBuYW1lIHRvIGdlbmVyYXRlIGEgdW5pcXVlIHRlbmFudCBjb2RlLicsXG4gICAgICAgICdlcnJvcicpO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICRsb2cuZXJyb3IoZXJyb3JPYmplY3QpO1xuICAgICAgcmV0dXJuIHN3ZWV0LnNob3coJ09vcHMuLi4nLCAnVW5hYmxlIHRvIHNhdmUgdGhlIHRlbmFudC4nLCAnZXJyb3InKTtcbiAgICB9XG4gIH07XG5cbiAgdm0uYXV0b0dlbmVyYXRlVGVuYW50Q29kZSA9IGZ1bmN0aW9uICgpIHtcbiAgICBpZiAoIXZtLmN1cnJlbnRUZW5hbnQua2V5KSB7XG4gICAgICBsZXQgbmV3VGVuYW50Q29kZSA9ICcnO1xuICAgICAgaWYgKHZtLmN1cnJlbnRUZW5hbnQubmFtZSkge1xuICAgICAgICBuZXdUZW5hbnRDb2RlID0gdm0uY3VycmVudFRlbmFudC5uYW1lLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIG5ld1RlbmFudENvZGUgPSBuZXdUZW5hbnRDb2RlLnJlcGxhY2UoL1xccysvZywgJ18nKTtcbiAgICAgICAgbmV3VGVuYW50Q29kZSA9IG5ld1RlbmFudENvZGUucmVwbGFjZSgvXFxXKy9nLCAnJyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdm0uY3VycmVudFRlbmFudC50ZW5hbnRfY29kZSA9IG5ld1RlbmFudENvZGU7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiB2bTtcbn1cbmV4cG9ydCB7VGVuYW50QWRkQ3RybH1cblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vc3JjL2FwcC90ZW5hbnQvdGVuYW50LWFkZC5jb250cm9sbGVyLmpzXG4gKiovIiwiZnVuY3Rpb24gVGVuYW50RGV0YWlsc0N0cmwoJHN0YXRlUGFyYW1zLCBUZW5hbnRzU2VydmljZSwgRG9tYWluc1NlcnZpY2UsIFRpbWV6b25lc1NlcnZpY2UsIERpc3RyaWJ1dG9yc1NlcnZpY2UsICRzdGF0ZSwgc3dlZXQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBQcm9ncmVzc0JhclNlcnZpY2UsIFRvYXN0c1NlcnZpY2UsIFNlc3Npb25zU2VydmljZSwgJHNjb3BlLCAkbG9jYXRpb24pIHtcbiAgXCJuZ0luamVjdFwiO1xuXG4gIGxldCB2bSA9IHRoaXM7XG4gIHZtLmdhbWVTdG9wU2VydmVyID0gJGxvY2F0aW9uLmhvc3QoKS5pbmRleE9mKCdwcm92aXNpb25pbmctZ2FtZXN0b3AnKSA+IC0xO1xuICB2bS5jdXJyZW50VGVuYW50ID0ge1xuICAgIGtleTogdW5kZWZpbmVkLFxuICAgIG5hbWU6IHVuZGVmaW5lZCxcbiAgICB0ZW5hbnRfY29kZTogdW5kZWZpbmVkLFxuICAgIGFkbWluX2VtYWlsOiB1bmRlZmluZWQsXG4gICAgY29udGVudF9zZXJ2ZXJfdXJsOiB1bmRlZmluZWQsXG4gICAgY29udGVudF9tYW5hZ2VyX2Jhc2VfdXJsOiB1bmRlZmluZWQsXG4gICAgZG9tYWluX2tleTogdW5kZWZpbmVkLFxuICAgIG5vdGlmaWNhdGlvbl9lbWFpbHM6IHVuZGVmaW5lZCxcbiAgICBwcm9vZl9vZl9wbGF5X2xvZ2dpbmc6IGZhbHNlLFxuICAgIHByb29mX29mX3BsYXlfdXJsOiB1bmRlZmluZWQsXG4gICAgYWN0aXZlOiB0cnVlXG4gIH07XG4gIHZtLnNlbGVjdGVkRG9tYWluID0gdW5kZWZpbmVkO1xuICB2bS5kaXN0cmlidXRvckRvbWFpbnMgPSBbXTtcbiAgdm0udGltZXpvbmVzID0gW107XG4gIHZtLnNlbGVjdGVkVGltZXpvbmUgPSAnQW1lcmljYS9DaGljYWdvJztcbiAgdm0uZWRpdE1vZGUgPSAhISRzdGF0ZVBhcmFtcy50ZW5hbnRLZXk7XG5cbiAgaWYgKHZtLmVkaXRNb2RlKSB7XG4gICAgbGV0IHRlbmFudFByb21pc2UgPSBUZW5hbnRzU2VydmljZS5nZXRUZW5hbnRCeUtleSgkc3RhdGVQYXJhbXMudGVuYW50S2V5KTtcbiAgICB0ZW5hbnRQcm9taXNlLnRoZW4oZnVuY3Rpb24gKHRlbmFudCkge1xuICAgICAgdm0uY3VycmVudFRlbmFudCA9IHRlbmFudDtcbiAgICAgIHJldHVybiB2bS5vblN1Y2Nlc3NSZXNvbHZpbmdUZW5hbnQodGVuYW50KTtcbiAgICB9KTtcbiAgfVxuXG4gIHZtLmluaXRpYWxpemUgPSBmdW5jdGlvbiAoKSB7XG4gICAgbGV0IHRpbWV6b25lUHJvbWlzZSA9IFRpbWV6b25lc1NlcnZpY2UuZ2V0Q3VzdG9tVGltZXpvbmVzKCk7XG4gICAgdGltZXpvbmVQcm9taXNlLnRoZW4oZGF0YSA9PiB2bS50aW1lem9uZXMgPSBkYXRhKTtcbiAgICB2bS5jdXJyZW50RGlzdHJpYnV0b3JLZXkgPSBTZXNzaW9uc1NlcnZpY2UuZ2V0Q3VycmVudERpc3RyaWJ1dG9yS2V5KCk7XG4gICAgbGV0IGRpc3RyaWJ1dG9yRG9tYWluUHJvbWlzZSA9IERpc3RyaWJ1dG9yc1NlcnZpY2UuZ2V0RG9tYWluc0J5S2V5KHZtLmN1cnJlbnREaXN0cmlidXRvcktleSk7XG4gICAgcmV0dXJuIGRpc3RyaWJ1dG9yRG9tYWluUHJvbWlzZS50aGVuKGRvbWFpbnMgPT4gdm0uZGlzdHJpYnV0b3JEb21haW5zID0gZG9tYWlucyk7XG4gIH07XG5cbiAgdm0ub25TdWNjZXNzUmVzb2x2aW5nVGVuYW50ID0gZnVuY3Rpb24gKHRlbmFudCkge1xuICAgIHZtLnNlbGVjdGVkVGltZXpvbmUgPSB0ZW5hbnQuZGVmYXVsdF90aW1lem9uZTtcbiAgICBsZXQgZG9tYWluUHJvbWlzZSA9IERvbWFpbnNTZXJ2aWNlLmdldERvbWFpbkJ5S2V5KHRlbmFudC5kb21haW5fa2V5KTtcbiAgICByZXR1cm4gZG9tYWluUHJvbWlzZS50aGVuKGRhdGEgPT4gdm0uc2VsZWN0ZWREb21haW4gPSBkYXRhKTtcbiAgfTtcblxuICB2bS5vbkNsaWNrU2F2ZUJ1dHRvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICBQcm9ncmVzc0JhclNlcnZpY2Uuc3RhcnQoKTtcbiAgICB2bS5jdXJyZW50VGVuYW50LmRlZmF1bHRfdGltZXpvbmUgPSB2bS5zZWxlY3RlZFRpbWV6b25lO1xuICAgIHZtLmN1cnJlbnRUZW5hbnQuZG9tYWluX2tleSA9IHZtLnNlbGVjdGVkRG9tYWluLmtleTtcbiAgICBsZXQgcHJvbWlzZSA9IFRlbmFudHNTZXJ2aWNlLnNhdmUodm0uY3VycmVudFRlbmFudCk7XG4gICAgcmV0dXJuIHByb21pc2UudGhlbih2bS5vblN1Y2Nlc3NUZW5hbnRTYXZlLCB2bS5vbkZhaWx1cmVUZW5hbnRTYXZlKTtcbiAgfTtcblxuICB2bS5vblN1Y2Nlc3NUZW5hbnRTYXZlID0gZnVuY3Rpb24gKCkge1xuICAgIFByb2dyZXNzQmFyU2VydmljZS5jb21wbGV0ZSgpO1xuICAgIHJldHVybiBUb2FzdHNTZXJ2aWNlLnNob3dTdWNjZXNzVG9hc3QoJ1dlIHNhdmVkIHlvdXIgdGVuYW50IGluZm9ybWF0aW9uLicpO1xuICB9O1xuXG4gIHZtLm9uRmFpbHVyZVRlbmFudFNhdmUgPSBmdW5jdGlvbiAoZXJyb3JPYmplY3QpIHtcbiAgICBQcm9ncmVzc0JhclNlcnZpY2UuY29tcGxldGUoKTtcbiAgICBpZiAoZXJyb3JPYmplY3Quc3RhdHVzID09PSA0MDkpIHtcbiAgICAgIHJldHVybiBzd2VldC5zaG93KCdPb3BzLi4uJyxcbiAgICAgICAgJ1RlbmFudCBjb2RlIHVuYXZhaWxhYmxlLiBQbGVhc2UgbW9kaWZ5IHRlbmFudCBuYW1lIHRvIGdlbmVyYXRlIGEgdW5pcXVlIHRlbmFudCBjb2RlLicsICdlcnJvcicpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gc3dlZXQuc2hvdygnT29wcy4uLicsICdVbmFibGUgdG8gc2F2ZSB0aGUgdGVuYW50LicsICdlcnJvcicpO1xuICAgIH1cbiAgfTtcblxuICB2bS5lZGl0SXRlbSA9IGl0ZW0gPT4gJHN0YXRlLmdvKCdlZGl0RGV2aWNlJywge2RldmljZUtleTogaXRlbS5rZXksIHRlbmFudEtleTogJHN0YXRlUGFyYW1zLnRlbmFudEtleX0pO1xuXG4gIHZtLmF1dG9HZW5lcmF0ZVRlbmFudENvZGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCF2bS5jdXJyZW50VGVuYW50LmtleSkge1xuICAgICAgbGV0IG5ld1RlbmFudENvZGUgPSAnJztcbiAgICAgIGlmICh2bS5jdXJyZW50VGVuYW50Lm5hbWUpIHtcbiAgICAgICAgbmV3VGVuYW50Q29kZSA9IHZtLmN1cnJlbnRUZW5hbnQubmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICBuZXdUZW5hbnRDb2RlID0gbmV3VGVuYW50Q29kZS5yZXBsYWNlKC9cXHMrL2csICdfJyk7XG4gICAgICAgIG5ld1RlbmFudENvZGUgPSBuZXdUZW5hbnRDb2RlLnJlcGxhY2UoL1xcVysvZywgJycpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHZtLmN1cnJlbnRUZW5hbnQudGVuYW50X2NvZGUgPSBuZXdUZW5hbnRDb2RlO1xuICAgIH1cbiAgfTtcblxuICAkc2NvcGUudGFiSW5kZXggPSAwO1xuXG4gICRzY29wZS4kd2F0Y2goJ3RhYkluZGV4JywgZnVuY3Rpb24gKHRvVGFiLCBmcm9tVGFiKSB7XG4gICAgaWYgKHRvVGFiICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHN3aXRjaCAodG9UYWIpIHtcbiAgICAgICAgY2FzZSAwOlxuICAgICAgICAgIHJldHVybiAkc3RhdGUuZ28oJ3RlbmFudERldGFpbHMnLCB7dGVuYW50S2V5OiAkc3RhdGVQYXJhbXMudGVuYW50S2V5fSk7XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICByZXR1cm4gJHN0YXRlLmdvKCd0ZW5hbnRNYW5hZ2VkRGV2aWNlcycsIHt0ZW5hbnRLZXk6ICRzdGF0ZVBhcmFtcy50ZW5hbnRLZXl9KTtcbiAgICAgICAgY2FzZSAyOlxuICAgICAgICAgIHJldHVybiAkc3RhdGUuZ28oJ3RlbmFudFVubWFuYWdlZERldmljZXMnLCB7dGVuYW50S2V5OiAkc3RhdGVQYXJhbXMudGVuYW50S2V5fSk7XG4gICAgICAgIGNhc2UgMzpcbiAgICAgICAgICByZXR1cm4gJHN0YXRlLmdvKCd0ZW5hbnRMb2NhdGlvbnMnLCB7dGVuYW50S2V5OiAkc3RhdGVQYXJhbXMudGVuYW50S2V5fSk7XG4gICAgICAgIGNhc2UgNDpcbiAgICAgICAgICByZXR1cm4gJHN0YXRlLmdvKCd0ZW5hbnRPdmVybGF5cycsIHt0ZW5hbnRLZXk6ICRzdGF0ZVBhcmFtcy50ZW5hbnRLZXl9KTtcbiAgICAgICAgY2FzZSA1OlxuICAgICAgICAgIHJldHVybiAkc3RhdGUuZ28oJ3RlbmFudExvZ3MnLCB7dGVuYW50S2V5OiAkc3RhdGVQYXJhbXMudGVuYW50S2V5fSk7XG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICByZXR1cm4gdm07XG59XG5leHBvcnQge1RlbmFudERldGFpbHNDdHJsfVxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zcmMvYXBwL3RlbmFudC90ZW5hbnQtZGV0YWlscy5jb250cm9sbGVyLmpzXG4gKiovIiwiZnVuY3Rpb24gVGVuYW50TG9jYXRpb25DdHJsKCRzdGF0ZVBhcmFtcywgVGVuYW50c1NlcnZpY2UsIExvY2F0aW9uc1NlcnZpY2UsICRzdGF0ZSwgc3dlZXQsIFByb2dyZXNzQmFyU2VydmljZSwgVG9hc3RzU2VydmljZSkge1xuICBcIm5nSW5qZWN0XCI7XG5cbiAgbGV0IHZtID0gdGhpcztcbiAgdm0ubG9jYXRpb24gPSB7XG4gICAga2V5OiB1bmRlZmluZWRcbiAgfTtcbiAgdm0udGVuYW50S2V5ID0gJHN0YXRlUGFyYW1zLnRlbmFudEtleTtcbiAgdm0uZWRpdE1vZGUgPSAhISRzdGF0ZVBhcmFtcy5sb2NhdGlvbktleTtcbiAgaWYgKHZtLmVkaXRNb2RlKSB7XG4gICAgbGV0IGxvY2F0aW9uUHJvbWlzZSA9IExvY2F0aW9uc1NlcnZpY2UuZ2V0TG9jYXRpb25CeUtleSgkc3RhdGVQYXJhbXMubG9jYXRpb25LZXkpO1xuICAgIGxvY2F0aW9uUHJvbWlzZS50aGVuKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICB2bS5sb2NhdGlvbiA9IGRhdGE7XG4gICAgICB2bS50ZW5hbnRLZXkgPSBkYXRhLnRlbmFudEtleTtcbiAgICAgIHZtLmxvY2F0aW9uTmFtZSA9IGRhdGEuY3VzdG9tZXJMb2NhdGlvbk5hbWU7XG4gICAgICByZXR1cm4gdm0uZmV0Y2hUZW5hbnROYW1lKHZtLnRlbmFudEtleSk7XG4gICAgfSk7XG4gIH1cblxuICB2bS5pbml0aWFsaXplID0gZnVuY3Rpb24gKCkge1xuICAgIGlmICghdm0uZWRpdE1vZGUpIHtcbiAgICAgIHZtLmZldGNoVGVuYW50TmFtZSh2bS50ZW5hbnRLZXkpO1xuICAgICAgcmV0dXJuIHZtLmxvY2F0aW9uID0ge1xuICAgICAgICB0ZW5hbnRLZXk6IHZtLnRlbmFudEtleSxcbiAgICAgICAgYWN0aXZlOiB0cnVlXG4gICAgICB9O1xuICAgIH1cbiAgfTtcblxuICB2bS5vbkNsaWNrU2F2ZUJ1dHRvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICBQcm9ncmVzc0JhclNlcnZpY2Uuc3RhcnQoKTtcbiAgICBsZXQgcHJvbWlzZSA9IExvY2F0aW9uc1NlcnZpY2Uuc2F2ZSh2bS5sb2NhdGlvbik7XG4gICAgaWYgKHZtLmVkaXRNb2RlKSB7XG4gICAgICByZXR1cm4gcHJvbWlzZS50aGVuKHZtLm9uU3VjY2Vzc1VwZGF0aW5nTG9jYXRpb24odm0udGVuYW50S2V5KSwgdm0ub25GYWlsdXJlU2F2aW5nTG9jYXRpb24pO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gcHJvbWlzZS50aGVuKHZtLm9uU3VjY2Vzc1NhdmluZ0xvY2F0aW9uLCB2bS5vbkZhaWx1cmVTYXZpbmdMb2NhdGlvbik7XG4gICAgfVxuICB9O1xuXG4gIHZtLm9uU3VjY2Vzc1NhdmluZ0xvY2F0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgIFByb2dyZXNzQmFyU2VydmljZS5jb21wbGV0ZSgpO1xuICAgIFRvYXN0c1NlcnZpY2Uuc2hvd1N1Y2Nlc3NUb2FzdCgnV2Ugc2F2ZWQgeW91ciBsb2NhdGlvbi4nKTtcbiAgICByZXR1cm4gc2V0VGltZW91dCgoZnVuY3Rpb24gKCkge1xuICAgICAgJHN0YXRlLmdvKCd0ZW5hbnRMb2NhdGlvbnMnLCB7dGVuYW50S2V5OiAkc3RhdGVQYXJhbXMudGVuYW50S2V5fSk7XG4gICAgICByZXR1cm47XG4gICAgfSksIDEwMDApO1xuICB9O1xuXG4gIHZtLm9uU3VjY2Vzc1VwZGF0aW5nTG9jYXRpb24gPSBmdW5jdGlvbiAodGVuYW50X2tleSkge1xuICAgIFByb2dyZXNzQmFyU2VydmljZS5jb21wbGV0ZSgpO1xuICAgIFRvYXN0c1NlcnZpY2Uuc2hvd1N1Y2Nlc3NUb2FzdCgnV2UgdXBkYXRlZCB5b3VyIGxvY2F0aW9uLicpO1xuICAgIHJldHVybiBzZXRUaW1lb3V0KChmdW5jdGlvbiAoKSB7XG4gICAgICAkc3RhdGUuZ28oJ3RlbmFudExvY2F0aW9ucycsIHt0ZW5hbnRLZXk6IHRlbmFudF9rZXl9KTtcbiAgICAgIHJldHVybjtcbiAgICB9KSwgMTAwMCk7XG4gIH07XG5cbiAgdm0ub25GYWlsdXJlU2F2aW5nTG9jYXRpb24gPSBmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICBQcm9ncmVzc0JhclNlcnZpY2UuY29tcGxldGUoKTtcbiAgICBpZiAocmVzcG9uc2Uuc3RhdHVzID09PSA0MDkpIHtcbiAgICAgIFRvYXN0c1NlcnZpY2Uuc2hvd0Vycm9yVG9hc3QoJ0xvY2F0aW9uIGNvZGUgY29uZmxpY3QuIFVuYWJsZSB0byBzYXZlIHlvdXIgbG9jYXRpb24uJyk7XG4gICAgICByZXR1cm4gc3dlZXQuc2hvdygnT29wcy4uLicsXG4gICAgICAgICdQbGVhc2UgY2hhbmdlIHlvdXIgY3VzdG9tZXIgbG9jYXRpb24gbmFtZS4gTG9jYXRpb24gbmFtZSBtdXN0IGdlbmVyYXRlIGEgdW5pcXVlIGxvY2F0aW9uIGNvZGUuJyxcbiAgICAgICAgJ2Vycm9yJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBUb2FzdHNTZXJ2aWNlLnNob3dFcnJvclRvYXN0KCdVbmFibGUgdG8gc2F2ZSB5b3VyIGxvY2F0aW9uLicpO1xuICAgIH1cbiAgfTtcblxuICB2bS5mZXRjaFRlbmFudE5hbWUgPSBmdW5jdGlvbiAodGVuYW50S2V5KSB7XG4gICAgbGV0IHRlbmFudFByb21pc2UgPSBUZW5hbnRzU2VydmljZS5nZXRUZW5hbnRCeUtleSh0ZW5hbnRLZXkpO1xuICAgIHJldHVybiB0ZW5hbnRQcm9taXNlLnRoZW4odGVuYW50ID0+IHZtLnRlbmFudE5hbWUgPSB0ZW5hbnQubmFtZSk7XG4gIH07XG5cbiAgdm0uYXV0b0dlbmVyYXRlQ3VzdG9tZXJMb2NhdGlvbkNvZGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKCF2bS5sb2NhdGlvbi5rZXkpIHtcbiAgICAgIGxldCBuZXdDdXN0b21lckxvY2F0aW9uQ29kZSA9ICcnO1xuICAgICAgaWYgKHZtLmxvY2F0aW9uLmN1c3RvbWVyTG9jYXRpb25OYW1lKSB7XG4gICAgICAgIG5ld0N1c3RvbWVyTG9jYXRpb25Db2RlID0gdm0ubG9jYXRpb24uY3VzdG9tZXJMb2NhdGlvbk5hbWUudG9Mb3dlckNhc2UoKTtcbiAgICAgICAgbmV3Q3VzdG9tZXJMb2NhdGlvbkNvZGUgPSBuZXdDdXN0b21lckxvY2F0aW9uQ29kZS5yZXBsYWNlKC9cXHMrL2csICdfJyk7XG4gICAgICAgIG5ld0N1c3RvbWVyTG9jYXRpb25Db2RlID0gbmV3Q3VzdG9tZXJMb2NhdGlvbkNvZGUucmVwbGFjZSgvXFxXKy9nLCAnJyk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdm0ubG9jYXRpb24uY3VzdG9tZXJMb2NhdGlvbkNvZGUgPSBuZXdDdXN0b21lckxvY2F0aW9uQ29kZTtcbiAgICB9XG4gIH07XG5cbiAgcmV0dXJuIHZtO1xufVxuZXhwb3J0IHtUZW5hbnRMb2NhdGlvbkN0cmx9XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL3NyYy9hcHAvdGVuYW50L3RlbmFudC1sb2NhdGlvbi5jb250cm9sbGVyLmpzXG4gKiovIiwiaW1wb3J0IG5hdHVyYWxTb3J0IGZyb20gJ2phdmFzY3JpcHQtbmF0dXJhbC1zb3J0JztcblxuXG5mdW5jdGlvbiBUZW5hbnRMb2NhdGlvbnNDdHJsKCRzY29wZSwgJHN0YXRlUGFyYW1zLCBUZW5hbnRzU2VydmljZSwgTG9jYXRpb25zU2VydmljZSwgJHN0YXRlLCBQcm9ncmVzc0JhclNlcnZpY2UpIHtcbiAgXCJuZ0luamVjdFwiO1xuXG4gIGxldCB2bSA9IHRoaXM7XG4gIGxldCB7dGVuYW50S2V5fSA9ICRzdGF0ZVBhcmFtcztcbiAgJHNjb3BlLnRhYkluZGV4ID0gMztcbiAgdm0ubG9jYXRpb25zID0gW107XG4gIHZtLnNlYXJjaERpc2FibGVkID0gdHJ1ZTtcbiAgdm0udGVuYW50S2V5ID0gJHN0YXRlUGFyYW1zLnRlbmFudEtleTtcblxuICBsZXQgdGVuYW50UHJvbWlzZSA9IFRlbmFudHNTZXJ2aWNlLmdldFRlbmFudEJ5S2V5KHRlbmFudEtleSk7XG4gIHRlbmFudFByb21pc2UudGhlbihkYXRhID0+IHtcbiAgICB2bS5jdXJyZW50VGVuYW50ID0gZGF0YVxuICB9KTtcblxuICAkc2NvcGUuJHdhdGNoKCd0YWJJbmRleCcsIGZ1bmN0aW9uICh0b1RhYiwgZnJvbVRhYikge1xuICAgIGlmICh0b1RhYiAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBzd2l0Y2ggKHRvVGFiKSB7XG4gICAgICAgIGNhc2UgMDpcbiAgICAgICAgICByZXR1cm4gJHN0YXRlLmdvKCd0ZW5hbnREZXRhaWxzJywge3RlbmFudEtleTogJHN0YXRlUGFyYW1zLnRlbmFudEtleX0pO1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgcmV0dXJuICRzdGF0ZS5nbygndGVuYW50TWFuYWdlZERldmljZXMnLCB7dGVuYW50S2V5OiAkc3RhdGVQYXJhbXMudGVuYW50S2V5fSk7XG4gICAgICAgIGNhc2UgMjpcbiAgICAgICAgICByZXR1cm4gJHN0YXRlLmdvKCd0ZW5hbnRVbm1hbmFnZWREZXZpY2VzJywge3RlbmFudEtleTogJHN0YXRlUGFyYW1zLnRlbmFudEtleX0pO1xuICAgICAgICBjYXNlIDM6XG4gICAgICAgICAgcmV0dXJuICRzdGF0ZS5nbygndGVuYW50TG9jYXRpb25zJywge3RlbmFudEtleTogJHN0YXRlUGFyYW1zLnRlbmFudEtleX0pO1xuICAgICAgICBjYXNlIDQ6XG4gICAgICAgICAgcmV0dXJuICRzdGF0ZS5nbygndGVuYW50T3ZlcmxheXMnLCB7dGVuYW50S2V5OiAkc3RhdGVQYXJhbXMudGVuYW50S2V5fSk7XG4gICAgICAgIGNhc2UgNTpcbiAgICAgICAgICByZXR1cm4gJHN0YXRlLmdvKCd0ZW5hbnRMb2dzJywge3RlbmFudEtleTogJHN0YXRlUGFyYW1zLnRlbmFudEtleX0pO1xuICAgICAgfVxuICAgIH1cbiAgfSk7XG5cbiAgdm0uZ2V0TG9jYXRpb25zID0gZnVuY3Rpb24gKHRlbmFudEtleSwgcHJldiwgbmV4dCkge1xuICAgIFByb2dyZXNzQmFyU2VydmljZS5zdGFydCgpO1xuICAgIGxldCBsb2NhdGlvbnNQcm9taXNlID0gTG9jYXRpb25zU2VydmljZS5nZXRMb2NhdGlvbnNCeVRlbmFudEtleVBhZ2luYXRlZCh0ZW5hbnRLZXksIHByZXYsIG5leHQpO1xuICAgIHJldHVybiBsb2NhdGlvbnNQcm9taXNlLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgIHZtLmxvY2F0aW9ucyA9IGRhdGEubG9jYXRpb25zO1xuICAgICAgdm0ubmV4dF9jdXJzb3IgPSBkYXRhLm5leHRfY3Vyc29yO1xuICAgICAgdm0ucHJldl9jdXJzb3IgPSBkYXRhLnByZXZfY3Vyc29yO1xuICAgICAgcmV0dXJuIFByb2dyZXNzQmFyU2VydmljZS5jb21wbGV0ZSgpO1xuICAgIH0pO1xuICB9O1xuXG4gIHZtLnNlYXJjaEFsbFRlbmFudExvY2F0aW9uc0J5TmFtZSA9IChuYW1lKSA9PiB7XG4gICAgaWYgKCFuYW1lIHx8IG5hbWUubGVuZ3RoIDwgMykge1xuICAgICAgcmV0dXJuIFtdXG4gICAgfVxuICAgIGxldCBwcm9taXNlID0gTG9jYXRpb25zU2VydmljZS5zZWFyY2hBbGxUZW5hbnRMb2NhdGlvbnNCeU5hbWUodm0udGVuYW50S2V5LCBuYW1lKVxuICAgIHJldHVybiBwcm9taXNlLnRoZW4oKHJlc3BvbnNlKSA9PiB7XG4gICAgICB2bS5zZWFyY2hlZFRlbmFudExvY2F0aW9ucyA9IHJlc3BvbnNlXG4gICAgICBpZiAodm0uc2VhcmNoZWRUZW5hbnRMb2NhdGlvbnMpIHtcbiAgICAgICAgcmV0dXJuIHZtLnNlYXJjaGVkVGVuYW50TG9jYXRpb25zLm1hcCgoaSkgPT4gaS5jdXN0b21lckxvY2F0aW9uTmFtZSkuc29ydChuYXR1cmFsU29ydClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBbXVxuICAgICAgfVxuICAgIH0pXG4gICAgcmV0dXJuIHByb21pc2UuY2F0Y2goKHJlc3BvbnNlKSA9PiB7XG4gICAgICBsZXQgZXJyb3JNZXNzYWdlID0gYFVuYWJsZSB0byBmZXRjaCBsb2NhdGlvbnMuIEVycm9yOiAke3Jlc3BvbnNlLnN0YXR1c31gO1xuICAgICAgcmV0dXJuIHN3ZWV0LnNob3coJ09vcHMuLi4nLCBlcnJvck1lc3NhZ2UsICdlcnJvcicpO1xuICAgIH0pXG4gIH07XG5cbiAgdm0uaXNUZW5hbnRMb2NhdGlvblZhbGlkID0gKG5hbWUpID0+IHtcbiAgICBpZiAoIW5hbWUgfHwgbmFtZS5sZW5ndGggPCAzKSB7XG4gICAgICByZXR1cm4gW11cbiAgICB9XG4gICAgbGV0IHByb21pc2UgPSBMb2NhdGlvbnNTZXJ2aWNlLnNlYXJjaEFsbFRlbmFudExvY2F0aW9uc0J5TmFtZSh2bS50ZW5hbnRLZXksIG5hbWUpXG4gICAgICAudGhlbigocmVzcG9uc2UpID0+IHtcbiAgICAgICAgbGV0IG1hdGNoID0gcmVzcG9uc2VcbiAgICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgICAgZm9yIChsZXQgZWFjaExvY2F0aW9uTmFtZSBvZiBtYXRjaCkge1xuICAgICAgICAgICAgaWYgKG5hbWUgPT09IGVhY2hMb2NhdGlvbk5hbWUuY3VzdG9tZXJMb2NhdGlvbk5hbWUpIHtcbiAgICAgICAgICAgICAgdm0uc2VhcmNoRGlzYWJsZWQgPSBmYWxzZTtcbiAgICAgICAgICAgICAgdm0uc2VhcmNoTWF0Y2ggPSBlYWNoTG9jYXRpb25OYW1lXG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHZtLnNlYXJjaERpc2FibGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdm0uc2VhcmNoRGlzYWJsZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9KVxuICB9O1xuXG4gIHZtLnBhZ2luYXRlQ2FsbCA9IGZ1bmN0aW9uIChmb3J3YXJkKSB7XG4gICAgaWYgKGZvcndhcmQpIHtcbiAgICAgIHJldHVybiB2bS5nZXRMb2NhdGlvbnModGVuYW50S2V5LCBudWxsLCB2bS5uZXh0X2N1cnNvcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB2bS5nZXRMb2NhdGlvbnModGVuYW50S2V5LCB2bS5wcmV2X2N1cnNvciwgbnVsbCk7XG4gICAgfVxuICB9O1xuXG4gIHZtLmluaXRpYWxpemUgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHZtLmdldExvY2F0aW9ucyh0ZW5hbnRLZXkpO1xuICB9O1xuXG4gIHZtLmVkaXRJdGVtID0gaXRlbSA9PiAkc3RhdGUuZ28oJ2VkaXRMb2NhdGlvbicsIHtsb2NhdGlvbktleTogaXRlbS5rZXl9KTtcblxuXG4gIHJldHVybiB2bTtcbn1cblxuZXhwb3J0IHtUZW5hbnRMb2NhdGlvbnNDdHJsfVxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zcmMvYXBwL3RlbmFudC90ZW5hbnQtbG9jYXRpb25zLmNvbnRyb2xsZXIuanNcbiAqKi8iLCJmdW5jdGlvbiBUZW5hbnRNYW5hZ2VkRGV2aWNlc0N0cmwoJHNjb3BlLCAkc3RhdGVQYXJhbXMsIFRlbmFudHNTZXJ2aWNlLCBEZXZpY2VzU2VydmljZSwgUHJvZ3Jlc3NCYXJTZXJ2aWNlLCAkc3RhdGUpIHtcbiAgXCJuZ0luamVjdFwiO1xuXG4gIGxldCB2bSA9IHRoaXM7XG4gIHZtLmN1cnJlbnRUZW5hbnQgPSB7XG4gICAga2V5OiB1bmRlZmluZWQsXG4gICAgbmFtZTogdW5kZWZpbmVkLFxuICAgIHRlbmFudF9jb2RlOiB1bmRlZmluZWQsXG4gICAgYWRtaW5fZW1haWw6IHVuZGVmaW5lZCxcbiAgICBjb250ZW50X3NlcnZlcl91cmw6IHVuZGVmaW5lZCxcbiAgICBjb250ZW50X21hbmFnZXJfYmFzZV91cmw6IHVuZGVmaW5lZCxcbiAgICBkb21haW5fa2V5OiB1bmRlZmluZWQsXG4gICAgbm90aWZpY2F0aW9uX2VtYWlsczogdW5kZWZpbmVkLFxuICAgIHByb29mX29mX3BsYXlfbG9nZ2luZzogZmFsc2UsXG4gICAgYWN0aXZlOiB0cnVlXG4gIH07XG4gIHZtLnRlbmFudERldmljZXMgPSBbXTtcbiAgdm0uZGV2aWNlc1ByZXYgPSBudWxsO1xuICB2bS5kZXZpY2VzTmV4dCA9IG51bGw7XG4gIHZtLnNlbGVjdGVkQnV0dG9uID0gXCJTZXJpYWwgTnVtYmVyXCI7XG4gIHZtLnNlcmlhbERldmljZXMgPSB7fTtcbiAgdm0uZGlzYWJsZWQgPSB0cnVlO1xuICB2bS5kZXZpY2VzVG9NYXRjaE9uID0gW107XG4gIHZtLm1hY0RldmljZXMgPSB7fTtcbiAgdm0uZWRpdE1vZGUgPSAhISRzdGF0ZVBhcmFtcy50ZW5hbnRLZXk7XG4gIHZtLnRlbmFudEtleSA9ICRzdGF0ZVBhcmFtcy50ZW5hbnRLZXk7XG5cbiAgdm0uZ2V0TWFuYWdlZERldmljZXMgPSBmdW5jdGlvbiAodGVuYW50S2V5LCBwcmV2X2N1cnNvciwgbmV4dF9jdXJzb3IpIHtcbiAgICBQcm9ncmVzc0JhclNlcnZpY2Uuc3RhcnQoKTtcbiAgICBsZXQgZGV2aWNlc1Byb21pc2UgPSBEZXZpY2VzU2VydmljZS5nZXREZXZpY2VzQnlUZW5hbnQodGVuYW50S2V5LCBwcmV2X2N1cnNvciwgbmV4dF9jdXJzb3IpO1xuICAgIHJldHVybiBkZXZpY2VzUHJvbWlzZS50aGVuKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICB2bS5kZXZpY2VzUHJldiA9IGRhdGFbXCJwcmV2X2N1cnNvclwiXTtcbiAgICAgIHZtLmRldmljZXNOZXh0ID0gZGF0YVtcIm5leHRfY3Vyc29yXCJdO1xuICAgICAgdm0udGVuYW50RGV2aWNlcyA9IGRhdGFbXCJkZXZpY2VzXCJdO1xuICAgICAgcmV0dXJuIFByb2dyZXNzQmFyU2VydmljZS5jb21wbGV0ZSgpO1xuICAgIH0pO1xuICB9O1xuXG4gIHZtLmVkaXRJdGVtID0gKGl0ZW0pID0+IERldmljZXNTZXJ2aWNlLmVkaXRJdGVtKGl0ZW0pXG5cbiAgdm0ucmVmcmVzaERldmljZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgdm0uZGV2aWNlc1ByZXYgPSBudWxsO1xuICAgIHZtLmRldmljZXNOZXh0ID0gbnVsbDtcbiAgICB2bS50ZW5hbnREZXZpY2VzID0gbnVsbDtcbiAgICByZXR1cm4gdm0uZ2V0TWFuYWdlZERldmljZXModm0udGVuYW50S2V5LCB2bS5kZXZpY2VzUHJldiwgdm0uZGV2aWNlc05leHQpO1xuICB9O1xuXG4gIGlmICh2bS5lZGl0TW9kZSkge1xuICAgIGxldCB0ZW5hbnRQcm9taXNlID0gVGVuYW50c1NlcnZpY2UuZ2V0VGVuYW50QnlLZXkodm0udGVuYW50S2V5KTtcbiAgICB0ZW5hbnRQcm9taXNlLnRoZW4odGVuYW50ID0+IHZtLmN1cnJlbnRUZW5hbnQgPSB0ZW5hbnQpO1xuICAgIHZtLmdldE1hbmFnZWREZXZpY2VzKHZtLnRlbmFudEtleSwgbnVsbCwgbnVsbCk7XG4gIH1cblxuICAkc2NvcGUudGFiSW5kZXggPSAxO1xuXG4gICRzY29wZS4kd2F0Y2goJ3RhYkluZGV4JywgZnVuY3Rpb24gKHRvVGFiLCBmcm9tVGFiKSB7XG4gICAgaWYgKHRvVGFiICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHN3aXRjaCAodG9UYWIpIHtcbiAgICAgICAgY2FzZSAwOlxuICAgICAgICAgIHJldHVybiAkc3RhdGUuZ28oJ3RlbmFudERldGFpbHMnLCB7dGVuYW50S2V5OiAkc3RhdGVQYXJhbXMudGVuYW50S2V5fSk7XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICByZXR1cm4gJHN0YXRlLmdvKCd0ZW5hbnRNYW5hZ2VkRGV2aWNlcycsIHt0ZW5hbnRLZXk6ICRzdGF0ZVBhcmFtcy50ZW5hbnRLZXl9KTtcbiAgICAgICAgY2FzZSAyOlxuICAgICAgICAgIHJldHVybiAkc3RhdGUuZ28oJ3RlbmFudFVubWFuYWdlZERldmljZXMnLCB7dGVuYW50S2V5OiAkc3RhdGVQYXJhbXMudGVuYW50S2V5fSk7XG4gICAgICAgIGNhc2UgMzpcbiAgICAgICAgICByZXR1cm4gJHN0YXRlLmdvKCd0ZW5hbnRMb2NhdGlvbnMnLCB7dGVuYW50S2V5OiAkc3RhdGVQYXJhbXMudGVuYW50S2V5fSk7XG4gICAgICAgIGNhc2UgNDpcbiAgICAgICAgICByZXR1cm4gJHN0YXRlLmdvKCd0ZW5hbnRPdmVybGF5cycsIHt0ZW5hbnRLZXk6ICRzdGF0ZVBhcmFtcy50ZW5hbnRLZXl9KTtcbiAgICAgICAgY2FzZSA1OlxuICAgICAgICAgIHJldHVybiAkc3RhdGUuZ28oJ3RlbmFudExvZ3MnLCB7dGVuYW50S2V5OiAkc3RhdGVQYXJhbXMudGVuYW50S2V5fSk7XG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICB2bS5jaGFuZ2VSYWRpbyA9IGZ1bmN0aW9uICgpIHtcbiAgICB2bS5zZWFyY2hUZXh0ID0gJyc7XG4gICAgdm0uZGlzYWJsZWQgPSB0cnVlO1xuICAgIHZtLnNlcmlhbERldmljZXMgPSB7fTtcbiAgICB2bS5tYWNEZXZpY2VzID0ge307XG4gICAgdm0uZGV2aWNlc1RvTWF0Y2hPbiA9IFtdO1xuICB9O1xuXG4gIHZtLnNlYXJjaERldmljZXMgPSBmdW5jdGlvbiAocGFydGlhbCkge1xuICAgIGxldCB1bm1hbmFnZWQgPSBmYWxzZTtcbiAgICBsZXQgYnV0dG9uID0gdm0uc2VsZWN0ZWRCdXR0b247XG4gICAgbGV0IGJ5VGVuYW50ID0gdHJ1ZTtcbiAgICBsZXQgdGVuYW50S2V5ID0gdm0udGVuYW50S2V5O1xuICAgIHJldHVybiBEZXZpY2VzU2VydmljZS5zZWFyY2hEZXZpY2VzKHBhcnRpYWwsIGJ1dHRvbiwgYnlUZW5hbnQsIHRlbmFudEtleSwgdm0uZGlzdHJpYnV0b3JLZXksIHVubWFuYWdlZClcbiAgICAgIC50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICBsZXQgZGV2aWNlc1RvUmV0dXJuO1xuICAgICAgICBpZiAocmVzcG9uc2Uuc3VjY2Vzcykge1xuICAgICAgICAgIGxldCBkZXZpY2VzID0gcmVzcG9uc2UuZGV2aWNlc1xuICAgICAgICAgIGlmIChidXR0b24gPT09IFwiU2VyaWFsIE51bWJlclwiKSB7XG4gICAgICAgICAgICB2bS5zZXJpYWxEZXZpY2VzID0gZGV2aWNlc1sxXVxuICAgICAgICAgICAgZGV2aWNlc1RvUmV0dXJuID0gZGV2aWNlc1swXVxuICAgICAgICAgIH0gZWxzZSBpZiAoYnV0dG9uID09PSBcIk1BQ1wiKSB7XG4gICAgICAgICAgICB2bS5tYWNEZXZpY2VzID0gZGV2aWNlc1sxXVxuICAgICAgICAgICAgZGV2aWNlc1RvUmV0dXJuID0gZGV2aWNlc1swXVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2bS5nY21pZERldmljZXMgPSBkZXZpY2VzWzFdXG4gICAgICAgICAgICBkZXZpY2VzVG9SZXR1cm4gPSBkZXZpY2VzWzBdXG4gICAgICAgICAgfVxuICAgICAgICAgIHZtLmRldmljZXNUb01hdGNoT24gPSBkZXZpY2VzVG9SZXR1cm5cbiAgICAgICAgICByZXR1cm4gZGV2aWNlc1RvUmV0dXJuXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV0dXJuIFtdXG4gICAgICAgIH1cbiAgICAgIH0pXG4gIH07XG5cbiAgdm0ucGFnaW5hdGVDYWxsID0gZnVuY3Rpb24gKGZvcndhcmQpIHtcbiAgICBpZiAoZm9yd2FyZCkge1xuICAgICAgcmV0dXJuIHZtLmdldE1hbmFnZWREZXZpY2VzKHZtLnRlbmFudEtleSwgbnVsbCwgdm0uZGV2aWNlc05leHQpO1xuXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB2bS5nZXRNYW5hZ2VkRGV2aWNlcyh2bS50ZW5hbnRLZXksIHZtLmRldmljZXNQcmV2LCBudWxsKTtcbiAgICB9XG4gIH07XG5cbiAgdm0ucHJlcGFyZUZvckVkaXRWaWV3ID0gKHNlYXJjaFRleHQpID0+IERldmljZXNTZXJ2aWNlLnByZXByYXRlRm9yRWRpdFZpZXcoXG4gICAgdm0uc2VsZWN0ZWRCdXR0b24sXG4gICAgdm0udGVuYW50S2V5LFxuICAgIHNlYXJjaFRleHQsXG4gICAgdm0ubWFjRGV2aWNlcyxcbiAgICB2bS5zZXJpYWxEZXZpY2VzLFxuICAgIHZtLmdjbWlkRGV2aWNlc1xuICApXG5cbiAgdm0uY29udHJvbE9wZW5CdXR0b24gPSBmdW5jdGlvbiAoaXNNYXRjaCkge1xuICAgIHZtLmRpc2FibGVkID0gIWlzTWF0Y2g7XG4gICAgcmV0dXJuIHZtLmxvYWRpbmdEaXNhYmxlZCA9IGZhbHNlO1xuICB9O1xuXG4gIHZtLmlzUmVzb3VyY2VWYWxpZCA9IGZ1bmN0aW9uIChyZXNvdXJjZSkge1xuICAgIGxldCBmb3VuZE1hdGNoID0gZmFsc2U7XG4gICAgZm9yIChsZXQgaXRlbSBvZiB2bS5kZXZpY2VzVG9NYXRjaE9uKSB7XG4gICAgICBpZiAocmVzb3VyY2UgPT09IGl0ZW0pIHtcbiAgICAgICAgZm91bmRNYXRjaCA9IHRydWU7XG4gICAgICB9XG4gICAgfVxuICAgIHZtLmNvbnRyb2xPcGVuQnV0dG9uKGZvdW5kTWF0Y2gpXG4gICAgcmV0dXJuIGZvdW5kTWF0Y2hcbiAgfTtcblxuICByZXR1cm4gdm07XG59XG5cbmV4cG9ydCB7VGVuYW50TWFuYWdlZERldmljZXNDdHJsfVxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zcmMvYXBwL3RlbmFudC90ZW5hbnQtbWFuYWdlZC1kZXZpY2VzLmNvbnRyb2xsZXIuanNcbiAqKi8iLCJmdW5jdGlvbiBUZW5hbnRVbm1hbmFnZWREZXZpY2VzQ3RybCgkc2NvcGUsICRzdGF0ZVBhcmFtcywgVGVuYW50c1NlcnZpY2UsIERldmljZXNTZXJ2aWNlLCBQcm9ncmVzc0JhclNlcnZpY2UsICRzdGF0ZSkge1xuICBcIm5nSW5qZWN0XCI7XG5cbiAgbGV0IHZtID0gdGhpcztcbiAgdm0uY3VycmVudFRlbmFudCA9IHtcbiAgICBrZXk6IHVuZGVmaW5lZCxcbiAgICBuYW1lOiB1bmRlZmluZWQsXG4gICAgdGVuYW50X2NvZGU6IHVuZGVmaW5lZCxcbiAgICBhZG1pbl9lbWFpbDogdW5kZWZpbmVkLFxuICAgIGNvbnRlbnRfc2VydmVyX3VybDogdW5kZWZpbmVkLFxuICAgIGNvbnRlbnRfbWFuYWdlcl9iYXNlX3VybDogdW5kZWZpbmVkLFxuICAgIGRvbWFpbl9rZXk6IHVuZGVmaW5lZCxcbiAgICBub3RpZmljYXRpb25fZW1haWxzOiB1bmRlZmluZWQsXG4gICAgcHJvb2Zfb2ZfcGxheV9sb2dnaW5nOiBmYWxzZSxcbiAgICBhY3RpdmU6IHRydWVcbiAgfTtcbiAgdm0uZ2NtaWREZXZpY2VzID0gW107XG4gIHZtLnRlbmFudERldmljZXMgPSBbXTtcbiAgdm0uZGV2aWNlc1ByZXYgPSBudWxsO1xuICB2bS5kZXZpY2VzTmV4dCA9IG51bGw7XG4gIHZtLnNlbGVjdGVkQnV0dG9uID0gXCJNQUNcIjtcbiAgdm0uc2VyaWFsRGV2aWNlcyA9IHt9O1xuICB2bS5kaXNhYmxlZCA9IHRydWU7XG4gIHZtLm1hY0RldmljZXMgPSB7fTtcbiAgdm0uZGV2aWNlc1RvTWF0Y2hPbiA9IFtdO1xuICB2bS5lZGl0TW9kZSA9ICEhJHN0YXRlUGFyYW1zLnRlbmFudEtleTtcbiAgdm0udGVuYW50S2V5ID0gJHN0YXRlUGFyYW1zLnRlbmFudEtleTtcblxuICAkc2NvcGUudGFiSW5kZXggPSAyO1xuXG4gICRzY29wZS4kd2F0Y2goJ3RhYkluZGV4JywgZnVuY3Rpb24gKHRvVGFiLCBmcm9tVGFiKSB7XG4gICAgaWYgKHRvVGFiICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIHN3aXRjaCAodG9UYWIpIHtcbiAgICAgICAgY2FzZSAwOlxuICAgICAgICAgIHJldHVybiAkc3RhdGUuZ28oJ3RlbmFudERldGFpbHMnLCB7dGVuYW50S2V5OiAkc3RhdGVQYXJhbXMudGVuYW50S2V5fSk7XG4gICAgICAgIGNhc2UgMTpcbiAgICAgICAgICByZXR1cm4gJHN0YXRlLmdvKCd0ZW5hbnRNYW5hZ2VkRGV2aWNlcycsIHt0ZW5hbnRLZXk6ICRzdGF0ZVBhcmFtcy50ZW5hbnRLZXl9KTtcbiAgICAgICAgY2FzZSAyOlxuICAgICAgICAgIHJldHVybiAkc3RhdGUuZ28oJ3RlbmFudFVubWFuYWdlZERldmljZXMnLCB7dGVuYW50S2V5OiAkc3RhdGVQYXJhbXMudGVuYW50S2V5fSk7XG4gICAgICAgIGNhc2UgMzpcbiAgICAgICAgICByZXR1cm4gJHN0YXRlLmdvKCd0ZW5hbnRMb2NhdGlvbnMnLCB7dGVuYW50S2V5OiAkc3RhdGVQYXJhbXMudGVuYW50S2V5fSk7XG4gICAgICAgIGNhc2UgNDpcbiAgICAgICAgICByZXR1cm4gJHN0YXRlLmdvKCd0ZW5hbnRPdmVybGF5cycsIHt0ZW5hbnRLZXk6ICRzdGF0ZVBhcmFtcy50ZW5hbnRLZXl9KTtcbiAgICAgICAgY2FzZSA1OlxuICAgICAgICAgIHJldHVybiAkc3RhdGUuZ28oJ3RlbmFudExvZ3MnLCB7dGVuYW50S2V5OiAkc3RhdGVQYXJhbXMudGVuYW50S2V5fSk7XG4gICAgICB9XG4gICAgfVxuICB9KTtcblxuICB2bS5lZGl0SXRlbSA9IChpdGVtKSA9PiBEZXZpY2VzU2VydmljZS5lZGl0SXRlbShpdGVtKVxuXG4gIHZtLmdldFVubWFuYWdlZERldmljZXMgPSBmdW5jdGlvbiAodGVuYW50S2V5LCBwcmV2X2N1cnNvciwgbmV4dF9jdXJzb3IpIHtcbiAgICBQcm9ncmVzc0JhclNlcnZpY2Uuc3RhcnQoKTtcbiAgICBsZXQgZGV2aWNlc1Byb21pc2UgPSBEZXZpY2VzU2VydmljZS5nZXRVbm1hbmFnZWREZXZpY2VzQnlUZW5hbnQodGVuYW50S2V5LCBwcmV2X2N1cnNvciwgbmV4dF9jdXJzb3IpO1xuICAgIHJldHVybiBkZXZpY2VzUHJvbWlzZS50aGVuKGZ1bmN0aW9uIChkYXRhKSB7XG4gICAgICB2bS5kZXZpY2VzUHJldiA9IGRhdGFbXCJwcmV2X2N1cnNvclwiXTtcbiAgICAgIHZtLmRldmljZXNOZXh0ID0gZGF0YVtcIm5leHRfY3Vyc29yXCJdO1xuICAgICAgdm0udGVuYW50RGV2aWNlcyA9IGRhdGFbXCJkZXZpY2VzXCJdO1xuICAgICAgcmV0dXJuIFByb2dyZXNzQmFyU2VydmljZS5jb21wbGV0ZSgpO1xuICAgIH0pO1xuICB9O1xuXG4gIGlmICh2bS5lZGl0TW9kZSkge1xuICAgIGxldCB0ZW5hbnRQcm9taXNlID0gVGVuYW50c1NlcnZpY2UuZ2V0VGVuYW50QnlLZXkodm0udGVuYW50S2V5KTtcbiAgICB0ZW5hbnRQcm9taXNlLnRoZW4odGVuYW50ID0+IHZtLmN1cnJlbnRUZW5hbnQgPSB0ZW5hbnQpO1xuICAgIHZtLmdldFVubWFuYWdlZERldmljZXModm0udGVuYW50S2V5LCBudWxsLCBudWxsKTtcbiAgfVxuXG4gIHZtLnJlZnJlc2hEZXZpY2VzID0gZnVuY3Rpb24gKCkge1xuICAgIHZtLmRldmljZXNQcmV2ID0gbnVsbDtcbiAgICB2bS5kZXZpY2VzTmV4dCA9IG51bGw7XG4gICAgdm0udGVuYW50RGV2aWNlcyA9IG51bGw7XG4gICAgcmV0dXJuIHZtLmdldFVubWFuYWdlZERldmljZXModm0udGVuYW50S2V5LCB2bS5kZXZpY2VzUHJldiwgdm0uZGV2aWNlc05leHQpO1xuICB9O1xuXG4gIHZtLmNoYW5nZVJhZGlvID0gZnVuY3Rpb24gKCkge1xuICAgIHZtLnNlYXJjaFRleHQgPSAnJztcbiAgICB2bS5kaXNhYmxlZCA9IHRydWU7XG4gICAgdm0uc2VyaWFsRGV2aWNlcyA9IHt9O1xuICAgIHZtLm1hY0RldmljZXMgPSB7fTtcbiAgICB2bS5kZXZpY2VzVG9NYXRjaE9uID0gW107XG4gIH07XG5cbiAgdm0uc2VhcmNoRGV2aWNlcyA9IGZ1bmN0aW9uIChwYXJ0aWFsKSB7XG4gICAgbGV0IHVubWFuYWdlZCA9IHRydWU7XG4gICAgbGV0IGJ5VGVuYW50ID0gdHJ1ZTtcbiAgICByZXR1cm4gRGV2aWNlc1NlcnZpY2Uuc2VhcmNoRGV2aWNlcyhwYXJ0aWFsLCB2bS5zZWxlY3RlZEJ1dHRvbiwgYnlUZW5hbnQsIHZtLnRlbmFudEtleSwgdm0uZGlzdHJpYnV0b3JLZXksIHVubWFuYWdlZClcbiAgICAgIC50aGVuKGZ1bmN0aW9uIChyZXNwb25zZSkge1xuICAgICAgICBsZXQgZGV2aWNlc1RvUmV0dXJuO1xuICAgICAgICBpZiAocmVzcG9uc2Uuc3VjY2Vzcykge1xuICAgICAgICAgIGxldCBkZXZpY2VzID0gcmVzcG9uc2UuZGV2aWNlc1xuICAgICAgICAgIGlmICh2bS5zZWxlY3RlZEJ1dHRvbiA9PT0gXCJTZXJpYWwgTnVtYmVyXCIpIHtcbiAgICAgICAgICAgIHZtLnNlcmlhbERldmljZXMgPSBkZXZpY2VzWzFdXG4gICAgICAgICAgICBkZXZpY2VzVG9SZXR1cm4gPSBkZXZpY2VzWzBdXG4gICAgICAgICAgfSBlbHNlIGlmICh2bS5zZWxlY3RlZEJ1dHRvbiA9PT0gXCJNQUNcIikge1xuICAgICAgICAgICAgdm0ubWFjRGV2aWNlcyA9IGRldmljZXNbMV1cbiAgICAgICAgICAgIGRldmljZXNUb1JldHVybiA9IGRldmljZXNbMF1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdm0uZ2NtaWREZXZpY2VzID0gZGV2aWNlc1sxXVxuICAgICAgICAgICAgZGV2aWNlc1RvUmV0dXJuID0gZGV2aWNlc1swXVxuICAgICAgICAgIH1cbiAgICAgICAgICB2bS5kZXZpY2VzVG9NYXRjaE9uID0gZGV2aWNlc1RvUmV0dXJuXG4gICAgICAgICAgcmV0dXJuIGRldmljZXNUb1JldHVyblxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldHVybiBbXVxuICAgICAgICB9XG4gICAgICB9KVxuXG4gIH07XG5cbiAgdm0ucGFnaW5hdGVDYWxsID0gZnVuY3Rpb24gKGZvcndhcmQpIHtcbiAgICBpZiAoZm9yd2FyZCkge1xuICAgICAgcmV0dXJuIHZtLmdldFVubWFuYWdlZERldmljZXModm0udGVuYW50S2V5LCBudWxsLCB2bS5kZXZpY2VzTmV4dCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiB2bS5nZXRVbm1hbmFnZWREZXZpY2VzKHZtLnRlbmFudEtleSwgdm0uZGV2aWNlc1ByZXYsIG51bGwpO1xuICAgIH1cbiAgfTtcblxuICB2bS5wcmVwYXJlRm9yRWRpdFZpZXcgPSAoc2VhcmNoVGV4dCkgPT4gRGV2aWNlc1NlcnZpY2UucHJlcHJhdGVGb3JFZGl0VmlldyhcbiAgICB2bS5zZWxlY3RlZEJ1dHRvbixcbiAgICB2bS50ZW5hbnRLZXksXG4gICAgc2VhcmNoVGV4dCxcbiAgICB2bS5tYWNEZXZpY2VzLFxuICAgIHZtLnNlcmlhbERldmljZXMsXG4gICAgdm0uZ2NtaWREZXZpY2VzXG4gIClcblxuICB2bS5jb250cm9sT3BlbkJ1dHRvbiA9IGZ1bmN0aW9uIChpc01hdGNoKSB7XG4gICAgdm0uZGlzYWJsZWQgPSAhaXNNYXRjaDtcbiAgICB2bS5sb2FkaW5nRGlzYWJsZWQgPSBmYWxzZTtcbiAgfTtcblxuICB2bS5pc1Jlc291cmNlVmFsaWQgPSBmdW5jdGlvbiAocmVzb3VyY2UpIHtcbiAgICBsZXQgZm91bmRNYXRjaCA9IGZhbHNlO1xuICAgIGZvciAobGV0IGl0ZW0gb2Ygdm0uZGV2aWNlc1RvTWF0Y2hPbikge1xuICAgICAgaWYgKHJlc291cmNlID09PSBpdGVtKSB7XG4gICAgICAgIGZvdW5kTWF0Y2ggPSB0cnVlO1xuICAgICAgfVxuICAgIH1cbiAgICB2bS5jb250cm9sT3BlbkJ1dHRvbihmb3VuZE1hdGNoKVxuICAgIHJldHVybiBmb3VuZE1hdGNoXG4gIH07XG5cbiAgcmV0dXJuIHZtO1xufVxuZXhwb3J0IHtUZW5hbnRVbm1hbmFnZWREZXZpY2VzQ3RybH1cblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vc3JjL2FwcC90ZW5hbnQvdGVuYW50LXVubWFuYWdlZC1kZXZpY2VzLmNvbnRyb2xsZXIuanNcbiAqKi8iLCJpbXBvcnQgbmF0dXJhbFNvcnQgZnJvbSAnamF2YXNjcmlwdC1uYXR1cmFsLXNvcnQnO1xuXG5mdW5jdGlvbiBUZW5hbnRzQ3RybCgkc3RhdGUsICRsb2csIFRlbmFudHNTZXJ2aWNlLCBQcm9ncmVzc0JhclNlcnZpY2UsIHN3ZWV0KSB7XG4gIFwibmdJbmplY3RcIjtcblxuICBsZXQgdm0gPSB0aGlzO1xuXG4gIC8vIFBhZ2luYXRlZCBUZW5hbnRzXG4gIHZtLnRlbmFudHMgPSBbXTtcbiAgLy8gQ3VycmVudCBTZWFyY2ggb2YgVGVuYW50cyBSZXN1bHRzXG4gIHZtLnNlYXJjaGVkVGVuYW50cyA9IFtdO1xuICB2bS5zZWFyY2hNYXRjaCA9IG51bGw7XG4gIHZtLnNlYXJjaERpc2FibGVkID0gdHJ1ZTtcblxuICB2bS5nZXRUZW5hbnRzUGFnaW5hdGVkID0gZnVuY3Rpb24gKHBhZ2Vfc2l6ZSwgb2Zmc2V0KSB7XG4gICAgdm0ub2Zmc2V0ID0gb2Zmc2V0O1xuICAgIHZtLmxvYWRpbmcgPSB0cnVlO1xuICAgIFByb2dyZXNzQmFyU2VydmljZS5zdGFydCgpO1xuICAgIGxldCBwcm9taXNlID0gVGVuYW50c1NlcnZpY2UuZmV0Y2hBbGxUZW5hbnRzUGFnaW5hdGVkKHBhZ2Vfc2l6ZSwgb2Zmc2V0KTtcbiAgICByZXR1cm4gcHJvbWlzZS50aGVuKChyZXNwb25zZSA9PiB2bS5nZXRGZXRjaFN1Y2Nlc3MocmVzcG9uc2UpKSwgcmVzcG9uc2UgPT4gdm0uZ2V0RmV0Y2hGYWlsdXJlKHJlc3BvbnNlKSk7XG4gIH07XG5cbiAgdm0uZ2V0RmV0Y2hTdWNjZXNzID0gZnVuY3Rpb24gKHJlc3BvbnNlKSB7XG4gICAgdm0udGVuYW50cyA9IHJlc3BvbnNlLnRlbmFudHM7XG4gICAgdm0udG90YWwgPSByZXNwb25zZS50b3RhbDtcbiAgICB2bS5pc19maXJzdF9wYWdlID0gcmVzcG9uc2UuaXNfZmlyc3RfcGFnZTtcbiAgICB2bS5pc19sYXN0X3BhZ2UgPSByZXNwb25zZS5pc19sYXN0X3BhZ2U7XG4gICAgUHJvZ3Jlc3NCYXJTZXJ2aWNlLmNvbXBsZXRlKCk7XG4gICAgcmV0dXJuIHZtLmxvYWRpbmcgPSBmYWxzZTtcbiAgfTtcblxuICB2bS5nZXRGZXRjaEZhaWx1cmUgPSBmdW5jdGlvbiAocmVzcG9uc2UpIHtcbiAgICBQcm9ncmVzc0JhclNlcnZpY2UuY29tcGxldGUoKTtcbiAgICBsZXQgZXJyb3JNZXNzYWdlID0gYFVuYWJsZSB0byBmZXRjaCB0ZW5hbnRzLiBFcnJvcjogJHtyZXNwb25zZS5zdGF0dXN9ICR7cmVzcG9uc2Uuc3RhdHVzVGV4dH0uYDtcbiAgICByZXR1cm4gc3dlZXQuc2hvdygnT29wcy4uLicsIGVycm9yTWVzc2FnZSwgJ2Vycm9yJyk7XG4gIH07XG5cblxuICB2bS5pbml0aWFsaXplID0gZnVuY3Rpb24gKCkge1xuICAgIHZtLm9mZnNldCA9IDA7XG4gICAgdm0uc2VhcmNoQWxsVGVuYW50c0J5TmFtZSgnbXknKVxuICAgIHJldHVybiB2bS5nZXRUZW5hbnRzUGFnaW5hdGVkKDEwMCwgdm0ub2Zmc2V0KTtcbiAgfTtcblxuICB2bS5zZWFyY2hBbGxUZW5hbnRzQnlOYW1lID0gZnVuY3Rpb24gKHRlbmFudF9uYW1lKSB7XG4gICAgaWYgKCF0ZW5hbnRfbmFtZSB8fCB0ZW5hbnRfbmFtZS5sZW5ndGggPCAzKSB7XG4gICAgICByZXR1cm4gW11cbiAgICB9XG4gICAgbGV0IHByb21pc2UgPSBUZW5hbnRzU2VydmljZS5zZWFyY2hBbGxUZW5hbnRzQnlOYW1lKHRlbmFudF9uYW1lKVxuICAgIHJldHVybiBwcm9taXNlLnRoZW4oKHJlc3BvbnNlKSA9PiB7XG4gICAgICB2bS5zZWFyY2hlZFRlbmFudHMgPSByZXNwb25zZVxuICAgICAgaWYgKHZtLnNlYXJjaGVkVGVuYW50cykge1xuICAgICAgICByZXR1cm4gdm0uc2VhcmNoZWRUZW5hbnRzLm1hcCgoaSkgPT4gaS5uYW1lKS5zb3J0KG5hdHVyYWxTb3J0KVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmV0dXJuIFtdXG4gICAgICB9XG4gICAgfSlcbiAgICByZXR1cm4gcHJvbWlzZS5jYXRjaCgocmVzcG9uc2UpID0+IHtcbiAgICAgIGxldCBlcnJvck1lc3NhZ2UgPSBgVW5hYmxlIHRvIGZldGNoIHRlbmFudHMuIEVycm9yOiAke3Jlc3BvbnNlLnN0YXR1c31gO1xuICAgICAgcmV0dXJuIHN3ZWV0LnNob3coJ09vcHMuLi4nLCBlcnJvck1lc3NhZ2UsICdlcnJvcicpO1xuICAgIH0pXG4gIH1cblxuXG4gIHZtLmlzVGVuYW50VmFsaWQgPSAodGVuYW50X25hbWUpID0+IHtcbiAgICBpZiAoIXRlbmFudF9uYW1lIHx8IHRlbmFudF9uYW1lLmxlbmd0aCA8IDMpIHtcbiAgICAgIHJldHVybiBbXVxuICAgIH1cbiAgICBsZXQgcHJvbWlzZSA9IFRlbmFudHNTZXJ2aWNlLnNlYXJjaEFsbFRlbmFudHNCeU5hbWUodGVuYW50X25hbWUpXG4gICAgICAudGhlbigocmVzcG9uc2UpID0+IHtcbiAgICAgICAgbGV0IG1hdGNoID0gcmVzcG9uc2VcbiAgICAgICAgaWYgKG1hdGNoKSB7XG4gICAgICAgICAgZm9yIChsZXQgZWFjaE5hbWUgb2YgbWF0Y2gpIHtcbiAgICAgICAgICAgIGlmICh0ZW5hbnRfbmFtZSA9PT0gZWFjaE5hbWUubmFtZSkge1xuICAgICAgICAgICAgICB2bS5zZWFyY2hEaXNhYmxlZCA9IGZhbHNlO1xuICAgICAgICAgICAgICB2bS5zZWFyY2hNYXRjaCA9IGVhY2hOYW1lXG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHZtLnNlYXJjaERpc2FibGVkID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdm0uc2VhcmNoRGlzYWJsZWQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9KVxuICB9XG5cbiAgdm0uZWRpdEl0ZW0gPSBpdGVtID0+ICRzdGF0ZS5nbygndGVuYW50RGV0YWlscycsIHt0ZW5hbnRLZXk6IGl0ZW0ua2V5fSk7XG5cbiAgdm0uZGVsZXRlSXRlbSA9IGZ1bmN0aW9uIChpdGVtKSB7XG4gICAgbGV0IGNhbGxiYWNrID0gZnVuY3Rpb24gKCkge1xuICAgICAgbGV0IHByb21pc2UgPSBUZW5hbnRzU2VydmljZS5kZWxldGUoaXRlbSk7XG4gICAgICByZXR1cm4gcHJvbWlzZS50aGVuKCgpID0+IHZtLmluaXRpYWxpemUoKSk7XG4gICAgfTtcblxuICAgIHJldHVybiBzd2VldC5zaG93KHtcbiAgICAgIHRpdGxlOiBcIkFyZSB5b3Ugc3VyZT9cIixcbiAgICAgIHRleHQ6IFwiVGhpcyB3aWxsIHBlcm1hbmVudGx5IHJlbW92ZSB0aGUgdGVuYW50IGZyb20gdGhlIHN5c3RlbS5cIixcbiAgICAgIHR5cGU6IFwid2FybmluZ1wiLFxuICAgICAgc2hvd0NhbmNlbEJ1dHRvbjogdHJ1ZSxcbiAgICAgIGNvbmZpcm1CdXR0b25Db2xvcjogXCIjREQ2QjU1XCIsXG4gICAgICBjb25maXJtQnV0dG9uVGV4dDogXCJZZXMsIHJlbW92ZSB0aGUgdGVuYW50IVwiLFxuICAgICAgY2xvc2VPbkNvbmZpcm06IHRydWVcbiAgICB9LCBjYWxsYmFjayk7XG4gIH07XG5cbiAgcmV0dXJuIHZtO1xufVxuZXhwb3J0IHtUZW5hbnRzQ3RybH1cblxuXG5cbi8qKiBXRUJQQUNLIEZPT1RFUiAqKlxuICoqIC4vc3JjL2FwcC90ZW5hbnQvdGVuYW50cy5jb250cm9sbGVyLmpzXG4gKiovIiwiZnVuY3Rpb24gV2VsY29tZUN0cmwoVmVyc2lvbnNTZXJ2aWNlLCAkc3RhdGUsIERpc3RyaWJ1dG9yc1NlcnZpY2UsIFNlc3Npb25zU2VydmljZSkge1xuICBcIm5nSW5qZWN0XCI7XG5cbiAgbGV0IHZtID0gdGhpcztcbiAgdm0udmVyc2lvbl9kYXRhID0gW107XG4gIHZtLmxvYWRpbmcgPSB0cnVlO1xuXG4gIHZtLnByb2NlZWRUb1NpZ25JbiA9ICgpID0+ICRzdGF0ZS5nbygnc2lnbl9pbicpO1xuXG4gIHZtLmNhcGl0YWxpemVGaXJzdExldHRlciA9IHN0cmluZyA9PiBzdHJpbmcuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBzdHJpbmcuc2xpY2UoMSk7XG5cbiAgdm0uZ2l2ZU9wdGlvblRvQ2hhbmdlRGlzdHJpYnV0b3IgPSBmdW5jdGlvbiAoKSB7XG4gICAgbGV0IGRpc3RyaWJ1dG9yc1Byb21pc2UgPSBEaXN0cmlidXRvcnNTZXJ2aWNlLmZldGNoQWxsQnlVc2VyKFNlc3Npb25zU2VydmljZS5nZXRVc2VyS2V5KCkpO1xuICAgIHJldHVybiBkaXN0cmlidXRvcnNQcm9taXNlLnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcbiAgICAgIHZtLmhhc19tdWx0aXBsZV9kaXN0cmlidXRvcnMgPSBkYXRhLmxlbmd0aCA+IDE7XG4gICAgICByZXR1cm4gdm0ubG9hZGluZyA9IGZhbHNlO1xuICAgIH0pO1xuICB9O1xuXG4gIHZtLmNoYW5nZURpc3RyaWJ1dG9yID0gKCkgPT4gJHN0YXRlLmdvKCdkaXN0cmlidXRvcl9zZWxlY3Rpb24nKTtcblxuICB2bS5nZXRWZXJzaW9uID0gZnVuY3Rpb24gKCkge1xuICAgIGxldCBwcm9taXNlID0gVmVyc2lvbnNTZXJ2aWNlLmdldFZlcnNpb25zKCk7XG4gICAgcmV0dXJuIHByb21pc2UudGhlbihkYXRhID0+IHZtLnZlcnNpb25fZGF0YSA9IGRhdGEpO1xuICB9O1xuXG4gIHZtLmluaXRpYWxpemUgPSBmdW5jdGlvbiAoKSB7XG4gICAgdm0uaWRlbnRpdHkgPSB7XG4gICAgICBrZXk6IFNlc3Npb25zU2VydmljZS5nZXRVc2VyS2V5KCksXG4gICAgICBlbWFpbDogU2Vzc2lvbnNTZXJ2aWNlLmdldFVzZXJFbWFpbCgpLFxuICAgICAgZGlzdHJpYnV0b3JLZXk6IFNlc3Npb25zU2VydmljZS5nZXRDdXJyZW50RGlzdHJpYnV0b3JLZXkoKSxcbiAgICAgIGRpc3RyaWJ1dG9yTmFtZTogU2Vzc2lvbnNTZXJ2aWNlLmdldEN1cnJlbnREaXN0cmlidXRvck5hbWUoKVxuICAgIH07XG5cbiAgICB2bS5naXZlT3B0aW9uVG9DaGFuZ2VEaXN0cmlidXRvcigpO1xuXG4gICAgaWYgKCF2bS5pZGVudGl0eS5lbWFpbCkge1xuICAgICAgcmV0dXJuICRzdGF0ZS5nbyhcInNpZ25faW5cIik7XG5cbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHZtLmdldFZlcnNpb24oKTtcbiAgICB9XG4gIH07XG4gIHJldHVybiB2bTtcbn1cbmV4cG9ydCB7V2VsY29tZUN0cmx9XG5cblxuXG4vKiogV0VCUEFDSyBGT09URVIgKipcbiAqKiAuL3NyYy9hcHAvd2VsY29tZS93ZWxjb21lLWNvbnRyb2xsZXIuanNcbiAqKi8iLCJleHBvcnQgZnVuY3Rpb24gcm91dGVzKCRzdGF0ZVByb3ZpZGVyLCAkdXJsUm91dGVyUHJvdmlkZXIsIFJlc3Rhbmd1bGFyUHJvdmlkZXIpIHtcbiAgXCJuZ0luamVjdFwiO1xuXG4gICRzdGF0ZVByb3ZpZGVyLnN0YXRlKFwic2lnbl9pblwiLCB7XG4gICAgcmVzb2x2ZToge1xuICAgICAgaWRlbnRpdHkoSWRlbnRpdHlTZXJ2aWNlKSB7XG4gICAgICAgIHJldHVybiBJZGVudGl0eVNlcnZpY2UuZ2V0SWRlbnRpdHkoKTtcbiAgICAgIH0sXG4gICAgICBub3RBdXRoZW50aWNhdGVkKEF1dGhvcml6YXRpb25TZXJ2aWNlKSB7XG4gICAgICAgIHJldHVybiBBdXRob3JpemF0aW9uU2VydmljZS5ub3RBdXRoZW50aWNhdGVkKCk7XG4gICAgICB9XG4gICAgfSxcbiAgICB1cmw6IFwiL3NpZ25faW5cIixcbiAgICB0ZW1wbGF0ZVVybDogXCJhcHAvYXV0aGVudGljYXRpb24vc2lnbl9pbi5odG1sXCIsXG4gICAgY29udHJvbGxlcjogXCJBdXRoZW50aWNhdGlvbkN0cmxcIixcbiAgICBjb250cm9sbGVyQXM6ICdhdXRoZW50aWNhdGlvbkN0cmwnLFxuICB9KTtcbiAgJHN0YXRlUHJvdmlkZXIuc3RhdGUoXCJzaWduZWRfb3V0XCIsIHtcbiAgICB1cmw6IFwiL3NpZ25lZF9vdXRcIixcbiAgICByZXNvbHZlOiB7XG4gICAgICBpZGVudGl0eShJZGVudGl0eVNlcnZpY2UpIHtcbiAgICAgICAgcmV0dXJuIElkZW50aXR5U2VydmljZS5nZXRJZGVudGl0eSgpO1xuICAgICAgfSxcbiAgICAgIG5vdEF1dGhlbnRpY2F0ZWQoQXV0aG9yaXphdGlvblNlcnZpY2UpIHtcbiAgICAgICAgcmV0dXJuIEF1dGhvcml6YXRpb25TZXJ2aWNlLm5vdEF1dGhlbnRpY2F0ZWQoKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHRlbXBsYXRlVXJsOiBcImFwcC9hdXRoZW50aWNhdGlvbi9zaWduZWRfb3V0Lmh0bWxcIixcbiAgICBjb250cm9sbGVyOiBcIkF1dGhlbnRpY2F0aW9uQ3RybFwiLFxuICAgIGNvbnRyb2xsZXJBczogJ2F1dGhlbnRpY2F0aW9uQ3RybCcsXG4gIH0pO1xuICAkc3RhdGVQcm92aWRlci5zdGF0ZShcInNpZ25fb3V0XCIsIHtcbiAgICByZXNvbHZlOiB7XG4gICAgICBpZGVudGl0eShJZGVudGl0eVNlcnZpY2UpIHtcbiAgICAgICAgcmV0dXJuIElkZW50aXR5U2VydmljZS5nZXRJZGVudGl0eSgpO1xuICAgICAgfSxcbiAgICAgIGF1dGhlbnRpY2F0ZWQoQXV0aG9yaXphdGlvblNlcnZpY2UpIHtcbiAgICAgICAgcmV0dXJuIEF1dGhvcml6YXRpb25TZXJ2aWNlLmF1dGhlbnRpY2F0ZWQoKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHVybDogXCIvc2lnbl9vdXRcIixcbiAgICB0ZW1wbGF0ZVVybDogXCJhcHAvYXV0aGVudGljYXRpb24vc2lnbl9vdXQuaHRtbFwiLFxuICAgIGNvbnRyb2xsZXI6IFwiQXV0aGVudGljYXRpb25DdHJsXCIsXG4gICAgY29udHJvbGxlckFzOiAnYXV0aGVudGljYXRpb25DdHJsJyxcbiAgfSk7XG4gICRzdGF0ZVByb3ZpZGVyLnN0YXRlKFwiZGlzdHJpYnV0b3Jfc2VsZWN0aW9uXCIsIHtcbiAgICByZXNvbHZlOiB7XG4gICAgICBhdXRoZW50aWNhdGVkKEF1dGhvcml6YXRpb25TZXJ2aWNlKSB7XG4gICAgICAgIHJldHVybiBBdXRob3JpemF0aW9uU2VydmljZS5hdXRoZW50aWNhdGVkKCk7XG4gICAgICB9XG4gICAgfSxcbiAgICB1cmw6IFwiL2Rpc3RyaWJ1dG9yX3NlbGVjdGlvblwiLFxuICAgIHRlbXBsYXRlVXJsOiBcImFwcC9kaXN0cmlidXRvci9kaXN0cmlidXRvcl9zZWxlY3Rvci5odG1sXCIsXG4gICAgY29udHJvbGxlcjogXCJEaXN0cmlidXRvclNlbGVjdG9yQ3RybFwiLFxuICAgIGNvbnRyb2xsZXJBczogJ3ZtJyxcbiAgfSk7XG4gICRzdGF0ZVByb3ZpZGVyLnN0YXRlKFwiaG9tZVwiLCB7XG4gICAgdXJsOiBcIi9cIixcbiAgICB0ZW1wbGF0ZVVybDogXCJhcHAvd2VsY29tZS93ZWxjb21lLmh0bWxcIixcbiAgICByZXNvbHZlOiB7XG4gICAgICBpZGVudGl0eShJZGVudGl0eVNlcnZpY2UpIHtcbiAgICAgICAgcmV0dXJuIElkZW50aXR5U2VydmljZS5nZXRJZGVudGl0eSgpO1xuICAgICAgfSxcbiAgICAgIGF1dGhlbnRpY2F0ZWQoQXV0aG9yaXphdGlvblNlcnZpY2UpIHtcbiAgICAgICAgcmV0dXJuIEF1dGhvcml6YXRpb25TZXJ2aWNlLmF1dGhlbnRpY2F0ZWQoKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIGNvbnRyb2xsZXI6IFwiV2VsY29tZUN0cmxcIixcbiAgICBjb250cm9sbGVyQXM6ICd3ZWxjb21lQ3RybCcsXG4gICAgbmN5QnJlYWRjcnVtYjoge1xuICAgICAgbGFiZWw6ICdTa3lraXQgUHJvdmlzaW9uaW5nJ1xuICAgIH1cbiAgfSk7XG4gICRzdGF0ZVByb3ZpZGVyLnN0YXRlKFwid2VsY29tZVwiLCB7XG4gICAgdXJsOiBcIi93ZWxjb21lXCIsXG4gICAgdGVtcGxhdGVVcmw6IFwiYXBwL3dlbGNvbWUvd2VsY29tZS5odG1sXCIsXG4gICAgcmVzb2x2ZToge1xuICAgICAgaWRlbnRpdHkoSWRlbnRpdHlTZXJ2aWNlKSB7XG4gICAgICAgIHJldHVybiBJZGVudGl0eVNlcnZpY2UuZ2V0SWRlbnRpdHkoKTtcbiAgICAgIH0sXG4gICAgICBhdXRoZW50aWNhdGVkKEF1dGhvcml6YXRpb25TZXJ2aWNlKSB7XG4gICAgICAgIHJldHVybiBBdXRob3JpemF0aW9uU2VydmljZS5hdXRoZW50aWNhdGVkKCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBjb250cm9sbGVyOiBcIldlbGNvbWVDdHJsXCIsXG4gICAgY29udHJvbGxlckFzOiAnd2VsY29tZUN0cmwnLFxuICAgIG5jeUJyZWFkY3J1bWI6IHtcbiAgICAgIGxhYmVsOiAnU2t5a2l0IFByb3Zpc2lvbmluZydcbiAgICB9XG4gIH0pO1xuICAkc3RhdGVQcm92aWRlci5zdGF0ZShcImRvbWFpbnNcIiwge1xuICAgIHJlc29sdmU6IHtcbiAgICAgIGF1dGhlbnRpY2F0ZWQoQXV0aG9yaXphdGlvblNlcnZpY2UpIHtcbiAgICAgICAgcmV0dXJuIEF1dGhvcml6YXRpb25TZXJ2aWNlLmF1dGhlbnRpY2F0ZWQoKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHVybDogXCIvZG9tYWluc1wiLFxuICAgIHRlbXBsYXRlVXJsOiBcImFwcC9kb21haW4vZG9tYWlucy1saXN0aW5nLmh0bWxcIixcbiAgICBjb250cm9sbGVyOiBcIkRvbWFpbnNDdHJsXCIsXG4gICAgY29udHJvbGxlckFzOiAnZG9tYWluc0N0cmwnLFxuICAgIG5jeUJyZWFkY3J1bWI6IHtcbiAgICAgIGxhYmVsOiAnRG9tYWlucydcbiAgICB9XG4gIH0pO1xuICAkc3RhdGVQcm92aWRlci5zdGF0ZShcImFkZERvbWFpblwiLCB7XG4gICAgcmVzb2x2ZToge1xuICAgICAgYXV0aGVudGljYXRlZChBdXRob3JpemF0aW9uU2VydmljZSkge1xuICAgICAgICByZXR1cm4gQXV0aG9yaXphdGlvblNlcnZpY2UuYXV0aGVudGljYXRlZCgpO1xuICAgICAgfVxuICAgIH0sXG4gICAgdXJsOiBcIi9kb21haW5zL2FkZFwiLFxuICAgIHRlbXBsYXRlVXJsOiBcImFwcC9kb21haW4vZG9tYWluLWRldGFpbC5odG1sXCIsXG4gICAgY29udHJvbGxlcjogXCJEb21haW5EZXRhaWxzQ3RybFwiLFxuICAgIGNvbnRyb2xsZXJBczogJ2RvbWFpbkRldGFpbHNDdHJsJyxcbiAgICBuY3lCcmVhZGNydW1iOiB7XG4gICAgICBsYWJlbDogJ0FkZCBkb21haW4nLFxuICAgICAgcGFyZW50OiAnZG9tYWlucydcbiAgICB9XG4gIH0pO1xuICAkc3RhdGVQcm92aWRlci5zdGF0ZShcImVkaXREb21haW5cIiwge1xuICAgIHJlc29sdmU6IHtcbiAgICAgIGF1dGhlbnRpY2F0ZWQoQXV0aG9yaXphdGlvblNlcnZpY2UpIHtcbiAgICAgICAgcmV0dXJuIEF1dGhvcml6YXRpb25TZXJ2aWNlLmF1dGhlbnRpY2F0ZWQoKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHVybDogXCIvZG9tYWlucy86ZG9tYWluS2V5XCIsXG4gICAgdGVtcGxhdGVVcmw6IFwiYXBwL2RvbWFpbi9kb21haW4tZGV0YWlsLmh0bWxcIixcbiAgICBjb250cm9sbGVyOiBcIkRvbWFpbkRldGFpbHNDdHJsXCIsXG4gICAgY29udHJvbGxlckFzOiAnZG9tYWluRGV0YWlsc0N0cmwnLFxuICAgIG5jeUJyZWFkY3J1bWI6IHtcbiAgICAgIGxhYmVsOiAne3sgZG9tYWluRGV0YWlsc0N0cmwuY3VycmVudERvbWFpbi5uYW1lIH19JyxcbiAgICAgIHBhcmVudDogJ2RvbWFpbnMnXG4gICAgfVxuICB9KTtcbiAgJHN0YXRlUHJvdmlkZXIuc3RhdGUoXCJ0ZW5hbnRzXCIsIHtcbiAgICByZXNvbHZlOiB7XG4gICAgICBhdXRoZW50aWNhdGVkKEF1dGhvcml6YXRpb25TZXJ2aWNlKSB7XG4gICAgICAgIHJldHVybiBBdXRob3JpemF0aW9uU2VydmljZS5hdXRoZW50aWNhdGVkKCk7XG4gICAgICB9XG4gICAgfSxcbiAgICB1cmw6IFwiL3RlbmFudHNcIixcbiAgICB0ZW1wbGF0ZVVybDogXCJhcHAvdGVuYW50L3RlbmFudHMtbGlzdGluZy5odG1sXCIsXG4gICAgY29udHJvbGxlcjogXCJUZW5hbnRzQ3RybFwiLFxuICAgIGNvbnRyb2xsZXJBczogJ3RlbmFudHNDdHJsJyxcbiAgICBuY3lCcmVhZGNydW1iOiB7XG4gICAgICBsYWJlbDogJ1RlbmFudHMnXG4gICAgfVxuICB9KTtcbiAgJHN0YXRlUHJvdmlkZXIuc3RhdGUoXCJhZGRUZW5hbnRcIiwge1xuICAgIHJlc29sdmU6IHtcbiAgICAgIGF1dGhlbnRpY2F0ZWQoQXV0aG9yaXphdGlvblNlcnZpY2UpIHtcbiAgICAgICAgcmV0dXJuIEF1dGhvcml6YXRpb25TZXJ2aWNlLmF1dGhlbnRpY2F0ZWQoKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHVybDogXCIvdGVuYW50cy9hZGRcIixcbiAgICB0ZW1wbGF0ZVVybDogXCJhcHAvdGVuYW50L3RlbmFudC1hZGQuaHRtbFwiLFxuICAgIGNvbnRyb2xsZXI6IFwiVGVuYW50QWRkQ3RybFwiLFxuICAgIGNvbnRyb2xsZXJBczogJ3RlbmFudEFkZEN0cmwnLFxuICAgIG5jeUJyZWFkY3J1bWI6IHtcbiAgICAgIGxhYmVsOiAnQWRkIHRlbmFudCcsXG4gICAgICBwYXJlbnQ6ICd0ZW5hbnRzJ1xuICAgIH1cbiAgfSk7XG4gICRzdGF0ZVByb3ZpZGVyLnN0YXRlKFwidGVuYW50RGV0YWlsc1wiLCB7XG4gICAgcmVzb2x2ZToge1xuICAgICAgYXV0aGVudGljYXRlZChBdXRob3JpemF0aW9uU2VydmljZSkge1xuICAgICAgICByZXR1cm4gQXV0aG9yaXphdGlvblNlcnZpY2UuYXV0aGVudGljYXRlZCgpO1xuICAgICAgfVxuICAgIH0sXG4gICAgdXJsOiBcIi90ZW5hbnRzLzp0ZW5hbnRLZXkvZGV0YWlsc1wiLFxuICAgIHRlbXBsYXRlVXJsOiBcImFwcC90ZW5hbnQvdGVuYW50LWRldGFpbHMuaHRtbFwiLFxuICAgIGNvbnRyb2xsZXI6IFwiVGVuYW50RGV0YWlsc0N0cmxcIixcbiAgICBjb250cm9sbGVyQXM6ICd0ZW5hbnREZXRhaWxzQ3RybCcsXG4gICAgbmN5QnJlYWRjcnVtYjoge1xuICAgICAgbGFiZWw6ICd7eyB0ZW5hbnREZXRhaWxzQ3RybC5jdXJyZW50VGVuYW50Lm5hbWUgfX0nLFxuICAgICAgcGFyZW50OiAndGVuYW50cydcbiAgICB9XG4gIH0pO1xuICAkc3RhdGVQcm92aWRlci5zdGF0ZShcInRlbmFudE1hbmFnZWREZXZpY2VzXCIsIHtcbiAgICByZXNvbHZlOiB7XG4gICAgICBhdXRoZW50aWNhdGVkKEF1dGhvcml6YXRpb25TZXJ2aWNlKSB7XG4gICAgICAgIHJldHVybiBBdXRob3JpemF0aW9uU2VydmljZS5hdXRoZW50aWNhdGVkKCk7XG4gICAgICB9XG4gICAgfSxcbiAgICB1cmw6IFwiL3RlbmFudHMvOnRlbmFudEtleS9tYW5hZ2VkXCIsXG4gICAgdGVtcGxhdGVVcmw6IFwiYXBwL3RlbmFudC90ZW5hbnQtbWFuYWdlZC1kZXZpY2VzLmh0bWxcIixcbiAgICBjb250cm9sbGVyOiBcIlRlbmFudE1hbmFnZWREZXZpY2VzQ3RybFwiLFxuICAgIGNvbnRyb2xsZXJBczogJ3RlbmFudE1hbmFnZWREZXZpY2VzQ3RybCcsXG4gICAgbmN5QnJlYWRjcnVtYjoge1xuICAgICAgbGFiZWw6ICd7eyB0ZW5hbnRNYW5hZ2VkRGV2aWNlc0N0cmwuY3VycmVudFRlbmFudC5uYW1lIH19JyxcbiAgICAgIHBhcmVudDogJ3RlbmFudHMnXG4gICAgfVxuICB9KTtcbiAgJHN0YXRlUHJvdmlkZXIuc3RhdGUoXCJ0ZW5hbnRVbm1hbmFnZWREZXZpY2VzXCIsIHtcbiAgICByZXNvbHZlOiB7XG4gICAgICBhdXRoZW50aWNhdGVkKEF1dGhvcml6YXRpb25TZXJ2aWNlKSB7XG4gICAgICAgIHJldHVybiBBdXRob3JpemF0aW9uU2VydmljZS5hdXRoZW50aWNhdGVkKCk7XG4gICAgICB9XG4gICAgfSxcbiAgICB1cmw6IFwiL3RlbmFudHMvOnRlbmFudEtleS91bm1hbmFnZWRcIixcbiAgICB0ZW1wbGF0ZVVybDogXCJhcHAvdGVuYW50L3RlbmFudC11bm1hbmFnZWQtZGV2aWNlcy5odG1sXCIsXG4gICAgY29udHJvbGxlcjogXCJUZW5hbnRVbm1hbmFnZWREZXZpY2VzQ3RybFwiLFxuICAgIGNvbnRyb2xsZXJBczogJ3RlbmFudFVubWFuYWdlZERldmljZXNDdHJsJyxcbiAgICBuY3lCcmVhZGNydW1iOiB7XG4gICAgICBsYWJlbDogJ3t7IHRlbmFudFVubWFuYWdlZERldmljZXNDdHJsLmN1cnJlbnRUZW5hbnQubmFtZSB9fScsXG4gICAgICBwYXJlbnQ6ICd0ZW5hbnRzJ1xuICAgIH1cbiAgfSk7XG4gICRzdGF0ZVByb3ZpZGVyLnN0YXRlKFwidGVuYW50TG9nc1wiLCB7XG4gICAgcmVzb2x2ZToge1xuICAgICAgYXV0aGVudGljYXRlZChBdXRob3JpemF0aW9uU2VydmljZSkge1xuICAgICAgICByZXR1cm4gQXV0aG9yaXphdGlvblNlcnZpY2UuYXV0aGVudGljYXRlZCgpO1xuICAgICAgfVxuICAgIH0sXG4gICAgdXJsOiBcIi90ZW5hbnRzLzp0ZW5hbnRLZXkvbG9nc1wiLFxuICAgIHRlbXBsYXRlVXJsOiBcImFwcC90ZW5hbnQvdGVuYW50LWxvZ3MuaHRtbFwiLFxuICAgIGNvbnRyb2xsZXI6IFwiVGVuYW50TG9nc0N0cmxcIixcbiAgICBjb250cm9sbGVyQXM6ICd0ZW5hbnRMb2dzQ3RybCcsXG4gICAgbmN5QnJlYWRjcnVtYjoge1xuICAgICAgbGFiZWw6ICd7eyB0ZW5hbnRMb2dzQ3RybC5jdXJyZW50VGVuYW50Lm5hbWUgfX0nLFxuICAgICAgcGFyZW50OiAndGVuYW50cydcbiAgICB9XG4gIH0pO1xuICAkc3RhdGVQcm92aWRlci5zdGF0ZShcInRlbmFudE92ZXJsYXlzXCIsIHtcbiAgICByZXNvbHZlOiB7XG4gICAgICBhdXRoZW50aWNhdGVkKEF1dGhvcml6YXRpb25TZXJ2aWNlKSB7XG4gICAgICAgIHJldHVybiBBdXRob3JpemF0aW9uU2VydmljZS5hdXRoZW50aWNhdGVkKCk7XG4gICAgICB9XG4gICAgfSxcbiAgICB1cmw6IFwiL3RlbmFudHMvOnRlbmFudEtleS9vdmVybGF5c1wiLFxuICAgIHRlbXBsYXRlVXJsOiBcImFwcC90ZW5hbnQvdGVuYW50LW92ZXJsYXlzLmh0bWxcIixcbiAgICBjb250cm9sbGVyOiBcIlRlbmFudE92ZXJsYXlzQ3RybFwiLFxuICAgIGNvbnRyb2xsZXJBczogJ3RlbmFudE92ZXJsYXlzQ3RybCcsXG4gICAgbmN5QnJlYWRjcnVtYjoge1xuICAgICAgbGFiZWw6ICd7eyB0ZW5hbnRPdmVybGF5c0N0cmwuY3VycmVudFRlbmFudC5uYW1lIH19JyxcbiAgICAgIHBhcmVudDogJ3RlbmFudHMnXG4gICAgfVxuICB9KTtcbiAgJHN0YXRlUHJvdmlkZXIuc3RhdGUoXCJ0ZW5hbnRMb2NhdGlvbnNcIiwge1xuICAgIHJlc29sdmU6IHtcbiAgICAgIGF1dGhlbnRpY2F0ZWQoQXV0aG9yaXphdGlvblNlcnZpY2UpIHtcbiAgICAgICAgcmV0dXJuIEF1dGhvcml6YXRpb25TZXJ2aWNlLmF1dGhlbnRpY2F0ZWQoKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHVybDogXCIvdGVuYW50cy86dGVuYW50S2V5L2xvY2F0aW9uc1wiLFxuICAgIHRlbXBsYXRlVXJsOiBcImFwcC90ZW5hbnQvdGVuYW50LWxvY2F0aW9ucy5odG1sXCIsXG4gICAgY29udHJvbGxlcjogXCJUZW5hbnRMb2NhdGlvbnNDdHJsXCIsXG4gICAgY29udHJvbGxlckFzOiAndGVuYW50TG9jYXRpb25zQ3RybCcsXG4gICAgbmN5QnJlYWRjcnVtYjoge1xuICAgICAgbGFiZWw6ICd7eyB0ZW5hbnRMb2NhdGlvbnNDdHJsLmN1cnJlbnRUZW5hbnQubmFtZSB9fScsXG4gICAgICBwYXJlbnQ6ICd0ZW5hbnRzJ1xuICAgIH1cbiAgfSk7XG4gICRzdGF0ZVByb3ZpZGVyLnN0YXRlKFwiZWRpdExvY2F0aW9uXCIsIHtcbiAgICByZXNvbHZlOiB7XG4gICAgICBhdXRoZW50aWNhdGVkKEF1dGhvcml6YXRpb25TZXJ2aWNlKSB7XG4gICAgICAgIHJldHVybiBBdXRob3JpemF0aW9uU2VydmljZS5hdXRoZW50aWNhdGVkKCk7XG4gICAgICB9XG4gICAgfSxcbiAgICB1cmw6IFwiL2xvY2F0aW9ucy86bG9jYXRpb25LZXlcIixcbiAgICB0ZW1wbGF0ZVVybDogXCJhcHAvdGVuYW50L3RlbmFudC1sb2NhdGlvbi5odG1sXCIsXG4gICAgY29udHJvbGxlcjogXCJUZW5hbnRMb2NhdGlvbkN0cmxcIixcbiAgICBjb250cm9sbGVyQXM6ICd0ZW5hbnRMb2NhdGlvbkN0cmwnLFxuICAgIG5jeUJyZWFkY3J1bWI6IHtcbiAgICAgIGxhYmVsOiAne3sgdGVuYW50TG9jYXRpb25DdHJsLnRlbmFudE5hbWUgfX0gIC8ge3sgdGVuYW50TG9jYXRpb25DdHJsLmxvY2F0aW9uTmFtZSB9fScsXG4gICAgICBwYXJlbnQ6ICd0ZW5hbnRzJ1xuICAgIH1cbiAgfSk7XG4gICRzdGF0ZVByb3ZpZGVyLnN0YXRlKFwiYWRkTG9jYXRpb25cIiwge1xuICAgIHJlc29sdmU6IHtcbiAgICAgIGF1dGhlbnRpY2F0ZWQoQXV0aG9yaXphdGlvblNlcnZpY2UpIHtcbiAgICAgICAgcmV0dXJuIEF1dGhvcml6YXRpb25TZXJ2aWNlLmF1dGhlbnRpY2F0ZWQoKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHVybDogXCIvdGVuYW50cy86dGVuYW50S2V5L2xvY2F0aW9uXCIsXG4gICAgdGVtcGxhdGVVcmw6IFwiYXBwL3RlbmFudC90ZW5hbnQtbG9jYXRpb24uaHRtbFwiLFxuICAgIGNvbnRyb2xsZXI6IFwiVGVuYW50TG9jYXRpb25DdHJsXCIsXG4gICAgY29udHJvbGxlckFzOiAndGVuYW50TG9jYXRpb25DdHJsJyxcbiAgICBuY3lCcmVhZGNydW1iOiB7XG4gICAgICBsYWJlbDogJ3t7IHRlbmFudExvY2F0aW9uQ3RybC50ZW5hbnROYW1lIH19ICAvIExvY2F0aW9uJyxcbiAgICAgIHBhcmVudDogJ3RlbmFudHMnXG4gICAgfVxuICB9KTtcbiAgJHN0YXRlUHJvdmlkZXIuc3RhdGUoXCJkZXZpY2VzXCIsIHtcbiAgICByZXNvbHZlOiB7XG4gICAgICBhdXRoZW50aWNhdGVkKEF1dGhvcml6YXRpb25TZXJ2aWNlKSB7XG4gICAgICAgIHJldHVybiBBdXRob3JpemF0aW9uU2VydmljZS5hdXRoZW50aWNhdGVkKCk7XG4gICAgICB9XG4gICAgfSxcbiAgICB1cmw6IFwiL2RldmljZXNcIixcbiAgICB0ZW1wbGF0ZVVybDogXCJhcHAvZGV2aWNlL2RldmljZXMtbGlzdGluZy5odG1sXCIsXG4gICAgY29udHJvbGxlcjogXCJEZXZpY2VzTGlzdGluZ0N0cmxcIixcbiAgICBjb250cm9sbGVyQXM6ICdkZXZpY2VzTGlzdGluZ0N0cmwnLFxuICAgIG5jeUJyZWFkY3J1bWI6IHtcbiAgICAgIGxhYmVsOiAnRGV2aWNlcydcbiAgICB9XG4gIH0pO1xuICAkc3RhdGVQcm92aWRlci5zdGF0ZShcImVkaXREZXZpY2VcIiwge1xuICAgIHJlc29sdmU6IHtcbiAgICAgIGlkZW50aXR5KElkZW50aXR5U2VydmljZSkge1xuICAgICAgICByZXR1cm4gSWRlbnRpdHlTZXJ2aWNlLmdldElkZW50aXR5KCk7XG4gICAgICB9LFxuICAgICAgYXV0aGVudGljYXRlZChBdXRob3JpemF0aW9uU2VydmljZSkge1xuICAgICAgICByZXR1cm4gQXV0aG9yaXphdGlvblNlcnZpY2UuYXV0aGVudGljYXRlZCgpO1xuICAgICAgfVxuICAgIH0sXG4gICAgdXJsOiBcIi9kZXZpY2VzLzpkZXZpY2VLZXk/dGVuYW50S2V5P2Zyb21EZXZpY2VzXCIsXG4gICAgdGVtcGxhdGVVcmw6IFwiYXBwL2RldmljZS9kZXZpY2UtZGV0YWlsLmh0bWxcIixcbiAgICBuY3lCcmVhZGNydW1iOiB7XG4gICAgICBsYWJlbDogJ3t7IGRldmljZURldGFpbHNDdHJsLmN1cnJlbnREZXZpY2Uua2V5IH19JyxcbiAgICAgIHBhcmVudDogJ2RldmljZXMnXG4gICAgfSxcbiAgICBjb250cm9sbGVyOiAnRGV2aWNlRGV0YWlsc0N0cmwnLFxuICAgIGZ1bmN0aW9uKCRzY29wZSwgJHN0YXRlUGFyYW1zKSB7XG4gICAgICAkc2NvcGUudGVuYW50S2V5ID0gJHN0YXRlUGFyYW1zLnRlbmFudEtleTtcbiAgICAgIHJldHVybjtcbiAgICB9LFxuICAgIGNvbnRyb2xsZXJBczogJ2RldmljZURldGFpbHNDdHJsJ1xuICB9KTtcbiAgJHN0YXRlUHJvdmlkZXIuc3RhdGUoXCJwcm9vZlwiLCB7XG4gICAgcmVzb2x2ZToge1xuICAgICAgYXV0aGVudGljYXRlZChBdXRob3JpemF0aW9uU2VydmljZSkge1xuICAgICAgICByZXR1cm4gQXV0aG9yaXphdGlvblNlcnZpY2UuYXV0aGVudGljYXRlZCgpO1xuICAgICAgfVxuICAgIH0sXG4gICAgdXJsOiBcIi9wcm9vZlwiLFxuICAgIHRlbXBsYXRlVXJsOiBcImFwcC9wcm9vZi9tYWluLmh0bWxcIixcbiAgICBjb250cm9sbGVyOiBcIlByb29mT2ZQbGF5Q3RybFwiLFxuICAgIGNvbnRyb2xsZXJBczogJ3ZtJyxcbiAgICBuY3lCcmVhZGNydW1iOiB7XG4gICAgICBsYWJlbDogJ1Byb29mIG9mIFBsYXknXG4gICAgfVxuICB9KTtcbiAgJHN0YXRlUHJvdmlkZXIuc3RhdGUoXCJwcm9vZkRldGFpbFwiLCB7XG4gICAgcmVzb2x2ZToge1xuICAgICAgYXV0aGVudGljYXRlZChBdXRob3JpemF0aW9uU2VydmljZSkge1xuICAgICAgICByZXR1cm4gQXV0aG9yaXphdGlvblNlcnZpY2UuYXV0aGVudGljYXRlZCgpO1xuICAgICAgfVxuICAgIH0sXG4gICAgdXJsOiBcIi9wcm9vZi86dGVuYW50XCIsXG4gICAgdGVtcGxhdGVVcmw6IFwiYXBwL3Byb29mL2RldGFpbC5odG1sXCIsXG4gICAgY29udHJvbGxlcjogXCJQcm9vZk9mUGxheUN0cmxcIixcbiAgICBjb250cm9sbGVyQXM6ICd2bScsXG4gICAgbmN5QnJlYWRjcnVtYjoge1xuICAgICAgbGFiZWw6ICdQcm9vZiBvZiBQbGF5J1xuICAgIH1cbiAgfSk7XG4gICRzdGF0ZVByb3ZpZGVyLnN0YXRlKFwiYWRtaW5cIiwge1xuICAgIHJlc29sdmU6IHtcbiAgICAgIGlzQWRtaW4oQXV0aG9yaXphdGlvblNlcnZpY2UpIHtcbiAgICAgICAgcmV0dXJuIEF1dGhvcml6YXRpb25TZXJ2aWNlLmlzQWRtaW5PckRpc3RyaWJ1dG9yQWRtaW4oKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIHVybDogXCIvYWRtaW5cIixcbiAgICB0ZW1wbGF0ZVVybDogXCJhcHAvYWRtaW4vYWRtaW4uaHRtbFwiLFxuICAgIGNvbnRyb2xsZXI6IFwiQWRtaW5DdHJsXCIsXG4gICAgY29udHJvbGxlckFzOiAndm0nLFxuICAgIG5jeUJyZWFkY3J1bWI6IHtcbiAgICAgIGxhYmVsOiAnQWRtaW4nXG4gICAgfVxuICB9KTtcblxuICAkdXJsUm91dGVyUHJvdmlkZXIub3RoZXJ3aXNlKCcvc2lnbl9pbicpO1xuXG4gIFJlc3Rhbmd1bGFyUHJvdmlkZXIuc2V0QmFzZVVybCgnL2FwaS92MScpO1xuXG4gIFJlc3Rhbmd1bGFyUHJvdmlkZXIuYWRkUmVzcG9uc2VJbnRlcmNlcHRvcihmdW5jdGlvbiAoZGF0YSwgb3BlcmF0aW9uLCByZXNvdXJjZVR5cGUsIHVybCwgcmVzcG9uc2UsIGRlZmVycmVkKSB7XG4gICAgbGV0IHJlc3VsdCA9IGRhdGE7XG4gICAgLy8gVW5jb21tZW50IHRoaXMgZm9yIHBhZ2luYXRpb24gc3VwcG9ydCB3aGVuIHVzaW5nIFBhZ2luZ0xpc3RIYW5kbGVyTWl4aW4gb24gdGhlIFB5dGhvbiBzaWRlLlxuICAgIC8vICAgIGlmIHJlc291cmNlVHlwZSA9PSAnZGV2aWNlcycgYW5kIG9wZXJhdGlvbiA9ICdnZXRMaXN0JyBhbmQgdXJsID09ICcvYXBpL3YxL2RldmljZXMnXG4gICAgLy8gICAgICByZXN1bHQgPSBkYXRhLm9iamVjdHNcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9KTtcblxuICByZXR1cm4gUmVzdGFuZ3VsYXJQcm92aWRlci5zZXRSZXN0YW5ndWxhckZpZWxkcyh7XG4gICAgaWQ6ICdrZXknXG4gIH0pO1xufVxuXG5yb3V0ZXMuJGluamVjdCA9IFtcIiRzdGF0ZVByb3ZpZGVyXCIsIFwiJHVybFJvdXRlclByb3ZpZGVyXCIsIFwiUmVzdGFuZ3VsYXJQcm92aWRlclwiXVxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zcmMvYXBwL2FwcC1yb3V0ZXMuanNcbiAqKi8iLCJleHBvcnQgZnVuY3Rpb24gYXBwUnVuKFJlc3Rhbmd1bGFyLCAkbG9jYXRpb24sICRpbmplY3RvciwgJHJvb3RTY29wZSwgJHRpbWVvdXQpIHtcbiAgXCJuZ0luamVjdFwiO1xuXG4gIGxldCBzdGF0ZUNoYW5nZVdhdGNoID0gZnVuY3Rpb24gKCkge1xuICAgIGxldCBzdGF0ZSA9ICRpbmplY3Rvci5nZXQoJyRzdGF0ZScpO1xuICAgIHJldHVybiAkcm9vdFNjb3BlLiRvbignJHN0YXRlQ2hhbmdlRXJyb3InLCBmdW5jdGlvbiAoZXZlbnQsIHRvU3RhdGUsIHRvUGFyYW1zLCBmcm9tU3RhdGUsIGZyb21QYXJhbXMsIGVycm9yKSB7XG4gICAgICBpZiAoZXJyb3JbMF0gPT09IFwiYXV0aEVycm9yXCIpIHtcbiAgICAgICAgcmV0dXJuIHN0YXRlLmdvKGVycm9yWzFdKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfTtcblxuICAkdGltZW91dChzdGF0ZUNoYW5nZVdhdGNoLCA1MDApO1xuXG4gIGxldCByZXF1ZXN0SW50ZXJjZXB0b3IgPSBmdW5jdGlvbiAoKSB7XG4gICAgUmVzdGFuZ3VsYXIuYWRkUmVxdWVzdEludGVyY2VwdG9yKGZ1bmN0aW9uIChlbGVtLCBvcGVyYXRpb24sIHdoYXQsIHVybCkge1xuICAgICAgbGV0IFN0b3JhZ2VTZXJ2aWNlID0gJGluamVjdG9yLmdldCgnU3RvcmFnZVNlcnZpY2UnKVxuXG4gICAgICBsZXQgYXV0aFRva2VuID0gJzZDMzQ2NTg4QkQ0QzZENzIyQTExNjVCNDNDNTFDJztcbiAgICAgIGlmICgkbG9jYXRpb24uaG9zdCgpLmluZGV4T2YoJ3Byb3Zpc2lvbmluZy1nYW1lc3RvcCcpID4gLTEpIHtcbiAgICAgICAgYXV0aFRva2VuID0gJzVYWkhCRjNtT3dxSmxZQWxHMU5lZVdYMENiNzJnJztcbiAgICAgIH1cbiAgICAgIFJlc3Rhbmd1bGFyLnNldERlZmF1bHRIZWFkZXJzKHtcbiAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgJ0FjY2VwdCc6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgJ0F1dGhvcml6YXRpb24nOiBhdXRoVG9rZW4sXG4gICAgICAgICdYLVByb3Zpc2lvbmluZy1Vc2VyJzogU3RvcmFnZVNlcnZpY2UuZ2V0KCd1c2VyS2V5JyksXG4gICAgICAgICdYLVByb3Zpc2lvbmluZy1EaXN0cmlidXRvcic6IFN0b3JhZ2VTZXJ2aWNlLmdldCgnY3VycmVudERpc3RyaWJ1dG9yS2V5JylcbiAgICAgIH0pO1xuXG4gICAgICBpZiAob3BlcmF0aW9uID09PSAncmVtb3ZlJykge1xuICAgICAgICByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gZWxlbTtcbiAgICB9KVxuICB9XG5cbiAgJHRpbWVvdXQocmVxdWVzdEludGVyY2VwdG9yLCA1MDApO1xuXG59XG5cblxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zcmMvYXBwL2FwcC1ydW4uanNcbiAqKi8iLCJpbXBvcnQgYW5ndWxhciBmcm9tICdhbmd1bGFyJztcblxuZXhwb3J0IGZ1bmN0aW9uIHRvYXN0ckNvbmZpZyh0b2FzdHJDb25maWcpIHtcbiAgYW5ndWxhci5leHRlbmQodG9hc3RyQ29uZmlnLCB7XG4gICAgcHJvZ3Jlc3NCYXI6IHRydWUsXG4gICAgY2xvc2VCdXR0b246IHRydWUsXG4gICAgdGFwVG9EaXNtaXNzOiB0cnVlLFxuICAgIG5ld2VzdE9uVG9wOiB0cnVlLFxuICAgIHBvc2l0aW9uQ2xhc3M6ICd0b2FzdC1ib3R0b20tbGVmdCcsXG4gICAgdGltZU91dDogNTAwMFxuICB9KVxufVxudG9hc3RyQ29uZmlnLiRpbmplY3QgPSBbJ3RvYXN0ckNvbmZpZyddO1xuXG5cbmV4cG9ydCBmdW5jdGlvbiBicmVhZGNydW1iUHJvdmlkZXIoJGJyZWFkY3J1bWJQcm92aWRlcikge1xuICAkYnJlYWRjcnVtYlByb3ZpZGVyLnNldE9wdGlvbnMoe1xuICAgIHByZWZpeFN0YXRlTmFtZTogJ2hvbWUnLFxuICAgIHRlbXBsYXRlOiAnYm9vdHN0cmFwMydcbiAgfSlcbn1cblxuYnJlYWRjcnVtYlByb3ZpZGVyLiRpbmplY3QgPSBbXCIkYnJlYWRjcnVtYlByb3ZpZGVyXCJdXG5cblxuXG5cblxuLyoqIFdFQlBBQ0sgRk9PVEVSICoqXG4gKiogLi9zcmMvYXBwL2FwcC1jb25maWcuanNcbiAqKi8iXSwic291cmNlUm9vdCI6IiJ9