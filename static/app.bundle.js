webpackJsonp([0],{0:function(e,exports,t){t(70),e.exports=t(367)},367:function(e,exports,t){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}var r=t(368),a=t(648),i=t(649),o=t(660),s=t(661),c=t(662),u=t(663),l=t(686),d=t(687),v=t(688),m=t(689),f=t(690),p=t(691),h=t(692),g=t(693),y=t(694),b=n(y),D=t(700),S=n(D),T=t(701),_=n(T),k=t(702),C=n(k),x=t(703),w=n(x),M=t(704),I=n(M),P=t(705),E=n(P),A=t(706),K=n(A),B=t(707),O=n(B),j=t(708),R=n(j),U=t(709),L=n(U),V=t(710),N=n(V),z=t(711),F=n(z),Y=t(712),q=n(Y),G=t(716),W=n(G),H=t(718),X=n(H),J=t(719),Z=n(J),Q=t(720),ee=n(Q),te=t(721),ne=n(te),re=t(722),ae=t(723),ie=t(724),oe=t(725),se=t(726),ce=t(727),ue=t(728),le=t(729),de=t(730),ve=t(731),me=t(732),fe=t(733),pe=t(734);r.app.service("StorageService",W["default"]).service("AdminService",S["default"]).service("AuthorizationService",_["default"]).service("CommandsService",C["default"]).service("DateManipulationService",w["default"]).service("DevicesService",I["default"]).service("DistributorsService",E["default"]).service("DomainsService",K["default"]).service("IdentityService",O["default"]).service("IntegrationEvents",R["default"]).service("LocationsService",L["default"]).service("ProgressBarService",N["default"]).service("ProofPlayService",F["default"]).service("SessionsService",q["default"]).service("TenantsService",X["default"]).service("TimezonesService",Z["default"]).service("ToastsService",ee["default"]).service("VersionsService",ne["default"]).service("ImageService",b["default"]).controller("DeviceDetailsCommandsCtrl",a.DeviceDetailsCommandsCtrl).controller("DeviceDetailsCtrl",i.DeviceDetailsCtrl).controller("DevicesListingCtrl",o.DevicesListingCtrl).controller("AdminCtrl",s.AdminCtrl).controller("AuthenticationCtrl",c.AuthenticationCtrl).controller("AppController",u.AppController).controller("DistributorSelectorCtrl",l.DistributorSelectorCtrl).controller("DistributorsCtrl",d.DistributorsCtrl).controller("DomainsCtrl",v.DomainsCtrl).controller("DomainDetailsCtrl",m.DomainDetailsCtrl).controller("ProofOfPlayMultiLocationCtrl",f.ProofOfPlayMultiLocationCtrl).controller("ProofOfPlayMultiDisplayCtrl",p.ProofOfPlayMultiDisplayCtrl).controller("ProofOfPlayMultiResourceCtrl",h.ProofOfPlayMultiResourceCtrl).controller("ProofOfPlayCtrl",g.ProofOfPlayCtrl).controller("TenantLogsCtrl",re.TenantLogsCtrl).controller("TenantOverlaysCtrl",ae.TenantOverlaysCtrl).controller("TenantAddCtrl",ie.TenantAddCtrl).controller("TenantDetailsCtrl",oe.TenantDetailsCtrl).controller("TenantLocationCtrl",se.TenantLocationCtrl).controller("TenantLocationsCtrl",ce.TenantLocationsCtrl).controller("TenantManagedDevicesCtrl",ue.TenantManagedDevicesCtrl).controller("TenantUnmanagedDevicesCtrl",le.TenantUnmanagedDevicesCtrl).controller("TenantsCtrl",de.TenantsCtrl).controller("WelcomeCtrl",ve.WelcomeCtrl).run(fe.appRun).config(me.routes).config(pe.toastrConfig).config(pe.breadcrumbProvider),r.app.service("RequestInterceptor",["StorageService","$location",function(e,t){"ngInject";var n={request:function(n){var r="5XZHBF3mOwqJlYAlG1NeeWX0Cb72g",a="6C346588BD4C6D722A1165B43C51C";return n.headers={"Content-Type":"application/json",Accept:"application/json",JWT:e.get("JWT"),oAuth:e.get("oAuth"),Authorization:t.host().indexOf("provisioning-gamestop")>-1?r:a,"X-Provisioning-User":e.get("userKey"),"X-Provisioning-User-Identifier":e.get("userEmail"),"X-Provisioning-Distributor":e.get("currentDistributorKey")},n}};return n}]),r.app.config(["$httpProvider",function(e){return e.interceptors.push("RequestInterceptor")}])},368:function(e,exports,t){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(exports,"__esModule",{value:!0}),exports.app=void 0;var r=t(369),a=n(r),i=t(371),o=n(i),s=t(372);n(s);t(479),t(481),t(482),t(486),t(488),t(490),t(492),t(500),t(502),t(524),t(525),t(527),t(596),t(597),t(599),t(604),t(605),t(611),t(620),t(621),t(623),t(625),t(627),t(629),t(512),t(640),t(370),t(641),t(643),t(645);var c=t(647),u=n(c);window._=u["default"],window.angular=a["default"];exports.app=a["default"].module("skykitProvisioning",[o["default"],"ngAnimate","720kb.tooltips","ngCookies","ngSanitize","restangular","ui.bootstrap","ngMaterialDatePicker","hSweetAlert","ncy-angular-breadcrumb","directive.g+signin","ngProgress","ngMaterial","ngclipboard","toastr","lfNgMdFileInput"])},374:function(e,exports,t){function n(e){return t(r(e))}function r(e){return a[e]||function(){throw new Error("Cannot find module '"+e+"'.")}()}var a={"./af":375,"./af.js":375,"./ar":376,"./ar-ly":377,"./ar-ly.js":377,"./ar-ma":378,"./ar-ma.js":378,"./ar-sa":379,"./ar-sa.js":379,"./ar-tn":380,"./ar-tn.js":380,"./ar.js":376,"./az":381,"./az.js":381,"./be":382,"./be.js":382,"./bg":383,"./bg.js":383,"./bn":384,"./bn.js":384,"./bo":385,"./bo.js":385,"./br":386,"./br.js":386,"./bs":387,"./bs.js":387,"./ca":388,"./ca.js":388,"./cs":389,"./cs.js":389,"./cv":390,"./cv.js":390,"./cy":391,"./cy.js":391,"./da":392,"./da.js":392,"./de":393,"./de-at":394,"./de-at.js":394,"./de.js":393,"./dv":395,"./dv.js":395,"./el":396,"./el.js":396,"./en-au":397,"./en-au.js":397,"./en-ca":398,"./en-ca.js":398,"./en-gb":399,"./en-gb.js":399,"./en-ie":400,"./en-ie.js":400,"./en-nz":401,"./en-nz.js":401,"./eo":402,"./eo.js":402,"./es":403,"./es-do":404,"./es-do.js":404,"./es.js":403,"./et":405,"./et.js":405,"./eu":406,"./eu.js":406,"./fa":407,"./fa.js":407,"./fi":408,"./fi.js":408,"./fo":409,"./fo.js":409,"./fr":410,"./fr-ca":411,"./fr-ca.js":411,"./fr-ch":412,"./fr-ch.js":412,"./fr.js":410,"./fy":413,"./fy.js":413,"./gd":414,"./gd.js":414,"./gl":415,"./gl.js":415,"./he":416,"./he.js":416,"./hi":417,"./hi.js":417,"./hr":418,"./hr.js":418,"./hu":419,"./hu.js":419,"./hy-am":420,"./hy-am.js":420,"./id":421,"./id.js":421,"./is":422,"./is.js":422,"./it":423,"./it.js":423,"./ja":424,"./ja.js":424,"./jv":425,"./jv.js":425,"./ka":426,"./ka.js":426,"./kk":427,"./kk.js":427,"./km":428,"./km.js":428,"./ko":429,"./ko.js":429,"./ky":430,"./ky.js":430,"./lb":431,"./lb.js":431,"./lo":432,"./lo.js":432,"./lt":433,"./lt.js":433,"./lv":434,"./lv.js":434,"./me":435,"./me.js":435,"./mi":436,"./mi.js":436,"./mk":437,"./mk.js":437,"./ml":438,"./ml.js":438,"./mr":439,"./mr.js":439,"./ms":440,"./ms-my":441,"./ms-my.js":441,"./ms.js":440,"./my":442,"./my.js":442,"./nb":443,"./nb.js":443,"./ne":444,"./ne.js":444,"./nl":445,"./nl.js":445,"./nn":446,"./nn.js":446,"./pa-in":447,"./pa-in.js":447,"./pl":448,"./pl.js":448,"./pt":449,"./pt-br":450,"./pt-br.js":450,"./pt.js":449,"./ro":451,"./ro.js":451,"./ru":452,"./ru.js":452,"./se":453,"./se.js":453,"./si":454,"./si.js":454,"./sk":455,"./sk.js":455,"./sl":456,"./sl.js":456,"./sq":457,"./sq.js":457,"./sr":458,"./sr-cyrl":459,"./sr-cyrl.js":459,"./sr.js":458,"./ss":460,"./ss.js":460,"./sv":461,"./sv.js":461,"./sw":462,"./sw.js":462,"./ta":463,"./ta.js":463,"./te":464,"./te.js":464,"./th":465,"./th.js":465,"./tl-ph":466,"./tl-ph.js":466,"./tlh":467,"./tlh.js":467,"./tr":468,"./tr.js":468,"./tzl":469,"./tzl.js":469,"./tzm":470,"./tzm-latn":471,"./tzm-latn.js":471,"./tzm.js":470,"./uk":472,"./uk.js":472,"./uz":473,"./uz.js":473,"./vi":474,"./vi.js":474,"./x-pseudo":475,"./x-pseudo.js":475,"./zh-cn":476,"./zh-cn.js":476,"./zh-hk":477,"./zh-hk.js":477,"./zh-tw":478,"./zh-tw.js":478};n.keys=function(){return Object.keys(a)},n.resolve=r,e.exports=n,n.id=374},524:function(e,exports){"use strict";angular.module("ngProgress.provider",["ngProgress.directive"]).service("ngProgress",function(){return["$document","$window","$compile","$rootScope","$timeout",function(e,t,n,r,a){this.autoStyle=!0,this.count=0,this.height="2px",this.$scope=r.$new(),this.color="firebrick",this.parent=e.find("body")[0],this.count=0,this.progressbarEl=n("<ng-progress></ng-progress>")(this.$scope),this.parent.appendChild(this.progressbarEl[0]),this.$scope.count=this.count,void 0!==this.height&&this.progressbarEl.eq(0).children().css("height",this.height),void 0!==this.color&&(this.progressbarEl.eq(0).children().css("background-color",this.color),this.progressbarEl.eq(0).children().css("color",this.color)),this.intervalCounterId=0,this.start=function(){this.show();var e=this;clearInterval(this.intervalCounterId),this.intervalCounterId=setInterval(function(){isNaN(e.count)?(clearInterval(e.intervalCounterId),e.count=0,e.hide()):(e.remaining=100-e.count,e.count=e.count+.15*Math.pow(1-Math.sqrt(e.remaining),2),e.updateCount(e.count))},200)},this.updateCount=function(e){this.$scope.count=e,this.$scope.$$phase||this.$scope.$apply()},this.setHeight=function(e){return void 0!==e&&(this.height=e,this.$scope.height=this.height,this.$scope.$$phase||this.$scope.$apply()),this.height},this.setColor=function(e){return void 0!==e&&(this.color=e,this.$scope.color=this.color,this.$scope.$$phase||this.$scope.$apply()),this.color},this.hide=function(){this.progressbarEl.children().css("opacity","0");var e=this;e.animate(function(){e.progressbarEl.children().css("width","0%"),e.animate(function(){e.show()},500)},500)},this.show=function(){var e=this;e.animate(function(){e.progressbarEl.children().css("opacity","1")},100)},this.animate=function(e,t){void 0!==this.animation&&a.cancel(this.animation),this.animation=a(e,t)},this.status=function(){return this.count},this.stop=function(){clearInterval(this.intervalCounterId)},this.set=function(e){return this.show(),this.updateCount(e),this.count=e,clearInterval(this.intervalCounterId),this.count},this.css=function(e){return this.progressbarEl.children().css(e)},this.reset=function(){return clearInterval(this.intervalCounterId),this.count=0,this.updateCount(this.count),0},this.complete=function(){this.count=100,this.updateCount(this.count);var e=this;return clearInterval(this.intervalCounterId),a(function(){e.hide(),a(function(){e.count=0,e.updateCount(e.count)},500)},1e3),this.count},this.setParent=function(e){if(null===e||void 0===e)throw new Error("Provide a valid parent of type HTMLElement");null!==this.parent&&void 0!==this.parent&&this.parent.removeChild(this.progressbarEl[0]),this.parent=e,this.parent.appendChild(this.progressbarEl[0])},this.getDomElement=function(){return this.progressbarEl},this.setAbsolute=function(){this.progressbarEl.css("position","absolute")}}]}).factory("ngProgressFactory",["$injector","ngProgress",function(e,t){var n={createInstance:function(){return e.instantiate(t)}};return n}]),angular.module("ngProgress.directive",[]).directive("ngProgress",["$window","$rootScope",function(e,t){var n={replace:!0,restrict:"E",link:function(e,t,n,r){e.$watch("count",function(n){(void 0!==n||null!==n)&&(e.counter=n,t.eq(0).children().css("width",n+"%"))}),e.$watch("color",function(n){(void 0!==n||null!==n)&&(e.color=n,t.eq(0).children().css("background-color",n),t.eq(0).children().css("color",n))}),e.$watch("height",function(n){(void 0!==n||null!==n)&&(e.height=n,t.eq(0).children().css("height",n))})},template:'<div id="ngProgress-container"><div id="ngProgress"></div></div>'};return n}]),angular.module("ngProgress",["ngProgress.directive","ngProgress.provider"])},525:function(e,exports,t){var n=t(526);"string"==typeof n&&(n=[[e.id,n,""]]);t(485)(n,{});n.locals&&(e.exports=n.locals)},526:function(e,exports,t){exports=e.exports=t(484)(),exports.push([e.id,"#ngProgress{margin:0;padding:0;z-index:99998;background-color:green;color:green;box-shadow:0 0 10px 0;height:2px;opacity:0;-webkit-transition:all .5s ease-in-out;transition:all .5s ease-in-out}#ngProgress-container{position:fixed;margin:0;padding:0;top:0;left:0;right:0;z-index:99999}",""])},527:function(e,exports,t){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}var r=t(528),a=n(r);/*! angular-breadcrumb - v0.4.0-dev-2015-08-07
	* http://ncuillery.github.io/angular-breadcrumb
	* Copyright (c) 2015 Nicolas Cuillery; Licensed MIT */
!function(e,t,n){function r(e,n){return t.equals(e.length,n.length)?e>n:e.length>n.length}function i(e){var t=e.replace(/\n/g," ").match(/^([^(]+?)\s*(\((.*)\))?$/);if(!t||4!==t.length)throw new Error("Invalid state ref '"+e+"'");return{state:t[1],paramExpr:t[3]||null}}function o(){var e={prefixStateName:null,template:"bootstrap3",templateUrl:null,includeAbstract:!1};this.setOptions=function(n){t.extend(e,n)},this.$get=["$state","$stateParams","$rootScope",function(t,o,s){var c=s;s.$on("$viewContentLoaded",function(e){!e.targetScope.ncyBreadcrumbIgnore&&r(e.targetScope.$id,c.$id)&&(c=e.targetScope)});var u=function(e){var t=e.parent||(/^(.+)\.[^.]+$/.exec(e.name)||[])[1],n="object"==("undefined"==typeof t?"undefined":(0,a["default"])(t));return n?t.name:t},l=function v(n,r){for(var a,s,v=i(r),u=!1,l=!1,d=0,m=n.length;m>d;d+=1)if(n[d].name===v.state)return;a=t.get(v.state),a.ncyBreadcrumb&&(a.ncyBreadcrumb.force&&(u=!0),a.ncyBreadcrumb.skip&&(l=!0)),a["abstract"]&&!e.includeAbstract&&!u||l||(v.paramExpr&&(s=c.$eval(v.paramExpr)),a.ncyBreadcrumbLink=t.href(v.state,s||o||{}),n.unshift(a))},d=function(e){var n=i(e),r=t.get(n.state);if(r.ncyBreadcrumb&&r.ncyBreadcrumb.parent){var a="function"==typeof r.ncyBreadcrumb.parent,o=a?r.ncyBreadcrumb.parent(c):r.ncyBreadcrumb.parent;if(o)return o}return u(r)};return{getTemplate:function(t){return e.templateUrl?null:t[e.template]?t[e.template]:e.template},getTemplateUrl:function(){return e.templateUrl},getStatesChain:function(n){for(var r=[],a=t.$current.self.name;a;a=d(a))if(l(r,a),n&&r.length)return r;return e.prefixStateName&&l(r,e.prefixStateName),r},getLastStep:function(){var e=this.getStatesChain(!0);return e.length?e[0]:n},$getLastViewScope:function(){return c}}}]}function s(e,n,r){var a={bootstrap2:'<ul class="breadcrumb"><li ng-repeat="step in steps" ng-switch="$last || !!step.abstract" ng-class="{active: $last}"><a ng-switch-when="false" href="{{step.ncyBreadcrumbLink}}">{{step.ncyBreadcrumbLabel}}</a><span ng-switch-when="true">{{step.ncyBreadcrumbLabel}}</span><span class="divider" ng-hide="$last">/</span></li></ul>',bootstrap3:'<ol class="breadcrumb"><li ng-repeat="step in steps" ng-class="{active: $last}" ng-switch="$last || !!step.abstract"><a ng-switch-when="false" href="{{step.ncyBreadcrumbLink}}">{{step.ncyBreadcrumbLabel}}</a><span ng-switch-when="true">{{step.ncyBreadcrumbLabel}}</span></li></ol>'};return{restrict:"AE",replace:!0,scope:{},template:n.getTemplate(a),templateUrl:n.getTemplateUrl(),link:{post:function(a){var i=[],o=function(){v(i),i=[];var r=n.$getLastViewScope();a.steps=n.getStatesChain(),t.forEach(a.steps,function(t){if(t.ncyBreadcrumb&&t.ncyBreadcrumb.label){var n=e(t.ncyBreadcrumb.label);t.ncyBreadcrumbLabel=n(r),d(i,n,r,t)}else t.ncyBreadcrumbLabel=t.name})};r.$on("$viewContentLoaded",function(e){e.targetScope.ncyBreadcrumbIgnore||o()}),o()}}}}function c(e,t,n){return{restrict:"A",scope:{},template:"{{ncyBreadcrumbLabel}}",compile:function(r,a){var i=r.attr(a.$attr.ncyBreadcrumbLast);return i&&r.html(i),{post:function(r){var a=[],i=function o(){v(a),a=[];var n=t.$getLastViewScope(),o=t.getLastStep();if(o)if(r.ncyBreadcrumbLink=o.ncyBreadcrumbLink,o.ncyBreadcrumb&&o.ncyBreadcrumb.label){var i=e(o.ncyBreadcrumb.label);r.ncyBreadcrumbLabel=i(n),d(a,i,n,r)}else r.ncyBreadcrumbLabel=o.name};n.$on("$viewContentLoaded",function(e){e.targetScope.ncyBreadcrumbIgnore||i()}),i()}}}}}function u(e,n,r){return{restrict:"A",scope:{},template:"{{ncyBreadcrumbChain}}",compile:function(a,i){var o=a.attr(i.$attr.ncyBreadcrumbText);o&&a.html(o);var s=a.attr(i.$attr.ncyBreadcrumbTextSeparator)||" / ";return{post:function(a){var i=[],o=function(e,n,r){t.forEach(l(n),function(t){var n=r.$watch(t,function(e,t){e!==t&&c()});e.push(n)})},c=function u(){v(i),i=[];var r=n.$getLastViewScope(),u=n.getStatesChain(),c=[];t.forEach(u,function(t){if(t.ncyBreadcrumb&&t.ncyBreadcrumb.label){var n=e(t.ncyBreadcrumb.label);c.push(n(r)),o(i,n,r)}else c.push(t.name)}),a.ncyBreadcrumbChain=c.join(s)};r.$on("$viewContentLoaded",function(e){e.targetScope.ncyBreadcrumbIgnore||c()}),c()}}}}}var l=function(e){if(e.expressions)return e.expressions;var n=[];return t.forEach(e.parts,function(e){t.isFunction(e)&&n.push(e.exp)}),n},d=function(e,n,r,a){t.forEach(l(n),function(t){var i=r.$watch(t,function(){a.ncyBreadcrumbLabel=n(r)});e.push(i)})},v=function(e){t.forEach(e,function(e){e()})};s.$inject=["$interpolate","$breadcrumb","$rootScope"],c.$inject=["$interpolate","$breadcrumb","$rootScope"],u.$inject=["$interpolate","$breadcrumb","$rootScope"],t.module("ncy-angular-breadcrumb",["ui.router.state"]).provider("$breadcrumb",o).directive("ncyBreadcrumb",s).directive("ncyBreadcrumbLast",c).directive("ncyBreadcrumbText",u)}(window,window.angular)},596:function(e,exports,t){(function(e){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}var r=t(372),a=n(r);!function(t){var n="ngMaterialDatePicker",r={DATE:0,HOUR:1,MINUTE:2},a=function(t,n){return"jQuery"in window?e(t).css(n):(t=angular.element(t),"getComputedStyle"in window?window.getComputedStyle(t[0])[n]:t.css(n))},i='<md-dialog class="dtp" layout="column" style="width: 300px;">    <md-dialog-content class="dtp-content">        <div class="dtp-date-view">            <header class="dtp-header">                <div class="dtp-actual-day" ng-show="picker.dateMode">{{picker.currentDate.format("dddd")}}</div>                <div class="dtp-actual-day" ng-show="picker.timeMode">{{picker.params.shortTime ? picker.currentDate.format("A") : " "}}</div>                <div class="dtp-close text-right">                    <a href="#" mdc-dtp-noclick ng-click="picker.hide()">&times;</a>                </div>            </header>            <div class="dtp-date" ng-show="picker.params.date">                <div layout="column">                    <div class="dtp-actual-month">{{picker.currentDate.format("MMM") | uppercase}}</div>                </div>                <div class="dtp-actual-num">{{picker.currentDate.format("DD")}}</div>                <div layout="row"> <div ng-click="picker.incrementYear(-1)" class="dtp-year-btn dtp-year-btn-prev" flex="30"><span ng-if="picker.isPreviousYearVisible()" >&#x25B2;</span></div>                    <div class="dtp-actual-year" flex>{{picker.currentDate.format("YYYY")}}</div> <div ng-click="picker.incrementYear(1)" class="dtp-year-btn dtp-year-btn-next" flex="30"><span ng-if="picker.isNextYearVisible()" >&#x25BC;</span></div>                </div>            </div>            <div class="dtp-time" ng-show="picker.params.time && !picker.params.date">                <div class="dtp-actual-maxtime">{{picker.currentNearest5Minute().format(picker.params.shortTime ? "hh:mm" : "HH:mm")}}</div>            </div>            <div class="dtp-picker">                <mdc-datetime-picker-calendar date="picker.currentDate" picker="picker" class="dtp-picker-calendar" ng-show="picker.currentView === picker.VIEWS.DATE"></mdc-datetime-picker-calendar>                <div class="dtp-picker-datetime" ng-show="picker.currentView !== picker.VIEWS.DATE">                    <div class="dtp-actual-meridien">                        <div class="left p20">                            <a href="#" mdc-dtp-noclick class="dtp-meridien-am" ng-class="{selected: picker.meridien == \'AM\'}" ng-click="picker.selectAM()">{{picker.params.amText}}</a>                        </div>                        <div ng-show="!picker.timeMode" class="dtp-actual-time p60">{{picker.currentNearest5Minute().format(picker.params.shortTime ? "hh:mm" : "HH:mm")}}</div>                        <div class="right p20">                            <a href="#" mdc-dtp-noclick class="dtp-meridien-pm" ng-class="{selected: picker.meridien == \'PM\'}" ng-click="picker.selectPM()">{{picker.params.pmText}}</a>                        </div>                        <div class="clearfix"></div>                    </div>                    <mdc-datetime-picker-clock mode="hours" ng-if="picker.currentView === picker.VIEWS.HOUR"></mdc-datetime-picker-clock>                    <mdc-datetime-picker-clock mode="minutes" ng-if="picker.currentView === picker.VIEWS.MINUTE"></mdc-datetime-picker-clock>                </div>            </div>        </div>    </md-dialog-content>    <md-dialog-actions class="dtp-buttons">            <md-button class="dtp-btn-cancel md-button" ng-click="picker.cancel()"> {{picker.params.cancelText}}</md-button>            <md-button class="dtp-btn-ok md-button" ng-click="picker.ok()"> {{picker.params.okText}}</md-button>      </md-dialog-actions></md-dialog>';angular.module(n,["ngMaterial"]).provider("mdcDatetimePickerDefaultLocale",function(){this.locale="en",this.$get=function(){return this.locale},this.setDefaultLocale=function(e){this.locale=e}}).directive("mdcDatetimePicker",["$mdDialog",function(e){return{restrict:"A",require:"ngModel",scope:{currentDate:"=ngModel",time:"=",date:"=",minDate:"=",maxDate:"=",shortTime:"=",format:"@",cancelText:"@",okText:"@",lang:"@",amText:"@",pmText:"@"},link:function(n,r,a,s){var c=!1;n.format||(n.date&&n.time?n.format="YYYY-MM-DD HH:mm:ss":n.date?n.format="YYYY-MM-DD":n.format="HH:mm"),angular.isString(n.currentDate)&&""!==n.currentDate&&(n.currentDate=t(n.currentDate,n.format)),s&&s.$formatters.push(function(e){if("undefined"!=typeof e){var r=t(e);return r.isValid()?r.format(n.format):""}}),r.attr("readonly",""),r.on("focus",function(t){if(t.preventDefault(),r.blur(),!c){c=!0;var s={};for(var u in a)n.hasOwnProperty(u)&&!angular.isUndefined(n[u])&&(s[u]=n[u]);s.currentDate=n.currentDate;var l={options:s};e.show({template:i,controller:o,controllerAs:"picker",locals:l,openFrom:r,parent:angular.element(document.body),bindToController:!0,disableParentScroll:!1}).then(function(e){n.currentDate=e?e._d:e,c=!1},function(){c=!1})}})}}}]);var o=function(e,t,n){this.currentView=r.DATE,this._dialog=t,this.minDate,this.maxDate,this._attachedEvents=[],this.VIEWS=r,this.params={date:!0,time:!0,format:"YYYY-MM-DD",minDate:null,maxDate:null,currentDate:null,lang:n,weekStart:0,shortTime:!1,cancelText:"Cancel",okText:"OK",amText:"AM",pmText:"PM"},this.meridien="AM",this.params=angular.extend(this.params,this.options),this.init()};o.$inject=["$scope","$mdDialog","mdcDatetimePickerDefaultLocale"],o.prototype={init:function(){this.timeMode=this.params.time&&!this.params.date,this.dateMode=this.params.date,this.initDates(),this.start()},currentNearest5Minute:function(){var e=this.currentDate||t(),n=5*Math.round(e.minute()/5);return n>=60&&(n=55),t(e).minutes(n)},initDates:function(){var e=this,n=function(n,r){var a=null;if(angular.isDefined(n)&&null!==n&&""!==n)if(angular.isString(n))a="undefined"!=typeof e.params.format&&null!==e.params.format?t(n,e.params.format).locale(e.params.lang):t(n).locale(e.params.lang);else if(angular.isDate(n)){var i=n.getTime();a=t(i,"x").locale(e.params.lang)}else n._isAMomentObject&&(a=n);else a=r;return a};this.currentDate=n(this.params.currentDate,t()),this.minDate=n(this.params.minDate),this.maxDate=n(this.params.maxDate),this.selectDate(this.currentDate)},initDate:function(e){this.currentView=r.DATE},initHours:function(){this.currentView=r.HOUR},initMinutes:function(){this.currentView=r.MINUTE},isAfterMinDate:function(e,n,r){var a=!0;if("undefined"!=typeof this.minDate&&null!==this.minDate){var i=t(this.minDate),o=t(e);n||r||(i.hour(0),i.minute(0),o.hour(0),o.minute(0)),i.second(0),o.second(0),i.millisecond(0),o.millisecond(0),r?a=parseInt(o.format("X"))>=parseInt(i.format("X")):(o.minute(0),i.minute(0),a=parseInt(o.format("X"))>=parseInt(i.format("X")))}return a},isBeforeMaxDate:function(e,n,r){var a=!0;if("undefined"!=typeof this.maxDate&&null!==this.maxDate){var i=t(this.maxDate),o=t(e);n||r||(i.hour(0),i.minute(0),o.hour(0),o.minute(0)),i.second(0),o.second(0),i.millisecond(0),o.millisecond(0),r?a=parseInt(o.format("X"))<=parseInt(i.format("X")):(o.minute(0),i.minute(0),a=parseInt(o.format("X"))<=parseInt(i.format("X")))}return a},selectDate:function(e){e&&(this.currentDate=t(e),this.isAfterMinDate(this.currentDate)||(this.currentDate=t(this.minDate)),this.isBeforeMaxDate(this.currentDate)||(this.currentDate=t(this.maxDate)),this.currentDate.locale(this.params.lang),this.calendarStart=t(this.currentDate),this.meridien=this.currentDate.hour()>=12?"PM":"AM")},setName:function(){for(var e="",t="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",n=0;n<5;n++)e+=t.charAt(Math.floor(Math.random()*t.length));return e},isPM:function(){return"PM"===this.meridien},incrementYear:function(e){1===e&&this.isNextYearVisible()&&this.selectDate(this.currentDate.add("year",e)),e===-1&&this.isPreviousYearVisible()&&this.selectDate(this.currentDate.add("year",e))},isPreviousMonthVisible:function(){return this.calendarStart&&this.isAfterMinDate(t(this.calendarStart).startOf("month"),!1,!1)},isNextMonthVisible:function(){return this.calendarStart&&this.isBeforeMaxDate(t(this.calendarStart).endOf("month"),!1,!1)},isPreviousYearVisible:function(){return this.calendarStart&&this.isAfterMinDate(t(this.calendarStart).startOf("year"),!1,!1)},isNextYearVisible:function(){return this.calendarStart&&this.isBeforeMaxDate(t(this.calendarStart).endOf("year"),!1,!1)},isHourAvailable:function(e){var n=t(this.currentDate);return n.hour(this.convertHours(e)).minute(0).second(0),this.isAfterMinDate(n,!0,!1)&&this.isBeforeMaxDate(n,!0,!1)},isMinuteAvailable:function(e){var n=t(this.currentDate);return n.minute(e).second(0),this.isAfterMinDate(n,!0,!0)&&this.isBeforeMaxDate(n,!0,!0)},start:function(){this.currentView=r.DATE,this.params.date?this.initDate():this.params.time&&this.initHours()},ok:function(){switch(this.currentView){case r.DATE:this.params.time===!0?this.initHours():this.hide(!0);break;case r.HOUR:this.initMinutes();break;case r.MINUTE:this.hide(!0)}},cancel:function(){if(this.params.time)switch(this.currentView){case r.DATE:this.hide();break;case r.HOUR:this.params.date?this.initDate():this.hide();break;case r.MINUTE:this.initHours()}else this.hide()},selectMonthBefore:function(){this.calendarStart.subtract(1,"months")},selectMonthAfter:function(){this.calendarStart.add(1,"months")},selectYearBefore:function(){this.calendarStart.subtract(1,"years")},selectYearAfter:function(){this.calendarStart.add(1,"years")},selectAM:function(){(this.isHourAvailable(0)||this.isHourAvailable(12))&&(this.currentDate.hour()>=12&&this.selectDate(this.currentDate.subtract(12,"hours")),this.isHourAvailable(this.currentDate.hour())||this.selectDate(this.currentDate.hour(this.minDate.hour())),this.isMinuteAvailable(this.currentDate.minute())||this.selectDate(this.currentDate.minute(this.minDate.minute())))},selectPM:function(){(this.isHourAvailable(13)||this.isHourAvailable(24))&&(this.currentDate.hour()<12&&this.selectDate(this.currentDate.add(12,"hours")),this.isHourAvailable(this.currentDate.hour())||this.selectDate(this.currentDate.hour(this.maxDate.hour())),this.isMinuteAvailable(this.currentDate.minute())||this.selectDate(this.currentDate.minute(this.maxDate.minute())))},convertHours:function(e){var t=e;return e<12&&this.isPM()&&(t+=12),t},hide:function(e){e?this._dialog.hide(this.currentDate):this._dialog.cancel()}},angular.module(n).directive("mdcDatetimePickerCalendar",[function(){for(var e=(t(),1900),n=2100,r=12*(n-e+1),a=240,i=[],o=0;o<r;o++)i.push(o);var s=function(t){var n=t.year(),r=t.month();return 12*(n-e)+r-1};return{restrict:"E",scope:{picker:"=",date:"="},bindToController:!0,controllerAs:"cal",controller:["$scope",function(n){for(var a=this,o=this.picker,c=[],u=o.params.weekStart;c.length<7;u++)u>6&&(u=0),c.push(u.toString());if(a.week=c,o.maxDate||o.minDate){var l=o.minDate?s(o.minDate):0,d=o.maxDate?s(o.maxDate)+1:r;a.months=i.slice(l,d)}else a.months=i;a.getItemAtIndex=function(n){var r=(n+1)%12||12,a=e+Math.floor(n/12),i=t(o.currentDate).year(a).month(r);return v(i)},a.topIndex=s(o.currentDate)-a.months[0],n.$watch(function(){return o.currentDate?o.currentDate.format("YYYY-MM"):""},function(e,n){if(e!=n){var r=t(e,"YYYY-MM"),i=s(r);a.topIndex!=i&&(a.topIndex=i-a.months[0])}});var v=function(e){var n={};if(null!==e){n.name=e.format("MMMM YYYY");var r=t(e).locale(o.params.lang).startOf("month").hour(e.hour()).minute(e.minute()),i=r.format("d");n.days=[];for(var s=r.date();s<=r.daysInMonth();s++){if(s===r.date()){var c=a.week.indexOf(i.toString());if(c>0)for(var u=0;u<c;u++)n.days.push(0)}n.days.push(t(r).locale(o.params.lang).date(s))}for(var l=7,d=[],v=Math.ceil(n.days.length/l),m=0;m<v;m++)d.push(n.days.slice(m*l,(m+1)*l));return n.days=d,n}};a.toDay=function(e){return t(parseInt(e),"d").locale(o.params.lang).format("dd").substring(0,1)},a.isInRange=function(e){return o.isAfterMinDate(t(e),!1,!1)&&o.isBeforeMaxDate(t(e),!1,!1)},a.selectDate=function(e){if(e){if(a.isSelectedDay(e))return o.ok();o.selectDate(t(e).hour(a.date.hour()).minute(a.date.minute()))}},a.isSelectedDay=function(e){return e&&a.date.date()===e.date()&&a.date.month()===e.month()&&a.date.year()===e.year()}}],template:'<md-virtual-repeat-container md-top-index="cal.topIndex" class="months"><div md-virtual-repeat="idx in cal.months" md-start-index="cal.topIndex" md-item-size="'+a+'">     <div mdc-datetime-picker-calendar-month idx="idx"></div></div></md-virtual-repeat-container>'}}]).directive("mdcDatetimePickerCalendarMonth",["$compile",function(e){var t=function(t,n){var r=angular.element(t[0].querySelector("tbody")),a=n.cal,i=n.month;r.html(""),i.days.forEach(function(e,t){var n=angular.element("<tr></tr>");e.forEach(function(e,r){var i=angular.element("<td> </td>");if(e){var o;if(a.isInRange(e)){var s='month["days"]['+t+"]["+r+"]";o=angular.element("<a href='#' mdc-dtp-noclick></a>").attr("ng-class","{selected: cal.isSelectedDay("+s+")}").attr("ng-click","cal.selectDate("+s+")")}else o=angular.element("<span></span>");o.addClass("dtp-select-day").html(e.format("D")),i.append(o)}n.append(i)}),r.append(n)}),e(r)(n)};return{scope:{idx:"="},require:"^mdcDatetimePickerCalendar",restrict:"AE",template:'<div class="dtp-picker-month">{{month.name}}</div><table class="table dtp-picker-days">    <thead>    <tr>        <th ng-repeat="day in cal.week">{{cal.toDay(day)}}</th>    </tr>    </thead>    <tbody>    </tbody></table>',link:function(e,n,r,a){e.cal=a,e.month=a.getItemAtIndex(parseInt(e.idx)),t(n,e),e.$watch(function(){return e.idx},function(r,i){r!=i&&(e.month=a.getItemAtIndex(parseInt(e.idx)),t(n,e))})}}}]),angular.module(n).directive("mdcDtpNoclick",function(){return{link:function(e,t){t.on("click",function(e){e.preventDefault()})}}}),angular.module(n).directive("mdcDatetimePickerClock",[function(){var e='<div class="dtp-picker-clock"><span ng-if="!points || points.length < 1">&nbsp;</span><div ng-repeat="point in points" class="dtp-picker-time" style="margin-left: {{point.left}}px; margin-top: {{point.top}}px;">   <a href="#" mdc-dtp-noclick ng-class="{selected: point.value===currentValue}" class="dtp-select-hour" ng-click="setTime(point.value)" ng-if="pointAvailable(point)">{{point.display}}</a>   <a href="#" mdc-dtp-noclick class="disabled dtp-select-hour" ng-if="!pointAvailable(point)">{{point.display}}</a></div><div class="dtp-hand dtp-hour-hand"></div><div class="dtp-hand dtp-minute-hand"></div><div class="dtp-clock-center"></div></div>';return{restrict:"E",template:e,link:function(e,t,n){var r="minutes"===n.mode,i=e.picker,o=document.querySelector("md-dialog.dtp"),s=function(){var n=angular.element(t[0].querySelector(".dtp-picker-clock")),s=angular.element(o.querySelector(".dtp-picker")),u=o.querySelector(".dtp-content").offsetWidth,d=parseInt(a(s,"paddingLeft").replace("px",""))||0,v=parseInt(a(s,"paddingRight").replace("px",""))||0,m=parseInt(a(n,"marginLeft").replace("px",""))||0,f=parseInt(a(n,"marginRight").replace("px",""))||0,p=u-(m+f+d+v);n.css("width",p+"px");for(var h=parseInt(a(s,"paddingLeft").replace("px",""))||0,g=parseInt(a(s,"paddingTop").replace("px",""))||0,y=parseInt(a(n,"marginLeft").replace("px",""))||0,b=parseInt(a(n,"marginTop").replace("px",""))||0,D=p/2,S=D/1.2,T=[],_=0;_<12;++_){var k=S*Math.sin(2*Math.PI*(_/12)),C=S*Math.cos(2*Math.PI*(_/12)),x={left:D+k+h/2-(h+y),top:D-C-b/2-(g+b),value:r?5*_:_};r?x.display=x.value<10?"0"+x.value:x.value:i.params.shortTime?x.display=0===_?12:_:x.display=i.isPM()?_+12:_,T.push(x)}e.points=T,l(),n.css("height",p+"px");var w=t[0].querySelector(".dtp-clock-center"),M=w.offsetWidth/2||7.5,I=w.offsetHeight/2||7.5,P=D/1.8,E=D/1.5;angular.element(t[0].querySelector(".dtp-hour-hand")).css({left:D+1.5*y+"px",height:P+"px",marginTop:D-P-h+"px"}).addClass(r?"":"on"),angular.element(t[0].querySelector(".dtp-minute-hand")).css({left:D+1.5*y+"px",height:E+"px",marginTop:D-E-h+"px"}).addClass(r?"on":""),angular.element(w).css({left:D+h+y-M+"px",marginTop:D-y/2-I+"px"}),c()},c=function(){var e=i.currentNearest5Minute(),n=e.hour(),r=e.minute();u(angular.element(t[0].querySelector(".dtp-hour-hand")),30*n);var a=6*(5*Math.round(r/5));u(angular.element(t[0].querySelector(".dtp-minute-hand")),a)},u=function(e,t){angular.element(e).css({WebkitTransform:"rotate("+t+"deg)","-moz-transform":"rotate("+t+"deg)"})},l=function(){var t=i.currentNearest5Minute();e.currentValue=r?t.minute():t.hour()%12};e.$watch(function(){var e=i.currentNearest5Minute();return e?e.format("HH:mm"):""},function(e){l(),c()});var d=function(e,t){for(var n=0;n<t.length;n++)t[n].display=n,e&&(t[n].display+=12);return t};i.params.shortTime||e.$watch("picker.meridien",function(){if(!r&&e.points){var t=d(i.isPM(),angular.copy(e.points));e.points=t}}),e.setTime=function(t){t===e.currentValue&&i.ok(),r?i.currentDate.minute(t):i.currentDate.hour(i.isPM()?t+12:t),i.currentDate.second(0)},e.pointAvailable=function(e){return r?i.isMinuteAvailable(e.value):i.isHourAvailable(e.value)};var v=e.$watch(function(){return t[0].querySelectorAll("div").length},function(){s(),v()})}}}])}(a["default"])}).call(exports,t(512))},597:function(e,exports,t){var n=t(598);"string"==typeof n&&(n=[[e.id,n,""]]);t(485)(n,{});n.locals&&(e.exports=n.locals)},598:function(e,exports,t){exports=e.exports=t(484)(),exports.push([e.id,"md-dialog.dtp{font-size:14px;line-height:1.42857143;color:#333;background-color:#fff;max-height:none}.dtp :focus{outline:none!important}.dtp table{border-spacing:0;border-collapse:collapse;width:100%}.dtp .table>tbody>tr>td,.dtp .table>tbody>tr>th,.dtp .table>tfoot>tr>td,.dtp .table>tfoot>tr>th,.dtp .table>thead>tr>td,.dtp .table>thead>tr>th{padding:8px;line-height:1.42857143;vertical-align:top;border-top:1px solid #ddd}.dtp,.dtp *{box-sizing:border-box!important}.dtp>.dtp-content{max-width:300px;max-height:500px}.dtp>.dtp-content>.dtp-date-view>header.dtp-header{background:#689f38;color:#fff;text-align:center;padding:3px}.dtp div.dtp-date,.dtp div.dtp-time{background:#8bc34a;text-align:center;color:#fff;padding:10px}.dtp div.dtp-date>div{padding:0;margin:0}.dtp div.dtp-actual-month{font-size:1.5em}.dtp div.dtp-actual-maxtime,.dtp div.dtp-actual-num{font-size:3em;line-height:.9}.dtp div.dtp-actual-year{font-size:1.6em;color:#dcedc8}.dtp div.dtp-year-btn{font-size:1.4em;line-height:30px;cursor:pointer;color:#dcedc8}.dtp div.dtp-year-btn-prev{text-align:right}.dtp div.dtp-year-btn-next{text-align:left}.dtp div.dtp-picker{padding:10px;text-align:center}.dtp div.dtp-actual-time,.dtp div.dtp-picker-month{font-weight:500;text-align:center}.dtp .dtp-close{position:absolute;top:.25em;right:5px;font-size:16px}.dtp .dtp-close>a{color:#fff;text-decoration:none}.dtp .dtp-close>a>i{font-size:1em}.dtp table.dtp-picker-days{margin:0;min-height:220px}.dtp md-virtual-repeat-container.months{height:260px}.dtp table.dtp-picker-days,.dtp table.dtp-picker-days tr,.dtp table.dtp-picker-days tr>td{border:none}.dtp table.dtp-picker-days tr>td{font-size:11px;text-align:center;padding:0}.dtp table.dtp-picker-days tr>td>span.dtp-select-day{color:#bdbdbd!important}.dtp table.dtp-picker-days tr>td>.dtp-select-day{width:36px;height:36px;display:inline-block}.dtp .dtp-picker-time>a,.dtp table.dtp-picker-days tr>td>.dtp-select-day{color:#212121;text-decoration:none;padding:10px;border-radius:50%!important}.dtp table.dtp-picker-days tr>td>a.selected{background:#8bc34a;color:#fff}.dtp table.dtp-picker-days tr>td>a:hover:not(.selected){background:#ddd}.dtp table.dtp-picker-days tr>th{color:#757575;text-align:center;font-weight:700;padding:4px 3px}.dtp .p10>a{color:#689f38;text-decoration:none}.dtp .p10{width:10%}.dtp .p10,.dtp .p20{display:inline-block}.dtp .p20{width:20%}.dtp .p60{width:60%}.dtp .p60,.dtp .p80{display:inline-block}.dtp .p80{width:80%}.dtp a.dtp-meridien-am,.dtp a.dtp-meridien-pm{position:relative;top:10px;color:#212121;font-weight:500;padding:7px 5px;border-radius:50%!important;text-decoration:none;background:#eee;font-size:10px}.dtp .dtp-actual-meridien a.selected{background:#689f38;color:#fff}.dtp .dtp-picker-time>a{display:block;line-height:23px;padding:3px}.dtp .dtp-picker-time{position:absolute;width:30px;height:30px;font-size:1.1em;border-radius:50%;cursor:pointer;text-align:center!important}.dtp .dtp-picker-time>a.dtp-select-hour.selected{background:#689f38;color:#fff}.dtp .dtp-picker-time>a.dtp-select-hour.disabled,.dtp .dtp-picker-time>a.dtp-select-minute.disabled{color:#757575}.dtp .dtp-picker-time>a.dtp-select-minute.selected{background:#8bc34a;color:#fff}.dtp div.dtp-picker-clock{margin:10px 20px 0;padding:10px;border-radius:50%!important;background:#eee}.dtp-clock-center{width:15px;height:15px;background:#757575;border-radius:50%;position:absolute;z-index:50}.dtp .dtp-hand,.dtp .dtp-hour-hand{position:absolute;width:4px;margin-left:-2px;background:#bdbdbd;-webkit-transform:rotate(0deg);transform:rotate(0deg);-webkit-transform-origin:bottom;transform-origin:bottom;z-index:1}.dtp .dtp-minute-hand{width:2px;margin-left:-1px}.dtp .dtp-hand.on{background:#8bc34a}.dtp .dtp-buttons{padding:0 10px 10px;text-align:right}.dtp.hidden,.dtp .hidden{display:none}.dtp .invisible{visibility:hidden}.dtp .left{float:left}.dtp .right{float:right}.dtp .clearfix{clear:both}.dtp .center{text-align:center}",""])},599:function(e,exports,t){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}var r=t(600),a=n(r);angular.module("directive.g+signin",[]).directive("googlePlusSignin",["$window",function(e){var t=/\.apps\.googleusercontent\.com$/;return{restrict:"E",transclude:!0,template:"<span></span>",replace:!0,link:function(n,r,i,o,s){i.clientid+=t.test(i.clientid)?"":".apps.googleusercontent.com",i.$set("data-clientid",i.clientid),i.$set("theme",i.theme);var c={callback:"signinCallback",cookiepolicy:"single_host_origin",requestvisibleactions:"http://schemas.google.com/AddActivity",scope:"https://www.googleapis.com/auth/plus.login https://www.googleapis.com/auth/userinfo.email",height:"standard",width:"wide",state:""};c.clientid=i.clientid,c.theme=i.theme,angular.forEach((0,a["default"])(c),function(e){i.hasOwnProperty(e)&&(c[e]=i[e])}),i.$observe("language",function(t){e.___gcfg={lang:t?t:"en"}});var u=document.createElement("script");u.type="text/javascript",u.async=!0,u.src="https://apis.google.com/js/client:plusone.js";var l=document.getElementsByTagName("script")[0];l.parentNode.insertBefore(u,l),s(function(e,t){u.onload=function(){e.length&&r.append(e),gapi.signin.render(r[0],c)}})}}}]).run(["$window","$rootScope",function(e,t){e.signinCallback=function(e){e&&e.access_token?t.$broadcast("event:google-plus-signin-success",e):t.$broadcast("event:google-plus-signin-failure",e)}}])},643:function(e,exports,t){var n=t(644);"string"==typeof n&&(n=[[e.id,n,""]]);t(485)(n,{});n.locals&&(e.exports=n.locals)},644:function(e,exports,t){exports=e.exports=t(484)(),exports.push([e.id,"",""])},645:function(e,exports,t){var n=t(646);"string"==typeof n&&(n=[[e.id,n,""]]);t(485)(n,{});n.locals&&(e.exports=n.locals)},646:function(e,exports,t){exports=e.exports=t(484)(),exports.push([e.id,".distributor-selection{font-size:16pt;padding:3px;margin:3px}body{margin-top:100px;background-color:transparent}@media (min-width:768px){body{margin-top:50px}}#wrapper{padding-left:0}#page-wrapper{width:100%;padding:0;background-color:#fff}.huge{font-size:50px;line-height:normal}@media (min-width:768px){#wrapper{padding-left:225px}#page-wrapper{padding:10px}}.margin-bottom-15{margin-bottom:1.5em}.margin-top-05{margin-top:.5em}.margin-top-15{margin-top:1.5em}.margin-top-20{margin-top:2em}.margin-top-25{margin-top:2.5em}.margin-top-50{margin-top:5em}.issue-warning-background{background-color:orange}.issue-warning-text{color:orange}.issue-danger-background{background-color:red}.issue-danger-text{color:red}.issue-normal-background{background-color:green}.issue-normal-text{color:green}.up-true-background{background-color:green}.up-false-background{background-color:red}.navbar-default{background-color:#1b75bb;border-color:#15598e}.navbar-default .navbar-brand{color:#fff}.navbar-default .navbar-brand:focus,.navbar-default .navbar-brand:hover{color:#55a7e7}.navbar-default .navbar-nav>li>a,.navbar-default .navbar-nav>li>a:focus,.navbar-default .navbar-nav>li>a:hover{color:#fff}.navbar-default .navbar-nav>.active>a,.navbar-default .navbar-nav>.active>a:focus,.navbar-default .navbar-nav>.active>a:hover{color:#fff;background-color:#afd5f3}.navbar-default .navbar-nav>.open>a,.navbar-default .navbar-nav>.open>a:focus,.navbar-default .navbar-nav>.open>a:hover{color:#555;background-color:#d5d5d5}.navbar-default .navbar-nav>.dropdown>a .caret{border-top-color:#777;border-bottom-color:#777}.navbar-default .navbar-nav>.dropdown>a:focus .caret,.navbar-default .navbar-nav>.dropdown>a:hover .caret{border-top-color:#333;border-bottom-color:#333}.navbar-default .navbar-nav>.open>a .caret,.navbar-default .navbar-nav>.open>a:focus .caret,.navbar-default .navbar-nav>.open>a:hover .caret{border-top-color:#555;border-bottom-color:#555}.navbar-default .navbar-toggle{border-color:#ddd}.navbar-default .navbar-toggle:focus,.navbar-default .navbar-toggle:hover{background-color:#ddd}.navbar-default .navbar-toggle .icon-bar{background-color:#ccc}@media (max-width:767px){.navbar-default .navbar-nav .open .dropdown-menu>li>a{color:#777}.navbar-default .navbar-nav .open .dropdown-menu>li>a:focus,.navbar-default .navbar-nav .open .dropdown-menu>li>a:hover{color:#333}}.top-nav{padding:0 15px}.top-nav>li{display:inline-block;float:left}.top-nav>li>a{padding-top:15px;padding-bottom:15px;line-height:20px;color:#efefef}.top-nav>.open>a,.top-nav>.open>a:focus,.top-nav>.open>a:hover,.top-nav>li>a:focus,.top-nav>li>a:hover{color:#fff;background-color:#1b75bb}.top-nav>.open>.dropdown-menu{float:left;position:absolute;margin-top:0;border:1px solid rgba(0,0,0,.15);border-top-left-radius:0;border-top-right-radius:0;background-color:#fff;box-shadow:0 6px 12px rgba(0,0,0,.175)}.top-nav>.open>.dropdown-menu>li>a{white-space:normal}ul.message-dropdown{padding:0;max-height:250px;overflow-x:hidden;overflow-y:auto}li.message-preview{width:275px;border-bottom:1px solid rgba(0,0,0,.15)}li.message-preview>a{padding-top:15px;padding-bottom:15px}li.message-footer{margin:5px 0}ul.alert-dropdown{width:200px}@media (min-width:768px){.side-nav{position:fixed;top:51px;left:225px;margin-left:-225px;border:none;border-radius:0;overflow-y:auto;background-color:#1b75bb;bottom:0;overflow-x:hidden;padding-bottom:40px}.side-nav,.side-nav>li>a{width:225px}.side-nav li a:focus,.side-nav li a:hover{outline:none;background-color:#3f9ce3!important}}.side-nav>li>ul{padding:0}.side-nav>li>ul>li>a{display:block;padding:10px 15px 10px 38px;text-decoration:none;color:#d4d4d4}.side-nav>li>ul>li>a:hover{color:#fff}.flot-chart{display:block;height:400px}.flot-chart-content{width:100%;height:100%}.huge{font-size:40px}.panel-green{border-color:#5cb85c}.panel-green>.panel-heading{border-color:#5cb85c;color:#fff;background-color:#5cb85c}.panel-green>a{color:#5cb85c}.panel-green>a:hover{color:#3d8b3d}.panel-red{border-color:#d9534f}.panel-red>.panel-heading{border-color:#d9534f;color:#fff;background-color:#d9534f}.panel-red>a{color:#d9534f}.panel-red>a:hover{color:#b52b27}.panel-yellow{border-color:#f0ad4e}.panel-yellow>.panel-heading{border-color:#f0ad4e;color:#fff;background-color:#f0ad4e}.panel-yellow>a{color:#f0ad4e}.panel-yellow>a:hover{color:#df8a13}.toolbar{margin-bottom:10px}.entity-key{font-family:Monaco,Consolas,Lucida Console,dejavu sans mono,monospace;font-size:11px}.proof-of-play-label{padding-bottom:10px;padding-top:10px}.copy-ready-transparent{color:transparent}.no-devices{text-align:center}.properties-word-break{width:390px;word-wrap:break-word;display:block}.command-history-command{width:375px;word-wrap:break-word;display:block}.hostname-word-break{width:200px;word-wrap:break-word;display:inline-block}[data-ng-click],[ng-click],[x-ng-click]{cursor:pointer}#proofplay-selected-items{min-width:0!important;margin:0 auto;padding:0 auto}.radio-button{padding:3px}.horizontal-submit{margin:.5em}.horizontal-submit,.radio-horizontal{display:flex;align-self:center;-ms-flex-align:center;-webkit-align-items:center;-webkit-box-align:center}md-toolbar.md-default-theme:not(.md-menu-toolbar),md-toolbar:not(.md-menu-toolbar){background-color:#1b75bb!important;max-height:64px;min-height:64px}.md-toolbar-tools{background-color:#000!important;max-height:64px;min-height:64px}.skykit-image{max-width:100%;height:33px}@media (max-width:767px){md-toolbar.md-default-theme:not(.md-menu-toolbar),md-toolbar:not(.md-menu-toolbar){margin-top:-50px;margin-bottom:50px}}.center-block{text-align:center}.ellipsis-overflow,.proof-of-play-selected-item{width:100%;white-space:nowrap;overflow:hidden;text-align:left;text-overflow:ellipsis}.proof-of-play-tenant-name-option{width:7em;white-space:nowrap;overflow:hidden;text-align:center;positition:absolute;text-overflow:ellipsis}.proof-of-play-horizontal-top-bar{align-self:center;-ms-flex-align:center;-webkit-align-items:center;-webkit-box-align:center;margin-top:.5em;margin-bottom:.5em;align-items:center}.my-flex,.proof-of-play-horizontal-top-bar{display:flex;justify-content:center}.bigger-buttons{padding:.4em;min-width:88px;border-radius:5px;font-size:16px;text-align:center;text-decoration:none;border:none;outline:none}.admin-container{display:flex;align-content:flex-start}.registration-event-column{height:110px;display:inline-block;vertical-align:top;overflow:scroll}.pull-command-send-button-up{margin-top:-2px}header.dtp-header{background:#1b75bb!important}.dtp div.dtp-date,.dtp div.dtp-time{background:#000}.dtp .dtp-actual-meridien a.selected,.dtp .dtp-picker-time>a.dtp-select-hour.selected,.dtp table.dtp-picker-days tr>td>a.selected{background:#1b75bb!important}.dtp .dtp-hand.on{background:#000}.device-properties-switch{margin-top:-1px}.md-content-command-override md-content{overflow:unset}.pull-tooltip-left{margin-left:-55px}.command-button-right{float:right;flex-direction:row-reverse}md-select{display:block;margin:10px 0 8px;padding-bottom:2px;position:relative;min-width:180px;max-width:180px}.small-delete-button{float:right;min-width:25px;margin-top:-15px;margin-right:-5px}.tooltip-custom-large{min-width:250px}.tenant-image-name,.user-email-ellipsis{width:10em;white-space:nowrap;overflow:hidden;text-overflow:ellipsis}",""]);
},648:function(e,exports,t){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(e,t,n,r,a,o,s,c,u,l,d,v,m){"ngInject";var f=this;return f.tenantKey=t.tenantKey,f.deviceKey=t.deviceKey,f.fromDevices="true"===t.fromDevices,f.currentDevice={},f.commandEvents=[],f.generateLocalFromUTC=function(e){var t=i["default"].utc(e).toDate();return t=(0,i["default"])(t).format("YYYY-MM-DD hh:mm:ss A")},f.replaceCommandTime=function(e){for(var t=0;t<e.length;t++){var n=e[t];n.postedTime&&(n.postedTime=f.generateLocalFromUTC(n.postedTime)),n.confirmedTime&&(n.confirmedTime=f.generateLocalFromUTC(n.confirmedTime))}},f.getEvents=function(e,t,n){l.start();var r=a.getCommandEventsByKey(e,t,n);return r.then(function(e){return f.replaceCommandTime(e.events),f.event_next_cursor=e.next_cursor,f.event_prev_cursor=e.prev_cursor,f.commandEvents=e.events,l.complete()})},f.getEventsTimeOut=function(e,t,n){return m(function(){return f.getEvents(e,t,n)},1e3)},f.commandHistorySelected=function(){return f.getEvents(f.deviceKey)},f.paginateEventCall=function(e){return e?f.getEvents(f.deviceKey,null,f.event_next_cursor):f.getEvents(f.deviceKey,f.event_prev_cursor,null)},f.initialize=function(){var e=a.getDeviceByKey(f.deviceKey);return e.then(function(e){return f.onGetDeviceSuccess(e)},function(e){return f.onGetDeviceFailure(e)}),f.getEvents(f.deviceKey)},f.onGetDeviceSuccess=function(e){return f.currentDevice=e,e.timezone!==f.selectedTimezone&&(f.selectedTimezone=e.timezone),void 0===f.tenantKey&&(f.tenantKey=f.currentDevice.tenantKey),"true"===t.fromDevices?(f.backUrl="/#/devices",f.backUrlText="Back to devices"):f.currentDevice.isUnmanagedDevice===!0?(f.backUrl="/#/tenants/"+f.tenantKey+"/unmanaged",f.backUrlText="Back to tenant unmanaged devices"):(f.backUrl="/#/tenants/"+f.tenantKey+"/managed",f.backUrlText="Back to tenant managed devices")},f.onGetDeviceFailure=function(t){v.showErrorToast("Oops. We were unable to fetch the details for this device at this time.");var r="No detail for device_key #"+f.deviceKey+". Error: "+t.status+" "+t.statusText;return e.error(r),n.go("devices")},f.onResetContent=function(){l.start();var e=s.contentDelete(f.deviceKey);return e.then(f.onResetContentSuccess,f.onResetContentFailure)},f.onResetContentSuccess=function(){return l.complete(),f.getEventsTimeOut(f.deviceKey),v.showSuccessToast("We posted your reset content command into the player's queue.")},f.onResetContentFailure=function(t){return l.complete(),e.error("Reset content command error: "+t.status+" "+t.statusText),u.show("Oops...","We were unable to post your reset content command into the player's queue.","error")},f.onUpdateContent=function(){l.start();var e=s.contentUpdate(f.deviceKey);return e.then(f.onUpdateContentSuccess,f.onUpdateContentFailure)},f.onUpdateContentSuccess=function(){return l.complete(),f.getEventsTimeOut(f.deviceKey),v.showSuccessToast("We posted your update content command into the player's queue.")},f.onUpdateContentFailure=function(t){return l.complete(),e.error("Content update command error: "+t.status+" "+t.statusText),u.show("Oops...","We were unable to post your update content command into the player's queue.","error")},f.onResetPlayer=function(){l.start();var e=s.reset(f.deviceKey);return e.then(f.onResetPlayerSuccess,f.onResetPlayerFailure)},f.onResetPlayerSuccess=function(){return l.complete(),f.getEventsTimeOut(f.deviceKey),v.showSuccessToast("We posted your reset player command into the player's queue.")},f.onResetPlayerFailure=function(t){return l.complete(),e.error("Reset player command error: "+t.status+" "+t.statusText),u.show("Oops...","We were unable to post your reset player command into the player's queue.","error")},f.onPanelOn=function(){l.start();var e=s.powerOn(f.deviceKey);return e.then(f.onPanelOnSuccess,f.onPanelOnFailure)},f.onPanelOnSuccess=function(){return l.complete(),f.getEventsTimeOut(f.deviceKey),v.showSuccessToast("We posted your panel on command into the player's queue.")},f.onPanelOnFailure=function(t){return l.complete(),e.error("Panel on command error: "+t.status+" "+t.statusText),u.show("Oops...","We were unable to post your panel on command into the player's queue.","error")},f.onPanelOff=function(){l.start();var e=s.powerOff(f.deviceKey);return e.then(f.onPanelOffSuccess,f.onPanelOffFailure)},f.onPanelOffSuccess=function(){return l.complete(),f.getEventsTimeOut(f.deviceKey),v.showSuccessToast("We posted your panel off command into the player's queue.")},f.onPanelOffFailure=function(t){return l.complete(),e.error("Panel off command error: "+t.status+" "+t.statusText),u.show("Oops...","We were unable to post your panel off command into the player's queue.","error")},f.onUpdateDevice=function(){l.start();var e=s.updateDevice(f.deviceKey);return e.then(f.onUpdateDeviceSuccess,f.onUpdateDeviceFailure)},f.onUpdateDeviceSuccess=function(){return l.complete(),f.getEventsTimeOut(f.deviceKey),v.showSuccessToast("We posted your update device command into the player's queue.")},f.onUpdateDeviceFailure=function(t){return l.complete(),e.error("Update device command error: "+t.status+" "+t.statusText),u.show("Oops...","We were unable to post your update device command into the player's queue.","error")},f.onVolumeChange=function(){l.start();var e=s.volume(f.deviceKey,f.currentDevice.volume);return e.then(f.onVolumeChangeSuccess(f.currentDevice.volume),f.onVolumeChangeFailure)},f.onVolumeChangeSuccess=function(e){return l.complete(),f.getEventsTimeOut(f.deviceKey),v.showSuccessToast("We posted your volume change command of "+e+" into the player's queue.")},f.onVolumeChangeFailure=function(t){return l.complete(),e.error("Volume change command error: "+t.status+" "+t.statusText),u.show("Oops...","We were unable to post your volume change command into the player's queue.","error")},f.onCustomCommand=function(){l.start();var e=s.custom(f.deviceKey,f.currentDevice.custom);return e.then(f.onCustomCommandSuccess(f.currentDevice.custom),f.onCustomCommandFailure)},f.onCustomCommandSuccess=function(e){return l.complete(),f.getEventsTimeOut(f.deviceKey),v.showSuccessToast("We posted your custom command '"+e+"' into the player's queue.")},f.onCustomCommandFailure=function(t){return l.complete(),e.error("Custom command error: "+t.status+" "+t.statusText),u.show("Oops...","We were unable to post your custom command into the player's queue.","error")},f.onDiagnosticsToggle=function(){l.start();var e=s.toggleDiagnostics(f.deviceKey);return e.then(f.onToggleDiagnosticsSuccess,f.onToggleDiagnosticsFailure)},f.onToggleDiagnosticsSuccess=function(){return l.complete(),v.showSuccessToast("We posted your diagnostics command into the player's queue.")},f.onToggleDiagnosticsFailure=function(t){return l.complete(),e.error("Diagnostics command error: "+t.status+" "+t.statusText),u.show("Oops...","We were unable to post your diagnostics command into the player's queue.","error")},f.onRestart=function(){l.start();var e=s.restart(f.deviceKey);return e.then(f.onRestartSuccess,f.onRestartFailure)},f.onRestartSuccess=function(){return l.complete(),v.showSuccessToast("We posted your restart command into the player's queue.")},f.onRestartFailure=function(t){return l.complete(),e.error("Restart command error: "+t.status+" "+t.statusText),u.show("Oops...","We were unable to post your restart command into the player's queue.","error")},f.onPostLog=function(){l.start();var e=s.postLog(f.deviceKey);return e.then(f.onPostLogSuccess,f.onPostLogFailure)},f.onPostLogSuccess=function(){return l.complete(),v.showSuccessToast("We posted your post log command into the player's queue.")},f.onPostLogFailure=function(t){return l.complete(),e.error("Post log command error: "+t.status+" "+t.statusText),u.show("Oops...","We were unable to post your post log command into the player's queue.","error")},f}r.$inject=["$log","$stateParams","$state","SessionsService","DevicesService","LocationsService","CommandsService","TimezonesService","sweet","ProgressBarService","$mdDialog","ToastsService","$timeout"],Object.defineProperty(exports,"__esModule",{value:!0}),exports.DeviceDetailsCommandsCtrl=void 0;var a=t(372),i=n(a);exports.DeviceDetailsCommandsCtrl=r},649:function(e,exports,t){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(e,t,n,r,a,o,c,l,v,m,f,p,h,g,y,b,D){"ngInject";var S=this;S.tenantKey=t.tenantKey,S.tenantUrl="/#/tenants/"+S.tenantKey+"/details",S.deviceKey=t.deviceKey,S.fromDevices="true"===t.fromDevices,S.currentDevice={},S.locations=[],S.commandEvents=[],S.dayRange=30,S.issues=[],S.timezones=[],S.selectedTimezone=void 0;var T=y.createFormattedStartAndEndDateFromToday(30),_=(0,s["default"])(T,2);return S.startTime=_[0],S.endTime=_[1],S.enrollmentEvents=[],S.logoChange=!1,S.controlsModeOptions=["visible","invisible","disabled"],S.orientationOptions=["0","90","180","270"],S.sleepControllerOptions=["chrome-default","rs232"],S.overlayChanged=!1,S.checkForOverlayChanges=function(){var e=!1,t=S.currentDevice.overlays,n=S.currentDeviceCopy.overlays,r=["top_left","top_right","bottom_right","bottom_left"],a=!0,o=!1,s=void 0;try{for(var c,u=(0,i["default"])(r);!(a=(c=u.next()).done);a=!0){var l=c.value;t[l].size!==n[l].size&&(e=!0),t[l].type!==n[l].type&&(e=!0),"logo"===t[l].type&&t[l].type+": "+t[l].name!==n[l].name&&(e=!0)}}catch(d){o=!0,s=d}finally{try{!a&&u["return"]&&u["return"]()}finally{if(o)throw s}}S.overlayChanged=e},S.revertToTenantOverlay=function(e){p.start(),S.loadingOverlays=!0;var n=o.getTenantByKey(t.tenantKey);n.then(function(e){var t=e.overlays;if(!t)return S.loadingOverlays=!1,p.complete(),f.show("Oops...","Your tenant does not have overlays enabled. Please enable overlays for your tenant before attempting to revert device overlay to tenant settings.","error");delete t.key;for(var n in t)"logo"===t[n].type?t[n].image_key=t[n].imageKey.key:t[n].image_key=null;var r=a.saveOverlaySettings(S.deviceKey,t.bottom_left,t.bottom_right,t.top_right,t.top_left);r.then(function(e){var t=a.getDeviceByKey(S.deviceKey);t.then(function(e){S.currentDevice.overlays=e.overlays,S.currentDeviceCopy.overlays=angular.copy(S.currentDevice.overlays),S.loadingOverlays=!1,p.complete(),g.showSuccessToast("We saved your update.")})}),r["catch"](function(e){p.complete(),g.showErrorToast("Something went wrong")})})},S.adjustControlsMode=function(){var e=S.currentDevice.controlsMode;p.start();var t=a.adjustControlsMode(S.deviceKey,e);t.then(function(){p.complete(),g.showSuccessToast("Your controls mode selection was succesfully changed to: "+e)}),t["catch"](function(){p.complete()})},S.adjustOverlayStatus=function(e){S.currentDevice.overlayStatus=e,p.start();var t=a.save(S.currentDevice);return t.then(function(){var e=a.getDeviceByKey(S.deviceKey);e.then(function(e){S.onGetDeviceSuccess(e),p.complete()},function(e){return S.onGetDeviceFailure(e)})})},S.submitOverlaySettings=function(){var e=angular.copy(S.currentDeviceCopy.overlays);p.start(),S.loadingOverlays=!0;var t=a.saveOverlaySettings(S.deviceKey,e.bottom_left,e.bottom_right,e.top_right,e.top_left);t.then(function(e){var t=a.getDeviceByKey(S.deviceKey);t.then(function(e){S.currentDevice.overlays=e.overlays,S.currentDeviceCopy.overlays=angular.copy(S.currentDevice.overlays),S.loadingOverlays=!1,p.complete(),g.showSuccessToast("We saved your update.")})}),t["catch"](function(e){p.complete(),g.showErrorToast("Something went wrong")})},S.getTenantImagesAndRefreshDevice=function(){var e=a.getDeviceByKey(S.deviceKey);e.then(function(e){S.onGetDeviceSuccess(e),S.getTenantImages()}),e["catch"](function(e){S.onGetDeviceFailure(e)})},S.getTenantImages=function(){S.OVERLAY_TYPES=[{size:null,type:null,name:"none",realName:"none","new":!1,image_key:null},{size:null,type:"datetime",name:"datetime",realName:"datetime","new":!0,image_key:null}],p.start();var e=D.getImages(S.tenantKey);e.then(function(e){S.tenantImages=e,p.complete();var t=!0,n=!1,r=void 0;try{for(var a,o=(0,i["default"])(S.tenantImages);!(t=(a=o.next()).done);t=!0)for(var s=a.value,c=["small","large"],u=0;u<c.length;u++){var l=c[u],v={realName:angular.copy(s.name),name:"logo: "+s.name,type:"logo",size:l,image_key:s.key};S.OVERLAY_TYPES.push(v)}}catch(m){n=!0,r=m}finally{try{!t&&o["return"]&&o["return"]()}finally{if(n)throw r}}S.OVERLAY_TYPES.sort(d["default"])}),e["catch"](function(){p.complete()})},S.replaceIssueTime=function(e){for(var t=0;t<e.length;t++){var n=e[t];n.created&&(n.created=y.generateLocalFromUTC(n.created)),n.updated&&(n.updated=y.generateLocalFromUTC(n.updated))}},S.replaceCommandTime=function(e){for(var t=0;t<e.length;t++){var n=e[t];n.postedTime&&(n.postedTime=y.generateLocalFromUTC(n.postedTime)),n.confirmedTime&&(n.confirmedTime=y.generateLocalFromUTC(n.confirmedTime))}},S.localFromUtc=function(e){for(var t=0;t<e.length;t++){var n=e[t];n.utcTimestamp&&(n.utcTimestamp=y.generateLocalFromUTC(n.utcTimestamp))}},S.copyDeviceKey=function(){return g.showSuccessToast("Device key copied to your clipboard")},S.copyCorrelationIdentifier=function(){return g.showSuccessToast("Correlation ID copied to your clipboard")},S.getIssues=function(e,t,n,r,i){p.start();var o=a.getIssuesByKey(e,t,n,r,i);return o.then(function(e){return S.replaceIssueTime(e.issues),S.issues=e.issues,S.prev_cursor=e.prev,S.next_cursor=e.next,p.complete()})},S.getEvents=function(e,t,n){p.start();var r=a.getCommandEventsByKey(e,t,n);return r.then(function(e){return S.replaceCommandTime(e.events),S.event_next_cursor=e.next_cursor,S.event_prev_cursor=e.prev_cursor,S.commandEvents=e.events,p.complete()})},S.getEnrollmentEvents=function(e){p.start();var t=m.getEnrollmentEvents(e);return t.then(function(e){return S.enrollmentEvents=e,S.localFromUtc(e),p.complete()})},S.paginateCall=function(e){return e?S.getIssues(S.deviceKey,S.epochStart,S.epochEnd,null,S.next_cursor):S.getIssues(S.deviceKey,S.epochStart,S.epochEnd,S.prev_cursor,null)},S.paginateEventCall=function(e){return e?S.getEvents(S.deviceKey,null,S.event_next_cursor):S.getEvents(S.deviceKey,S.event_prev_cursor,null)},S.initialize=function(){S.epochStart=(0,u["default"])(S.startTime,"YYYY-MM-DD hh:mm A").unix(),S.epochEnd=(0,u["default"])(S.endTime,"YYYY-MM-DD hh:mm A").unix();var e=v.getCustomTimezones();e.then(function(e){return S.timezones=e}),S.panelModels=a.getPanelModels(),S.panelInputs=a.getPanelInputs();var t=a.getDeviceByKey(S.deviceKey);return t.then(function(e){return S.onGetDeviceSuccess(e)},function(e){return S.onGetDeviceFailure(e)}),S.getTenantImages(),S.getEvents(S.deviceKey),S.getIssues(S.deviceKey,S.epochStart,S.epochEnd),S.getEnrollmentEvents(S.deviceKey)},S.onGetDeviceSuccess=function(e){S.currentDevice=e,S.currentDeviceCopy=angular.copy(S.currentDevice),e.timezone!==S.selectedTimezone&&(S.selectedTimezone=e.timezone),void 0===S.tenantKey&&(S.tenantKey=S.currentDevice.tenantKey),"true"===t.fromDevices?(S.backUrl="/#/devices",S.backUrlText="Back to devices"):S.currentDevice.isUnmanagedDevice===!0?(S.backUrl="/#/tenants/"+S.tenantKey+"/unmanaged",S.backUrlText="Back to tenant unmanaged devices"):(S.backUrl="/#/tenants/"+S.tenantKey+"/managed",S.backUrlText="Back to tenant managed devices");var n=c.getLocationsByTenantKey(S.tenantKey);return n.then(function(e){return S.locations=e,S.setSelectedOptions()})},S.onGetDeviceFailure=function(t){g.showErrorToast("Oops. We were unable to fetch the details for this device at this time.");var r="No detail for device_key "+S.deviceKey+". Error: "+t.status+" "+t.statusText;return e.error(r),n.go("devices")},S.setSelectedOptions=function(){if(null===S.currentDevice.panelModel)S.currentDevice.panelModel=S.panelModels[0],S.currentDevice.panelInput=S.panelInputs[0];else{for(var e=0;e<S.panelModels.length;e++){var t=S.panelModels[e];t.id===S.currentDevice.panelModel&&(S.currentDevice.panelModel=t)}for(var n=0;n<S.panelInputs.length;n++){var r=S.panelInputs[n],a=r.parentId===S.currentDevice.panelModel.id;a&&r.id.toLowerCase()===S.currentDevice.panelInput&&(S.currentDevice.panelInput=r)}}if(null===S.currentDevice.locationKey);else for(var i=0;i<S.locations.length;i++){var o=S.locations[i];o.key===S.currentDevice.locationKey&&(S.currentDevice.location=o)}},S.onSaveDevice=function(){p.start(),void 0!==S.currentDevice.location&&void 0!==S.currentDevice.location.key&&(S.currentDevice.locationKey=S.currentDevice.location.key),S.currentDevice.panelModel&&void 0!==S.currentDevice.panelModel.id&&"None"!==S.currentDevice.panelModel.id&&(S.currentDevice.panelModelNumber=S.currentDevice.panelModel.id),S.currentDevice.panelInput&&void 0!==S.currentDevice.panelInput.id&&"None"!==S.currentDevice.panelInput.id&&(S.currentDevice.panelSerialInput=S.currentDevice.panelInput.id.toLowerCase()),S.currentDevice.timezone=S.selectedTimezone;var e=a.save(S.currentDevice);return e.then(S.onSuccessDeviceSave,S.onFailureDeviceSave)},S.onSuccessDeviceSave=function(){return p.complete(),g.showSuccessToast("We saved your update.")},S.onFailureDeviceSave=function(t){return p.complete(),409===t.status?(e.info("Failure saving device. Customer display code already exists for tenant: "+t.status+" "+t.statusText),f.show("Oops...","This customer display code already exists for this tenant. Please choose another.","error")):(e.error("Failure saving device: "+t.status+" "+t.statusText),g.showErrorToast("Oops. We were unable to save your updates to this device at this time."))},S.onPanelSleep=function(e){p.start();var t=l.panelSleep(S.deviceKey,e);return t.then(S.onPanelSleepSuccess,S.onPanelSleepFailure)},S.onPanelSleepSuccess=function(){return p.complete(),g.showSuccessToast("We toggled the panel sleep attribute. The player should adjust to these changes within 15 minutes.")},S.onPanelSleepFailure=function(e){return p.complete(),f.show("Oops...","We were unable to toggle the panel sleep attribute.","error")},S.confirmDeviceDelete=function(e,t){var n=h.confirm({title:"Are you sure to delete this device?",textContent:"Please remember, you MUST remove this device from Content Manager before deleting it from Provisioning.",targetEvent:e,ok:"Delete",cancel:"Cancel"}),r=h.show(n),a=function(){return S.onConfirmDelete(t)},i=function(){return S.onConfirmCancel()};return r.then(a,i)},S.onConfirmDelete=function(t){var r=function(){return g.showSuccessToast("We processed your delete request."),n.go("devices")},i=function(n){var r="We were unable to complete your delete request at this time.";return g.showErrorToast(r),e.error("Delete device failure for device_key "+t+": "+n.status+" "+n.statusText)},o=a["delete"](t);return o.then(r,i)},S.onConfirmCancel=function(){return g.showInfoToast("We canceled your delete request.")},S.onProofOfPlayLoggingCheck=function(){if(S.currentDevice.proofOfPlayLogging){var e=null===S.currentDevice.locationKey,t=null===S.currentDevice.customerDisplayCode;return e?(f.show("Oops...","You must have a Location to enable Proof of play.","error"),S.currentDevice.proofOfPlayLogging=!1):t?(f.show("Oops...","You must have a Display code to enable Proof of play.","error"),S.currentDevice.proofOfPlayLogging=!1):S.onSaveDevice()}return S.onSaveDevice()},S.onUpdateLocation=function(){return S.onSaveDevice()},S.autoGenerateCustomerDisplayCode=function(){var e="";return S.currentDevice.customerDisplayName&&(e=S.currentDevice.customerDisplayName.toLowerCase(),e=e.replace(/\s+/g,"_"),e=e.replace(/\W+/g,"")),S.currentDevice.customerDisplayCode=e},S.logglyForUser=function(){var e=r.getUserEmail().split("@")[1];return"demo.agosto.com"===e||"agosto.com"===e},S.onClickRefreshButton=function(){p.start(),S.startTime=y.convertToMomentIfNotAlready(S.startTime),S.endTime=y.convertToMomentIfNotAlready(S.endTime),S.epochStart=(0,u["default"])(S.startTime,"YYYY-MM-DD hh:mm A").unix(),S.epochEnd=(0,u["default"])(S.endTime,"YYYY-MM-DD hh:mm A").unix(),S.prev_cursor=null,S.next_cursor=null;var e=a.getIssuesByKey(S.deviceKey,S.epochStart,S.epochEnd,S.prev_cursor,S.next_cursor);return e.then(function(e){return S.onRefreshIssuesSuccess(e)},function(e){return S.onRefreshIssuesFailure(e)})},S.onRefreshIssuesSuccess=function(e){return S.replaceIssueTime(e.issues),S.issues=e.issues,S.prev_cursor=e.prev,S.next_cursor=e.next,p.complete()},S.onRefreshIssuesFailure=function(t){return p.complete(),g.showInfoToast("We were unable to refresh the device issues list at this time."),e.error("Failure to refresh device issues: "+t.status+" "+t.statusText)},S}r.$inject=["$log","$stateParams","$state","SessionsService","DevicesService","TenantsService","LocationsService","CommandsService","TimezonesService","IntegrationEvents","sweet","ProgressBarService","$mdDialog","ToastsService","DateManipulationService","$timeout","ImageService"],Object.defineProperty(exports,"__esModule",{value:!0}),exports.DeviceDetailsCtrl=void 0;var a=t(650),i=n(a),o=t(655),s=n(o),c=t(372),u=n(c),l=t(659),d=n(l);exports.DeviceDetailsCtrl=r},660:function(e,exports,t){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(e,t,n,r,a,o,s){"ngInject";var c=this;return c.distributorKey=void 0,c.devices=[],c.devicesPrev=null,c.devicesNext=null,c.selectedButton="Serial Number",c.serialDevices={},c.disabled=!0,c.macDevices={},c.gcmidDevices={},c.unmanagedSelectedButton="MAC",c.unmanagedSerialDevices={},c.unmanagedDisabled=!0,c.unmanagedDevicesPrev=null,c.unmanagedDevicesNext=null,c.unmanagedDevices=[],c.unmanagedMacDevices={},c.unmanagedGCMidDevices={},c.devicesToMatchOnUnmanaged=[],c.devicesToMatchOnManaged=[],c.refreshManagedDevices=function(){return c.devicesPrev=null,c.devicesNext=null,c.getManagedDevices(c.distributorKey,c.devicesPrev,c.devicesNext)},c.refreshUnmanagedDevices=function(){return c.unmanagedDevicesPrev=null,c.unmanagedDevicesNext=null,c.getUnmanagedDevices(c.distributorKey,c.unmanagedDevicesPrev,c.unmanagedDevicesNext)},c.changeRadio=function(e){e?(c.unmanagedSearchText="",c.unmanagedDisabled=!0,c.unmanagedSerialDevices={},c.unmanagedMacDevices={},c.devicesToMatchOnUnmanaged=[]):(c.searchText="",c.disabled=!0,c.serialDevices={},c.macDevices={},c.devicesToMatchOnManaged=[])},c.editItem=function(e){return n.editItem(e,!0)},c.prepareForEditView=function(e,t){var n=void 0,r=void 0,a=void 0;return e?(n="MAC"===c.unmanagedSelectedButton,r="Serial Number"===c.unmanagedSelectedButton,a="GCM ID"===c.unmanagedSelectedButton,n?c.editItem(c.unmanagedMacDevices[t]):r?c.editItem(c.unmanagedSerialDevices[t]):c.editItem(c.unmanagedGCMidDevices[t])):(n="MAC"===c.selectedButton,r="Serial Number"===c.selectedButton,a="GCM ID"===c.selectedButton,n?c.editItem(c.macDevices[t]):r?c.editItem(c.serialDevices[t]):c.editItem(c.gcmidDevices[t]))},c.controlOpenButton=function(e,t){e?(c.unmanagedDisabled=!t,c.unmanagedDisabledButtonLoading=!1):(c.disabled=!t,c.disabledButtonLoading=!1)},c.isResourceValid=function(e,t){var n=e?c.devicesToMatchOnUnmanaged:c.devicesToMatchOnManaged,r=!1,a=!0,o=!1,s=void 0;try{for(var u,l=(0,i["default"])(n);!(a=(u=l.next()).done);a=!0){var d=u.value;t===d&&(r=!0)}}catch(v){o=!0,s=v}finally{try{!a&&l["return"]&&l["return"]()}finally{if(o)throw s}}return c.controlOpenButton(e,r),r},c.searchDevices=function(e,t){var r=void 0;r=e?c.unmanagedSelectedButton:c.selectedButton;var a=!1,i=null;return n.searchDevices(t,r,a,i,c.distributorKey,e).then(function(t){var n=void 0;if(t.success){var a=t.devices;return"Serial Number"===r?(e?c.unmanagedSerialDevices=a[1]:c.serialDevices=a[1],n=a[0]):"MAC"===r?(e?c.unmanagedMacDevices=a[1]:c.macDevices=a[1],n=a[0]):(e?c.unmanagedGCMidDevices=a[1]:c.gcmidDevices=a[1],n=a[0]),e?c.devicesToMatchOnUnmanaged=n:c.devicesToMatchOnManaged=n,n}return[]})},c.getManagedDevices=function(e,t,r){o.start();var a=n.getDevicesByDistributor(e,t,r);return a.then(function(e){return c.devices=e.devices,c.devicesNext=e.next_cursor,c.devicesPrev=e.prev_cursor,c.getFetchSuccess()},function(e){return c.getFetchFailure(e)})},c.getUnmanagedDevices=function(e,t,r){o.start();var a=n.getUnmanagedDevicesByDistributor(e,t,r);return a.then(function(e){return c.unmanagedDevices=e.devices,c.unmanagedDevicesPrev=e.prev_cursor,c.unmanagedDevicesNext=e.next_cursor,c.getFetchSuccess()},function(e){return c.getFetchFailure(e)})},c.initialize=function(){return c.distributorKey=a.getCurrentDistributorKey(),c.getManagedDevices(c.distributorKey,c.devicesPrev,c.devicesNext),c.getUnmanagedDevices(c.distributorKey,c.unmanagedDevicesPrev,c.unmanagedDevicesNext)},c.getFetchSuccess=function(){return o.complete()},c.getFetchFailure=function(e){o.complete();var t="Unable to fetch devices. Error: "+e.status+" "+e.statusText+".";return s.show("Oops...",t,"error")},c.paginateCall=function(e,t){if(e)t&&c.getManagedDevices(c.distributorKey,null,c.devicesNext),t||c.getUnmanagedDevices(c.distributorKey,null,c.unmanagedDevicesNext);else if(t&&c.getManagedDevices(c.distributorKey,c.devicesPrev,null),!t)return c.getUnmanagedDevices(c.distributorKey,c.unmanagedDevicesPrev,null)},c}r.$inject=["$stateParams","$log","DevicesService","$state","SessionsService","ProgressBarService","sweet"],Object.defineProperty(exports,"__esModule",{value:!0}),exports.DevicesListingCtrl=void 0;var a=t(650),i=n(a);exports.DevicesListingCtrl=r},661:function(e,exports,t){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(e,t,n,r,a,o,c,u,l){"ngInject";var d=this;return d.paulsCurrentDistributorName=r.paulsCurrentDistributorName,d.selectedButton="Serial Number",d.unmanagedSelectedButton="Managed",d.serialDevices={},d.disabled=!0,d.macDevices={},d.gcmidDevices={},d.devicesToMatchOn=[],d.searchedTenants=[],d.tenantSearchMatch=null,d.tenantSearchDisabled=!0,d.controlOpenButton=function(e){return d.disabled=!e,d.loadingDisabled=!1},d.changeRadio=function(){d.searchText="",d.disabled=!0,d.serialDevices={},d.macDevices={},d.devicesToMatchOn=[]},d.isResourceValid=function(e){var t=!1,n=!0,r=!1,a=void 0;try{for(var o,s=(0,i["default"])(d.devicesToMatchOn);!(n=(o=s.next()).done);n=!0){var c=o.value;if(e===c){t=!0,d.matchDevice=c;break}}}catch(u){r=!0,a=u}finally{try{!n&&s["return"]&&s["return"]()}finally{if(r)throw a}}return d.controlOpenButton(t),t},d.searchDevices=function(e,t){var r=d.selectedButton,a=!1,i=null,o=null,s=!0;return n.searchDevices(t,r,a,i,o,e,s).then(function(e){var t=void 0;if(e.success){var n=e.devices;return"Serial Number"===r?(d.serialDevices=n[1],t=n[0]):"MAC"===r?(d.macDevices=n[1],t=n[0]):(d.gcmidDevices=n[1],t=n[0]),d.devicesToMatchOn=t,t}return[]})},d.searchAllTenantsByName=function(e){if(!e||e.length<3)return[];var t=u.searchAllTenantsByName(e,!0);return t.then(function(e){return d.searchedTenants=e,d.searchedTenants?d.searchedTenants.map(function(e){return e.name}).sort(s["default"]):[]})},d.isTenantValid=function(e){if(!e||e.length<3)return[];var t=d.searchedTenants;if(t){var n=!0,r=!1,a=void 0;try{for(var o,s=(0,i["default"])(t);!(n=(o=s.next()).done);n=!0){var c=o.value;if(e===c.name)return d.tenantSearchDisabled=!1,void(d.searchMatch=c);d.tenantSearchDisabled=!0}}catch(u){r=!0,a=u}finally{try{!n&&s["return"]&&s["return"]()}finally{if(r)throw a}}}else d.tenantSearchDisabled=!0},d.getAllDistributors=function(){d.loadingAllDistributors=!0;var t=e.getAllDistributors();return t.then(function(e){return d.loadingAllDistributors=!1,d.allDistributors=e})},d.makeDistributor=function(t,n,r,i){var o=c.confirm({title:"Are you sure?",textContent:"If you proceed, "+n+" will be created.",targetEvent:t,ariaLabel:"Lucky day",ok:"Yeah!",cancel:"Forget it."});return c.show(o).then(function(){var t=e.makeDistributor(n,r);return t.then(function(e){return d.distributor={},i.$setPristine(),i.$setUntouched(),a.showSuccessToast(e.message),setTimeout(function(){return d.allDistributors=d.getAllDistributors()},2e3)}),t["catch"](function(e){return a.showErrorToast(e.data.message)})})},d.addUserToDistributor=function(t,n,r,i,o){r||(r=!1);var s=r?"with":"without";i||(i=d.distributorsAsAdmin[0]);var u=c.confirm({title:"Are you sure?",textContent:n+" will be added to "+i+"\n        "+s+" administrator privileges",targetEvent:t,ok:"Of course!",cancel:"Oops, nevermind."});return c.show(u).then(function(){var t=e.addUserToDistributor(n,i,r);return t.then(function(e){return a.showSuccessToast(e.message),d.user={},o.$setPristine(),o.$setUntouched(),setTimeout(function(){return d.getUsersOfDistributor()},2e3)}),t["catch"](function(e){return a.showErrorToast(e.data.message)})})},d.switchDistributor=function(e){return l.switchDistributor(e),a.showSuccessToast("Distributor "+e.name+" selected!")},d.getUsersOfDistributor=function(){d.loadingUsersOfDistributor=!0;var n=t.getCurrentDistributorKey(),r=e.getUsersOfDistributor(n);return r.then(function(e){return d.loadingUsersOfDistributor=!1,d.usersOfDistributor=e})},d.initialize=function(){if(d.getUsersOfDistributor(),d.getAllDistributors(),d.isAdmin=t.getIsAdmin(),d.distributorsAsAdmin=t.getDistributorsAsAdmin(),d.currentDistributorName=t.getCurrentDistributorName(),d.isAdmin)return d.getAllDistributors()},d.editTenant=function(e){return o.go("tenantDetails",{tenantKey:e.key})},d.editItem=function(e){var t=void 0,r=void 0,a=void 0,i=d.selectedButton;t="MAC"===i,r="Serial Number"===i,a="GCM ID"===i,t?n.editItem(d.macDevices[e]):r?n.editItem(d.serialDevices[e]):n.editItem(d.gcmidDevices[e])},d}r.$inject=["AdminService","SessionsService","DevicesService","$rootScope","ToastsService","$state","$mdDialog","TenantsService","DistributorsService"],Object.defineProperty(exports,"__esModule",{value:!0}),exports.AdminCtrl=void 0;var a=t(650),i=n(a),o=t(659),s=n(o);exports.AdminCtrl=r},662:function(e,exports){"use strict";function t(e,t,n,r,a,i,o,s,c,u,l){"ngInject";var d=this;return d.onGooglePlusSignInSuccess=function(e,t){d.googlePlusSignInButtonClicked||s.start(),o.removeUserInfo();var n=o.login(t);return n.then(d.loginSuccess,d.loginFailure)},d.onGooglePlusSignInFailure=function(e,t){if(d.googlePlusSignInButtonClicked)return s.complete(),i.show("Oops...","Unable to authenticate to Google+.","error")},e.$on("event:google-plus-signin-success",d.onGooglePlusSignInSuccess),e.$on("event:google-plus-signin-failure",d.onGooglePlusSignInFailure),d.initializeSignIn=function(){return d.clientId=a.OAUTH_CLIENT_ID,d.state=a.STATE,d.googlePlusSignInButtonClicked=!1},d.initializeSignOut=function(){return o.removeUserInfo(),r(d.proceedToSignedOut,50)},d.loginSuccess=function(e){return s.complete(),n.go("distributor_selection")},d.loginFailure=function(){return s.complete(),i.show("Oops...","Unable to authenticate to Stormpath.","error")},d.proceedToSignedOut=function(){return n.go("signed_out")},d.proceedToSignIn=function(){return n.go("sign_in")},d.onClickGooglePlusSignIn=function(){return d.googlePlusSignInButtonClicked=!0,s.start()},d}t.$inject=["$scope","$log","$state","$timeout","identity","sweet","SessionsService","ProgressBarService","ProofPlayService","DevicesService","TenantsService"],Object.defineProperty(exports,"__esModule",{value:!0}),exports.AuthenticationCtrl=t},663:function(e,exports,t){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(e,t,n,r,a){"ngInject";var o=this;return n.paulsCurrentDistributorName="Managing Organization",o.currentDistributerInDistributerAdminList=function(){var e=a.getCurrentDistributorName(),t=a.getDistributorsAsAdmin();return(0,i["default"])(t,e)},o.getIdentity=function(){return{key:a.getUserKey(),email:a.getUserEmail(),admin:a.getIsAdmin(),distributor_admin:a.getDistributorsAsAdmin(),admin_of_current_distributor:o.currentDistributerInDistributerAdminList(),distributorKey:a.getCurrentDistributorKey(),distributorName:a.getCurrentDistributorName()}},o.isCurrentURLDistributorSelector=function(){var e=r.location.href.search(/distributor_selection/),t=e>=0;return t},o.initialize=function(){return o.getIdentity()},o.toggleSidenav=function(){return e("left").toggle()},o.goTo=function(n,r){if(t.go(n,{id:r}),e("left").isOpen())return e("left").close()},o.initialize(),o}r.$inject=["$mdSidenav","$state","$rootScope","$window","SessionsService"],Object.defineProperty(exports,"__esModule",{value:!0}),exports.AppController=void 0;var a=t(664),i=n(a);
exports.AppController=r},686:function(e,exports){"use strict";function t(e,t,n,r){"ngInject";var a=this;return a.paulsCurrentDistributorName=t.paulsCurrentDistributorName,a.distributors=[],a.currentDistributor=void 0,a.loading=!0,a.initialize=function(){a.loeading=!0;var e=n.fetchAllByUser(r.getUserKey());return e.then(function(e){return a.distributors=e,1===a.distributors.length?a.selectDistributor(a.distributors[0]):a.loading=!1})},a.selectDistributor=function(e){return n.switchDistributor(e)},a}t.$inject=["$state","$rootScope","DistributorsService","SessionsService"],Object.defineProperty(exports,"__esModule",{value:!0}),exports.DistributorSelectorCtrl=t},687:function(e,exports){"use strict";function t(e){"ngInject";var t=this;return t.distributors=[],t}t.$inject=["$state"],Object.defineProperty(exports,"__esModule",{value:!0}),exports.DistributorsCtrl=t},688:function(e,exports){"use strict";function t(e,t,n){"ngInject";var r=this;return r.domains=[],r.initialize=function(){var e=t.fetchAllDomains();return e.then(function(e){return r.domains=e})},r.editItem=function(t){return e.go("editDomain",{domainKey:t.key})},r.deleteItem=function(e){var a=function(){var n=t["delete"](e);return n.then(function(){return r.initialize()})};return n.show({title:"Are you sure?",text:"This will permanently remove the domain from the distributor and disconnect from tenants.",type:"warning",showCancelButton:!0,confirmButtonColor:"#DD6B55",confirmButtonText:"Yes, remove the domain!",closeOnConfirm:!0},a)},r}t.$inject=["$state","DomainsService","sweet"],Object.defineProperty(exports,"__esModule",{value:!0}),exports.DomainsCtrl=t},689:function(e,exports){"use strict";function t(e,t,n,r,a,i,o,s){"ngInject";var c=this;if(c.currentDomain={key:void 0,name:void 0,impersonation_admin_email_address:void 0,distributor_key:void 0,organization_unit_path:"/skykit",active:!0},c.devicesAccess=!1,c.orgUnitsAccess=!1,c.usersAccess=!1,c.currentDomains=[],c.editMode=!!t.domainKey,c.editMode){var u=n.getDomainByKey(t.domainKey);u.then(function(e){return c.currentDomain=e})}else c.currentDomain.distributor_key=s.getCurrentDistributorKey();return c.initialize=function(){if(c.editMode){i.start();var e=n.getDirectoryApiConnectivityInformation(t.domainKey);return e.then(c.onSuccessDeterminingConnectivity,c.onFailureDeterminingConnectivity)}},c.onSuccessDeterminingConnectivity=function(e){c.devicesAccess=e.devicesAccess,c.orgUnitsAccess=e.orgUnitsAccess,c.usersAccess=e.usersAccess,c.devicesAccessException=e.devicesAccessException,c.orgUnitsAccessException=e.orgUnitsAccessException,c.usersAccessException=e.usersAccessException,i.complete()},c.onFailureDeterminingConnectivity=function(t){return i.complete(),e.error("Failure determining directory API connectivity: "+t.status+" "+t.statusText),o.showErrorToast("Oops. We were unable determine your device connectivity at this time.")},c.onSaveDomain=function(){i.start();var e=n.save(c.currentDomain);return e.then(c.onSuccessSaveDomain,c.onFailureSaveDomain)},c.onSuccessSaveDomain=function(){return i.complete(),o.showSuccessToast("We saved your update.")},c.onFailureSaveDomain=function(t){return i.complete(),409===t.status?(e.info("Failure saving domain. Domain already exists: "+t.status+" "+t.statusText),a.show("Oops...","This domain name already exist. Please enter a unique domain name.","error")):(e.error("Failure saving domain: "+t.status+" "+t.statusText),o.showErrorToast("Oops. We were unable to save your updates at this time."))},c.editItem=function(e){return r.go("editDomain",{domainKey:e.key})},c}t.$inject=["$log","$stateParams","DomainsService","$state","sweet","ProgressBarService","ToastsService","SessionsService"],Object.defineProperty(exports,"__esModule",{value:!0}),exports.DomainDetailsCtrl=t},690:function(e,exports,t){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(e,t,n,r){"ngInject";var i=this;return i.radioButtonChoices={group1:"By Device",group2:"Summarized",selection:null},i.dateTimeSelection={start:null,end:null},i.formValidity={start_date:!1,end_date:!1,locations:!1},i.tenant=t.tenant,i.no_cache=!0,i.loading=!0,i.disabled=!0,i.disabledTenant=!0,i.selected_locations=[],i.initialize=function(){return e.getAllLocations(i.tenant).then(function(e){return i.loading=!1,i.locations=e.data.locations,i.locations.length>0?i.had_some_items=!0:i.had_some_items=!1})},i.refreshLocations=function(){i.searchText="",i.selectedItem="",i.loading=!0,i.disabled=!0,i.selected_locations=[],i.initialize()},i.addToSelectedLocations=function(e){if(i.isLocationValid(e)){i.selected_locations.push(e);var t=i.locations.indexOf(e);i.locations.splice(t,1),i.searchText=""}return i.areLocationsValid(),i.isDisabled()},i.querySearch=function(t,n){return e.querySearch(t,n)},i.isRadioValid=function(e){return i.formValidity.type=e,i.isDisabled()},i.isLocationValid=function(e){return!!a(e,i.locations)&&!a(e,i.selected_locations)},i.areLocationsValid=function(){return i.formValidity.locations=i.selected_locations.length>0,i.isDisabled()},i.isStartDateValid=function(e){return i.formValidity.start_date=e instanceof Date,i.isDisabled()},i.isEndDateValid=function(e){return i.formValidity.end_date=e instanceof Date,i.isDisabled()},i.removeFromSelectedLocation=function(e){var t=i.selected_locations.indexOf(e);return i.selected_locations.splice(t,1),i.locations.push(e),i.areLocationsValid(),i.isDisabled()},i.isDisabled=function(){return i.formValidity.start_date&&i.formValidity.end_date&&i.formValidity.locations&&i.formValidity.type?(i.disabled=!1,i["final"]={start_date_unix:(0,o["default"])(i.dateTimeSelection.start).unix(),end_date_unix:(0,o["default"])(i.dateTimeSelection.end).unix(),locations:i.selected_locations,type:i.radioButtonChoices.selection}):i.disabled=!0},i.submit=function(){return"1"===i["final"].type?e.downloadCSVForMultipleLocationsByDevice(i["final"].start_date_unix,i["final"].end_date_unix,i["final"].locations,i.tenant):e.downloadCSVForMultipleLocationsSummarized(i["final"].start_date_unix,i["final"].end_date_unix,i["final"].locations,i.tenant)},i.tenants=null,i.currentTenant=i.tenant,i.initialize_tenant_select=function(){return e.getAllTenants().then(function(e){return i.tenants=e.data.tenants})},i.querySearch=function(t,n){return e.querySearch(t,n)},i.isSelectionValid=function(e){return a(e,i.tenants)?i.disabledTenant=!1:i.disabledTenant=!0},i.submitTenant=function(e){return e!==i.currentTenant?(n.go("proofDetail",{tenant:e}),r.showSuccessToast("Proof of Play reporting set to "+e)):r.showErrorToast("Proof of Play reporting is already set to "+e)},i}function a(e,t){return t.indexOf(e)>=0}r.$inject=["ProofPlayService","$stateParams","$state","ToastsService"],Object.defineProperty(exports,"__esModule",{value:!0}),exports.ProofOfPlayMultiLocationCtrl=void 0;var i=t(372),o=n(i);exports.ProofOfPlayMultiLocationCtrl=r},691:function(e,exports,t){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(e,t,n,r){"ngInject";var i=this;return i.radioButtonChoices={group1:"By Date",group2:"Summarized",selection:null},i.dateTimeSelection={start:null,end:null},i.formValidity={start_date:!1,end_date:!1,displays:!1},i.tenant=t.tenant,i.no_cache=!0,i.loading=!0,i.disabled=!0,i.disabledTenant=!0,i.selected_displays=[],i.initialize=function(){return e.getAllDisplays(i.tenant).then(function(e){return i.loading=!1,i.displays=e.data.devices,i.displays.length>0?i.had_some_items=!0:i.had_some_items=!1})},i.refreshDisplays=function(){i.searchText="",i.selectedItem="",i.loading=!0,i.disabled=!0,i.selected_displays=[],i.initialize()},i.addToSelectedDisplays=function(e){if(i.isDisplayValid(e)){i.selected_displays.push(e);var t=i.displays.indexOf(e);i.displays.splice(t,1),i.searchText=""}return i.areDisplaysValid(),i.isDisabled()},i.querySearch=function(t,n){return e.querySearch(t,n)},i.isRadioValid=function(e){return i.formValidity.type=e,i.isDisabled()},i.isDisplayValid=function(e){return!!a(e,i.displays)&&!a(e,i.selected_displays)},i.areDisplaysValid=function(){return i.formValidity.displays=i.selected_displays.length>0,i.isDisabled()},i.isStartDateValid=function(e){return i.formValidity.start_date=e instanceof Date,i.isDisabled()},i.isEndDateValid=function(e){return i.formValidity.end_date=e instanceof Date,i.isDisabled()},i.removeFromSelectedDisplay=function(e){var t=i.selected_displays.indexOf(e);return i.selected_displays.splice(t,1),i.displays.push(e),i.areDisplaysValid(),i.isDisabled()},i.isDisabled=function(){return i.formValidity.start_date&&i.formValidity.end_date&&i.formValidity.displays&&i.formValidity.type?(i.disabled=!1,i["final"]={start_date_unix:(0,o["default"])(i.dateTimeSelection.start).unix(),end_date_unix:(0,o["default"])(i.dateTimeSelection.end).unix(),displays:i.selected_displays,type:i.radioButtonChoices.selection}):i.disabled=!0},i.submit=function(){return"1"===i["final"].type?e.downloadCSVForMultipleDevicesByDate(i["final"].start_date_unix,i["final"].end_date_unix,i["final"].displays,i.tenant):e.downloadCSVForMultipleDevicesSummarized(i["final"].start_date_unix,i["final"].end_date_unix,i["final"].displays,i.tenant)},i.tenants=null,i.currentTenant=i.tenant,i.initialize_tenant_select=function(){return e.getAllTenants().then(function(e){return i.tenants=e.data.tenants})},i.submitTenant=function(e){return e!==i.currentTenant?(n.go("proofDetail",{tenant:e}),r.showSuccessToast("Proof of Play reporting set to "+e)):r.showErrorToast("Proof of Play reporting is already set to "+e)},i.querySearch=function(t,n){return e.querySearch(t,n)},i.isSelectionValid=function(e){return a(e,i.tenants)?i.disabledTenant=!1:i.disabledTenant=!0},i}function a(e,t){return t.indexOf(e)>=0}r.$inject=["ProofPlayService","$stateParams","$state","ToastsService"],Object.defineProperty(exports,"__esModule",{value:!0}),exports.ProofOfPlayMultiDisplayCtrl=void 0;var i=t(372),o=n(i);exports.ProofOfPlayMultiDisplayCtrl=r},692:function(e,exports,t){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(e,t,n,r){"ngInject";var i=this;return i.radioButtonChoices={group1:"By Device",group2:"By Date",selection:null},i.dateTimeSelection={start:null,end:null},i.formValidity={start_date:!1,end_date:!1,resources:!1},i.tenant=t.tenant,i.no_cache=!0,i.loading=!0,i.disabled=!0,i.disabledTenant=!0,i.selected_resources=[],i.initialize=function(){return e.getAllResources(i.tenant).then(function(e){i.loading=!1,i.full_resource_map=e.data.resources,i.resources=[];for(var t=0;t<e.data.resources.length;t++){var n=e.data.resources[t];i.resources.push(n.resource_name)}return i.resources.length>0?i.had_some_items=!0:i.had_some_items=!1})},i.refreshResources=function(){i.searchText="",i.selectedItem="",i.loading=!0,i.disabled=!0,i.selected_resources=[],i.initialize()},i.addToSelectedResources=function(e){if(i.isResourceValid(e)){i.selected_resources.push(e);var t=i.resources.indexOf(e);i.resources.splice(t,1),i.searchText=""}return i.areResourcesValid(),i.isDisabled()},i.querySearch=function(t,n){return e.querySearch(t,n)},i.isRadioValid=function(e){return i.formValidity.type=e,i.isDisabled()},i.isResourceValid=function(e){return!!a(e,i.resources)&&!a(e,i.selected_resources)},i.areResourcesValid=function(){return i.formValidity.resources=i.selected_resources.length>0,i.isDisabled()},i.isStartDateValid=function(e){return i.formValidity.start_date=e instanceof Date,i.isDisabled()},i.isEndDateValid=function(e){return i.formValidity.end_date=e instanceof Date,i.isDisabled()},i.removeFromSelectedResource=function(e){var t=i.selected_resources.indexOf(e);return i.selected_resources.splice(t,1),i.resources.push(e),i.areResourcesValid(),i.isDisabled()},i.isDisabled=function(){return i.formValidity.start_date&&i.formValidity.end_date&&i.formValidity.resources&&i.formValidity.type?(i.disabled=!1,i["final"]={start_date_unix:(0,o["default"])(i.dateTimeSelection.start).unix(),end_date_unix:(0,o["default"])(i.dateTimeSelection.end).unix(),resources:i.selected_resources,type:i.radioButtonChoices.selection}):i.disabled=!0},i.submit=function(){for(var t=[],n=0;n<i["final"].resources.length;n++)for(var r=i["final"].resources[n],a=0;a<i.full_resource_map.length;a++){var o=i.full_resource_map[a];o.resource_name===r&&t.push(o.resource_identifier)}return"1"===i["final"].type?e.downloadCSVForMultipleResourcesByDevice(i["final"].start_date_unix,i["final"].end_date_unix,t,i.tenant):e.downloadCSVForMultipleResourcesByDate(i["final"].start_date_unix,i["final"].end_date_unix,t,i.tenant)},i.tenants=null,i.currentTenant=i.tenant,i.initialize_tenant_select=function(){return e.getAllTenants().then(function(e){return i.tenants=e.data.tenants})},i.querySearch=function(t,n){return e.querySearch(t,n)},i.isSelectionValid=function(e){return a(e,i.tenants)?i.disabledTenant=!1:i.disabledTenant=!0},i.submitTenant=function(e){return e!==i.currentTenant?(n.go("proofDetail",{tenant:e}),r.showSuccessToast("Proof of Play reporting set to "+e)):r.showErrorToast("Proof of Play reporting is already set to "+e)},i}function a(e,t){return t.indexOf(e)>=0}r.$inject=["ProofPlayService","$stateParams","$state","ToastsService"],Object.defineProperty(exports,"__esModule",{value:!0}),exports.ProofOfPlayMultiResourceCtrl=void 0;var i=t(372),o=n(i);exports.ProofOfPlayMultiResourceCtrl=r},693:function(e,exports){"use strict";function t(e,t,r,a){"ngInject";var i=this;return i.resource={title:"Resource Report"},i.location={title:"Location Report"},i.display={title:"Display Report"},i.chosen_tenant=null,i.tenants=null,i.disabled=!0,i.initialize=function(){return e.getAllTenants().then(function(e){return i.tenants=e.data.tenants})},i.querySearch=function(t,n){return e.querySearch(t,n)},i.isSelectionValid=function(e){return n(e,i.tenants)?i.disabled=!1:i.disabled=!0},i.submitTenant=function(e){if(e)return i.chosen_tenant=e,r.go("proofDetail",{tenant:i.chosen_tenant})},i.refreshTenants=function(){i.tenants=null;e.makeHTTPURL("/retrieve_my_tenants","");i.initialize()},i}function n(e,t){return t.indexOf(e)>=0}t.$inject=["ProofPlayService","$stateParams","$state","ToastsService"],Object.defineProperty(exports,"__esModule",{value:!0}),exports.ProofOfPlayCtrl=t},694:function(e,exports,t){(function($){"use strict";function e(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(exports,"__esModule",{value:!0});var n=t(695),r=e(n),a=t(696),i=e(a),o=function(){function e(t,n){"ngInject";(0,r["default"])(this,e),this.Restangular=t,this.SessionsService=n}return e.$inject=["Restangular","SessionsService"],(0,i["default"])(e,[{key:"getImages",value:function(e){return this.Restangular.oneUrl("image","/api/v1/image/tenant/"+e).getList()}},{key:"saveImage",value:function(e,t){return $.ajax({type:"POST",url:"/api/v1/image/tenant/"+e,data:t,processData:!1,contentType:!1})}},{key:"deleteImage",value:function(e){var t=this.Restangular.oneUrl("image","/api/v1/image/"+e).remove();return t}}]),e}();exports["default"]=o}).call(exports,t(512))},700:function(e,exports,t){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(exports,"__esModule",{value:!0});var r=t(695),a=n(r),i=t(696),o=n(i),s=function(){function e(t){"ngInject";(0,a["default"])(this,e),this.Restangular=t,this.USER_SERVICE="users",this.DISTRIBUTOR_SERVICE="distributors"}return e.$inject=["Restangular"],(0,o["default"])(e,[{key:"makeDistributor",value:function(e,t){var n={distributor:e,admin_email:t},r=this.Restangular.oneUrl(this.DISTRIBUTOR_SERVICE,"/api/v1/distributors").customPOST(n);return r}},{key:"addUserToDistributor",value:function(e,t,n){var r={user_email:e,distributor:t,distributor_admin:n},a=this.Restangular.oneUrl(this.USER_SERVICE,"/api/v1/users").customPOST(r);return a}},{key:"getUsersOfDistributor",value:function(e){var t=this.Restangular.oneUrl(this.DISTRIBUTOR_SERVICE,"/api/v1/analytics/distributors/"+e+"/users").get();return t}},{key:"getAllDistributors",value:function(){var e=this.Restangular.oneUrl(this.DISTRIBUTOR_SERVICE,"/api/v1/distributors").get();return e}}]),e}();exports["default"]=s},701:function(e,exports,t){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(exports,"__esModule",{value:!0});var r=t(695),a=n(r),i=t(696),o=n(i),s=function(){function e(t,n){"ngInject";(0,a["default"])(this,e),this.$q=n,this.SessionsService=t}return e.$inject=["SessionsService","$q"],(0,o["default"])(e,[{key:"authenticated",value:function(){var e=this.$q.defer(),t=this.SessionsService.getUserKey();return t?e.resolve(!0):e.reject(["authError","sign_in"]),e.promise}},{key:"notAuthenticated",value:function(){var e=this.$q.defer(),t=this.SessionsService.getUserKey();return t?e.reject(["authError","home"]):e.resolve(!0),e.promise}},{key:"isAdminOrDistributorAdmin",value:function(){var e=this.$q.defer(),t=this.SessionsService.getIsAdmin(),n=this.SessionsService.getDistributorsAsAdmin(),r=!1;n&&n.length>0&&(r=!0);var a=this.SessionsService.getUserKey();return a?t||r?e.resolve(!0):e.reject(["authError","home"]):e.reject("sign_in"),e.promise}}]),e}();exports["default"]=s},702:function(e,exports,t){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(exports,"__esModule",{value:!0});var r=t(695),a=n(r),i=t(696),o=n(i),s=function(){function e(t){"ngInject";(0,a["default"])(this,e),this.Restangular=t,this.SERVICE_NAME="devices"}return e.$inject=["Restangular"],(0,o["default"])(e,[{key:"panelSleep",value:function(e,t){var n={panelSleep:t},r=this.Restangular.oneUrl(this.SERVICE_NAME,"api/v1/devices/"+e+"/panel-sleep").customPUT(n);return r}},{key:"reset",value:function(e){var t=this.Restangular.oneUrl(this.SERVICE_NAME,"api/v1/devices/"+e+"/commands/reset").post();return t}},{key:"contentDelete",value:function(e){var t=this.Restangular.oneUrl(this.SERVICE_NAME,"api/v1/devices/"+e+"/commands/content-delete").post();return t}},{key:"contentUpdate",value:function(e){var t=this.Restangular.oneUrl(this.SERVICE_NAME,"api/v1/devices/"+e+"/commands/content-update").post();return t}},{key:"updateDevice",value:function(e){var t=this.Restangular.oneUrl(this.SERVICE_NAME,"api/v1/devices/"+e+"/commands/refresh-device-representation").post();return t}},{key:"toggleDiagnostics",value:function(e){var t=this.Restangular.oneUrl(this.SERVICE_NAME,"api/v1/devices/"+e+"/commands/diagnostics").post();return t}},{key:"restart",value:function(e){var t=this.Restangular.oneUrl(this.SERVICE_NAME,"api/v1/devices/"+e+"/commands/restart").post();return t}},{key:"postLog",value:function(e){var t=this.Restangular.oneUrl(this.SERVICE_NAME,"api/v1/devices/"+e+"/commands/post-log").post();return t}},{key:"powerOn",value:function(e){var t=this.Restangular.oneUrl(this.SERVICE_NAME,"api/v1/devices/"+e+"/commands/power-on").post();return t}},{key:"powerOff",value:function(e){var t=this.Restangular.oneUrl(this.SERVICE_NAME,"api/v1/devices/"+e+"/commands/power-off").post();return t}},{key:"volume",value:function(e,t){var n={volume:t},r=this.Restangular.oneUrl(this.SERVICE_NAME,"api/v1/devices/"+e).customPOST(n,"commands/volume");return r}},{key:"custom",value:function(e,t){var n={command:t},r=this.Restangular.oneUrl(this.SERVICE_NAME,"api/v1/devices/"+e).customPOST(n,"commands/custom");return r}}]),e}();exports["default"]=s},703:function(e,exports,t){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(exports,"__esModule",{value:!0});var r=t(695),a=n(r),i=t(696),o=n(i),s=t(372),c=n(s),u=function(){function e(){(0,a["default"])(this,e)}return(0,o["default"])(e,[{key:"convertToMomentIfNotAlready",value:function(e){return c["default"].isMoment(e)?e:(0,c["default"])(new Date(e))}},{key:"createFormattedStartAndEndDateFromToday",value:function(e){var t=(0,c["default"])().format("YYYY-MM-DD"),n=(0,c["default"])(t,"YYYY-MM-DD").format("YYYY-MM-DD hh:mm A"),r=(0,c["default"])(n,"YYYY-MM-DD hh:mm A").add(1,"day").subtract(60,"seconds").format("YYYY-MM-DD hh:mm A"),a=(0,c["default"])().subtract(e,"days").format("YYYY-MM-DD"),i=(0,c["default"])(a,"YYYY-MM-DD").format("YYYY-MM-DD hh:mm A");return[i,r]}},{key:"generateLocalFromUTC",value:function(e){var t=c["default"].utc(e).toDate();return(0,c["default"])(t).format("YYYY-MM-DD hh:mm:ss A")}}]),e}();exports["default"]=u},704:function(e,exports,t){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(exports,"__esModule",{value:!0});var r=t(695),a=n(r),i=t(696),o=n(i);t(604);var s=function(){function e(t,n,r,i,o){"ngInject";(0,a["default"])(this,e),this.$log=t,this.Restangular=n,this.$q=r,this.$http=i,this.$state=o,this.SERVICE_NAME="devices",this.uriBase="v1/devices"}return e.$inject=["$log","Restangular","$q","$http","$state"],(0,o["default"])(e,[{key:"adjustControlsMode",value:function(e,t){var n={controlsMode:t},r=this.Restangular.oneUrl(this.SERVICE_NAME,"/api/v1/devices/"+e+"/controls-mode").customPUT(n);return r}},{key:"getDeviceByMacAddress",value:function(e){var t="api/v1/devices?mac_address="+e;return this.Restangular.oneUrl("api/v1/devices",t).get()}},{key:"getDeviceByKey",value:function(e){var t="api/v1/devices/"+e,n=this.Restangular.oneUrl(this.SERVICE_NAME,t).get();return n}},{key:"retriveFilteredDictionaryValue",value:function(e,t){for(var n=[],r=0;r<e.length;r++){var a=e[r];n.push(a[t])}return n}},{key:"executeSearchingPartialSerialByTenant",value:function(e,t,n){var r=this;return this.searchDevicesByPartialSerialByTenant(e,t,n).then(function(e){var t=e.matches,n=!1,a=!1,i=r.convertDevicesArrayToDictionaryObj(t,n,a),o=r.retriveFilteredDictionaryValue(t,"serial");return[o,i]})}},{key:"executeSearchingPartialSerialByDistributor",value:function(e,t,n){var r=this;return this.searchDevicesByPartialSerial(e,t,n).then(function(e){var t=e.matches,n=!1,a=!1,i=r.convertDevicesArrayToDictionaryObj(t,n,a),o=r.retriveFilteredDictionaryValue(t,"serial");return[o,i]})}},{key:"executeSearchingPartialSerialGlobally",value:function(e,t){var n=this;return this.searchDevicesByPartialSerialGlobally(e,t).then(function(e){var t=e.matches,r=!1,a=!1,i=n.convertDevicesArrayToDictionaryObj(t,r,a),o=n.retriveFilteredDictionaryValue(t,"serial");return[o,i]})}},{key:"executeSearchingPartialMacByTenant",value:function(e,t,n){var r=this;return this.searchDevicesByPartialMacByTenant(e,t,n).then(function(e){var t=e.matches,n=r.convertDevicesArrayToDictionaryObj(t,!0),a=r.retriveFilteredDictionaryValue(t,"mac");return[a,n]})}},{key:"executeSearchingPartialMacByDistributor",value:function(e,t,n){var r=this;return this.searchDevicesByPartialMac(e,t,n).then(function(e){var t=e.matches,n=!0,a=!1,i=r.convertDevicesArrayToDictionaryObj(t,n,a),o=r.retriveFilteredDictionaryValue(t,"mac");return[o,i]})}},{key:"executeSearchingPartialMacGlobally",value:function(e,t){var n=this;return this.searchDevicesByPartialMacGlobally(e,t).then(function(e){var t=e.matches,r=!0,a=!1,i=n.convertDevicesArrayToDictionaryObj(t,r,a),o=n.retriveFilteredDictionaryValue(t,"mac");return[o,i]})}},{key:"executeSearchingPartialGCMidByTenant",value:function(e,t,n){var r=this;return this.searchDistributorDevicesByPartialGCMidByTenant(e,t,n).then(function(e){var t=e.matches,n=r.convertDevicesArrayToDictionaryObj(t,!1,!0),a=r.retriveFilteredDictionaryValue(t,"gcmid");return[a,n]})}},{key:"executeSearchingPartialGCMidByDistributor",value:function(e,t,n){var r=this;return this.searchDistributorDevicesByPartialGCMid(e,t,n).then(function(e){var t=e.matches,n=r.convertDevicesArrayToDictionaryObj(t,!1,!0),a=r.retriveFilteredDictionaryValue(t,"gcmid");return[a,n]})}},{key:"executeSearchingPartialGCMidGlobally",value:function(e,t){var n=this;return this.searchDistributorDevicesByPartialGCMidGlobally(e,t).then(function(e){var t=e.matches,r=n.convertDevicesArrayToDictionaryObj(t,!1,!0),a=n.retriveFilteredDictionaryValue(t,"gcmid");return[a,r]})}},{key:"rejectedPromise",value:function(){var e=this.$q.defer();return e.reject(),e.promise}},{key:"searchDevices",value:function(e,t,n,r,a,i,o){var s=this.$q.defer(),c=void 0;return c=e&&e.length>2?"Serial Number"===t?o?this.executeSearchingPartialSerialGlobally(e,i):n?this.executeSearchingPartialSerialByTenant(r,e,i):this.executeSearchingPartialSerialByDistributor(a,e,i):"MAC"===t?o?this.executeSearchingPartialMacGlobally(e,i):n?this.executeSearchingPartialMacByTenant(r,e,i):this.executeSearchingPartialMacByDistributor(a,e,i):o?this.executeSearchingPartialGCMidGlobally(e,i):n?this.executeSearchingPartialGCMidByTenant(r,e,i):this.executeSearchingPartialGCMidByDistributor(a,e,i):this.rejectedPromise(),c.then(function(e){s.resolve({success:!0,devices:e})}),c["catch"](function(e){s.resolve({success:!1,devices:[]})}),s.promise}},{key:"convertDevicesArrayToDictionaryObj",value:function(e,t,n){for(var r={},a=0;a<e.length;a++){var i=e[a];t?r[i.mac]=i:n?r[i.gcmid]=i:r[i.serial]=i}return r}},{key:"editItem",value:function(e,t){t||(t=!1),this.$state.go("editDevice",{deviceKey:e.key,tenantKey:e.tenantKey,fromDevices:t})}},{key:"preprateForEditView",value:function(e,t,n,r,a,i){var o=void 0,s=void 0,c=void 0;return o="MAC"===e,s="Serial Number"===e,c="GCM ID"===e,o?this.editItem(r[n]):s?this.editItem(a[n]):this.editItem(i[n])}},{key:"getIssuesByKey",value:function(e,t,n,r,a){r=void 0===r?null:r,a=void 0===a?null:a;var i="/api/v1/devices/"+r+"/"+a+"/"+e+"/issues?start="+t+"&end="+n,o=this.Restangular.oneUrl(this.SERVICE_NAME,i).get();return o}},{key:"getCommandEventsByKey",value:function(e,t,n){t=void 0===t?null:t,n=void 0===n?null:n;var r="/api/v1/player-command-events/"+t+"/"+n+"/"+e,a=this.Restangular.oneUrl(this.SERVICE_NAME,r).get();return a}},{key:"getDevicesByTenant",value:function(e,t,n){if(void 0!==e){var r=this.makeDevicesByTenantURL(e,t,n,!1);return this.Restangular.oneUrl(this.SERVICE_NAME,r).get()}}},{key:"getUnmanagedDevicesByTenant",value:function(e,t,n){if(void 0!==e){var r=(this.$q.defer(),this.makeDevicesByTenantURL(e,t,n,!0));return this.Restangular.oneUrl(this.SERVICE_NAME,r).get()}}},{key:"searchDevicesByPartialSerialByTenant",value:function(e,t,n){if(void 0!==e){var r="/api/v1/tenants/search/"+e+"/devices?unmanaged="+n+"&partial_serial="+t,a=this.Restangular.oneUrl(this.SERVICE_NAME,r).get();return a}}},{key:"searchDevicesByPartialMacByTenant",value:function(e,t,n){if(void 0!==e){var r="/api/v1/tenants/search/"+e+"/devices?unmanaged="+n+"&partial_mac="+t,a=this.Restangular.oneUrl(this.SERVICE_NAME,r).get();return a}}},{key:"searchDistributorDevicesByPartialGCMidByTenant",value:function(e,t,n){if(void 0!==e){var r="/api/v1/tenants/search/"+e+"/devices?unmanaged="+n+"&partial_gcmid="+t,a=this.Restangular.oneUrl(this.SERVICE_NAME,r).get();return a}}},{key:"searchDevicesByPartialSerial",value:function(e,t,n){if(void 0!==e){var r="/api/v1/distributors/search/"+e+"/devices?unmanaged="+n+"&partial_serial="+t,a=this.Restangular.oneUrl(this.SERVICE_NAME,r).get();return a}}},{key:"searchDevicesByPartialMac",value:function(e,t,n){if(void 0!==e){var r="/api/v1/distributors/search/"+e+"/devices?unmanaged="+n+"&partial_mac="+t,a=this.Restangular.oneUrl(this.SERVICE_NAME,r).get();return a}}},{key:"searchDistributorDevicesByPartialGCMid",value:function(e,t,n){if(void 0!==e){var r="/api/v1/distributors/search/"+e+"/devices?unmanaged="+n+"&partial_gcmid="+t,a=this.Restangular.oneUrl(this.SERVICE_NAME,r).get();return a}}},{key:"searchDevicesByPartialSerialGlobally",value:function(e,t){var n="/api/v1/devices/analytics/search-global?unmanaged="+t+"&partial_serial="+e,r=this.Restangular.oneUrl("devices",n).get();return r}},{key:"searchDevicesByPartialMacGlobally",value:function(e,t){var n="/api/v1/devices/analytics/search-global?unmanaged="+t+"&partial_mac="+e,r=this.Restangular.oneUrl("devices",n).get();return r}},{key:"searchDistributorDevicesByPartialGCMidGlobally",value:function(e,t){var n="/api/v1/devices/analytics/search-global?unmanaged="+t+"&partial_gcmid="+e,r=this.Restangular.oneUrl("devices",n).get();return r}},{key:"getDevicesByDistributor",value:function(e,t,n){if(void 0!==e){var r=this.makeDevicesByDistributorURL(e,t,n,!1);return this.Restangular.oneUrl(this.SERVICE_NAME,r).get()}}},{key:"getUnmanagedDevicesByDistributor",value:function(e,t,n){if(void 0!==e){var r=this.makeDevicesByDistributorURL(e,t,n,!0);return this.Restangular.oneUrl(this.SERVICE_NAME,r).get()}}},{key:"getDevices",value:function(){var e=this.Restangular.all(this.SERVICE_NAME).getList();return e}},{key:"save",value:function(e){if(void 0!==e.key)var t=e.put();else var t=this.Restangular.service("devices").post(e);return t}},{key:"saveOverlaySettings",value:function(e,t,n,r,a){var i={bottom_left:t,bottom_right:n,top_right:r,top_left:a};return this.Restangular.oneUrl("overlay","/api/v1/overlay/device/"+e).customPOST(i)}},{key:"delete",value:function(e){var t=this.Restangular.one(this.SERVICE_NAME,e).remove();return t}},{key:"getPanelModels",value:function(){return[{id:"None",displayName:"None"},{id:"Sony-FXD40LX2F",displayName:"Sony FXD40LX2F"},{id:"NEC-LCD4215",displayName:"NEC LCD4215"},{id:"Phillips-BDL5560EL",displayName:"Phillips BDL5560EL"},{id:"Panasonic-TH55LF6U",displayName:"Panasonic TH55LF6U"},{id:"LG-43SM5B-B",displayName:"LG 43SM5B-B"},{id:"Sharp-PNE521",displayName:"Sharp PNE521"}]}},{key:"getPanelInputs",value:function(){return[{id:"None",parentId:"None"},{id:"HDMI1",parentId:"LG-43SM5B-B"},{id:"HDMI1",parentId:"Sony-FXD40LX2F"},{id:"HDMI2",parentId:"Sony-FXD40LX2F"},{id:"HDMI1",parentId:"Phillips-BDL5560EL"},{id:"HDMI2",parentId:"Phillips-BDL5560EL"},{id:"DVI",parentId:"Phillips-BDL5560EL"},{id:"HDMI1",parentId:"Panasonic-TH55LF6U"},{id:"HDMI2",parentId:"Panasonic-TH55LF6U"},{id:"DVI",parentId:"Panasonic-TH55LF6U"},{id:"HDMI1",parentId:"Sharp-PNE521"},{id:"HDMI2",parentId:"Sharp-PNE521"},{id:"DVI",parentId:"Sharp-PNE521"},{id:"VGA",parentId:"NEC-LCD4215"},{id:"DVI1",parentId:"NEC-LCD4215"}]}},{key:"makeDevicesByDistributorURL",value:function(e,t,n,r){var a="/api/v1/distributors/"+e+"/devices?unmanaged="+r+"&next_cursor="+n+"&prev_cursor="+t;return a}},{key:"makeDevicesByTenantURL",value:function(e,t,n,r){var a="/api/v1/tenants/"+e+"/devices?unmanaged="+r+"&next_cursor="+n+"&prev_cursor="+t;return a}}]),e}();exports["default"]=s},705:function(e,exports,t){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(exports,"__esModule",{value:!0});var r=t(695),a=n(r),i=t(696),o=n(i),s=function(){function e(t,n,r){"ngInject";(0,a["default"])(this,e),this.Restangular=t,this.$state=n,this.SessionsService=r,this.DISTRIBUTOR_SERVICE="distributors"}return e.$inject=["Restangular","$state","SessionsService"],(0,o["default"])(e,[{key:"save",value:function(e){if(void 0!==e.key)var t=e.put();else var t=this.Restangular.service(this.DISTRIBUTOR_SERVICE).post(e);return t}},{key:"fetchAll",value:function(){var e=this.Restangular.all(this.DISTRIBUTOR_SERVICE).getList();return e}},{key:"fetchAllByUser",value:function(e){if(e){var t=this.Restangular.one("users",e).doGET(this.DISTRIBUTOR_SERVICE);return t}}},{key:"getByKey",value:function(e){var t=this.Restangular.oneUrl(this.DISTRIBUTOR_SERVICE,"api/v1/distributors/"+e).get();return t}},{key:"delete",value:function(e){if(e.key){var t=this.Restangular.one(this.DISTRIBUTOR_SERVICE,e.key).remove();return t}}},{key:"getByName",value:function(e){var t=this.Restangular.all(this.DISTRIBUTOR_SERVICE).getList({distributorName:e});return t}},{key:"getDomainsByKey",value:function(e){var t=this.Restangular.oneUrl(this.DISTRIBUTOR_SERVICE,"api/v1/distributors/"+e+"/domains").get();return t}},{key:"switchDistributor",value:function(e){return this.SessionsService.setCurrentDistributorName(e.name),this.SessionsService.setCurrentDistributorKey(e.key),this.$state.go("welcome")}}]),e}();exports["default"]=s},706:function(e,exports,t){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(exports,"__esModule",{value:!0});var r=t(695),a=n(r),i=t(696),o=n(i),s=function(){function e(t){"ngInject";(0,a["default"])(this,e),this.Restangular=t}return e.$inject=["Restangular"],(0,o["default"])(e,[{key:"save",value:function(e){
if(void 0!==e.key)var t=e.put();else var t=this.Restangular.service("domains").post(e);return t}},{key:"fetchAllDomains",value:function(){var e=this.Restangular.all("domains").getList();return e}},{key:"getDomainByKey",value:function(e){var t=this.Restangular.oneUrl("domains","api/v1/domains/"+e).get();return t}},{key:"getDirectoryApiConnectivityInformation",value:function(e){var t=this.Restangular.oneUrl("domains","api/v1/domains/"+e+"/directory_api").get();return t}},{key:"delete",value:function(e){if(void 0!==e.key){var t=this.Restangular.one("domains",e.key).remove();return t}}}]),e}();exports["default"]=s},707:function(e,exports,t){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(exports,"__esModule",{value:!0});var r=t(695),a=n(r),i=t(696),o=n(i),s=function(){function e(t){"ngInject";(0,a["default"])(this,e),this.Restangular=t}return e.$inject=["Restangular"],(0,o["default"])(e,[{key:"getIdentity",value:function(){return this.Restangular.oneUrl("identity").get()}}]),e}();exports["default"]=s},708:function(e,exports,t){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(exports,"__esModule",{value:!0});var r=t(695),a=n(r),i=t(696),o=n(i),s=function(){function e(t){"ngInject";(0,a["default"])(this,e),this.Restangular=t,this.CREATE_TENANT_EVENTS="integration_events/tenant_create",this.ENROLLMENT_EVENTS="integration_events/enrollment"}return e.$inject=["Restangular"],(0,o["default"])(e,[{key:"getTenantCreateEvents",value:function(e){var t={tenantKey:e};return this.Restangular.all(this.CREATE_TENANT_EVENTS).customGET("",t)}},{key:"getEnrollmentEvents",value:function(e){var t={deviceKey:e};return this.Restangular.all(this.ENROLLMENT_EVENTS).customGET("",t)}}]),e}();exports["default"]=s},709:function(e,exports,t){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(exports,"__esModule",{value:!0});var r=t(695),a=n(r),i=t(696),o=n(i),s=function(){function e(t){"ngInject";(0,a["default"])(this,e),this.Restangular=t}return e.$inject=["Restangular"],(0,o["default"])(e,[{key:"save",value:function(e){if(void 0!==e.key)var t=e.put();else var t=this.Restangular.service("locations").post(e);return t}},{key:"searchAllTenantLocationsByName",value:function(e,t){var n=this.Restangular.all("tenants").customGETLIST(e+"/locations",{customer_location_name:t});return n}},{key:"getLocationsByTenantKey",value:function(e){var t=this.Restangular.oneUrl("tenants","api/v1/tenants/"+e+"/locations").get();return t}},{key:"getLocationsByTenantKeyPaginated",value:function(e,t,n){t=void 0===t?null:t,n=void 0===n?null:n;var r=this.Restangular.oneUrl("tenants","api/v1/tenants/"+e+"/"+t+"/"+n+"/locations").get();return r}},{key:"getLocationByKey",value:function(e){var t=this.Restangular.oneUrl("locations","api/v1/locations/"+e).get();return t}}]),e}();exports["default"]=s},710:function(e,exports,t){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(exports,"__esModule",{value:!0});var r=t(695),a=n(r),i=t(696),o=n(i),s=function(){function e(t){"ngInject";(0,a["default"])(this,e),this.ngProgressFactory=t,this.progressBar=this.ngProgressFactory.createInstance()}return e.$inject=["ngProgressFactory"],(0,o["default"])(e,[{key:"start",value:function(){return this.progressBar.setColor("#00FCFF"),this.progressBar.setHeight("4px"),this.progressBar.start()}},{key:"complete",value:function(){return this.progressBar.complete()}}]),e}();exports["default"]=s},711:function(e,exports,t){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(exports,"__esModule",{value:!0});var r=t(695),a=n(r),i=t(696),o=n(i),s=function(){function e(t,n,r,i,o,s,c){"ngInject";(0,a["default"])(this,e),this.$http=t,this.$q=n,this.$window=r,this.SessionsService=i,this.$stateParams=o,this.$state=s,this.ToastsService=c,this.makeHTTPRequest=this.makeHTTPRequest.bind(this),this.uriBase="proofplay/api/v1"}return e.$inject=["$http","$q","$window","SessionsService","$stateParams","$state","ToastsService"],(0,o["default"])(e,[{key:"makeHTTPURL",value:function(e,t){return this.uriBase+e+t}},{key:"makeHTTPRequest",value:function(e,t){var n=(this.$q.defer(),this.makeHTTPURL(e,t));return this.$http.get(n)}},{key:"getAllResources",value:function(e){var t=this.makeHTTPRequest("/retrieve_all_resources/",e);return t["catch"](function(e,t){var n=e.status;if(403===n&&(this.ToastsService.showErrorToast("You are not allowed to view this tenant!"),this.$state.go("proof",{})),404===n)return this.ToastsService.showErrorToast("You must select a tenant first!"),this.$state.go("proof",{})}),t.then(function(e){return e})}},{key:"getAllDisplays",value:function(e){return this.makeHTTPRequest("/retrieve_all_displays/",e)}},{key:"getAllLocations",value:function(e){return this.makeHTTPRequest("/retrieve_all_locations/",e)}},{key:"getAllTenants",value:function(){return this.makeHTTPRequest("/retrieve_my_tenants","")}},{key:"downloadCSVForMultipleResourcesByDate",value:function(e,t,n,r){for(var a="",i=0;i<n.length;i++){var o=n[i];a=a+"|"+o}return this.$window.open(this.uriBase+"/multi_resource_by_date/"+e+"/"+t+"/"+a+"/"+r+"/"+this.SessionsService.getCurrentDistributorKey(),"_blank"),!0}},{key:"downloadCSVForMultipleResourcesByDevice",value:function(e,t,n,r){for(var a="",i=0;i<n.length;i++){var o=n[i];a=a+"|"+o}return this.$window.open(this.uriBase+"/multi_resource_by_device/"+e+"/"+t+"/"+a+"/"+r+"/"+this.SessionsService.getCurrentDistributorKey(),"_blank"),!0}},{key:"downloadCSVForMultipleDevicesSummarized",value:function(e,t,n,r){for(var a="",i=0;i<n.length;i++){var o=n[i];a=a+"|"+o}return this.$window.open(this.uriBase+"/multi_device_summarized/"+e+"/"+t+"/"+a+"/"+r+"/"+this.SessionsService.getCurrentDistributorKey(),"_blank"),!0}},{key:"downloadCSVForMultipleDevicesByDate",value:function(e,t,n,r){for(var a="",i=0;i<n.length;i++){var o=n[i];a=a+"|"+o}return this.$window.open(this.uriBase+"/multi_device_by_date/"+e+"/"+t+"/"+a+"/"+r+"/"+this.SessionsService.getCurrentDistributorKey(),"_blank"),!0}},{key:"downloadCSVForMultipleLocationsByDevice",value:function(e,t,n,r){for(var a="",i=0;i<n.length;i++){var o=n[i];a=a+"|"+o}return this.$window.open(this.uriBase+"/multi_location_by_device/"+e+"/"+t+"/"+a+"/"+r+"/"+this.SessionsService.getCurrentDistributorKey(),"_blank"),!0}},{key:"downloadCSVForMultipleLocationsSummarized",value:function(e,t,n,r){for(var a="",i=0;i<n.length;i++){var o=n[i];a=a+"|"+o}return this.$window.open(this.uriBase+"/multi_location_summarized/"+e+"/"+t+"/"+a+"/"+r+"/"+this.SessionsService.getCurrentDistributorKey(),"_blank"),!0}},{key:"createFilterFor",value:function(e){return e=angular.lowercase(e),function(t){return t=angular.lowercase(t),0===t.indexOf(e)}}},{key:"querySearch",value:function(e,t){return t?e.filter(this.createFilterFor(t)):e}}]),e}();exports["default"]=s},712:function(e,exports,t){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(exports,"__esModule",{value:!0});var r=t(695),a=n(r),i=t(696),o=n(i),s=t(713),c=n(s),u=function(){function e(t,n,r,i,o,s){"ngInject";(0,a["default"])(this,e),this.$http=t,this.$log=n,this.StorageService=r,this.IdentityService=i,this.Restangular=o,this.$q=s,this.uriBase="v1/sessions"}return e.$inject=["$http","$log","StorageService","IdentityService","Restangular","$q"],(0,o["default"])(e,[{key:"setDistributors",value:function(e){return this.StorageService.set("distributors",e)}},{key:"setDistributorsAsAdmin",value:function(e){return this.StorageService.set("distributorsAsAdmin",e)}},{key:"setIsAdmin",value:function(e){return this.StorageService.set("isAdmin",e)}},{key:"setUserKey",value:function(e){return this.StorageService.set("userKey",e)}},{key:"setUserEmail",value:function(e){return this.StorageService.set("userEmail",e)}},{key:"setCurrentDistributorKey",value:function(e){return this.StorageService.set("currentDistributorKey",e)}},{key:"setCurrentDistributorName",value:function(e){return this.StorageService.set("currentDistributorName",e)}},{key:"getUserKey",value:function(){return this.StorageService.get("userKey")}},{key:"getUserEmail",value:function(){return this.StorageService.get("userEmail")}},{key:"getDistributors",value:function(){return this.StorageService.get("distributors")}},{key:"getCurrentDistributorName",value:function(){return this.StorageService.get("currentDistributorName")}},{key:"getCurrentDistributorKey",value:function(){return this.StorageService.get("currentDistributorKey")}},{key:"getDistributorsAsAdmin",value:function(){return this.StorageService.get("distributorsAsAdmin")}},{key:"getIsAdmin",value:function(){return this.StorageService.get("isAdmin")}},{key:"login",value:function(e){var t=this;this.StorageService.set("oAuth",e.id_token);var n=this.$http({url:"/api/v1/login",method:"GET"});return n.then(function(e){var n=(0,c["default"])(e.data.token);t.StorageService.set("JWT",e.data.token),t.setDistributors(n.distributors),t.setDistributorsAsAdmin(n.distributors_as_admin),t.setIsAdmin(n.is_admin),t.setUserEmail(n.email),t.setUserKey(n.key)})}},{key:"removeUserInfo",value:function(){this.StorageService.removeAll()}}]),e}();exports["default"]=u},716:function(e,exports,t){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(exports,"__esModule",{value:!0});var r=t(695),a=n(r),i=t(696),o=n(i),s=t(717),c=n(s),u=function(){function e(){(0,a["default"])(this,e)}return(0,o["default"])(e,[{key:"set",value:function(e,t){return c["default"].set(e,t)}},{key:"get",value:function(e){return c["default"].get(e)}},{key:"rm",value:function(e){return c["default"].rm(e)}},{key:"removeAll",value:function(){c["default"].flush()}}]),e}();exports["default"]=u},718:function(e,exports,t){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(exports,"__esModule",{value:!0});var r=t(695),a=n(r),i=t(696),o=n(i),s=function(){function e(t,n){"ngInject";(0,a["default"])(this,e),this.Restangular=t,this.SessionsService=n}return e.$inject=["Restangular","SessionsService"],(0,o["default"])(e,[{key:"save",value:function(e){if(void 0!==e.key)var t=e.put();else var t=this.Restangular.service("tenants").post(e);return t}},{key:"saveOverlaySettings",value:function(e,t,n,r,a){var i={bottom_left:t,bottom_right:n,top_right:r,top_left:a};return this.Restangular.oneUrl("overlay","/api/v1/overlay/tenant/"+e).customPOST(i)}},{key:"overlayApplyTenant",value:function(e){return this.Restangular.oneUrl("overlay","/api/v1/overlay/tenant/"+e+"/apply").post()}},{key:"searchAllTenantsByName",value:function(e,t){var n=this.Restangular.all("tenants").customGETLIST("",{tenant_name:e,allDistributors:t});return n}},{key:"fetchAllTenants",value:function(){var e=this.Restangular.all("tenants").getList();return e}},{key:"fetchAllTenantsPaginated",value:function(e,t){var n="api/v1/tenants/paginated/"+e+"/"+t,r=this.Restangular.oneUrl("tenants",n).get();return r}},{key:"getTenantByKey",value:function(e){var t="api/v1/tenants/"+e,n=this.Restangular.oneUrl("tenants",t).get();return n}},{key:"delete",value:function(e){if(void 0!==e.key){var t=this.Restangular.one("tenants",e.key).remove();return t}}}]),e}();exports["default"]=s},719:function(e,exports,t){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(exports,"__esModule",{value:!0});var r=t(695),a=n(r),i=t(696),o=n(i),s=function(){function e(t){"ngInject";(0,a["default"])(this,e),this.Restangular=t}return e.$inject=["Restangular"],(0,o["default"])(e,[{key:"getUsTimezones",value:function(){var e=this.Restangular.oneUrl("timezones","api/v1/timezones/us").get();return e}},{key:"getAllTimezones",value:function(){var e=this.Restangular.oneUrl("timezones","api/v1/timezones/all").get();return e}},{key:"getCustomTimezones",value:function(){var e=this.Restangular.oneUrl("timezones","api/v1/timezones/custom").get();return e}}]),e}();exports["default"]=s},720:function(e,exports,t){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(exports,"__esModule",{value:!0});var r=t(695),a=n(r),i=t(696),o=n(i),s=function(){function e(t){"ngInject";(0,a["default"])(this,e),this.toastr=t}return e.$inject=["toastr"],(0,o["default"])(e,[{key:"showSuccessToast",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"Success!";return this.toastr.success(e,t)}},{key:"showErrorToast",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"Error!";return this.toastr.error(e,t)}},{key:"showInfoToast",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"Information";return this.toastr.info(e,t)}}]),e}();exports["default"]=s},721:function(e,exports,t){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}Object.defineProperty(exports,"__esModule",{value:!0});var r=t(695),a=n(r),i=t(696),o=n(i),s=function(){function e(t){"ngInject";(0,a["default"])(this,e),this.Restangular=t}return e.$inject=["Restangular"],(0,o["default"])(e,[{key:"getVersions",value:function(){var e=this.Restangular.oneUrl("versions").get();return e}}]),e}();exports["default"]=s},722:function(e,exports){"use strict";function t(e,t,n,r,a,i,o){"ngInject";var s=this;i.tabIndex=5,s.tenantKey=e.tenantKey;var c=t.getTenantByKey(s.tenantKey);return c.then(function(e){s.currentTenant=e}),s.localFromUtc=function(e){for(var t=0;t<e.length;t++){var n=e[t];n.utcTimestamp&&(n.utcTimestamp=o.generateLocalFromUTC(n.utcTimestamp))}},s.getTenantCreateEvents=function(){r.start();var e=a.getTenantCreateEvents(s.tenantKey);e.then(function(e){s.tenantCreateEvents=e,s.localFromUtc(e),r.complete()})},s.initialize=function(){s.getTenantCreateEvents()},i.$watch("tabIndex",function(t,r){if(void 0!==t)switch(t){case 0:return n.go("tenantDetails",{tenantKey:e.tenantKey});case 1:return n.go("tenantManagedDevices",{tenantKey:e.tenantKey});case 2:return n.go("tenantUnmanagedDevices",{tenantKey:e.tenantKey});case 3:return n.go("tenantLocations",{tenantKey:e.tenantKey});case 4:return n.go("tenantOverlays",{tenantKey:e.tenantKey});case 5:return n.go("tenantLogs",{tenantKey:e.tenantKey})}}),s}t.$inject=["$stateParams","TenantsService","$state","ProgressBarService","IntegrationEvents","$scope","DateManipulationService"],Object.defineProperty(exports,"__esModule",{value:!0}),exports.TenantLogsCtrl=t},723:function(e,exports,t){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(e,t,n,r,a,o,c,u,l){"ngInject";var d=this;o.tabIndex=4,d.tenantKey=e.tenantKey,d.editMode=!!e.tenantKey;var v=t.getTenantByKey(d.tenantKey);return v.then(function(e){d.currentTenant=e}),d.overlayChanged=!1,d.adjustOverlayStatus=function(n){d.currentTenant.overlayStatus=n,r.start(),d.loadingOverlays=!0;var i=t.save(d.currentTenant);return i.then(function(){r.complete();var n=t.getTenantByKey(e.tenantKey);n.then(function(e){d.loadingOverlays=!1,d.onSuccessResolvingTenant(e)})}),i["catch"](function(e){r.complete(),a.showErrorToast("Something went wrong"),console.log(e)}),i},d.updateOverlays=function(){d.loadingOverlays=!0;var e=d.getTenant();return e.then(function(e){d.overlayChanged=!1,d.currentTenant.overlays=e.overlays,d.currentTenantCopy.overlays=angular.copy(d.currentTenant.overlays),d.loadingOverlays=!1}),e},d.submitOverlaySettings=function(){d.loadingOverlays=!0;var e=angular.copy(d.currentTenantCopy.overlays);r.start();var n=t.saveOverlaySettings(d.tenantKey,e.bottom_left,e.bottom_right,e.top_right,e.top_left),i=function(){var e=d.updateOverlays();return e.then(function(e){a.showSuccessToast("We saved your update."),r.complete()}),e};return n.then(function(){u(i,1e3)}),n["catch"](function(e){r.complete(),a.showErrorToast("Something went wrong")}),n},d.applyTenantOverlay=function(e){var n=l.confirm({title:"Are you sure?",textContent:"Each device in your Tenant will have the current Overlay Template applied as its settings.",targetEvent:e,ariaLabel:"Lucky day",ok:"Confirm",cancel:"Nevermind"});l.show(n).then(function(){r.start();var e=t.overlayApplyTenant(d.tenantKey);return e.then(function(e){var t="Your Tenant Overlay Settings are being applied to each device in your Tenant. Please wait patiently for this process to complete.";a.showSuccessToast(t),d.loading=!0,d.getTenant(),r.complete()}),e["catch"](function(e){r.complete(),a.showErrorToast("Something went wrong")}),e})},d.checkForOverlayChanges=function(){var e=!1,t=d.currentTenant.overlays,n=d.currentTenantCopy.overlays,r=["top_left","top_right","bottom_right","bottom_left"],a=!0,o=!1,s=void 0;try{for(var c,u=(0,i["default"])(r);!(a=(c=u.next()).done);a=!0){var l=c.value;t[l].size!==n[l].size&&(e=!0),t[l].type!==n[l].type&&(e=!0),"logo"===t[l].type&&t[l].type+": "+t[l].name!==n[l].name&&(e=!0)}}catch(v){o=!0,s=v}finally{try{!a&&u["return"]&&u["return"]()}finally{if(o)throw s}}d.overlayChanged=e},d.submitImage=function(){if(d.selectedLogo&&d.selectedLogo[0]){var e=new FormData,t=!0;if(angular.forEach(d.selectedLogo,function(n){n.lfFile.size<15e6?e.append("files",n.lfFile):(d.fileApi.removeAll(),t=!1,a.showErrorToast("Your image is larger than 15 MB. Please choose a smaller image"))}),t){var n=c.saveImage(d.tenantKey,e);return n.then(function(e){r.complete(),u(d.getTenantImages,1e3),d.fileApi.removeAll(),a.showSuccessToast("We uploaded your image.")}),n["catch"](function(e){r.complete(),a.showErrorToast("Something went wrong. You may have already uploaded this image.")}),n}}},d.getTenantImagesAndReloadTenantAfterDelete=function(){var e=d.getTenantImages();e.then(function(){var e=d.updateOverlays();e.then(function(){a.showSuccessToast("We deleted your image."),r.complete()})})},d.deleteImage=function(e,t,n){var i=l.confirm({title:"Are you sure?",textContent:"If you proceed, "+t+" will be deleted and removed from all devices that use it.",targetEvent:e,ariaLabel:"Lucky day",ok:"Confirm",cancel:"Nevermind"});l.show(i).then(function(){r.start();var e=c.deleteImage(n);return e.then(function(e){u(d.getTenantImagesAndReloadTenantAfterDelete,1e3)}),e["catch"](function(e){a.showErrorToast("Something went wrong while deleting your image."),r.complete()}),e})},d.getTenantImages=function(){d.OVERLAY_TYPES=[{size:null,type:null,name:"none",realName:"none","new":!1,image_key:null},{size:null,type:"datetime",name:"datetime",realName:"datetime","new":!0,image_key:null}],r.start();var e=c.getImages(d.tenantKey);return e.then(function(e){d.tenantImages=e,r.complete();var t=!0,n=!1,a=void 0;try{for(var o,c=(0,i["default"])(d.tenantImages);!(t=(o=c.next()).done);t=!0)for(var u=o.value,l=["small","large"],v=0;v<l.length;v++){var m=l[v],f={realName:angular.copy(u.name),name:"logo: "+u.name,type:"logo",size:m,image_key:u.key};d.OVERLAY_TYPES.push(f)}}catch(p){n=!0,a=p}finally{try{!t&&c["return"]&&c["return"]()}finally{if(n)throw a}}d.OVERLAY_TYPES.sort(s["default"])}),e["catch"](function(){r.complete(),a.showErrorStatus("SOMETHING WENT WRONG RETRIEVING YOUR IMAGES")}),e},d.onSuccessResolvingTenant=function(e){d.currentTenant=e,d.currentTenantCopy=angular.copy(d.currentTenant),d.selectedTimezone=e.default_timezone},d.getTenant=function(){d.loadingOverlays=!0;var n=t.getTenantByKey(e.tenantKey);return n.then(function(e){d.currentTenant=e,d.currentTenant.overlaysUpdateInProgress?(d.loading=!0,u(d.getTenant,3e3)):d.loading=!1,d.loadingOverlays=!1,d.currentTenantCopy=angular.copy(d.currentTenant)}),n},d.initialize=function(){d.getTenantImages(),d.getTenant()},o.$watch("tabIndex",function(t,r){if(void 0!==t)switch(t){case 0:return n.go("tenantDetails",{tenantKey:e.tenantKey});case 1:return n.go("tenantManagedDevices",{tenantKey:e.tenantKey});case 2:return n.go("tenantUnmanagedDevices",{tenantKey:e.tenantKey});case 3:return n.go("tenantLocations",{tenantKey:e.tenantKey});case 4:return n.go("tenantOverlays",{tenantKey:e.tenantKey});case 5:return n.go("tenantLogs",{tenantKey:e.tenantKey})}}),d}r.$inject=["$stateParams","TenantsService","$state","ProgressBarService","ToastsService","$scope","ImageService","$timeout","$mdDialog"],Object.defineProperty(exports,"__esModule",{value:!0}),exports.TenantOverlaysCtrl=void 0;var a=t(650),i=n(a),o=t(659),s=n(o);exports.TenantOverlaysCtrl=r},724:function(e,exports){"use strict";function t(e,t,n,r,a,i,o,s,c){"ngInject";var u=this;return u.gameStopServer=t.host().indexOf("provisioning-gamestop")>-1,u.currentTenant={key:void 0,name:void 0,tenant_code:void 0,admin_email:void 0,content_server_url:void 0,content_manager_base_url:void 0,domain_key:void 0,notification_emails:void 0,proof_of_play_logging:!1,proof_of_play_url:void 0,active:!0,ou_create:!0},u.selectedDomain=void 0,u.distributorDomains=[],u.timezones=[],u.selectedTimezone="America/Chicago",u.initialize=function(){var e=a.getCustomTimezones();e.then(function(e){return u.timezones=e}),u.currentDistributorKey=c.getCurrentDistributorKey();var t=r.getByKey(u.currentDistributorKey);t.then(function(e){return u.currentTenant.content_manager_base_url=e.content_manager_url,u.currentTenant.content_server_url=e.player_content_url});var n=r.getDomainsByKey(u.currentDistributorKey);return n.then(function(e){return u.distributorDomains=e})},u.onClickSaveButton=function(){s.start(),u.currentTenant.default_timezone=u.selectedTimezone,u.currentTenant.domain_key=u.selectedDomain.key;var e=n.save(u.currentTenant);return e.then(u.onSuccessTenantSave,u.onFailureTenantSave)},u.onSuccessTenantSave=function(){return s.complete(),i.go("tenants")},u.onFailureTenantSave=function(t){return s.complete(),409===t.status?o.show("Oops...","Tenant code unavailable in Provisioning. Please modify tenant name to generate a unique tenant code.","error"):412===t.status?o.show("Oops...","Tenant code unavailable in Chrome Device Management. Modify tenant name to generate a unique tenant code.","error"):406===t.status?o.show("Oops...","Unable to create tenant Organization Unit in Chrome Device Management.","error"):(e.error(t),o.show("Oops...","Not everything needed for tenant was created in Content Manager or CDM.","error"))},u.cancel=function(){i.go("tenants")},u.autoGenerateTenantCode=function(){if(!u.currentTenant.key){var e="";return u.currentTenant.name&&(e=u.currentTenant.name.toLowerCase(),e=e.replace(/\s+/g,"_"),e=e.replace(/\W+/g,"")),u.currentTenant.tenant_code=e}},u}t.$inject=["$log","$location","TenantsService","DistributorsService","TimezonesService","$state","sweet","ProgressBarService","SessionsService"],Object.defineProperty(exports,"__esModule",{value:!0}),exports.TenantAddCtrl=t},725:function(e,exports){"use strict";function t(e,t,n,r,a,i,o,s,c,u,l,d){"ngInject";var v=this;if(v.gameStopServer=d.host().indexOf("provisioning-gamestop")>-1,v.showCdmInfo=!1,v.currentTenant={key:void 0,name:void 0,tenant_code:void 0,admin_email:void 0,content_server_url:void 0,content_manager_base_url:void 0,domain_key:void 0,notification_emails:void 0,proof_of_play_logging:!1,proof_of_play_url:void 0,active:!0},v.selectedDomain=void 0,v.distributorDomains=[],v.timezones=[],v.selectedTimezone="America/Chicago",v.editMode=!!e.tenantKey,v.editMode){var m=t.getTenantByKey(e.tenantKey);m.then(function(e){return v.currentTenant=e,v.onSuccessResolvingTenant(e)})}return v.initialize=function(){var e=r.getCustomTimezones();e.then(function(e){return v.timezones=e}),v.currentDistributorKey=u.getCurrentDistributorKey();var t=a.getDomainsByKey(v.currentDistributorKey);return t.then(function(e){return v.distributorDomains=e})},v.onSuccessResolvingTenant=function(e){v.showCdmInfo=null!=e.organization_unit_path&&null!=e.enrollment_email&&null!=e.enrollment_password,v.selectedTimezone=e.default_timezone;var t=n.getDomainByKey(e.domain_key);return t.then(function(e){return v.selectedDomain=e})},v.onClickSaveButton=function(){s.start(),v.currentTenant.default_timezone=v.selectedTimezone,v.currentTenant.domain_key=v.selectedDomain.key;var e=t.save(v.currentTenant);return e.then(v.onSuccessTenantSave,v.onFailureTenantSave)},v.onSuccessTenantSave=function(){return s.complete(),c.showSuccessToast("We saved your tenant information.")},v.onFailureTenantSave=function(e){return s.complete(),409===e.status?o.show("Oops...","Tenant code unavailable. Please modify tenant name to generate a unique tenant code.","error"):o.show("Oops...","Unable to save the tenant.","error")},v.editItem=function(t){return i.go("editDevice",{deviceKey:t.key,tenantKey:e.tenantKey})},v.autoGenerateTenantCode=function(){if(!v.currentTenant.key){var e="";return v.currentTenant.name&&(e=v.currentTenant.name.toLowerCase(),e=e.replace(/\s+/g,"_"),e=e.replace(/\W+/g,"")),v.currentTenant.tenant_code=e}},l.tabIndex=0,l.$watch("tabIndex",function(t,n){if(void 0!==t)switch(t){case 0:return i.go("tenantDetails",{tenantKey:e.tenantKey});case 1:return i.go("tenantManagedDevices",{tenantKey:e.tenantKey});case 2:return i.go("tenantUnmanagedDevices",{tenantKey:e.tenantKey});case 3:return i.go("tenantLocations",{tenantKey:e.tenantKey});case 4:return i.go("tenantOverlays",{tenantKey:e.tenantKey});case 5:return i.go("tenantLogs",{tenantKey:e.tenantKey})}}),v}t.$inject=["$stateParams","TenantsService","DomainsService","TimezonesService","DistributorsService","$state","sweet","ProgressBarService","ToastsService","SessionsService","$scope","$location"],Object.defineProperty(exports,"__esModule",{value:!0}),exports.TenantDetailsCtrl=t},726:function(e,exports){"use strict";function t(e,t,n,r,a,i,o){"ngInject";var s=this;if(s.location={key:void 0},s.tenantKey=e.tenantKey,s.editMode=!!e.locationKey,s.editMode){var c=n.getLocationByKey(e.locationKey);c.then(function(e){return s.location=e,s.tenantKey=e.tenantKey,s.locationName=e.customerLocationName,s.fetchTenantName(s.tenantKey)})}return s.initialize=function(){if(!s.editMode)return s.fetchTenantName(s.tenantKey),s.location={tenantKey:s.tenantKey,active:!0}},s.onClickSaveButton=function(){i.start();var e=n.save(s.location);return s.editMode?e.then(s.onSuccessUpdatingLocation(s.tenantKey),s.onFailureSavingLocation):e.then(s.onSuccessSavingLocation,s.onFailureSavingLocation)},s.onSuccessSavingLocation=function(){return i.complete(),o.showSuccessToast("We saved your location."),setTimeout(function(){r.go("tenantLocations",{tenantKey:e.tenantKey})},1e3)},s.onSuccessUpdatingLocation=function(e){return i.complete(),o.showSuccessToast("We updated your location."),setTimeout(function(){r.go("tenantLocations",{tenantKey:e})},1e3)},s.onFailureSavingLocation=function(e){return i.complete(),409===e.status?(o.showErrorToast("Location code conflict. Unable to save your location."),a.show("Oops...","Please change your customer location name. Location name must generate a unique location code.","error")):o.showErrorToast("Unable to save your location.")},s.fetchTenantName=function(e){var n=t.getTenantByKey(e);return n.then(function(e){return s.tenantName=e.name})},s.autoGenerateCustomerLocationCode=function(){if(!s.location.key){var e="";return s.location.customerLocationName&&(e=s.location.customerLocationName.toLowerCase(),e=e.replace(/\s+/g,"_"),e=e.replace(/\W+/g,"")),s.location.customerLocationCode=e}},s}t.$inject=["$stateParams","TenantsService","LocationsService","$state","sweet","ProgressBarService","ToastsService"],Object.defineProperty(exports,"__esModule",{value:!0}),exports.TenantLocationCtrl=t},727:function(e,exports,t){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(e,t,n,r,a,o){"ngInject";var c=this,u=t.tenantKey;e.tabIndex=3,c.locations=[],c.searchDisabled=!0,c.tenantKey=t.tenantKey;var l=n.getTenantByKey(u);return l.then(function(e){c.currentTenant=e}),e.$watch("tabIndex",function(e,n){if(void 0!==e)switch(e){case 0:return a.go("tenantDetails",{tenantKey:t.tenantKey});case 1:return a.go("tenantManagedDevices",{tenantKey:t.tenantKey});case 2:return a.go("tenantUnmanagedDevices",{tenantKey:t.tenantKey});case 3:return a.go("tenantLocations",{tenantKey:t.tenantKey});case 4:return a.go("tenantOverlays",{tenantKey:t.tenantKey});case 5:return a.go("tenantLogs",{tenantKey:t.tenantKey})}}),c.getLocations=function(e,t,n){o.start();var a=r.getLocationsByTenantKeyPaginated(e,t,n);return a.then(function(e){return c.locations=e.locations,c.next_cursor=e.next_cursor,c.prev_cursor=e.prev_cursor,o.complete()})},c.searchAllTenantLocationsByName=function(e){if(!e||e.length<3)return[];var t=r.searchAllTenantLocationsByName(c.tenantKey,e);return t.then(function(e){return c.searchedTenantLocations=e,c.searchedTenantLocations?c.searchedTenantLocations.map(function(e){return e.customerLocationName}).sort(s["default"]):[]})},c.isTenantLocationValid=function(e){if(!e||e.length<3)return[];r.searchAllTenantLocationsByName(c.tenantKey,e).then(function(t){var n=t;if(n){var r=!0,a=!1,o=void 0;try{for(var s,u=(0,i["default"])(n);!(r=(s=u.next()).done);r=!0){var l=s.value;if(e===l.customerLocationName)return c.searchDisabled=!1,void(c.searchMatch=l);c.searchDisabled=!0}}catch(d){a=!0,o=d}finally{try{!r&&u["return"]&&u["return"]()}finally{if(a)throw o}}}else c.searchDisabled=!0})},c.paginateCall=function(e){return e?c.getLocations(u,null,c.next_cursor):c.getLocations(u,c.prev_cursor,null)},c.initialize=function(){return c.getLocations(u)},c.editItem=function(e){return a.go("editLocation",{locationKey:e.key})},c}r.$inject=["$scope","$stateParams","TenantsService","LocationsService","$state","ProgressBarService"],Object.defineProperty(exports,"__esModule",{value:!0}),exports.TenantLocationsCtrl=void 0;var a=t(650),i=n(a),o=t(659),s=n(o);exports.TenantLocationsCtrl=r},728:function(e,exports,t){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(e,t,n,r,a,o){"ngInject";var s=this;if(s.currentTenant={key:void 0,name:void 0,tenant_code:void 0,admin_email:void 0,content_server_url:void 0,content_manager_base_url:void 0,domain_key:void 0,notification_emails:void 0,proof_of_play_logging:!1,active:!0},s.tenantDevices=[],s.devicesPrev=null,s.devicesNext=null,s.selectedButton="Serial Number",s.serialDevices={},s.disabled=!0,s.devicesToMatchOn=[],s.macDevices={},s.editMode=!!t.tenantKey,s.tenantKey=t.tenantKey,s.getManagedDevices=function(e,t,n){a.start();var i=r.getDevicesByTenant(e,t,n);return i.then(function(e){return s.devicesPrev=e.prev_cursor,s.devicesNext=e.next_cursor,s.tenantDevices=e.devices,a.complete()})},s.editItem=function(e){return r.editItem(e)},s.refreshDevices=function(){return s.devicesPrev=null,s.devicesNext=null,s.tenantDevices=null,s.getManagedDevices(s.tenantKey,s.devicesPrev,s.devicesNext)},s.editMode){var c=n.getTenantByKey(s.tenantKey);c.then(function(e){return s.currentTenant=e}),s.getManagedDevices(s.tenantKey,null,null)}return e.tabIndex=1,e.$watch("tabIndex",function(e,n){if(void 0!==e)switch(e){case 0:return o.go("tenantDetails",{tenantKey:t.tenantKey});case 1:return o.go("tenantManagedDevices",{tenantKey:t.tenantKey});case 2:return o.go("tenantUnmanagedDevices",{tenantKey:t.tenantKey});case 3:return o.go("tenantLocations",{tenantKey:t.tenantKey});case 4:return o.go("tenantOverlays",{tenantKey:t.tenantKey});case 5:return o.go("tenantLogs",{tenantKey:t.tenantKey})}}),s.changeRadio=function(){s.searchText="",s.disabled=!0,s.serialDevices={},s.macDevices={},s.devicesToMatchOn=[]},s.searchDevices=function(e){var t=!1,n=s.selectedButton,a=!0,i=s.tenantKey;return r.searchDevices(e,n,a,i,s.distributorKey,t).then(function(e){var t=void 0;if(e.success){var r=e.devices;return"Serial Number"===n?(s.serialDevices=r[1],t=r[0]):"MAC"===n?(s.macDevices=r[1],t=r[0]):(s.gcmidDevices=r[1],t=r[0]),s.devicesToMatchOn=t,t}return[]})},s.paginateCall=function(e){return e?s.getManagedDevices(s.tenantKey,null,s.devicesNext):s.getManagedDevices(s.tenantKey,s.devicesPrev,null)},s.prepareForEditView=function(e){return r.preprateForEditView(s.selectedButton,s.tenantKey,e,s.macDevices,s.serialDevices,s.gcmidDevices)},s.controlOpenButton=function(e){return s.disabled=!e,s.loadingDisabled=!1},s.isResourceValid=function(e){var t=!1,n=!0,r=!1,a=void 0;try{for(var o,c=(0,i["default"])(s.devicesToMatchOn);!(n=(o=c.next()).done);n=!0){
var u=o.value;e===u&&(t=!0)}}catch(l){r=!0,a=l}finally{try{!n&&c["return"]&&c["return"]()}finally{if(r)throw a}}return s.controlOpenButton(t),t},s}r.$inject=["$scope","$stateParams","TenantsService","DevicesService","ProgressBarService","$state"],Object.defineProperty(exports,"__esModule",{value:!0}),exports.TenantManagedDevicesCtrl=void 0;var a=t(650),i=n(a);exports.TenantManagedDevicesCtrl=r},729:function(e,exports,t){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(e,t,n,r,a,o){"ngInject";var s=this;if(s.currentTenant={key:void 0,name:void 0,tenant_code:void 0,admin_email:void 0,content_server_url:void 0,content_manager_base_url:void 0,domain_key:void 0,notification_emails:void 0,proof_of_play_logging:!1,active:!0},s.gcmidDevices=[],s.tenantDevices=[],s.devicesPrev=null,s.devicesNext=null,s.selectedButton="MAC",s.serialDevices={},s.disabled=!0,s.macDevices={},s.devicesToMatchOn=[],s.editMode=!!t.tenantKey,s.tenantKey=t.tenantKey,e.tabIndex=2,e.$watch("tabIndex",function(e,n){if(void 0!==e)switch(e){case 0:return o.go("tenantDetails",{tenantKey:t.tenantKey});case 1:return o.go("tenantManagedDevices",{tenantKey:t.tenantKey});case 2:return o.go("tenantUnmanagedDevices",{tenantKey:t.tenantKey});case 3:return o.go("tenantLocations",{tenantKey:t.tenantKey});case 4:return o.go("tenantOverlays",{tenantKey:t.tenantKey});case 5:return o.go("tenantLogs",{tenantKey:t.tenantKey})}}),s.editItem=function(e){return r.editItem(e)},s.getUnmanagedDevices=function(e,t,n){a.start();var i=r.getUnmanagedDevicesByTenant(e,t,n);return i.then(function(e){return s.devicesPrev=e.prev_cursor,s.devicesNext=e.next_cursor,s.tenantDevices=e.devices,a.complete()})},s.editMode){var c=n.getTenantByKey(s.tenantKey);c.then(function(e){return s.currentTenant=e}),s.getUnmanagedDevices(s.tenantKey,null,null)}return s.refreshDevices=function(){return s.devicesPrev=null,s.devicesNext=null,s.tenantDevices=null,s.getUnmanagedDevices(s.tenantKey,s.devicesPrev,s.devicesNext)},s.changeRadio=function(){s.searchText="",s.disabled=!0,s.serialDevices={},s.macDevices={},s.devicesToMatchOn=[]},s.searchDevices=function(e){var t=!0,n=!0;return r.searchDevices(e,s.selectedButton,n,s.tenantKey,s.distributorKey,t).then(function(e){var t=void 0;if(e.success){var n=e.devices;return"Serial Number"===s.selectedButton?(s.serialDevices=n[1],t=n[0]):"MAC"===s.selectedButton?(s.macDevices=n[1],t=n[0]):(s.gcmidDevices=n[1],t=n[0]),s.devicesToMatchOn=t,t}return[]})},s.paginateCall=function(e){return e?s.getUnmanagedDevices(s.tenantKey,null,s.devicesNext):s.getUnmanagedDevices(s.tenantKey,s.devicesPrev,null)},s.prepareForEditView=function(e){return r.preprateForEditView(s.selectedButton,s.tenantKey,e,s.macDevices,s.serialDevices,s.gcmidDevices)},s.controlOpenButton=function(e){s.disabled=!e,s.loadingDisabled=!1},s.isResourceValid=function(e){var t=!1,n=!0,r=!1,a=void 0;try{for(var o,c=(0,i["default"])(s.devicesToMatchOn);!(n=(o=c.next()).done);n=!0){var u=o.value;e===u&&(t=!0)}}catch(l){r=!0,a=l}finally{try{!n&&c["return"]&&c["return"]()}finally{if(r)throw a}}return s.controlOpenButton(t),t},s}r.$inject=["$scope","$stateParams","TenantsService","DevicesService","ProgressBarService","$state"],Object.defineProperty(exports,"__esModule",{value:!0}),exports.TenantUnmanagedDevicesCtrl=void 0;var a=t(650),i=n(a);exports.TenantUnmanagedDevicesCtrl=r},730:function(e,exports,t){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(e,t,n,r,a){"ngInject";var o=this;return o.tenants=[],o.searchedTenants=[],o.searchMatch=null,o.searchDisabled=!0,o.getTenantsPaginated=function(e,t){o.offset=t,o.loading=!0,r.start();var a=n.fetchAllTenantsPaginated(e,t);return a.then(function(e){return o.getFetchSuccess(e)},function(e){return o.getFetchFailure(e)})},o.getFetchSuccess=function(e){return o.tenants=e.tenants,o.total=e.total,o.is_first_page=e.is_first_page,o.is_last_page=e.is_last_page,r.complete(),o.loading=!1},o.getFetchFailure=function(e){r.complete();var t="Unable to fetch tenants. Error: "+e.status+" "+e.statusText+".";return a.show("Oops...",t,"error")},o.initialize=function(){return o.offset=0,o.searchAllTenantsByName("my"),o.getTenantsPaginated(100,o.offset)},o.searchAllTenantsByName=function(e){if(!e||e.length<3)return[];var t=n.searchAllTenantsByName(e);return t.then(function(e){return o.searchedTenants=e,o.searchedTenants?o.searchedTenants.map(function(e){return e.name}).sort(s["default"]):[]})},o.isTenantValid=function(e){if(!e||e.length<3)return[];var t=o.searchedTenants;if(t){var n=!0,r=!1,a=void 0;try{for(var s,c=(0,i["default"])(t);!(n=(s=c.next()).done);n=!0){var u=s.value;if(e===u.name)return o.searchDisabled=!1,void(o.searchMatch=u);o.searchDisabled=!0}}catch(l){r=!0,a=l}finally{try{!n&&c["return"]&&c["return"]()}finally{if(r)throw a}}}else o.searchDisabled=!0},o.editItem=function(t){return e.go("tenantDetails",{tenantKey:t.key})},o.deleteItem=function(e){var t=function(){var t=n["delete"](e);return t.then(function(){return o.initialize()})};return a.show({title:"Are you sure?",text:"This will permanently remove the tenant from the system.",type:"warning",showCancelButton:!0,confirmButtonColor:"#DD6B55",confirmButtonText:"Yes, remove the tenant!",closeOnConfirm:!0},t)},o}r.$inject=["$state","$log","TenantsService","ProgressBarService","sweet"],Object.defineProperty(exports,"__esModule",{value:!0}),exports.TenantsCtrl=void 0;var a=t(650),i=n(a),o=t(659),s=n(o);exports.TenantsCtrl=r},731:function(e,exports){"use strict";function t(e,t,n,r,a){"ngInject";var i=this;return i.paulsCurrentDistributorName=n.paulsCurrentDistributorName,i.version_data=[],i.loading=!0,i.proceedToSignIn=function(){return t.go("sign_in")},i.capitalizeFirstLetter=function(e){return e.charAt(0).toUpperCase()+e.slice(1)},i.giveOptionToChangeDistributor=function(){var e=r.fetchAllByUser(a.getUserKey());return e.then(function(e){return i.has_multiple_distributors=e.length>1,i.loading=!1})},i.changeDistributor=function(){return t.go("distributor_selection")},i.getVersion=function(){var t=e.getVersions();return t.then(function(e){return i.version_data=e})},i.initialize=function(){return i.identity={key:a.getUserKey(),email:a.getUserEmail(),distributorKey:a.getCurrentDistributorKey(),distributorName:a.getCurrentDistributorName()},i.giveOptionToChangeDistributor(),i.identity.email?i.getVersion():t.go("sign_in")},i}t.$inject=["VersionsService","$state","$rootScope","DistributorsService","SessionsService"],Object.defineProperty(exports,"__esModule",{value:!0}),exports.WelcomeCtrl=t},732:function(e,exports){"use strict";function t(e,t,n){"ngInject";return e.state("sign_in",{resolve:{identity:["IdentityService",function(e){return e.getIdentity()}],notAuthenticated:["AuthorizationService",function(e){return e.notAuthenticated()}]},url:"/sign_in",templateUrl:"app/authentication/sign_in.html",controller:"AuthenticationCtrl",controllerAs:"authenticationCtrl"}),e.state("signed_out",{url:"/signed_out",resolve:{identity:["IdentityService",function(e){return e.getIdentity()}],notAuthenticated:["AuthorizationService",function(e){return e.notAuthenticated()}]},templateUrl:"app/authentication/signed_out.html",controller:"AuthenticationCtrl",controllerAs:"authenticationCtrl"}),e.state("sign_out",{resolve:{identity:["IdentityService",function(e){return e.getIdentity()}],authenticated:["AuthorizationService",function(e){return e.authenticated()}]},url:"/sign_out",templateUrl:"app/authentication/sign_out.html",controller:"AuthenticationCtrl",controllerAs:"authenticationCtrl"}),e.state("distributor_selection",{resolve:{authenticated:["AuthorizationService",function(e){return e.authenticated()}]},url:"/distributor_selection",templateUrl:"app/distributor/distributor_selector.html",controller:"DistributorSelectorCtrl",controllerAs:"vm"}),e.state("home",{url:"/",templateUrl:"app/welcome/welcome.html",resolve:{identity:["IdentityService",function(e){return e.getIdentity()}],authenticated:["AuthorizationService",function(e){return e.authenticated()}]},controller:"WelcomeCtrl",controllerAs:"welcomeCtrl",ncyBreadcrumb:{label:"Skykit Provisioning"}}),e.state("welcome",{url:"/welcome",templateUrl:"app/welcome/welcome.html",resolve:{identity:["IdentityService",function(e){return e.getIdentity()}],authenticated:["AuthorizationService",function(e){return e.authenticated()}]},controller:"WelcomeCtrl",controllerAs:"welcomeCtrl",ncyBreadcrumb:{label:"Skykit Provisioning"}}),e.state("domains",{resolve:{authenticated:["AuthorizationService",function(e){return e.authenticated()}]},url:"/domains",templateUrl:"app/domain/domains-listing.html",controller:"DomainsCtrl",controllerAs:"domainsCtrl",ncyBreadcrumb:{label:"Domains"}}),e.state("addDomain",{resolve:{authenticated:["AuthorizationService",function(e){return e.authenticated()}]},url:"/domains/add",templateUrl:"app/domain/domain-detail.html",controller:"DomainDetailsCtrl",controllerAs:"domainDetailsCtrl",ncyBreadcrumb:{label:"Add domain",parent:"domains"}}),e.state("editDomain",{resolve:{authenticated:["AuthorizationService",function(e){return e.authenticated()}]},url:"/domains/:domainKey",templateUrl:"app/domain/domain-detail.html",controller:"DomainDetailsCtrl",controllerAs:"domainDetailsCtrl",ncyBreadcrumb:{label:"{{ domainDetailsCtrl.currentDomain.name }}",parent:"domains"}}),e.state("tenants",{resolve:{authenticated:["AuthorizationService",function(e){return e.authenticated()}]},url:"/tenants",templateUrl:"app/tenant/tenants-listing.html",controller:"TenantsCtrl",controllerAs:"tenantsCtrl",ncyBreadcrumb:{label:"Tenants"}}),e.state("addTenant",{resolve:{authenticated:["AuthorizationService",function(e){return e.authenticated()}]},url:"/tenants/add",templateUrl:"app/tenant/tenant-add.html",controller:"TenantAddCtrl",controllerAs:"tenantAddCtrl",ncyBreadcrumb:{label:"Add tenant",parent:"tenants"}}),e.state("tenantDetails",{resolve:{authenticated:["AuthorizationService",function(e){return e.authenticated()}]},url:"/tenants/:tenantKey/details",templateUrl:"app/tenant/tenant-details.html",controller:"TenantDetailsCtrl",controllerAs:"tenantDetailsCtrl",ncyBreadcrumb:{label:"{{ tenantDetailsCtrl.currentTenant.name }}",parent:"tenants"}}),e.state("tenantManagedDevices",{resolve:{authenticated:["AuthorizationService",function(e){return e.authenticated()}]},url:"/tenants/:tenantKey/managed",templateUrl:"app/tenant/tenant-managed-devices.html",controller:"TenantManagedDevicesCtrl",controllerAs:"tenantManagedDevicesCtrl",ncyBreadcrumb:{label:"{{ tenantManagedDevicesCtrl.currentTenant.name }}",parent:"tenants"}}),e.state("tenantUnmanagedDevices",{resolve:{authenticated:["AuthorizationService",function(e){return e.authenticated()}]},url:"/tenants/:tenantKey/unmanaged",templateUrl:"app/tenant/tenant-unmanaged-devices.html",controller:"TenantUnmanagedDevicesCtrl",controllerAs:"tenantUnmanagedDevicesCtrl",ncyBreadcrumb:{label:"{{ tenantUnmanagedDevicesCtrl.currentTenant.name }}",parent:"tenants"}}),e.state("tenantLogs",{resolve:{authenticated:["AuthorizationService",function(e){return e.authenticated()}]},url:"/tenants/:tenantKey/logs",templateUrl:"app/tenant/tenant-logs.html",controller:"TenantLogsCtrl",controllerAs:"tenantLogsCtrl",ncyBreadcrumb:{label:"{{ tenantLogsCtrl.currentTenant.name }}",parent:"tenants"}}),e.state("tenantOverlays",{resolve:{authenticated:["AuthorizationService",function(e){return e.authenticated()}]},url:"/tenants/:tenantKey/overlays",templateUrl:"app/tenant/tenant-overlays.html",controller:"TenantOverlaysCtrl",controllerAs:"tenantOverlaysCtrl",ncyBreadcrumb:{label:"{{ tenantOverlaysCtrl.currentTenant.name }}",parent:"tenants"}}),e.state("tenantLocations",{resolve:{authenticated:["AuthorizationService",function(e){return e.authenticated()}]},url:"/tenants/:tenantKey/locations",templateUrl:"app/tenant/tenant-locations.html",controller:"TenantLocationsCtrl",controllerAs:"tenantLocationsCtrl",ncyBreadcrumb:{label:"{{ tenantLocationsCtrl.currentTenant.name }}",parent:"tenants"}}),e.state("editLocation",{resolve:{authenticated:["AuthorizationService",function(e){return e.authenticated()}]},url:"/locations/:locationKey",templateUrl:"app/tenant/tenant-location.html",controller:"TenantLocationCtrl",controllerAs:"tenantLocationCtrl",ncyBreadcrumb:{label:"{{ tenantLocationCtrl.tenantName }}  / {{ tenantLocationCtrl.locationName }}",parent:"tenants"}}),e.state("addLocation",{resolve:{authenticated:["AuthorizationService",function(e){return e.authenticated()}]},url:"/tenants/:tenantKey/location",templateUrl:"app/tenant/tenant-location.html",controller:"TenantLocationCtrl",controllerAs:"tenantLocationCtrl",ncyBreadcrumb:{label:"{{ tenantLocationCtrl.tenantName }}  / Location",parent:"tenants"}}),e.state("devices",{resolve:{authenticated:["AuthorizationService",function(e){return e.authenticated()}]},url:"/devices",templateUrl:"app/device/devices-listing.html",controller:"DevicesListingCtrl",controllerAs:"devicesListingCtrl",ncyBreadcrumb:{label:"Devices"}}),e.state("editDevice",{resolve:{identity:["IdentityService",function(e){return e.getIdentity()}],authenticated:["AuthorizationService",function(e){return e.authenticated()}]},url:"/devices/:deviceKey?tenantKey?fromDevices",templateUrl:"app/device/device-detail.html",ncyBreadcrumb:{label:"{{ deviceDetailsCtrl.currentDevice.key }}",parent:"devices"},controller:"DeviceDetailsCtrl","function":function(e,t){e.tenantKey=t.tenantKey},controllerAs:"deviceDetailsCtrl"}),e.state("proof",{resolve:{authenticated:["AuthorizationService",function(e){return e.authenticated()}]},url:"/proof",templateUrl:"app/proof/main.html",controller:"ProofOfPlayCtrl",controllerAs:"vm",ncyBreadcrumb:{label:"Proof of Play"}}),e.state("proofDetail",{resolve:{authenticated:["AuthorizationService",function(e){return e.authenticated()}]},url:"/proof/:tenant",templateUrl:"app/proof/detail.html",controller:"ProofOfPlayCtrl",controllerAs:"vm",ncyBreadcrumb:{label:"Proof of Play"}}),e.state("admin",{resolve:{isAdmin:["AuthorizationService",function(e){return e.isAdminOrDistributorAdmin()}]},url:"/admin",templateUrl:"app/admin/admin.html",controller:"AdminCtrl",controllerAs:"vm",ncyBreadcrumb:{label:"Admin"}}),t.otherwise("/sign_in"),n.setBaseUrl("/api/v1"),n.addResponseInterceptor(function(e,t,n,r,a,i){var o=e;return o}),n.setRestangularFields({id:"key"})}Object.defineProperty(exports,"__esModule",{value:!0}),exports.routes=t,t.$inject=["$stateProvider","$urlRouterProvider","RestangularProvider"]},733:function(e,exports){"use strict";function t(e,t,n,r,a){"ngInject";var i=function(){var e=n.get("$state");return r.$on("$stateChangeError",function(t,n,r,a,i,o){if("authError"===o[0])return e.go(o[1])})};a(i,500);var o=function(){e.addRequestInterceptor(function(r,a,i,o){var s=n.get("StorageService"),c="6C346588BD4C6D722A1165B43C51C";if(t.host().indexOf("provisioning-gamestop")>-1&&(c="5XZHBF3mOwqJlYAlG1NeeWX0Cb72g"),e.setDefaultHeaders({"Content-Type":"application/json",Accept:"application/json",Authorization:c,"X-Provisioning-User":s.get("userKey"),"X-Provisioning-Distributor":s.get("currentDistributorKey")}),"remove"!==a)return r})};a(o,500)}t.$inject=["Restangular","$location","$injector","$rootScope","$timeout"],Object.defineProperty(exports,"__esModule",{value:!0}),exports.appRun=t},734:function(e,exports,t){"use strict";function n(e){return e&&e.__esModule?e:{"default":e}}function r(e){o["default"].extend(e,{progressBar:!0,closeButton:!0,tapToDismiss:!0,newestOnTop:!0,positionClass:"toast-bottom-left",timeOut:5e3})}function a(e){e.setOptions({prefixStateName:"home",template:"bootstrap3"})}Object.defineProperty(exports,"__esModule",{value:!0}),exports.toastrConfig=r,exports.breadcrumbProvider=a;var i=t(369),o=n(i);r.$inject=["toastrConfig"],a.$inject=["$breadcrumbProvider"]}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,